!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=108)}([function(e,t,n){"use strict";e.exports=n(61)},function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(17);function o(e,t){if(null==e)return{};var n,o,i=Object(r.a)(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}},function(e,t,n){"use strict";function r(e){var t,n,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(o&&(o+=" "),o+=n);else for(t in e)e[t]&&(o&&(o+=" "),o+=t);return o}t.a=function(){for(var e,t,n=0,o="";n<arguments.length;)(e=arguments[n++])&&(t=r(e))&&(o&&(o+=" "),o+=t);return o}},function(e,t,n){e.exports=n(87)()},function(e,t,n){"use strict";var r=n(1),o=n(2),i=n(0),a=n.n(i),l=(n(4),n(20)),u=n.n(l),s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},c="object"===("undefined"==typeof window?"undefined":s(window))&&"object"===("undefined"==typeof document?"undefined":s(document))&&9===document.nodeType;function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function d(e,t,n){return t&&f(e.prototype,t),n&&f(e,n),e}var p=n(21),h=n(22),m=n(17),v={}.constructor;function g(e){if(null==e||"object"!=typeof e)return e;if(Array.isArray(e))return e.map(g);if(e.constructor!==v)return e;var t={};for(var n in e)t[n]=g(e[n]);return t}function y(e,t,n){void 0===e&&(e="unnamed");var r=n.jss,o=g(t),i=r.plugins.onCreateRule(e,o,n);return i||(e[0],null)}var b=function(e,t){for(var n="",r=0;r<e.length&&"!important"!==e[r];r++)n&&(n+=t),n+=e[r];return n};function w(e,t){if(void 0===t&&(t=!1),!Array.isArray(e))return e;var n="";if(Array.isArray(e[0]))for(var r=0;r<e.length&&"!important"!==e[r];r++)n&&(n+=", "),n+=b(e[r]," ");else n=b(e,", ");return t||"!important"!==e[e.length-1]||(n+=" !important"),n}function x(e,t){for(var n="",r=0;r<t;r++)n+="  ";return n+e}function k(e,t,n){void 0===n&&(n={});var r="";if(!t)return r;var o=n.indent,i=void 0===o?0:o,a=t.fallbacks;if(e&&i++,a)if(Array.isArray(a))for(var l=0;l<a.length;l++){var u=a[l];for(var s in u){var c=u[s];null!=c&&(r&&(r+="\n"),r+=""+x(s+": "+w(c)+";",i))}}else for(var f in a){var d=a[f];null!=d&&(r&&(r+="\n"),r+=""+x(f+": "+w(d)+";",i))}for(var p in t){var h=t[p];null!=h&&"fallbacks"!==p&&(r&&(r+="\n"),r+=""+x(p+": "+w(h)+";",i))}return(r||n.allowEmpty)&&e?(r&&(r="\n"+r+"\n"),x(e+" {"+r,--i)+x("}",i)):r}var _=/([[\].#*$><+~=|^:(),"'`\s])/g,S="undefined"!=typeof CSS&&CSS.escape,C=function(e){return S?S(e):e.replace(_,"\\$1")},E=function(){function e(e,t,n){this.type="style",this.key=void 0,this.isProcessed=!1,this.style=void 0,this.renderer=void 0,this.renderable=void 0,this.options=void 0;var r=n.sheet,o=n.Renderer;this.key=e,this.options=n,this.style=t,r?this.renderer=r.renderer:o&&(this.renderer=new o)}return e.prototype.prop=function(e,t,n){if(void 0===t)return this.style[e];var r=!!n&&n.force;if(!r&&this.style[e]===t)return this;var o=t;n&&!1===n.process||(o=this.options.jss.plugins.onChangeValue(t,e,this));var i=null==o||!1===o,a=e in this.style;if(i&&!a&&!r)return this;var l=i&&a;if(l?delete this.style[e]:this.style[e]=o,this.renderable&&this.renderer)return l?this.renderer.removeProperty(this.renderable,e):this.renderer.setProperty(this.renderable,e,o),this;var u=this.options.sheet;return u&&u.attached,this},e}(),T=function(e){function t(t,n,r){var o;(o=e.call(this,t,n,r)||this).selectorText=void 0,o.id=void 0,o.renderable=void 0;var i=r.selector,a=r.scoped,l=r.sheet,u=r.generateId;return i?o.selectorText=i:!1!==a&&(o.id=u(Object(h.a)(Object(h.a)(o)),l),o.selectorText="."+C(o.id)),o}Object(p.a)(t,e);var n=t.prototype;return n.applyTo=function(e){var t=this.renderer;if(t){var n=this.toJSON();for(var r in n)t.setProperty(e,r,n[r])}return this},n.toJSON=function(){var e={};for(var t in this.style){var n=this.style[t];"object"!=typeof n?e[t]=n:Array.isArray(n)&&(e[t]=w(n))}return e},n.toString=function(e){var t=this.options.sheet,n=!!t&&t.options.link?Object(r.a)({},e,{allowEmpty:!0}):e;return k(this.selectorText,this.style,n)},d(t,[{key:"selector",set:function(e){if(e!==this.selectorText){this.selectorText=e;var t=this.renderer,n=this.renderable;if(n&&t)t.setSelector(n,e)||t.replaceRule(n,this)}},get:function(){return this.selectorText}}]),t}(E),O={onCreateRule:function(e,t,n){return"@"===e[0]||n.parent&&"keyframes"===n.parent.type?null:new T(e,t,n)}},P={indent:1,children:!0},M=/@([\w-]+)/,R=function(){function e(e,t,n){this.type="conditional",this.at=void 0,this.key=void 0,this.query=void 0,this.rules=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.query=n.name;var o=e.match(M);for(var i in this.at=o?o[1]:"unknown",this.options=n,this.rules=new ee(Object(r.a)({},n,{parent:this})),t)this.rules.add(i,t[i]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.indexOf=function(e){return this.rules.indexOf(e)},t.addRule=function(e,t,n){var r=this.rules.add(e,t,n);return r?(this.options.jss.plugins.onProcessRule(r),r):null},t.toString=function(e){if(void 0===e&&(e=P),null==e.indent&&(e.indent=P.indent),null==e.children&&(e.children=P.children),!1===e.children)return this.query+" {}";var t=this.rules.toString(e);return t?this.query+" {\n"+t+"\n}":""},e}(),j=/@media|@supports\s+/,A={onCreateRule:function(e,t,n){return j.test(e)?new R(e,t,n):null}},N={indent:1,children:!0},z=/@keyframes\s+([\w-]+)/,L=function(){function e(e,t,n){this.type="keyframes",this.at="@keyframes",this.key=void 0,this.name=void 0,this.id=void 0,this.rules=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0;var o=e.match(z);o&&o[1]?this.name=o[1]:this.name="noname",this.key=this.type+"-"+this.name,this.options=n;var i=n.scoped,a=n.sheet,l=n.generateId;for(var u in this.id=!1===i?this.name:C(l(this,a)),this.rules=new ee(Object(r.a)({},n,{parent:this})),t)this.rules.add(u,t[u],Object(r.a)({},n,{parent:this}));this.rules.process()}return e.prototype.toString=function(e){if(void 0===e&&(e=N),null==e.indent&&(e.indent=N.indent),null==e.children&&(e.children=N.children),!1===e.children)return this.at+" "+this.id+" {}";var t=this.rules.toString(e);return t&&(t="\n"+t+"\n"),this.at+" "+this.id+" {"+t+"}"},e}(),I=/@keyframes\s+/,D=/\$([\w-]+)/g,F=function(e,t){return"string"==typeof e?e.replace(D,(function(e,n){return n in t?t[n]:e})):e},U=function(e,t,n){var r=e[t],o=F(r,n);o!==r&&(e[t]=o)},B={onCreateRule:function(e,t,n){return"string"==typeof e&&I.test(e)?new L(e,t,n):null},onProcessStyle:function(e,t,n){return"style"===t.type&&n?("animation-name"in e&&U(e,"animation-name",n.keyframes),"animation"in e&&U(e,"animation",n.keyframes),e):e},onChangeValue:function(e,t,n){var r=n.options.sheet;if(!r)return e;switch(t){case"animation":case"animation-name":return F(e,r.keyframes);default:return e}}},$=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).renderable=void 0,t}return Object(p.a)(t,e),t.prototype.toString=function(e){var t=this.options.sheet,n=!!t&&t.options.link?Object(r.a)({},e,{allowEmpty:!0}):e;return k(this.key,this.style,n)},t}(E),H={onCreateRule:function(e,t,n){return n.parent&&"keyframes"===n.parent.type?new $(e,t,n):null}},V=function(){function e(e,t,n){this.type="font-face",this.at="@font-face",this.key=void 0,this.style=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.style=t,this.options=n}return e.prototype.toString=function(e){if(Array.isArray(this.style)){for(var t="",n=0;n<this.style.length;n++)t+=k(this.at,this.style[n]),this.style[n+1]&&(t+="\n");return t}return k(this.at,this.style,e)},e}(),W=/@font-face/,q={onCreateRule:function(e,t,n){return W.test(e)?new V(e,t,n):null}},K=function(){function e(e,t,n){this.type="viewport",this.at="@viewport",this.key=void 0,this.style=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.style=t,this.options=n}return e.prototype.toString=function(e){return k(this.key,this.style,e)},e}(),G={onCreateRule:function(e,t,n){return"@viewport"===e||"@-ms-viewport"===e?new K(e,t,n):null}},Q=function(){function e(e,t,n){this.type="simple",this.key=void 0,this.value=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.value=t,this.options=n}return e.prototype.toString=function(e){if(Array.isArray(this.value)){for(var t="",n=0;n<this.value.length;n++)t+=this.key+" "+this.value[n]+";",this.value[n+1]&&(t+="\n");return t}return this.key+" "+this.value+";"},e}(),Z={"@charset":!0,"@import":!0,"@namespace":!0},Y=[O,A,B,H,q,G,{onCreateRule:function(e,t,n){return e in Z?new Q(e,t,n):null}}],X={process:!0},J={force:!0,process:!0},ee=function(){function e(e){this.map={},this.raw={},this.index=[],this.counter=0,this.options=void 0,this.classes=void 0,this.keyframes=void 0,this.options=e,this.classes=e.classes,this.keyframes=e.keyframes}var t=e.prototype;return t.add=function(e,t,n){var o=this.options,i=o.parent,a=o.sheet,l=o.jss,u=o.Renderer,s=o.generateId,c=o.scoped,f=Object(r.a)({classes:this.classes,parent:i,sheet:a,jss:l,Renderer:u,generateId:s,scoped:c,name:e},n),d=e;e in this.raw&&(d=e+"-d"+this.counter++),this.raw[d]=t,d in this.classes&&(f.selector="."+C(this.classes[d]));var p=y(d,t,f);if(!p)return null;this.register(p);var h=void 0===f.index?this.index.length:f.index;return this.index.splice(h,0,p),p},t.get=function(e){return this.map[e]},t.remove=function(e){this.unregister(e),delete this.raw[e.key],this.index.splice(this.index.indexOf(e),1)},t.indexOf=function(e){return this.index.indexOf(e)},t.process=function(){var e=this.options.jss.plugins;this.index.slice(0).forEach(e.onProcessRule,e)},t.register=function(e){this.map[e.key]=e,e instanceof T?(this.map[e.selector]=e,e.id&&(this.classes[e.key]=e.id)):e instanceof L&&this.keyframes&&(this.keyframes[e.name]=e.id)},t.unregister=function(e){delete this.map[e.key],e instanceof T?(delete this.map[e.selector],delete this.classes[e.key]):e instanceof L&&delete this.keyframes[e.name]},t.update=function(){var e,t,n;if("string"==typeof(arguments.length<=0?void 0:arguments[0])?(e=arguments.length<=0?void 0:arguments[0],t=arguments.length<=1?void 0:arguments[1],n=arguments.length<=2?void 0:arguments[2]):(t=arguments.length<=0?void 0:arguments[0],n=arguments.length<=1?void 0:arguments[1],e=null),e)this.updateOne(this.map[e],t,n);else for(var r=0;r<this.index.length;r++)this.updateOne(this.index[r],t,n)},t.updateOne=function(t,n,r){void 0===r&&(r=X);var o=this.options,i=o.jss.plugins,a=o.sheet;if(t.rules instanceof e)t.rules.update(n,r);else{var l=t,u=l.style;if(i.onUpdate(n,t,a,r),r.process&&u&&u!==l.style){for(var s in i.onProcessStyle(l.style,l,a),l.style){var c=l.style[s];c!==u[s]&&l.prop(s,c,J)}for(var f in u){var d=l.style[f],p=u[f];null==d&&d!==p&&l.prop(f,null,J)}}}},t.toString=function(e){for(var t="",n=this.options.sheet,r=!!n&&n.options.link,o=0;o<this.index.length;o++){var i=this.index[o].toString(e);(i||r)&&(t&&(t+="\n"),t+=i)}return t},e}(),te=function(){function e(e,t){for(var n in this.options=void 0,this.deployed=void 0,this.attached=void 0,this.rules=void 0,this.renderer=void 0,this.classes=void 0,this.keyframes=void 0,this.queue=void 0,this.attached=!1,this.deployed=!1,this.classes={},this.keyframes={},this.options=Object(r.a)({},t,{sheet:this,parent:this,classes:this.classes,keyframes:this.keyframes}),t.Renderer&&(this.renderer=new t.Renderer(this)),this.rules=new ee(this.options),e)this.rules.add(n,e[n]);this.rules.process()}var t=e.prototype;return t.attach=function(){return this.attached||(this.renderer&&this.renderer.attach(),this.attached=!0,this.deployed||this.deploy()),this},t.detach=function(){return this.attached?(this.renderer&&this.renderer.detach(),this.attached=!1,this):this},t.addRule=function(e,t,n){var r=this.queue;this.attached&&!r&&(this.queue=[]);var o=this.rules.add(e,t,n);return o?(this.options.jss.plugins.onProcessRule(o),this.attached?this.deployed?(r?r.push(o):(this.insertRule(o),this.queue&&(this.queue.forEach(this.insertRule,this),this.queue=void 0)),o):o:(this.deployed=!1,o)):null},t.insertRule=function(e){this.renderer&&this.renderer.insertRule(e)},t.addRules=function(e,t){var n=[];for(var r in e){var o=this.addRule(r,e[r],t);o&&n.push(o)}return n},t.getRule=function(e){return this.rules.get(e)},t.deleteRule=function(e){var t="object"==typeof e?e:this.rules.get(e);return!!t&&(this.rules.remove(t),!(this.attached&&t.renderable&&this.renderer)||this.renderer.deleteRule(t.renderable))},t.indexOf=function(e){return this.rules.indexOf(e)},t.deploy=function(){return this.renderer&&this.renderer.deploy(),this.deployed=!0,this},t.update=function(){var e;return(e=this.rules).update.apply(e,arguments),this},t.updateOne=function(e,t,n){return this.rules.updateOne(e,t,n),this},t.toString=function(e){return this.rules.toString(e)},e}(),ne=function(){function e(){this.plugins={internal:[],external:[]},this.registry=void 0}var t=e.prototype;return t.onCreateRule=function(e,t,n){for(var r=0;r<this.registry.onCreateRule.length;r++){var o=this.registry.onCreateRule[r](e,t,n);if(o)return o}return null},t.onProcessRule=function(e){if(!e.isProcessed){for(var t=e.options.sheet,n=0;n<this.registry.onProcessRule.length;n++)this.registry.onProcessRule[n](e,t);e.style&&this.onProcessStyle(e.style,e,t),e.isProcessed=!0}},t.onProcessStyle=function(e,t,n){for(var r=0;r<this.registry.onProcessStyle.length;r++)t.style=this.registry.onProcessStyle[r](t.style,t,n)},t.onProcessSheet=function(e){for(var t=0;t<this.registry.onProcessSheet.length;t++)this.registry.onProcessSheet[t](e)},t.onUpdate=function(e,t,n,r){for(var o=0;o<this.registry.onUpdate.length;o++)this.registry.onUpdate[o](e,t,n,r)},t.onChangeValue=function(e,t,n){for(var r=e,o=0;o<this.registry.onChangeValue.length;o++)r=this.registry.onChangeValue[o](r,t,n);return r},t.use=function(e,t){void 0===t&&(t={queue:"external"});var n=this.plugins[t.queue];-1===n.indexOf(e)&&(n.push(e),this.registry=[].concat(this.plugins.external,this.plugins.internal).reduce((function(e,t){for(var n in t)n in e&&e[n].push(t[n]);return e}),{onCreateRule:[],onProcessRule:[],onProcessStyle:[],onProcessSheet:[],onChangeValue:[],onUpdate:[]}))},e}(),re=new(function(){function e(){this.registry=[]}var t=e.prototype;return t.add=function(e){var t=this.registry,n=e.options.index;if(-1===t.indexOf(e))if(0===t.length||n>=this.index)t.push(e);else for(var r=0;r<t.length;r++)if(t[r].options.index>n)return void t.splice(r,0,e)},t.reset=function(){this.registry=[]},t.remove=function(e){var t=this.registry.indexOf(e);this.registry.splice(t,1)},t.toString=function(e){for(var t=void 0===e?{}:e,n=t.attached,r=Object(m.a)(t,["attached"]),o="",i=0;i<this.registry.length;i++){var a=this.registry[i];null!=n&&a.attached!==n||(o&&(o+="\n"),o+=a.toString(r))}return o},d(e,[{key:"index",get:function(){return 0===this.registry.length?0:this.registry[this.registry.length-1].options.index}}]),e}()),oe="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")(),ie="2f1acc6c3a606b082e5eef5e54414ffb";null==oe[ie]&&(oe[ie]=0);var ae=oe[ie]++,le=function(e){void 0===e&&(e={});var t=0;return function(n,r){t+=1;var o="",i="";return r&&(r.options.classNamePrefix&&(i=r.options.classNamePrefix),null!=r.options.jss.id&&(o=String(r.options.jss.id))),e.minify?""+(i||"c")+ae+o+t:i+n.key+"-"+ae+(o?"-"+o:"")+"-"+t}},ue=function(e){var t;return function(){return t||(t=e()),t}};function se(e,t){try{return e.attributeStyleMap?e.attributeStyleMap.get(t):e.style.getPropertyValue(t)}catch(e){return""}}function ce(e,t,n){try{var r=n;if(Array.isArray(n)&&(r=w(n,!0),"!important"===n[n.length-1]))return e.style.setProperty(t,r,"important"),!0;e.attributeStyleMap?e.attributeStyleMap.set(t,r):e.style.setProperty(t,r)}catch(e){return!1}return!0}function fe(e,t){try{e.attributeStyleMap?e.attributeStyleMap.delete(t):e.style.removeProperty(t)}catch(e){}}function de(e,t){return e.selectorText=t,e.selectorText===t}var pe=ue((function(){return document.querySelector("head")}));function he(e){var t=re.registry;if(t.length>0){var n=function(e,t){for(var n=0;n<e.length;n++){var r=e[n];if(r.attached&&r.options.index>t.index&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e);if(n&&n.renderer)return{parent:n.renderer.element.parentNode,node:n.renderer.element};if((n=function(e,t){for(var n=e.length-1;n>=0;n--){var r=e[n];if(r.attached&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e))&&n.renderer)return{parent:n.renderer.element.parentNode,node:n.renderer.element.nextSibling}}var r=e.insertionPoint;if(r&&"string"==typeof r){var o=function(e){for(var t=pe(),n=0;n<t.childNodes.length;n++){var r=t.childNodes[n];if(8===r.nodeType&&r.nodeValue.trim()===e)return r}return null}(r);if(o)return{parent:o.parentNode,node:o.nextSibling}}return!1}var me=ue((function(){var e=document.querySelector('meta[property="csp-nonce"]');return e?e.getAttribute("content"):null})),ve=function(e,t,n){var r=e.cssRules.length;(void 0===n||n>r)&&(n=r);try{if("insertRule"in e)e.insertRule(t,n);else if("appendRule"in e){e.appendRule(t)}}catch(e){return!1}return e.cssRules[n]},ge=function(){function e(e){this.getPropertyValue=se,this.setProperty=ce,this.removeProperty=fe,this.setSelector=de,this.element=void 0,this.sheet=void 0,this.hasInsertedRules=!1,e&&re.add(e),this.sheet=e;var t=this.sheet?this.sheet.options:{},n=t.media,r=t.meta,o=t.element;this.element=o||function(){var e=document.createElement("style");return e.textContent="\n",e}(),this.element.setAttribute("data-jss",""),n&&this.element.setAttribute("media",n),r&&this.element.setAttribute("data-meta",r);var i=me();i&&this.element.setAttribute("nonce",i)}var t=e.prototype;return t.attach=function(){if(!this.element.parentNode&&this.sheet){!function(e,t){var n=t.insertionPoint,r=he(t);if(!1!==r&&r.parent)r.parent.insertBefore(e,r.node);else if(n&&"number"==typeof n.nodeType){var o=n,i=o.parentNode;i&&i.insertBefore(e,o.nextSibling)}else pe().appendChild(e)}(this.element,this.sheet.options);var e=Boolean(this.sheet&&this.sheet.deployed);this.hasInsertedRules&&e&&(this.hasInsertedRules=!1,this.deploy())}},t.detach=function(){var e=this.element.parentNode;e&&e.removeChild(this.element)},t.deploy=function(){var e=this.sheet;e&&(e.options.link?this.insertRules(e.rules):this.element.textContent="\n"+e.toString()+"\n")},t.insertRules=function(e,t){for(var n=0;n<e.index.length;n++)this.insertRule(e.index[n],n,t)},t.insertRule=function(e,t,n){if(void 0===n&&(n=this.element.sheet),e.rules){var r=e,o=n;return("conditional"!==e.type&&"keyframes"!==e.type||!1!==(o=ve(n,r.toString({children:!1}),t)))&&(this.insertRules(r.rules,o),o)}if(e.renderable&&e.renderable.parentStyleSheet===this.element.sheet)return e.renderable;var i=e.toString();if(!i)return!1;var a=ve(n,i,t);return!1!==a&&(this.hasInsertedRules=!0,e.renderable=a,a)},t.deleteRule=function(e){var t=this.element.sheet,n=this.indexOf(e);return-1!==n&&(t.deleteRule(n),!0)},t.indexOf=function(e){for(var t=this.element.sheet.cssRules,n=0;n<t.length;n++)if(e===t[n])return n;return-1},t.replaceRule=function(e,t){var n=this.indexOf(e);return-1!==n&&(this.element.sheet.deleteRule(n),this.insertRule(t,n))},t.getRules=function(){return this.element.sheet.cssRules},e}(),ye=0,be=function(){function e(e){this.id=ye++,this.version="10.3.0",this.plugins=new ne,this.options={id:{minify:!1},createGenerateId:le,Renderer:c?ge:null,plugins:[]},this.generateId=le({minify:!1});for(var t=0;t<Y.length;t++)this.plugins.use(Y[t],{queue:"internal"});this.setup(e)}var t=e.prototype;return t.setup=function(e){return void 0===e&&(e={}),e.createGenerateId&&(this.options.createGenerateId=e.createGenerateId),e.id&&(this.options.id=Object(r.a)({},this.options.id,e.id)),(e.createGenerateId||e.id)&&(this.generateId=this.options.createGenerateId(this.options.id)),null!=e.insertionPoint&&(this.options.insertionPoint=e.insertionPoint),"Renderer"in e&&(this.options.Renderer=e.Renderer),e.plugins&&this.use.apply(this,e.plugins),this},t.createStyleSheet=function(e,t){void 0===t&&(t={});var n=t.index;"number"!=typeof n&&(n=0===re.index?0:re.index+1);var o=new te(e,Object(r.a)({},t,{jss:this,generateId:t.generateId||this.generateId,insertionPoint:this.options.insertionPoint,Renderer:this.options.Renderer,index:n}));return this.plugins.onProcessSheet(o),o},t.removeStyleSheet=function(e){return e.detach(),re.remove(e),this},t.createRule=function(e,t,n){if(void 0===t&&(t={}),void 0===n&&(n={}),"object"==typeof e)return this.createRule(void 0,e,t);var o=Object(r.a)({},n,{name:e,jss:this,Renderer:this.options.Renderer});o.generateId||(o.generateId=this.generateId),o.classes||(o.classes={}),o.keyframes||(o.keyframes={});var i=y(e,t,o);return i&&this.plugins.onProcessRule(i),i},t.use=function(){for(var e=this,t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return n.forEach((function(t){e.plugins.use(t)})),this},e}();var we="undefined"!=typeof CSS&&CSS&&"number"in CSS,xe=function(e){return new be(e)};
/**
 * A better abstraction over CSS.
 *
 * @copyright Oleg Isonen (Slobodskoi) / Isonen 2014-present
 * @website https://github.com/cssinjs/jss
 * @license MIT
 */xe();function ke(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.baseClasses,n=e.newClasses;e.Component;if(!n)return t;var o=Object(r.a)({},t);return Object.keys(n).forEach((function(e){n[e]&&(o[e]="".concat(t[e]," ").concat(n[e]))})),o}var _e={set:function(e,t,n,r){var o=e.get(t);o||(o=new Map,e.set(t,o)),o.set(n,r)},get:function(e,t,n){var r=e.get(t);return r?r.get(n):void 0},delete:function(e,t,n){e.get(t).delete(n)}};var Se=a.a.createContext(null);function Ce(){return a.a.useContext(Se)}var Ee="function"==typeof Symbol&&Symbol.for?Symbol.for("mui.nested"):"__THEME_NESTED__",Te=["checked","disabled","error","focused","focusVisible","required","expanded","selected"];var Oe=Date.now(),Pe="fnValues"+Oe,Me="fnStyle"+ ++Oe;var Re=function(){return{onCreateRule:function(e,t,n){if("function"!=typeof t)return null;var r=y(e,{},n);return r[Me]=t,r},onProcessStyle:function(e,t){if(Pe in t||Me in t)return e;var n={};for(var r in e){var o=e[r];"function"==typeof o&&(delete e[r],n[r]=o)}return t[Pe]=n,e},onUpdate:function(e,t,n,r){var o=t,i=o[Me];i&&(o.style=i(e)||{});var a=o[Pe];if(a)for(var l in a)o.prop(l,a[l](e),r)}}},je="@global",Ae=function(){function e(e,t,n){for(var o in this.type="global",this.at=je,this.rules=void 0,this.options=void 0,this.key=void 0,this.isProcessed=!1,this.key=e,this.options=n,this.rules=new ee(Object(r.a)({},n,{parent:this})),t)this.rules.add(o,t[o]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.addRule=function(e,t,n){var r=this.rules.add(e,t,n);return this.options.jss.plugins.onProcessRule(r),r},t.indexOf=function(e){return this.rules.indexOf(e)},t.toString=function(){return this.rules.toString()},e}(),Ne=function(){function e(e,t,n){this.type="global",this.at=je,this.options=void 0,this.rule=void 0,this.isProcessed=!1,this.key=void 0,this.key=e,this.options=n;var o=e.substr("@global ".length);this.rule=n.jss.createRule(o,t,Object(r.a)({},n,{parent:this}))}return e.prototype.toString=function(e){return this.rule?this.rule.toString(e):""},e}(),ze=/\s*,\s*/g;function Le(e,t){for(var n=e.split(ze),r="",o=0;o<n.length;o++)r+=t+" "+n[o].trim(),n[o+1]&&(r+=", ");return r}var Ie=function(){return{onCreateRule:function(e,t,n){if(!e)return null;if(e===je)return new Ae(e,t,n);if("@"===e[0]&&"@global "===e.substr(0,"@global ".length))return new Ne(e,t,n);var r=n.parent;return r&&("global"===r.type||r.options.parent&&"global"===r.options.parent.type)&&(n.scoped=!1),!1===n.scoped&&(n.selector=e),null},onProcessRule:function(e){"style"===e.type&&(function(e){var t=e.options,n=e.style,o=n?n[je]:null;if(o){for(var i in o)t.sheet.addRule(i,o[i],Object(r.a)({},t,{selector:Le(i,e.selector)}));delete n[je]}}(e),function(e){var t=e.options,n=e.style;for(var o in n)if("@"===o[0]&&o.substr(0,je.length)===je){var i=Le(o.substr(je.length),e.selector);t.sheet.addRule(i,n[o],Object(r.a)({},t,{selector:i})),delete n[o]}}(e))}}},De=/\s*,\s*/g,Fe=/&/g,Ue=/\$([\w-]+)/g;var Be=function(){function e(e,t){return function(n,r){var o=e.getRule(r)||t&&t.getRule(r);return o?(o=o).selector:r}}function t(e,t){for(var n=t.split(De),r=e.split(De),o="",i=0;i<n.length;i++)for(var a=n[i],l=0;l<r.length;l++){var u=r[l];o&&(o+=", "),o+=-1!==u.indexOf("&")?u.replace(Fe,a):a+" "+u}return o}function n(e,t,n){if(n)return Object(r.a)({},n,{index:n.index+1});var o=e.options.nestingLevel;o=void 0===o?1:o+1;var i=Object(r.a)({},e.options,{nestingLevel:o,index:t.indexOf(e)+1});return delete i.name,i}return{onProcessStyle:function(o,i,a){if("style"!==i.type)return o;var l,u,s=i,c=s.options.parent;for(var f in o){var d=-1!==f.indexOf("&"),p="@"===f[0];if(d||p){if(l=n(s,c,l),d){var h=t(f,s.selector);u||(u=e(c,a)),h=h.replace(Ue,u),c.addRule(h,o[f],Object(r.a)({},l,{selector:h}))}else p&&c.addRule(f,{},l).addRule(s.key,o[f],{selector:s.selector});delete o[f]}}return o}}},$e=/[A-Z]/g,He=/^ms-/,Ve={};function We(e){return"-"+e.toLowerCase()}var qe=function(e){if(Ve.hasOwnProperty(e))return Ve[e];var t=e.replace($e,We);return Ve[e]=He.test(t)?"-"+t:t};function Ke(e){var t={};for(var n in e){t[0===n.indexOf("--")?n:qe(n)]=e[n]}return e.fallbacks&&(Array.isArray(e.fallbacks)?t.fallbacks=e.fallbacks.map(Ke):t.fallbacks=Ke(e.fallbacks)),t}var Ge=function(){return{onProcessStyle:function(e){if(Array.isArray(e)){for(var t=0;t<e.length;t++)e[t]=Ke(e[t]);return e}return Ke(e)},onChangeValue:function(e,t,n){if(0===t.indexOf("--"))return e;var r=qe(t);return t===r?e:(n.prop(r,e),null)}}},Qe=we&&CSS?CSS.px:"px",Ze=we&&CSS?CSS.ms:"ms",Ye=we&&CSS?CSS.percent:"%";function Xe(e){var t=/(-[a-z])/g,n=function(e){return e[1].toUpperCase()},r={};for(var o in e)r[o]=e[o],r[o.replace(t,n)]=e[o];return r}var Je=Xe({"animation-delay":Ze,"animation-duration":Ze,"background-position":Qe,"background-position-x":Qe,"background-position-y":Qe,"background-size":Qe,border:Qe,"border-bottom":Qe,"border-bottom-left-radius":Qe,"border-bottom-right-radius":Qe,"border-bottom-width":Qe,"border-left":Qe,"border-left-width":Qe,"border-radius":Qe,"border-right":Qe,"border-right-width":Qe,"border-top":Qe,"border-top-left-radius":Qe,"border-top-right-radius":Qe,"border-top-width":Qe,"border-width":Qe,margin:Qe,"margin-bottom":Qe,"margin-left":Qe,"margin-right":Qe,"margin-top":Qe,padding:Qe,"padding-bottom":Qe,"padding-left":Qe,"padding-right":Qe,"padding-top":Qe,"mask-position-x":Qe,"mask-position-y":Qe,"mask-size":Qe,height:Qe,width:Qe,"min-height":Qe,"max-height":Qe,"min-width":Qe,"max-width":Qe,bottom:Qe,left:Qe,top:Qe,right:Qe,"box-shadow":Qe,"text-shadow":Qe,"column-gap":Qe,"column-rule":Qe,"column-rule-width":Qe,"column-width":Qe,"font-size":Qe,"font-size-delta":Qe,"letter-spacing":Qe,"text-indent":Qe,"text-stroke":Qe,"text-stroke-width":Qe,"word-spacing":Qe,motion:Qe,"motion-offset":Qe,outline:Qe,"outline-offset":Qe,"outline-width":Qe,perspective:Qe,"perspective-origin-x":Ye,"perspective-origin-y":Ye,"transform-origin":Ye,"transform-origin-x":Ye,"transform-origin-y":Ye,"transform-origin-z":Ye,"transition-delay":Ze,"transition-duration":Ze,"vertical-align":Qe,"flex-basis":Qe,"shape-margin":Qe,size:Qe,grid:Qe,"grid-gap":Qe,"grid-row-gap":Qe,"grid-column-gap":Qe,"grid-template-rows":Qe,"grid-template-columns":Qe,"grid-auto-rows":Qe,"grid-auto-columns":Qe,"box-shadow-x":Qe,"box-shadow-y":Qe,"box-shadow-blur":Qe,"box-shadow-spread":Qe,"font-line-height":Qe,"text-shadow-x":Qe,"text-shadow-y":Qe,"text-shadow-blur":Qe});function et(e,t,n){if(!t)return t;if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]=et(e,t[r],n);else if("object"==typeof t)if("fallbacks"===e)for(var o in t)t[o]=et(o,t[o],n);else for(var i in t)t[i]=et(e+"-"+i,t[i],n);else if("number"==typeof t){var a=n[e]||Je[e];return a?"function"==typeof a?a(t).toString():""+t+a:t.toString()}return t}var tt=function(e){void 0===e&&(e={});var t=Xe(e);return{onProcessStyle:function(e,n){if("style"!==n.type)return e;for(var r in e)e[r]=et(r,e[r],t);return e},onChangeValue:function(e,n){return et(n,e,t)}}},nt=n(18),rt="",ot="",it="",at="",lt=c&&"ontouchstart"in document.documentElement;if(c){var ut={Moz:"-moz-",ms:"-ms-",O:"-o-",Webkit:"-webkit-"},st=document.createElement("p").style;for(var ct in ut)if(ct+"Transform"in st){rt=ct,ot=ut[ct];break}"Webkit"===rt&&"msHyphens"in st&&(rt="ms",ot=ut.ms,at="edge"),"Webkit"===rt&&"-apple-trailing-word"in st&&(it="apple")}var ft=rt,dt=ot,pt=it,ht=at,mt=lt;var vt={noPrefill:["appearance"],supportedProperty:function(e){return"appearance"===e&&("ms"===ft?"-webkit-"+e:dt+e)}},gt={noPrefill:["color-adjust"],supportedProperty:function(e){return"color-adjust"===e&&("Webkit"===ft?dt+"print-"+e:e)}},yt=/[-\s]+(.)?/g;function bt(e,t){return t?t.toUpperCase():""}function wt(e){return e.replace(yt,bt)}function xt(e){return wt("-"+e)}var kt,_t={noPrefill:["mask"],supportedProperty:function(e,t){if(!/^mask/.test(e))return!1;if("Webkit"===ft){if(wt("mask-image")in t)return e;if(ft+xt("mask-image")in t)return dt+e}return e}},St={noPrefill:["text-orientation"],supportedProperty:function(e){return"text-orientation"===e&&("apple"!==pt||mt?e:dt+e)}},Ct={noPrefill:["transform"],supportedProperty:function(e,t,n){return"transform"===e&&(n.transform?e:dt+e)}},Et={noPrefill:["transition"],supportedProperty:function(e,t,n){return"transition"===e&&(n.transition?e:dt+e)}},Tt={noPrefill:["writing-mode"],supportedProperty:function(e){return"writing-mode"===e&&("Webkit"===ft||"ms"===ft&&"edge"!==ht?dt+e:e)}},Ot={noPrefill:["user-select"],supportedProperty:function(e){return"user-select"===e&&("Moz"===ft||"ms"===ft||"apple"===pt?dt+e:e)}},Pt={supportedProperty:function(e,t){return!!/^break-/.test(e)&&("Webkit"===ft?"WebkitColumn"+xt(e)in t&&dt+"column-"+e:"Moz"===ft&&("page"+xt(e)in t&&"page-"+e))}},Mt={supportedProperty:function(e,t){if(!/^(border|margin|padding)-inline/.test(e))return!1;if("Moz"===ft)return e;var n=e.replace("-inline","");return ft+xt(n)in t&&dt+n}},Rt={supportedProperty:function(e,t){return wt(e)in t&&e}},jt={supportedProperty:function(e,t){var n=xt(e);return"-"===e[0]||"-"===e[0]&&"-"===e[1]?e:ft+n in t?dt+e:"Webkit"!==ft&&"Webkit"+n in t&&"-webkit-"+e}},At={supportedProperty:function(e){return"scroll-snap"===e.substring(0,11)&&("ms"===ft?""+dt+e:e)}},Nt={supportedProperty:function(e){return"overscroll-behavior"===e&&("ms"===ft?dt+"scroll-chaining":e)}},zt={"flex-grow":"flex-positive","flex-shrink":"flex-negative","flex-basis":"flex-preferred-size","justify-content":"flex-pack",order:"flex-order","align-items":"flex-align","align-content":"flex-line-pack"},Lt={supportedProperty:function(e,t){var n=zt[e];return!!n&&(ft+xt(n)in t&&dt+n)}},It={flex:"box-flex","flex-grow":"box-flex","flex-direction":["box-orient","box-direction"],order:"box-ordinal-group","align-items":"box-align","flex-flow":["box-orient","box-direction"],"justify-content":"box-pack"},Dt=Object.keys(It),Ft=function(e){return dt+e},Ut=[vt,gt,_t,St,Ct,Et,Tt,Ot,Pt,Mt,Rt,jt,At,Nt,Lt,{supportedProperty:function(e,t,n){var r=n.multiple;if(Dt.indexOf(e)>-1){var o=It[e];if(!Array.isArray(o))return ft+xt(o)in t&&dt+o;if(!r)return!1;for(var i=0;i<o.length;i++)if(!(ft+xt(o[0])in t))return!1;return o.map(Ft)}return!1}}],Bt=Ut.filter((function(e){return e.supportedProperty})).map((function(e){return e.supportedProperty})),$t=Ut.filter((function(e){return e.noPrefill})).reduce((function(e,t){return e.push.apply(e,Object(nt.a)(t.noPrefill)),e}),[]),Ht={};if(c){kt=document.createElement("p");var Vt=window.getComputedStyle(document.documentElement,"");for(var Wt in Vt)isNaN(Wt)||(Ht[Vt[Wt]]=Vt[Wt]);$t.forEach((function(e){return delete Ht[e]}))}function qt(e,t){if(void 0===t&&(t={}),!kt)return e;if(null!=Ht[e])return Ht[e];"transition"!==e&&"transform"!==e||(t[e]=e in kt.style);for(var n=0;n<Bt.length&&(Ht[e]=Bt[n](e,kt.style,t),!Ht[e]);n++);try{kt.style[e]=""}catch(e){return!1}return Ht[e]}var Kt,Gt={},Qt={transition:1,"transition-property":1,"-webkit-transition":1,"-webkit-transition-property":1},Zt=/(^\s*[\w-]+)|, (\s*[\w-]+)(?![^()]*\))/g;function Yt(e,t,n){if("var"===t)return"var";if("all"===t)return"all";if("all"===n)return", all";var r=t?qt(t):", "+qt(n);return r||(t||n)}function Xt(e,t){var n=t;if(!Kt||"content"===e)return t;if("string"!=typeof n||!isNaN(parseInt(n,10)))return n;var r=e+n;if(null!=Gt[r])return Gt[r];try{Kt.style[e]=n}catch(e){return Gt[r]=!1,!1}if(Qt[e])n=n.replace(Zt,Yt);else if(""===Kt.style[e]&&("-ms-flex"===(n=dt+n)&&(Kt.style[e]="-ms-flexbox"),Kt.style[e]=n,""===Kt.style[e]))return Gt[r]=!1,!1;return Kt.style[e]="",Gt[r]=n,Gt[r]}c&&(Kt=document.createElement("p"));var Jt=function(){function e(t){for(var n in t){var r=t[n];if("fallbacks"===n&&Array.isArray(r))t[n]=r.map(e);else{var o=!1,i=qt(n);i&&i!==n&&(o=!0);var a=!1,l=Xt(i,w(r));l&&l!==r&&(a=!0),(o||a)&&(o&&delete t[n],t[i||n]=l||r)}}return t}return{onProcessRule:function(e){if("keyframes"===e.type){var t=e;t.at="-"===(n=t.at)[1]||"ms"===ft?n:"@"+dt+"keyframes"+n.substr(10)}var n},onProcessStyle:function(t,n){return"style"!==n.type?t:e(t)},onChangeValue:function(e,t){return Xt(t,w(e))||e}}};var en=function(){var e=function(e,t){return e.length===t.length?e>t?1:-1:e.length-t.length};return{onProcessStyle:function(t,n){if("style"!==n.type)return t;for(var r={},o=Object.keys(t).sort(e),i=0;i<o.length;i++)r[o[i]]=t[o[i]];return r}}};function tn(){return{plugins:[Re(),Ie(),Be(),Ge(),tt(),"undefined"==typeof window?null:Jt(),en()]}}var nn=xe(tn()),rn={disableGeneration:!1,generateClassName:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.disableGlobal,n=void 0!==t&&t,r=e.productionPrefix,o=void 0===r?"jss":r,i=e.seed,a=void 0===i?"":i,l=""===a?"":"".concat(a,"-"),u=0,s=function(){return u+=1};return function(e,t){var r=t.options.name;if(r&&0===r.indexOf("Mui")&&!t.options.link&&!n){if(-1!==Te.indexOf(e.key))return"Mui-".concat(e.key);var i="".concat(l).concat(r,"-").concat(e.key);return t.options.theme[Ee]&&""===a?"".concat(i,"-").concat(s()):i}return"".concat(l).concat(o).concat(s())}}(),jss:nn,sheetsCache:null,sheetsManager:new Map,sheetsRegistry:null},on=a.a.createContext(rn);var an=-1e9;function ln(){return an+=1}function un(e){return(un="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function sn(e){return e&&"object"===un(e)&&e.constructor===Object}function cn(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{clone:!0},o=n.clone?Object(r.a)({},e):e;return sn(e)&&sn(t)&&Object.keys(t).forEach((function(r){"__proto__"!==r&&(sn(t[r])&&r in e?o[r]=cn(e[r],t[r],n):o[r]=t[r])})),o}function fn(e){var t="function"==typeof e;return{create:function(n,o){var i;try{i=t?e(n):e}catch(e){throw e}if(!o||!n.overrides||!n.overrides[o])return i;var a=n.overrides[o],l=Object(r.a)({},i);return Object.keys(a).forEach((function(e){l[e]=cn(l[e],a[e])})),l},options:{}}}var dn={};function pn(e,t,n){var r=e.state;if(e.stylesOptions.disableGeneration)return t||{};r.cacheClasses||(r.cacheClasses={value:null,lastProp:null,lastJSS:{}});var o=!1;return r.classes!==r.cacheClasses.lastJSS&&(r.cacheClasses.lastJSS=r.classes,o=!0),t!==r.cacheClasses.lastProp&&(r.cacheClasses.lastProp=t,o=!0),o&&(r.cacheClasses.value=ke({baseClasses:r.cacheClasses.lastJSS,newClasses:t,Component:n})),r.cacheClasses.value}function hn(e,t){var n=e.state,o=e.theme,i=e.stylesOptions,a=e.stylesCreator,l=e.name;if(!i.disableGeneration){var u=_e.get(i.sheetsManager,a,o);u||(u={refs:0,staticSheet:null,dynamicStyles:null},_e.set(i.sheetsManager,a,o,u));var s=Object(r.a)(Object(r.a)(Object(r.a)({},a.options),i),{},{theme:o,flip:"boolean"==typeof i.flip?i.flip:"rtl"===o.direction});s.generateId=s.serverGenerateClassName||s.generateClassName;var c=i.sheetsRegistry;if(0===u.refs){var f;i.sheetsCache&&(f=_e.get(i.sheetsCache,a,o));var d=a.create(o,l);f||((f=i.jss.createStyleSheet(d,Object(r.a)({link:!1},s))).attach(),i.sheetsCache&&_e.set(i.sheetsCache,a,o,f)),c&&c.add(f),u.staticSheet=f,u.dynamicStyles=function e(t){var n=null;for(var r in t){var o=t[r],i=typeof o;if("function"===i)n||(n={}),n[r]=o;else if("object"===i&&null!==o&&!Array.isArray(o)){var a=e(o);a&&(n||(n={}),n[r]=a)}}return n}(d)}if(u.dynamicStyles){var p=i.jss.createStyleSheet(u.dynamicStyles,Object(r.a)({link:!0},s));p.update(t),p.attach(),n.dynamicSheet=p,n.classes=ke({baseClasses:u.staticSheet.classes,newClasses:p.classes}),c&&c.add(p)}else n.classes=u.staticSheet.classes;u.refs+=1}}function mn(e,t){var n=e.state;n.dynamicSheet&&n.dynamicSheet.update(t)}function vn(e){var t=e.state,n=e.theme,r=e.stylesOptions,o=e.stylesCreator;if(!r.disableGeneration){var i=_e.get(r.sheetsManager,o,n);i.refs-=1;var a=r.sheetsRegistry;0===i.refs&&(_e.delete(r.sheetsManager,o,n),r.jss.removeStyleSheet(i.staticSheet),a&&a.remove(i.staticSheet)),t.dynamicSheet&&(r.jss.removeStyleSheet(t.dynamicSheet),a&&a.remove(t.dynamicSheet))}}function gn(e,t){var n,r=a.a.useRef([]),o=a.a.useMemo((function(){return{}}),t);r.current!==o&&(r.current=o,n=e()),a.a.useEffect((function(){return function(){n&&n()}}),[o])}function yn(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.name,i=t.classNamePrefix,l=t.Component,u=t.defaultTheme,s=void 0===u?dn:u,c=Object(o.a)(t,["name","classNamePrefix","Component","defaultTheme"]),f=fn(e),d=n||i||"makeStyles";f.options={index:ln(),name:n,meta:d,classNamePrefix:d};var p=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=Ce()||s,o=Object(r.a)(Object(r.a)({},a.a.useContext(on)),c),i=a.a.useRef(),u=a.a.useRef();gn((function(){var r={name:n,state:{},stylesCreator:f,stylesOptions:o,theme:t};return hn(r,e),u.current=!1,i.current=r,function(){vn(r)}}),[t,f]),a.a.useEffect((function(){u.current&&mn(i.current,e),u.current=!0}));var d=pn(i.current,e.classes,l);return d};return p}function bn(e){var t=e.theme,n=e.name,r=e.props;if(!t||!t.props||!t.props[n])return r;var o,i=t.props[n];for(o in i)void 0===r[o]&&(r[o]=i[o]);return r}var wn=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return function(n){var i=t.defaultTheme,l=t.withTheme,s=void 0!==l&&l,c=t.name,f=Object(o.a)(t,["defaultTheme","withTheme","name"]);var d=c,p=yn(e,Object(r.a)({defaultTheme:i,Component:n,name:c||n.displayName,classNamePrefix:d},f)),h=a.a.forwardRef((function(e,t){e.classes;var l,u=e.innerRef,f=Object(o.a)(e,["classes","innerRef"]),d=p(Object(r.a)(Object(r.a)({},n.defaultProps),e)),h=f;return("string"==typeof c||s)&&(l=Ce()||i,c&&(h=bn({theme:l,name:c,props:f})),s&&!h.theme&&(h.theme=l)),a.a.createElement(n,Object(r.a)({ref:u||t,classes:d},h))}));return u()(h,n),h}};function xn(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var kn=["xs","sm","md","lg","xl"];function _n(e){var t=e.values,n=void 0===t?{xs:0,sm:600,md:960,lg:1280,xl:1920}:t,i=e.unit,a=void 0===i?"px":i,l=e.step,u=void 0===l?5:l,s=Object(o.a)(e,["values","unit","step"]);function c(e){var t="number"==typeof n[e]?n[e]:e;return"@media (min-width:".concat(t).concat(a,")")}function f(e,t){var r=kn.indexOf(t);return r===kn.length-1?c(e):"@media (min-width:".concat("number"==typeof n[e]?n[e]:e).concat(a,") and ")+"(max-width:".concat((-1!==r&&"number"==typeof n[kn[r+1]]?n[kn[r+1]]:t)-u/100).concat(a,")")}return Object(r.a)({keys:kn,values:n,up:c,down:function(e){var t=kn.indexOf(e)+1,r=n[kn[t]];return t===kn.length?c("xs"):"@media (max-width:".concat(("number"==typeof r&&t>0?r:e)-u/100).concat(a,")")},between:f,only:function(e){return f(e,e)},width:function(e){return n[e]}},s)}function Sn(e,t,n){var o;return Object(r.a)({gutters:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Object(r.a)({paddingLeft:t(2),paddingRight:t(2)},n,xn({},e.up("sm"),Object(r.a)({paddingLeft:t(3),paddingRight:t(3)},n[e.up("sm")])))},toolbar:(o={minHeight:56},xn(o,"".concat(e.up("xs")," and (orientation: landscape)"),{minHeight:48}),xn(o,e.up("sm"),{minHeight:64}),o)},n)}var Cn=n(56),En={black:"#000",white:"#fff"},Tn={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#d5d5d5",A200:"#aaaaaa",A400:"#303030",A700:"#616161"},On={50:"#e8eaf6",100:"#c5cae9",200:"#9fa8da",300:"#7986cb",400:"#5c6bc0",500:"#3f51b5",600:"#3949ab",700:"#303f9f",800:"#283593",900:"#1a237e",A100:"#8c9eff",A200:"#536dfe",A400:"#3d5afe",A700:"#304ffe"},Pn={50:"#fce4ec",100:"#f8bbd0",200:"#f48fb1",300:"#f06292",400:"#ec407a",500:"#e91e63",600:"#d81b60",700:"#c2185b",800:"#ad1457",900:"#880e4f",A100:"#ff80ab",A200:"#ff4081",A400:"#f50057",A700:"#c51162"},Mn={50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",A100:"#ff8a80",A200:"#ff5252",A400:"#ff1744",A700:"#d50000"},Rn={50:"#fff3e0",100:"#ffe0b2",200:"#ffcc80",300:"#ffb74d",400:"#ffa726",500:"#ff9800",600:"#fb8c00",700:"#f57c00",800:"#ef6c00",900:"#e65100",A100:"#ffd180",A200:"#ffab40",A400:"#ff9100",A700:"#ff6d00"},jn={50:"#e3f2fd",100:"#bbdefb",200:"#90caf9",300:"#64b5f6",400:"#42a5f5",500:"#2196f3",600:"#1e88e5",700:"#1976d2",800:"#1565c0",900:"#0d47a1",A100:"#82b1ff",A200:"#448aff",A400:"#2979ff",A700:"#2962ff"},An={50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",A100:"#b9f6ca",A200:"#69f0ae",A400:"#00e676",A700:"#00c853"},Nn=n(15),zn={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.54)",disabled:"rgba(0, 0, 0, 0.38)",hint:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:En.white,default:Tn[50]},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},Ln={text:{primary:En.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",hint:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:Tn[800],default:"#303030"},action:{active:En.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function In(e,t,n,r){var o=r.light||r,i=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=Object(Nn.d)(e.main,o):"dark"===t&&(e.dark=Object(Nn.a)(e.main,i)))}function Dn(e){var t=e.primary,n=void 0===t?{light:On[300],main:On[500],dark:On[700]}:t,i=e.secondary,a=void 0===i?{light:Pn.A200,main:Pn.A400,dark:Pn.A700}:i,l=e.error,u=void 0===l?{light:Mn[300],main:Mn[500],dark:Mn[700]}:l,s=e.warning,c=void 0===s?{light:Rn[300],main:Rn[500],dark:Rn[700]}:s,f=e.info,d=void 0===f?{light:jn[300],main:jn[500],dark:jn[700]}:f,p=e.success,h=void 0===p?{light:An[300],main:An[500],dark:An[700]}:p,m=e.type,v=void 0===m?"light":m,g=e.contrastThreshold,y=void 0===g?3:g,b=e.tonalOffset,w=void 0===b?.2:b,x=Object(o.a)(e,["primary","secondary","error","warning","info","success","type","contrastThreshold","tonalOffset"]);function k(e){return Object(Nn.c)(e,Ln.text.primary)>=y?Ln.text.primary:zn.text.primary}var _=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:500,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:300,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:700;if(!(e=Object(r.a)({},e)).main&&e[t]&&(e.main=e[t]),!e.main)throw new Error(Object(Cn.a)(4,t));if("string"!=typeof e.main)throw new Error(Object(Cn.a)(5,JSON.stringify(e.main)));return In(e,"light",n,w),In(e,"dark",o,w),e.contrastText||(e.contrastText=k(e.main)),e},S={dark:Ln,light:zn};return cn(Object(r.a)({common:En,type:v,primary:_(n),secondary:_(a,"A400","A200","A700"),error:_(u),warning:_(c),info:_(d),success:_(h),grey:Tn,contrastThreshold:y,getContrastText:k,augmentColor:_,tonalOffset:w},S[v]),x)}function Fn(e){return Math.round(1e5*e)/1e5}var Un={textTransform:"uppercase"};function Bn(e,t){var n="function"==typeof t?t(e):t,i=n.fontFamily,a=void 0===i?'"Roboto", "Helvetica", "Arial", sans-serif':i,l=n.fontSize,u=void 0===l?14:l,s=n.fontWeightLight,c=void 0===s?300:s,f=n.fontWeightRegular,d=void 0===f?400:f,p=n.fontWeightMedium,h=void 0===p?500:p,m=n.fontWeightBold,v=void 0===m?700:m,g=n.htmlFontSize,y=void 0===g?16:g,b=n.allVariants,w=n.pxToRem,x=Object(o.a)(n,["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"]);var k=u/14,_=w||function(e){return"".concat(e/y*k,"rem")},S=function(e,t,n,o,i){return Object(r.a)({fontFamily:a,fontWeight:e,fontSize:_(t),lineHeight:n},'"Roboto", "Helvetica", "Arial", sans-serif'===a?{letterSpacing:"".concat(Fn(o/t),"em")}:{},i,b)},C={h1:S(c,96,1.167,-1.5),h2:S(c,60,1.2,-.5),h3:S(d,48,1.167,0),h4:S(d,34,1.235,.25),h5:S(d,24,1.334,0),h6:S(h,20,1.6,.15),subtitle1:S(d,16,1.75,.15),subtitle2:S(h,14,1.57,.1),body1:S(d,16,1.5,.15),body2:S(d,14,1.43,.15),button:S(h,14,1.75,.4,Un),caption:S(d,12,1.66,.4),overline:S(d,12,2.66,1,Un)};return cn(Object(r.a)({htmlFontSize:y,pxToRem:_,round:Fn,fontFamily:a,fontSize:u,fontWeightLight:c,fontWeightRegular:d,fontWeightMedium:h,fontWeightBold:v},C),x,{clone:!1})}function $n(){return["".concat(arguments.length<=0?void 0:arguments[0],"px ").concat(arguments.length<=1?void 0:arguments[1],"px ").concat(arguments.length<=2?void 0:arguments[2],"px ").concat(arguments.length<=3?void 0:arguments[3],"px rgba(0,0,0,").concat(.2,")"),"".concat(arguments.length<=4?void 0:arguments[4],"px ").concat(arguments.length<=5?void 0:arguments[5],"px ").concat(arguments.length<=6?void 0:arguments[6],"px ").concat(arguments.length<=7?void 0:arguments[7],"px rgba(0,0,0,").concat(.14,")"),"".concat(arguments.length<=8?void 0:arguments[8],"px ").concat(arguments.length<=9?void 0:arguments[9],"px ").concat(arguments.length<=10?void 0:arguments[10],"px ").concat(arguments.length<=11?void 0:arguments[11],"px rgba(0,0,0,").concat(.12,")")].join(",")}var Hn=["none",$n(0,2,1,-1,0,1,1,0,0,1,3,0),$n(0,3,1,-2,0,2,2,0,0,1,5,0),$n(0,3,3,-2,0,3,4,0,0,1,8,0),$n(0,2,4,-1,0,4,5,0,0,1,10,0),$n(0,3,5,-1,0,5,8,0,0,1,14,0),$n(0,3,5,-1,0,6,10,0,0,1,18,0),$n(0,4,5,-2,0,7,10,1,0,2,16,1),$n(0,5,5,-3,0,8,10,1,0,3,14,2),$n(0,5,6,-3,0,9,12,1,0,3,16,2),$n(0,6,6,-3,0,10,14,1,0,4,18,3),$n(0,6,7,-4,0,11,15,1,0,4,20,3),$n(0,7,8,-4,0,12,17,2,0,5,22,4),$n(0,7,8,-4,0,13,19,2,0,5,24,4),$n(0,7,9,-4,0,14,21,2,0,5,26,4),$n(0,8,9,-5,0,15,22,2,0,6,28,5),$n(0,8,10,-5,0,16,24,2,0,6,30,5),$n(0,8,11,-5,0,17,26,2,0,6,32,5),$n(0,9,11,-5,0,18,28,2,0,7,34,6),$n(0,9,12,-6,0,19,29,2,0,7,36,6),$n(0,10,13,-6,0,20,31,3,0,8,38,7),$n(0,10,13,-6,0,21,33,3,0,8,40,7),$n(0,10,14,-6,0,22,35,3,0,8,42,7),$n(0,11,14,-7,0,23,36,3,0,9,44,8),$n(0,11,15,-7,0,24,38,3,0,9,46,8)],Vn={borderRadius:4};var Wn=n(27);function qn(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw i}}return n}}(e,t)||Object(Wn.a)(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var Kn=function(e,t){return t?cn(e,t,{clone:!1}):e},Gn={xs:0,sm:600,md:960,lg:1280,xl:1920},Qn={keys:["xs","sm","md","lg","xl"],up:function(e){return"@media (min-width:".concat(Gn[e],"px)")}};var Zn={m:"margin",p:"padding"},Yn={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},Xn={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},Jn=function(e){var t={};return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}((function(e){if(e.length>2){if(!Xn[e])return[e];e=Xn[e]}var t=qn(e.split(""),2),n=t[0],r=t[1],o=Zn[n],i=Yn[r]||"";return Array.isArray(i)?i.map((function(e){return o+e})):[o+i]})),er=["m","mt","mr","mb","ml","mx","my","p","pt","pr","pb","pl","px","py","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY"];function tr(e){var t=e.spacing||8;return"number"==typeof t?function(e){return t*e}:Array.isArray(t)?function(e){return t[e]}:"function"==typeof t?t:function(){}}function nr(e,t){return function(n){return e.reduce((function(e,r){return e[r]=function(e,t){if("string"==typeof t)return t;var n=e(Math.abs(t));return t>=0?n:"number"==typeof n?-n:"-".concat(n)}(t,n),e}),{})}}function rr(e){var t=tr(e.theme);return Object.keys(e).map((function(n){if(-1===er.indexOf(n))return null;var r=nr(Jn(n),t),o=e[n];return function(e,t,n){if(Array.isArray(t)){var r=e.theme.breakpoints||Qn;return t.reduce((function(e,o,i){return e[r.up(r.keys[i])]=n(t[i]),e}),{})}if("object"===un(t)){var o=e.theme.breakpoints||Qn;return Object.keys(t).reduce((function(e,r){return e[o.up(r)]=n(t[r]),e}),{})}return n(t)}(e,o,r)})).reduce(Kn,{})}rr.propTypes={},rr.filterProps=er;function or(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:8;if(e.mui)return e;var t=tr({spacing:e}),n=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return 0===n.length?t(1):1===n.length?t(n[0]):n.map((function(e){if("string"==typeof e)return e;var n=t(e);return"number"==typeof n?"".concat(n,"px"):n})).join(" ")};return Object.defineProperty(n,"unit",{get:function(){return e}}),n.mui=!0,n}var ir={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},ar={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function lr(e){return"".concat(Math.round(e),"ms")}var ur={easing:ir,duration:ar,create:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["all"],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.duration,r=void 0===n?ar.standard:n,i=t.easing,a=void 0===i?ir.easeInOut:i,l=t.delay,u=void 0===l?0:l;Object(o.a)(t,["duration","easing","delay"]);return(Array.isArray(e)?e:[e]).map((function(e){return"".concat(e," ").concat("string"==typeof r?r:lr(r)," ").concat(a," ").concat("string"==typeof u?u:lr(u))})).join(",")},getAutoHeightDuration:function(e){if(!e)return 0;var t=e/36;return Math.round(10*(4+15*Math.pow(t,.25)+t/5))}},sr={mobileStepper:1e3,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500};var cr=function(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.breakpoints,n=void 0===t?{}:t,r=e.mixins,i=void 0===r?{}:r,a=e.palette,l=void 0===a?{}:a,u=e.spacing,s=e.typography,c=void 0===s?{}:s,f=Object(o.a)(e,["breakpoints","mixins","palette","spacing","typography"]),d=Dn(l),p=_n(n),h=or(u),m=cn({breakpoints:p,direction:"ltr",mixins:Sn(p,h,i),overrides:{},palette:d,props:{},shadows:Hn,typography:Bn(d,c),spacing:h,shape:Vn,transitions:ur,zIndex:sr},f),v=arguments.length,g=new Array(v>1?v-1:0),y=1;y<v;y++)g[y-1]=arguments[y];return m=g.reduce((function(e,t){return cn(e,t)}),m)}();t.a=function(e,t){return wn(e,Object(r.a)({defaultTheme:cr},t))}},,function(e,t,n){"use strict";var r=n(33),o=Object.prototype.toString;function i(e){return"[object Array]"===o.call(e)}function a(e){return void 0===e}function l(e){return null!==e&&"object"==typeof e}function u(e){return"[object Function]"===o.call(e)}function s(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),i(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:i,isArrayBuffer:function(e){return"[object ArrayBuffer]"===o.call(e)},isBuffer:function(e){return null!==e&&!a(e)&&null!==e.constructor&&!a(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:l,isUndefined:a,isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:u,isStream:function(e){return l(e)&&u(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:s,merge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]=n}for(var r=0,o=arguments.length;r<o;r++)s(arguments[r],n);return t},deepMerge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]="object"==typeof n?e({},n):n}for(var r=0,o=arguments.length;r<o;r++)s(arguments[r],n);return t},extend:function(e,t,n){return s(t,(function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t){function n(t){return e.exports=n=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},n(t)}e.exports=n},function(e,t,n){e.exports=n(70)},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(56);function o(e){if("string"!=typeof e)throw new Error(Object(r.a)(7));return e.charAt(0).toUpperCase()+e.slice(1)}},function(e,t){e.exports=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},function(e,t){function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}e.exports=function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}},function(e,t,n){var r=n(59);e.exports=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&r(e,t)}},function(e,t,n){var r=n(60),o=n(19);e.exports=function(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?o(e):t}},function(e,t,n){"use strict";n.d(t,"c",(function(){return l})),n.d(t,"b",(function(){return s})),n.d(t,"a",(function(){return c})),n.d(t,"d",(function(){return f}));var r=n(56);function o(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return Math.min(Math.max(t,e),n)}function i(e){if(e.type)return e;if("#"===e.charAt(0))return i(function(e){e=e.substr(1);var t=new RegExp(".{1,".concat(e.length>=6?2:1,"}"),"g"),n=e.match(t);return n&&1===n[0].length&&(n=n.map((function(e){return e+e}))),n?"rgb".concat(4===n.length?"a":"","(").concat(n.map((function(e,t){return t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3})).join(", "),")"):""}(e));var t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla"].indexOf(n))throw new Error(Object(r.a)(3,e));var o=e.substring(t+1,e.length-1).split(",");return{type:n,values:o=o.map((function(e){return parseFloat(e)}))}}function a(e){var t=e.type,n=e.values;return-1!==t.indexOf("rgb")?n=n.map((function(e,t){return t<3?parseInt(e,10):e})):-1!==t.indexOf("hsl")&&(n[1]="".concat(n[1],"%"),n[2]="".concat(n[2],"%")),"".concat(t,"(").concat(n.join(", "),")")}function l(e,t){var n=u(e),r=u(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}function u(e){var t="hsl"===(e=i(e)).type?i(function(e){var t=(e=i(e)).values,n=t[0],r=t[1]/100,o=t[2]/100,l=r*Math.min(o,1-o),u=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:(e+n/30)%12;return o-l*Math.max(Math.min(t-3,9-t,1),-1)},s="rgb",c=[Math.round(255*u(0)),Math.round(255*u(8)),Math.round(255*u(4))];return"hsla"===e.type&&(s+="a",c.push(t[3])),a({type:s,values:c})}(e)).values:e.values;return t=t.map((function(e){return(e/=255)<=.03928?e/12.92:Math.pow((e+.055)/1.055,2.4)})),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function s(e,t){return e=i(e),t=o(t),"rgb"!==e.type&&"hsl"!==e.type||(e.type+="a"),e.values[3]=t,a(e)}function c(e,t){if(e=i(e),t=o(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]*=1-t;return a(e)}function f(e,t){if(e=i(e),t=o(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;return a(e)}},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(62)},function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(23);var o=n(27);function i(e){return function(e){if(Array.isArray(e))return Object(r.a)(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||Object(o.a)(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},function(e,t){e.exports=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}},function(e,t,n){"use strict";var r=n(26),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function u(e){return r.isMemo(e)?a:l[e.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=a;var s=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var a=c(n);f&&(a=a.concat(f(n)));for(var l=u(t),m=u(n),v=0;v<a.length;++v){var g=a[v];if(!(i[g]||r&&r[g]||m&&m[g]||l&&l[g])){var y=d(n,g);try{s(t,g,y)}catch(e){}}}}return t}},function(e,t,n){"use strict";function r(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";function r(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}n.d(t,"a",(function(){return r}))},function(e,t){e.exports=function(e){return e&&e.__esModule?e:{default:e}}},function(e,t){function n(){return e.exports=n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n.apply(this,arguments)}e.exports=n},function(e,t,n){"use strict";e.exports=n(107)},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(23);function o(e,t){if(e){if("string"==typeof e)return Object(r.a)(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Object(r.a)(e,t):void 0}}},function(e,t,n){"use strict";var r=n(24);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=i.default.memo(i.default.forwardRef((function(t,n){return i.default.createElement(a.default,(0,o.default)({ref:n},t),e)})));0;return n.muiName=a.default.muiName,n};var o=r(n(25)),i=r(n(0)),a=r(n(109))},function(e,t){e.exports=function(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}},function(e,t,n){"use strict";(function(e){var r=n(26),o=n(0),i=n.n(o),a=(n(50),n(51)),l=n(52),u=n(31),s=n(20),c=n.n(s);function f(){return(f=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var d=function(e,t){for(var n=[e[0]],r=0,o=t.length;r<o;r+=1)n.push(t[r],e[r+1]);return n},p=function(e){return null!==e&&"object"==typeof e&&"[object Object]"===(e.toString?e.toString():Object.prototype.toString.call(e))&&!Object(r.typeOf)(e)},h=Object.freeze([]),m=Object.freeze({});function v(e){return"function"==typeof e}function g(e){return e.displayName||e.name||"Component"}function y(e){return e&&"string"==typeof e.styledComponentId}var b=void 0!==e&&(e.env.REACT_APP_SC_ATTR||e.env.SC_ATTR)||"data-styled",w="undefined"!=typeof window&&"HTMLElement"in window,x="boolean"==typeof SC_DISABLE_SPEEDY&&SC_DISABLE_SPEEDY||void 0!==e&&(e.env.REACT_APP_SC_DISABLE_SPEEDY||e.env.SC_DISABLE_SPEEDY)||!1,k=function(){return n.nc};function _(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw new Error("An error occurred. See https://github.com/styled-components/styled-components/blob/master/packages/styled-components/src/utils/errors.md#"+e+" for more information."+(n.length>0?" Additional arguments: "+n.join(", "):""))}var S=function(e){var t=document.head,n=e||t,r=document.createElement("style"),o=function(e){for(var t=e.childNodes,n=t.length;n>=0;n--){var r=t[n];if(r&&1===r.nodeType&&r.hasAttribute(b))return r}}(n),i=void 0!==o?o.nextSibling:null;r.setAttribute(b,"active"),r.setAttribute("data-styled-version","5.1.1");var a=k();return a&&r.setAttribute("nonce",a),n.insertBefore(r,i),r},C=function(){function e(e){var t=this.element=S(e);t.appendChild(document.createTextNode("")),this.sheet=function(e){if(e.sheet)return e.sheet;for(var t=document.styleSheets,n=0,r=t.length;n<r;n++){var o=t[n];if(o.ownerNode===e)return o}_(17)}(t),this.length=0}var t=e.prototype;return t.insertRule=function(e,t){try{return this.sheet.insertRule(t,e),this.length++,!0}catch(e){return!1}},t.deleteRule=function(e){this.sheet.deleteRule(e),this.length--},t.getRule=function(e){var t=this.sheet.cssRules[e];return void 0!==t&&"string"==typeof t.cssText?t.cssText:""},e}(),E=function(){function e(e){var t=this.element=S(e);this.nodes=t.childNodes,this.length=0}var t=e.prototype;return t.insertRule=function(e,t){if(e<=this.length&&e>=0){var n=document.createTextNode(t),r=this.nodes[e];return this.element.insertBefore(n,r||null),this.length++,!0}return!1},t.deleteRule=function(e){this.element.removeChild(this.nodes[e]),this.length--},t.getRule=function(e){return e<this.length?this.nodes[e].textContent:""},e}(),T=function(){function e(e){this.rules=[],this.length=0}var t=e.prototype;return t.insertRule=function(e,t){return e<=this.length&&(this.rules.splice(e,0,t),this.length++,!0)},t.deleteRule=function(e){this.rules.splice(e,1),this.length--},t.getRule=function(e){return e<this.length?this.rules[e]:""},e}(),O=function(){function e(e){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=e}var t=e.prototype;return t.indexOfGroup=function(e){for(var t=0,n=0;n<e;n++)t+=this.groupSizes[n];return t},t.insertRules=function(e,t){if(e>=this.groupSizes.length){for(var n=this.groupSizes,r=n.length,o=r;e>=o;)(o<<=1)<0&&_(16,""+e);this.groupSizes=new Uint32Array(o),this.groupSizes.set(n),this.length=o;for(var i=r;i<o;i++)this.groupSizes[i]=0}for(var a=this.indexOfGroup(e+1),l=0,u=t.length;l<u;l++)this.tag.insertRule(a,t[l])&&(this.groupSizes[e]++,a++)},t.clearGroup=function(e){if(e<this.length){var t=this.groupSizes[e],n=this.indexOfGroup(e),r=n+t;this.groupSizes[e]=0;for(var o=n;o<r;o++)this.tag.deleteRule(n)}},t.getGroup=function(e){var t="";if(e>=this.length||0===this.groupSizes[e])return t;for(var n=this.groupSizes[e],r=this.indexOfGroup(e),o=r+n,i=r;i<o;i++)t+=this.tag.getRule(i)+"/*!sc*/\n";return t},e}(),P=new Map,M=new Map,R=1,j=function(e){if(P.has(e))return P.get(e);var t=R++;return P.set(e,t),M.set(t,e),t},A=function(e){return M.get(e)},N=function(e,t){t>=R&&(R=t+1),P.set(e,t),M.set(t,e)},z="style["+b+'][data-styled-version="5.1.1"]',L=new RegExp("^"+b+'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)'),I=function(e,t,n){for(var r,o=n.split(","),i=0,a=o.length;i<a;i++)(r=o[i])&&e.registerName(t,r)},D=function(e,t){for(var n=t.innerHTML.split("/*!sc*/\n"),r=[],o=0,i=n.length;o<i;o++){var a=n[o].trim();if(a){var l=a.match(L);if(l){var u=0|parseInt(l[1],10),s=l[2];0!==u&&(N(s,u),I(e,s,l[3]),e.getTag().insertRules(u,r)),r.length=0}else r.push(a)}}},F=w,U={isServer:!w,useCSSOMInjection:!x},B=function(){function e(e,t,n){void 0===e&&(e=U),void 0===t&&(t={}),this.options=f({},U,{},e),this.gs=t,this.names=new Map(n),!this.options.isServer&&w&&F&&(F=!1,function(e){for(var t=document.querySelectorAll(z),n=0,r=t.length;n<r;n++){var o=t[n];o&&"active"!==o.getAttribute(b)&&(D(e,o),o.parentNode&&o.parentNode.removeChild(o))}}(this))}e.registerId=function(e){return j(e)};var t=e.prototype;return t.reconstructWithOptions=function(t){return new e(f({},this.options,{},t),this.gs,this.names)},t.allocateGSInstance=function(e){return this.gs[e]=(this.gs[e]||0)+1},t.getTag=function(){return this.tag||(this.tag=(t=this.options,n=t.isServer,r=t.useCSSOMInjection,o=t.target,e=n?new T(o):r?new C(o):new E(o),new O(e)));var e,t,n,r,o},t.hasNameForId=function(e,t){return this.names.has(e)&&this.names.get(e).has(t)},t.registerName=function(e,t){if(j(e),this.names.has(e))this.names.get(e).add(t);else{var n=new Set;n.add(t),this.names.set(e,n)}},t.insertRules=function(e,t,n){this.registerName(e,t),this.getTag().insertRules(j(e),n)},t.clearNames=function(e){this.names.has(e)&&this.names.get(e).clear()},t.clearRules=function(e){this.getTag().clearGroup(j(e)),this.clearNames(e)},t.clearTag=function(){this.tag=void 0},t.toString=function(){return function(e){for(var t=e.getTag(),n=t.length,r="",o=0;o<n;o++){var i=A(o);if(void 0!==i){var a=e.names.get(i),l=t.getGroup(o);if(void 0!==a&&0!==l.length){var u=b+".g"+o+'[id="'+i+'"]',s="";void 0!==a&&a.forEach((function(e){e.length>0&&(s+=e+",")})),r+=""+l+u+'{content:"'+s+'"}/*!sc*/\n'}}}return r}(this)},e}(),$=function(e,t){for(var n=t.length;n;)e=33*e^t.charCodeAt(--n);return e},H=function(e){return $(5381,e)};var V=/^\s*\/\/.*$/gm;function W(e){var t,n,r,o=void 0===e?m:e,i=o.options,l=void 0===i?m:i,u=o.plugins,s=void 0===u?h:u,c=new a.a(l),f=[],d=function(e){function t(t){if(t)try{e(t+"}")}catch(e){}}return function(n,r,o,i,a,l,u,s,c,f){switch(n){case 1:if(0===c&&64===r.charCodeAt(0))return e(r+";"),"";break;case 2:if(0===s)return r+"/*|*/";break;case 3:switch(s){case 102:case 112:return e(o[0]+r),"";default:return r+(0===f?"/*|*/":"")}case-2:r.split("/*|*/}").forEach(t)}}}((function(e){f.push(e)})),p=function(e,r,o){return r>0&&-1!==o.slice(0,r).indexOf(n)&&o.slice(r-n.length,r)!==n?"."+t:e};function v(e,o,i,a){void 0===a&&(a="&");var l=e.replace(V,""),u=o&&i?i+" "+o+" { "+l+" }":l;return t=a,n=o,r=new RegExp("\\"+n+"\\b","g"),c(i||!o?"":o,u)}return c.use([].concat(s,[function(e,t,o){2===e&&o.length&&o[0].lastIndexOf(n)>0&&(o[0]=o[0].replace(r,p))},d,function(e){if(-2===e){var t=f;return f=[],t}}])),v.hash=s.length?s.reduce((function(e,t){return t.name||_(15),$(e,t.name)}),5381).toString():"",v}var q=i.a.createContext(),K=(q.Consumer,i.a.createContext()),G=(K.Consumer,new B),Q=W();function Z(){return Object(o.useContext)(q)||G}function Y(){return Object(o.useContext)(K)||Q}var X=function(){function e(e,t){var n=this;this.inject=function(e){e.hasNameForId(n.id,n.name)||e.insertRules(n.id,n.name,Q.apply(void 0,n.stringifyArgs))},this.toString=function(){return _(12,String(n.name))},this.name=e,this.id="sc-keyframes-"+e,this.stringifyArgs=t}return e.prototype.getName=function(){return this.name},e}(),J=/([A-Z])/g,ee=/^ms-/;function te(e){return e.replace(J,"-$1").toLowerCase().replace(ee,"-ms-")}var ne=function(e){return null==e||!1===e||""===e},re=function e(t,n){var r=[];return Object.keys(t).forEach((function(n){if(!ne(t[n])){if(p(t[n]))return r.push.apply(r,e(t[n],n)),r;if(v(t[n]))return r.push(te(n)+":",t[n],";"),r;r.push(te(n)+": "+(o=n,(null==(i=t[n])||"boolean"==typeof i||""===i?"":"number"!=typeof i||0===i||o in l.a?String(i).trim():i+"px")+";"))}var o,i;return r})),n?[n+" {"].concat(r,["}"]):r};function oe(e,t,n){if(Array.isArray(e)){for(var r,o=[],i=0,a=e.length;i<a;i+=1)""!==(r=oe(e[i],t,n))&&(Array.isArray(r)?o.push.apply(o,r):o.push(r));return o}return ne(e)?"":y(e)?"."+e.styledComponentId:v(e)?"function"!=typeof(l=e)||l.prototype&&l.prototype.isReactComponent||!t?e:oe(e(t),t,n):e instanceof X?n?(e.inject(n),e.getName()):e:p(e)?re(e):e.toString();var l}function ie(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return v(e)||p(e)?oe(d(h,[e].concat(n))):0===n.length&&1===e.length&&"string"==typeof e[0]?e:oe(d(e,n))}var ae=function(e){return"function"==typeof e||"object"==typeof e&&null!==e&&!Array.isArray(e)},le=function(e){return"__proto__"!==e&&"constructor"!==e&&"prototype"!==e};function ue(e,t,n){var r=e[n];ae(t)&&ae(r)?se(r,t):e[n]=t}function se(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];for(var o=0,i=n;o<i.length;o++){var a=i[o];if(ae(a))for(var l in a)le(l)&&ue(e,a[l],l)}return e}var ce=/(a)(d)/gi,fe=function(e){return String.fromCharCode(e+(e>25?39:97))};function de(e){var t,n="";for(t=Math.abs(e);t>52;t=t/52|0)n=fe(t%52)+n;return(fe(t%52)+n).replace(ce,"$1-$2")}function pe(e){for(var t=0;t<e.length;t+=1){var n=e[t];if(v(n)&&!y(n))return!1}return!0}var he=function(){function e(e,t){this.rules=e,this.staticRulesId="",this.isStatic=pe(e),this.componentId=t,this.baseHash=H(t),B.registerId(t)}return e.prototype.generateAndInjectStyles=function(e,t,n){var r=this.componentId;if(this.isStatic&&!n.hash){if(this.staticRulesId&&t.hasNameForId(r,this.staticRulesId))return this.staticRulesId;var o=oe(this.rules,e,t).join(""),i=de($(this.baseHash,o.length)>>>0);if(!t.hasNameForId(r,i)){var a=n(o,"."+i,void 0,r);t.insertRules(r,i,a)}return this.staticRulesId=i,i}for(var l=this.rules.length,u=$(this.baseHash,n.hash),s="",c=0;c<l;c++){var f=this.rules[c];if("string"==typeof f)s+=f;else{var d=oe(f,e,t),p=Array.isArray(d)?d.join(""):d;u=$(u,p+c),s+=p}}var h=de(u>>>0);if(!t.hasNameForId(r,h)){var m=n(s,"."+h,void 0,r);t.insertRules(r,h,m)}return h},e}(),me=(new Set,function(e,t,n){return void 0===n&&(n=m),e.theme!==n.theme&&e.theme||t||n.theme}),ve=/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,ge=/(^-|-$)/g;function ye(e){return e.replace(ve,"-").replace(ge,"")}function be(e){return"string"==typeof e&&!0}var we=function(e){return de(H(e)>>>0)};var xe=i.a.createContext();xe.Consumer;var ke={};function _e(e,t,n){var r=e.attrs,i=e.componentStyle,a=e.defaultProps,l=e.foldedComponentIds,s=e.shouldForwardProp,c=e.styledComponentId,d=e.target;Object(o.useDebugValue)(c);var p=function(e,t,n){void 0===e&&(e=m);var r=f({},t,{theme:e}),o={};return n.forEach((function(e){var t,n,i,a=e;for(t in v(a)&&(a=a(r)),a)r[t]=o[t]="className"===t?(n=o[t],i=a[t],n&&i?n+" "+i:n||i):a[t]})),[r,o]}(me(t,Object(o.useContext)(xe),a)||m,t,r),h=p[0],g=p[1],y=function(e,t,n,r){var i=Z(),a=Y(),l=e.isStatic&&!t?e.generateAndInjectStyles(m,i,a):e.generateAndInjectStyles(n,i,a);return Object(o.useDebugValue)(l),l}(i,r.length>0,h),b=n,w=g.$as||t.$as||g.as||t.as||d,x=be(w),k=g!==t?f({},t,{},g):t,_=s||x&&u.a,S={};for(var C in k)"$"!==C[0]&&"as"!==C&&("forwardedAs"===C?S.as=k[C]:_&&!_(C,u.a)||(S[C]=k[C]));return t.style&&g.style!==t.style&&(S.style=f({},t.style,{},g.style)),S.className=Array.prototype.concat(l,c,y!==c?y:null,t.className,g.className).filter(Boolean).join(" "),S.ref=b,Object(o.createElement)(w,S)}function Se(e,t,n){var r=y(e),o=!be(e),a=t.displayName,l=void 0===a?function(e){return be(e)?"styled."+e:"Styled("+g(e)+")"}(e):a,u=t.componentId,s=void 0===u?function(e,t){var n="string"!=typeof e?"sc":ye(e);ke[n]=(ke[n]||0)+1;var r=n+"-"+we(n+ke[n]);return t?t+"-"+r:r}(t.displayName,t.parentComponentId):u,d=t.attrs,p=void 0===d?h:d,m=t.displayName&&t.componentId?ye(t.displayName)+"-"+t.componentId:t.componentId||s,v=r&&e.attrs?Array.prototype.concat(e.attrs,p).filter(Boolean):p,b=t.shouldForwardProp;r&&e.shouldForwardProp&&(b=b?function(n,r){return e.shouldForwardProp(n,r)&&t.shouldForwardProp(n,r)}:e.shouldForwardProp);var w,x=new he(r?e.componentStyle.rules.concat(n):n,m),k=function(e,t){return _e(w,e,t)};return k.displayName=l,(w=i.a.forwardRef(k)).attrs=v,w.componentStyle=x,w.displayName=l,w.shouldForwardProp=b,w.foldedComponentIds=r?Array.prototype.concat(e.foldedComponentIds,e.styledComponentId):h,w.styledComponentId=m,w.target=r?e.target:e,w.withComponent=function(e){var r=t.componentId,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(t,["componentId"]),i=r&&r+"-"+(be(e)?e:ye(g(e)));return Se(e,f({},o,{attrs:v,componentId:i}),n)},Object.defineProperty(w,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(t){this._foldedDefaultProps=r?se({},e.defaultProps,t):t}}),w.toString=function(){return"."+w.styledComponentId},o&&c()(w,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,self:!0,styledComponentId:!0,target:!0,withComponent:!0}),w}var Ce=function(e){return function e(t,n,o){if(void 0===o&&(o=m),!Object(r.isValidElementType)(n))return _(1,String(n));var i=function(){return t(n,o,ie.apply(void 0,arguments))};return i.withConfig=function(r){return e(t,n,f({},o,{},r))},i.attrs=function(r){return e(t,n,f({},o,{attrs:Array.prototype.concat(o.attrs,r).filter(Boolean)}))},i}(Se,e)};["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(e){Ce[e]=Ce(e)}));t.a=Ce}).call(this,n(37))},function(e,t,n){"use strict";var r=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,o=function(e){var t={};return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}((function(e){return r.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91}));t.a=o},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,l,u=a(e),s=1;s<arguments.length;s++){for(var c in n=Object(arguments[s]))o.call(n,c)&&(u[c]=n[c]);if(r){l=r(n);for(var f=0;f<l.length;f++)i.call(n,l[f])&&(u[l[f]]=n[l[f]])}}return u}},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(7);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(r.isURLSearchParams(t))i=t.toString();else{var a=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),a.push(o(t)+"="+o(e))})))})),i=a.join("&")}if(i){var l=e.indexOf("#");-1!==l&&(e=e.slice(0,l)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";(function(t){var r=n(7),o=n(75),i={"Content-Type":"application/x-www-form-urlencoded"};function a(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var l,u={adapter:(("undefined"!=typeof XMLHttpRequest||void 0!==t&&"[object process]"===Object.prototype.toString.call(t))&&(l=n(38)),l),transformRequest:[function(e,t){return o(t,"Accept"),o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(a(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(a(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};u.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],(function(e){u.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){u.headers[e]=r.merge(i)})),e.exports=u}).call(this,n(37))},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function l(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var u,s=[],c=!1,f=-1;function d(){c&&u&&(c=!1,u.length?s=u.concat(s):f=-1,s.length&&p())}function p(){if(!c){var e=l(d);c=!0;for(var t=s.length;t;){for(u=s,s=[];++f<t;)u&&u[f].run();f=-1,t=s.length}u=null,c=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];s.push(new h(e,t)),1!==s.length||c||l(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";var r=n(7),o=n(76),i=n(34),a=n(78),l=n(81),u=n(82),s=n(39);e.exports=function(e){return new Promise((function(t,c){var f=e.data,d=e.headers;r.isFormData(f)&&delete d["Content-Type"];var p=new XMLHttpRequest;if(e.auth){var h=e.auth.username||"",m=e.auth.password||"";d.Authorization="Basic "+btoa(h+":"+m)}var v=a(e.baseURL,e.url);if(p.open(e.method.toUpperCase(),i(v,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,p.onreadystatechange=function(){if(p&&4===p.readyState&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in p?l(p.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?p.response:p.responseText,status:p.status,statusText:p.statusText,headers:n,config:e,request:p};o(t,c,r),p=null}},p.onabort=function(){p&&(c(s("Request aborted",e,"ECONNABORTED",p)),p=null)},p.onerror=function(){c(s("Network Error",e,null,p)),p=null},p.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),c(s(t,e,"ECONNABORTED",p)),p=null},r.isStandardBrowserEnv()){var g=n(83),y=(e.withCredentials||u(v))&&e.xsrfCookieName?g.read(e.xsrfCookieName):void 0;y&&(d[e.xsrfHeaderName]=y)}if("setRequestHeader"in p&&r.forEach(d,(function(e,t){void 0===f&&"content-type"===t.toLowerCase()?delete d[t]:p.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(p.withCredentials=!!e.withCredentials),e.responseType)try{p.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&p.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){p&&(p.abort(),c(e),p=null)})),void 0===f&&(f=null),p.send(f)}))}},function(e,t,n){"use strict";var r=n(77);e.exports=function(e,t,n,o,i){var a=new Error(e);return r(a,t,n,o,i)}},function(e,t,n){"use strict";var r=n(7);e.exports=function(e,t){t=t||{};var n={},o=["url","method","params","data"],i=["headers","auth","proxy"],a=["baseURL","url","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"];r.forEach(o,(function(e){void 0!==t[e]&&(n[e]=t[e])})),r.forEach(i,(function(o){r.isObject(t[o])?n[o]=r.deepMerge(e[o],t[o]):void 0!==t[o]?n[o]=t[o]:r.isObject(e[o])?n[o]=r.deepMerge(e[o]):void 0!==e[o]&&(n[o]=e[o])})),r.forEach(a,(function(r){void 0!==t[r]?n[r]=t[r]:void 0!==e[r]&&(n[r]=e[r])}));var l=o.concat(i).concat(a),u=Object.keys(t).filter((function(e){return-1===l.indexOf(e)}));return r.forEach(u,(function(r){void 0!==t[r]?n[r]=t[r]:void 0!==e[r]&&(n[r]=e[r])})),n}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){"use strict";t.__esModule=!0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=n(0),i=s(o),a=s(n(4)),l=s(n(43)),u=s(n(44));function s(e){return e&&e.__esModule?e:{default:e}}var c={width:"100%",height:"100%",left:0,top:0,margin:0,padding:0,position:"absolute"},f={width:0,height:0,left:0,top:0,backgroundColor:"transparent",position:"absolute"},d=function(e){function t(n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,n));return o._getState=function(){return{children:o.props.dispatcher.getChildren(),updateCounter:o.props.dispatcher.getUpdateCounter()}},o._onChangeHandler=function(){if(o.dimensionsCache_){var e=(o.state.children||[]).length,t=o._getState();o.setState(t,(function(){return(t.children||[]).length!==e&&o._onMouseChangeHandler()}))}},o._onChildClick=function(){if(o.props.onChildClick&&o.hoverChildProps_){var e=o.hoverKey_,t=o.hoverChildProps_;o.props.onChildClick(e,t)}},o._onChildMouseDown=function(){if(o.props.onChildMouseDown&&o.hoverChildProps_){var e=o.hoverKey_,t=o.hoverChildProps_;o.props.onChildMouseDown(e,t)}},o._onChildMouseEnter=function(e,t){o.dimensionsCache_&&(o.props.onChildMouseEnter&&o.props.onChildMouseEnter(e,t),o.hoverChildProps_=t,o.hoverKey_=e,o.setState({hoverKey:e}))},o._onChildMouseLeave=function(){if(o.dimensionsCache_){var e=o.hoverKey_,t=o.hoverChildProps_;null!=e&&(o.props.onChildMouseLeave&&o.props.onChildMouseLeave(e,t),o.hoverKey_=null,o.hoverChildProps_=null,o.setState({hoverKey:null}))}},o._onMouseAllow=function(e){e||o._onChildMouseLeave(),o.allowMouse_=e},o._onMouseChangeHandler=function(){o.allowMouse_&&o._onMouseChangeHandlerRaf()},o._onMouseChangeHandlerRaf=function(){if(o.dimensionsCache_){var e=o.props.dispatcher.getMousePosition();if(e){var t=[],n=o.props.getHoverDistance();if(i.default.Children.forEach(o.state.children,(function(r,i){if(r&&(void 0!==r.props.latLng||void 0!==r.props.lat||void 0!==r.props.lng)){var a=void 0!==r.key&&null!==r.key?r.key:i,l=o.props.distanceToMouse(o.dimensionsCache_[a],e,r.props);l<n&&t.push({key:a,dist:l,props:r.props})}})),t.length){t.sort((function(e,t){return e.dist-t.dist}));var r=t[0].key,a=t[0].props;o.hoverKey_!==r&&(o._onChildMouseLeave(),o._onChildMouseEnter(r,a))}else o._onChildMouseLeave()}else o._onChildMouseLeave()}},o._getDimensions=function(e){var t=e;return o.dimensionsCache_[t]},o.props.dispatcher.on("kON_CHANGE",o._onChangeHandler),o.props.dispatcher.on("kON_MOUSE_POSITION_CHANGE",o._onMouseChangeHandler),o.props.dispatcher.on("kON_CLICK",o._onChildClick),o.props.dispatcher.on("kON_MDOWN",o._onChildMouseDown),o.dimensionsCache_={},o.hoverKey_=null,o.hoverChildProps_=null,o.allowMouse_=!0,o.state=r({},o._getState(),{hoverKey:null}),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.shouldComponentUpdate=function(e,t){return!0===this.props.experimental?!(0,u.default)(this.props,e)||!(0,u.default)((0,l.default)(this.state,["hoverKey"]),(0,l.default)(t,["hoverKey"])):!(0,u.default)(this.props,e)||!(0,u.default)(this.state,t)},t.prototype.componentWillUnmount=function(){this.props.dispatcher.removeListener("kON_CHANGE",this._onChangeHandler),this.props.dispatcher.removeListener("kON_MOUSE_POSITION_CHANGE",this._onMouseChangeHandler),this.props.dispatcher.removeListener("kON_CLICK",this._onChildClick),this.props.dispatcher.removeListener("kON_MDOWN",this._onChildMouseDown),this.dimensionsCache_=null},t.prototype.render=function(){var e=this,t=this.props.style||c;this.dimensionsCache_={};var n=i.default.Children.map(this.state.children,(function(t,n){if(t){if(void 0===t.props.latLng&&void 0===t.props.lat&&void 0===t.props.lng)return i.default.cloneElement(t,{$geoService:e.props.geoService,$onMouseAllow:e._onMouseAllow,$prerender:e.props.prerender});var o=void 0!==t.props.latLng?t.props.latLng:{lat:t.props.lat,lng:t.props.lng},a=e.props.insideMapPanes?e.props.geoService.fromLatLngToDivPixel(o):e.props.geoService.fromLatLngToCenterPixel(o),l={left:a.x,top:a.y};if(void 0!==t.props.seLatLng||void 0!==t.props.seLat&&void 0!==t.props.seLng){var u=void 0!==t.props.seLatLng?t.props.seLatLng:{lat:t.props.seLat,lng:t.props.seLng},s=e.props.insideMapPanes?e.props.geoService.fromLatLngToDivPixel(u):e.props.geoService.fromLatLngToCenterPixel(u);l.width=s.x-a.x,l.height=s.y-a.y}var c=e.props.geoService.fromLatLngToContainerPixel(o),d=void 0!==t.key&&null!==t.key?t.key:n;return e.dimensionsCache_[d]=r({x:c.x,y:c.y},o),i.default.createElement("div",{key:d,style:r({},f,l),className:t.props.$markerHolderClassName},i.default.cloneElement(t,{$hover:d===e.state.hoverKey,$getDimensions:e._getDimensions,$dimensionKey:d,$geoService:e.props.geoService,$onMouseAllow:e._onMouseAllow,$prerender:e.props.prerender}))}}));return i.default.createElement("div",{style:t},n)},t}(o.Component);d.propTypes={geoService:a.default.any,style:a.default.any,distanceToMouse:a.default.func,dispatcher:a.default.any,onChildClick:a.default.func,onChildMouseDown:a.default.func,onChildMouseLeave:a.default.func,onChildMouseEnter:a.default.func,getHoverDistance:a.default.func,insideMapPanes:a.default.bool,prerender:a.default.bool},d.defaultProps={insideMapPanes:!1,prerender:!1},t.default=d},function(e,t,n){"use strict";t.__esModule=!0;t.default=function(e,t){for(var n=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,[]),r=0;r<t.length;r++){var o=t[r];o in n&&delete n[o]}return n}},function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=Object.prototype.hasOwnProperty;function i(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}e.exports=function(e,t){if(i(e,t))return!0;if("object"!==(void 0===e?"undefined":r(e))||null===e||"object"!==(void 0===t?"undefined":r(t))||null===t)return!1;var n=Object.keys(e),a=Object.keys(t);if(n.length!==a.length)return!1;for(var l=0;l<n.length;l++)if(!o.call(t,n[l])||!i(e[n[l]],t[n[l]]))return!1;return!0}},function(e,t,n){"use strict";function r(e,t){this.x=e,this.y=t}e.exports=r,r.prototype={clone:function(){return new r(this.x,this.y)},add:function(e){return this.clone()._add(e)},sub:function(e){return this.clone()._sub(e)},multByPoint:function(e){return this.clone()._multByPoint(e)},divByPoint:function(e){return this.clone()._divByPoint(e)},mult:function(e){return this.clone()._mult(e)},div:function(e){return this.clone()._div(e)},rotate:function(e){return this.clone()._rotate(e)},rotateAround:function(e,t){return this.clone()._rotateAround(e,t)},matMult:function(e){return this.clone()._matMult(e)},unit:function(){return this.clone()._unit()},perp:function(){return this.clone()._perp()},round:function(){return this.clone()._round()},mag:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},equals:function(e){return this.x===e.x&&this.y===e.y},dist:function(e){return Math.sqrt(this.distSqr(e))},distSqr:function(e){var t=e.x-this.x,n=e.y-this.y;return t*t+n*n},angle:function(){return Math.atan2(this.y,this.x)},angleTo:function(e){return Math.atan2(this.y-e.y,this.x-e.x)},angleWith:function(e){return this.angleWithSep(e.x,e.y)},angleWithSep:function(e,t){return Math.atan2(this.x*t-this.y*e,this.x*e+this.y*t)},_matMult:function(e){var t=e[0]*this.x+e[1]*this.y,n=e[2]*this.x+e[3]*this.y;return this.x=t,this.y=n,this},_add:function(e){return this.x+=e.x,this.y+=e.y,this},_sub:function(e){return this.x-=e.x,this.y-=e.y,this},_mult:function(e){return this.x*=e,this.y*=e,this},_div:function(e){return this.x/=e,this.y/=e,this},_multByPoint:function(e){return this.x*=e.x,this.y*=e.y,this},_divByPoint:function(e){return this.x/=e.x,this.y/=e.y,this},_unit:function(){return this._div(this.mag()),this},_perp:function(){var e=this.y;return this.y=this.x,this.x=-e,this},_rotate:function(e){var t=Math.cos(e),n=Math.sin(e),r=t*this.x-n*this.y,o=n*this.x+t*this.y;return this.x=r,this.y=o,this},_rotateAround:function(e,t){var n=Math.cos(e),r=Math.sin(e),o=t.x+n*(this.x-t.x)-r*(this.y-t.y),i=t.y+r*(this.x-t.x)+n*(this.y-t.y);return this.x=o,this.y=i,this},_round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}},r.convert=function(e){return e instanceof r?e:Array.isArray(e)?new r(e[0],e[1]):e}},function(e,t,n){"use strict";t.__esModule=!0;var r=n(47);var o=function(){function e(t,n){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),isNaN(t)||isNaN(n))throw new Error("Invalid LatLng object: ("+t+", "+n+")");this.lat=+t,this.lng=+n}return e.prototype.wrap=function(){return new e(this.lat,(0,r.wrap)(this.lng,-180,180))},e}();o.convert=function(e){return e instanceof o?e:Array.isArray(e)?new o(e[0],e[1]):"lng"in e&&"lat"in e?new o(e.lat,e.lng):e},t.default=o},function(e,t,n){"use strict";t.__esModule=!0,t.wrap=function(e,t,n){var r=n-t;return e===n?e:((e-t)%r+r)%r+t}},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t,n,r){e.addEventListener(t,n,function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});window.addEventListener("test",t,t),window.removeEventListener("test",t,t)}catch(t){e=!1}return e}()?{capture:r,passive:!0}:r)}},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r,o=n(86),i=(r=o)&&r.__esModule?r:{default:r};t.default=i.default},function(e,t){e.exports=function(e,t,n,r){var o=n?n.call(r,e,t):void 0;if(void 0!==o)return!!o;if(e===t)return!0;if("object"!=typeof e||!e||"object"!=typeof t||!t)return!1;var i=Object.keys(e),a=Object.keys(t);if(i.length!==a.length)return!1;for(var l=Object.prototype.hasOwnProperty.bind(t),u=0;u<i.length;u++){var s=i[u];if(!l(s))return!1;var c=e[s],f=t[s];if(!1===(o=n?n.call(r,c,f,s):void 0)||void 0===o&&c!==f)return!1}return!0}},function(e,t,n){"use strict";t.a=function(e){function t(e,t,r){var o=t.trim().split(h);t=o;var i=o.length,a=e.length;switch(a){case 0:case 1:var l=0;for(e=0===a?"":e[0]+" ";l<i;++l)t[l]=n(e,t[l],r).trim();break;default:var u=l=0;for(t=[];l<i;++l)for(var s=0;s<a;++s)t[u++]=n(e[s]+" ",o[l],r).trim()}return t}function n(e,t,n){var r=t.charCodeAt(0);switch(33>r&&(r=(t=t.trim()).charCodeAt(0)),r){case 38:return t.replace(m,"$1"+e.trim());case 58:return e.trim()+t.replace(m,"$1"+e.trim());default:if(0<1*n&&0<t.indexOf("\f"))return t.replace(m,(58===e.charCodeAt(0)?"":"$1")+e.trim())}return e+t}function r(e,t,n,i){var a=e+";",l=2*t+3*n+4*i;if(944===l){e=a.indexOf(":",9)+1;var u=a.substring(e,a.length-1).trim();return u=a.substring(0,e).trim()+u+";",1===P||2===P&&o(u,1)?"-webkit-"+u+u:u}if(0===P||2===P&&!o(a,1))return a;switch(l){case 1015:return 97===a.charCodeAt(10)?"-webkit-"+a+a:a;case 951:return 116===a.charCodeAt(3)?"-webkit-"+a+a:a;case 963:return 110===a.charCodeAt(5)?"-webkit-"+a+a:a;case 1009:if(100!==a.charCodeAt(4))break;case 969:case 942:return"-webkit-"+a+a;case 978:return"-webkit-"+a+"-moz-"+a+a;case 1019:case 983:return"-webkit-"+a+"-moz-"+a+"-ms-"+a+a;case 883:if(45===a.charCodeAt(8))return"-webkit-"+a+a;if(0<a.indexOf("image-set(",11))return a.replace(C,"$1-webkit-$2")+a;break;case 932:if(45===a.charCodeAt(4))switch(a.charCodeAt(5)){case 103:return"-webkit-box-"+a.replace("-grow","")+"-webkit-"+a+"-ms-"+a.replace("grow","positive")+a;case 115:return"-webkit-"+a+"-ms-"+a.replace("shrink","negative")+a;case 98:return"-webkit-"+a+"-ms-"+a.replace("basis","preferred-size")+a}return"-webkit-"+a+"-ms-"+a+a;case 964:return"-webkit-"+a+"-ms-flex-"+a+a;case 1023:if(99!==a.charCodeAt(8))break;return"-webkit-box-pack"+(u=a.substring(a.indexOf(":",15)).replace("flex-","").replace("space-between","justify"))+"-webkit-"+a+"-ms-flex-pack"+u+a;case 1005:return d.test(a)?a.replace(f,":-webkit-")+a.replace(f,":-moz-")+a:a;case 1e3:switch(t=(u=a.substring(13).trim()).indexOf("-")+1,u.charCodeAt(0)+u.charCodeAt(t)){case 226:u=a.replace(b,"tb");break;case 232:u=a.replace(b,"tb-rl");break;case 220:u=a.replace(b,"lr");break;default:return a}return"-webkit-"+a+"-ms-"+u+a;case 1017:if(-1===a.indexOf("sticky",9))break;case 975:switch(t=(a=e).length-10,l=(u=(33===a.charCodeAt(t)?a.substring(0,t):a).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|u.charCodeAt(7))){case 203:if(111>u.charCodeAt(8))break;case 115:a=a.replace(u,"-webkit-"+u)+";"+a;break;case 207:case 102:a=a.replace(u,"-webkit-"+(102<l?"inline-":"")+"box")+";"+a.replace(u,"-webkit-"+u)+";"+a.replace(u,"-ms-"+u+"box")+";"+a}return a+";";case 938:if(45===a.charCodeAt(5))switch(a.charCodeAt(6)){case 105:return u=a.replace("-items",""),"-webkit-"+a+"-webkit-box-"+u+"-ms-flex-"+u+a;case 115:return"-webkit-"+a+"-ms-flex-item-"+a.replace(k,"")+a;default:return"-webkit-"+a+"-ms-flex-line-pack"+a.replace("align-content","").replace(k,"")+a}break;case 973:case 989:if(45!==a.charCodeAt(3)||122===a.charCodeAt(4))break;case 931:case 953:if(!0===S.test(e))return 115===(u=e.substring(e.indexOf(":")+1)).charCodeAt(0)?r(e.replace("stretch","fill-available"),t,n,i).replace(":fill-available",":stretch"):a.replace(u,"-webkit-"+u)+a.replace(u,"-moz-"+u.replace("fill-",""))+a;break;case 962:if(a="-webkit-"+a+(102===a.charCodeAt(5)?"-ms-"+a:"")+a,211===n+i&&105===a.charCodeAt(13)&&0<a.indexOf("transform",10))return a.substring(0,a.indexOf(";",27)+1).replace(p,"$1-webkit-$2")+a}return a}function o(e,t){var n=e.indexOf(1===t?":":"{"),r=e.substring(0,3!==t?n:10);return n=e.substring(n+1,e.length-1),A(2!==t?r:r.replace(_,"$1"),n,t)}function i(e,t){var n=r(t,t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2));return n!==t+";"?n.replace(x," or ($1)").substring(4):"("+t+")"}function a(e,t,n,r,o,i,a,l,s,c){for(var f,d=0,p=t;d<j;++d)switch(f=R[d].call(u,e,p,n,r,o,i,a,l,s,c)){case void 0:case!1:case!0:case null:break;default:p=f}if(p!==t)return p}function l(e){return void 0!==(e=e.prefix)&&(A=null,e?"function"!=typeof e?P=1:(P=2,A=e):P=0),l}function u(e,n){var l=e;if(33>l.charCodeAt(0)&&(l=l.trim()),l=[l],0<j){var u=a(-1,n,l,l,T,E,0,0,0,0);void 0!==u&&"string"==typeof u&&(n=u)}var f=function e(n,l,u,f,d){for(var p,h,m,b,x,k=0,_=0,S=0,C=0,R=0,A=0,z=m=p=0,L=0,I=0,D=0,F=0,U=u.length,B=U-1,$="",H="",V="",W="";L<U;){if(h=u.charCodeAt(L),L===B&&0!==_+C+S+k&&(0!==_&&(h=47===_?10:47),C=S=k=0,U++,B++),0===_+C+S+k){if(L===B&&(0<I&&($=$.replace(c,"")),0<$.trim().length)){switch(h){case 32:case 9:case 59:case 13:case 10:break;default:$+=u.charAt(L)}h=59}switch(h){case 123:for(p=($=$.trim()).charCodeAt(0),m=1,F=++L;L<U;){switch(h=u.charCodeAt(L)){case 123:m++;break;case 125:m--;break;case 47:switch(h=u.charCodeAt(L+1)){case 42:case 47:e:{for(z=L+1;z<B;++z)switch(u.charCodeAt(z)){case 47:if(42===h&&42===u.charCodeAt(z-1)&&L+2!==z){L=z+1;break e}break;case 10:if(47===h){L=z+1;break e}}L=z}}break;case 91:h++;case 40:h++;case 34:case 39:for(;L++<B&&u.charCodeAt(L)!==h;);}if(0===m)break;L++}switch(m=u.substring(F,L),0===p&&(p=($=$.replace(s,"").trim()).charCodeAt(0)),p){case 64:switch(0<I&&($=$.replace(c,"")),h=$.charCodeAt(1)){case 100:case 109:case 115:case 45:I=l;break;default:I=M}if(F=(m=e(l,I,m,h,d+1)).length,0<j&&(x=a(3,m,I=t(M,$,D),l,T,E,F,h,d,f),$=I.join(""),void 0!==x&&0===(F=(m=x.trim()).length)&&(h=0,m="")),0<F)switch(h){case 115:$=$.replace(w,i);case 100:case 109:case 45:m=$+"{"+m+"}";break;case 107:m=($=$.replace(v,"$1 $2"))+"{"+m+"}",m=1===P||2===P&&o("@"+m,3)?"@-webkit-"+m+"@"+m:"@"+m;break;default:m=$+m,112===f&&(H+=m,m="")}else m="";break;default:m=e(l,t(l,$,D),m,f,d+1)}V+=m,m=D=I=z=p=0,$="",h=u.charCodeAt(++L);break;case 125:case 59:if(1<(F=($=(0<I?$.replace(c,""):$).trim()).length))switch(0===z&&(p=$.charCodeAt(0),45===p||96<p&&123>p)&&(F=($=$.replace(" ",":")).length),0<j&&void 0!==(x=a(1,$,l,n,T,E,H.length,f,d,f))&&0===(F=($=x.trim()).length)&&($="\0\0"),p=$.charCodeAt(0),h=$.charCodeAt(1),p){case 0:break;case 64:if(105===h||99===h){W+=$+u.charAt(L);break}default:58!==$.charCodeAt(F-1)&&(H+=r($,p,h,$.charCodeAt(2)))}D=I=z=p=0,$="",h=u.charCodeAt(++L)}}switch(h){case 13:case 10:47===_?_=0:0===1+p&&107!==f&&0<$.length&&(I=1,$+="\0"),0<j*N&&a(0,$,l,n,T,E,H.length,f,d,f),E=1,T++;break;case 59:case 125:if(0===_+C+S+k){E++;break}default:switch(E++,b=u.charAt(L),h){case 9:case 32:if(0===C+k+_)switch(R){case 44:case 58:case 9:case 32:b="";break;default:32!==h&&(b=" ")}break;case 0:b="\\0";break;case 12:b="\\f";break;case 11:b="\\v";break;case 38:0===C+_+k&&(I=D=1,b="\f"+b);break;case 108:if(0===C+_+k+O&&0<z)switch(L-z){case 2:112===R&&58===u.charCodeAt(L-3)&&(O=R);case 8:111===A&&(O=A)}break;case 58:0===C+_+k&&(z=L);break;case 44:0===_+S+C+k&&(I=1,b+="\r");break;case 34:case 39:0===_&&(C=C===h?0:0===C?h:C);break;case 91:0===C+_+S&&k++;break;case 93:0===C+_+S&&k--;break;case 41:0===C+_+k&&S--;break;case 40:if(0===C+_+k){if(0===p)switch(2*R+3*A){case 533:break;default:p=1}S++}break;case 64:0===_+S+C+k+z+m&&(m=1);break;case 42:case 47:if(!(0<C+k+S))switch(_){case 0:switch(2*h+3*u.charCodeAt(L+1)){case 235:_=47;break;case 220:F=L,_=42}break;case 42:47===h&&42===R&&F+2!==L&&(33===u.charCodeAt(F+2)&&(H+=u.substring(F,L+1)),b="",_=0)}}0===_&&($+=b)}A=R,R=h,L++}if(0<(F=H.length)){if(I=l,0<j&&(void 0!==(x=a(2,H,I,n,T,E,F,f,d,f))&&0===(H=x).length))return W+H+V;if(H=I.join(",")+"{"+H+"}",0!=P*O){switch(2!==P||o(H,2)||(O=0),O){case 111:H=H.replace(y,":-moz-$1")+H;break;case 112:H=H.replace(g,"::-webkit-input-$1")+H.replace(g,"::-moz-$1")+H.replace(g,":-ms-input-$1")+H}O=0}}return W+H+V}(M,l,n,0,0);return 0<j&&(void 0!==(u=a(-2,f,l,l,T,E,f.length,0,0,0))&&(f=u)),"",O=0,E=T=1,f}var s=/^\0+/g,c=/[\0\r\f]/g,f=/: */g,d=/zoo|gra/,p=/([,: ])(transform)/g,h=/,\r+?/g,m=/([\t\r\n ])*\f?&/g,v=/@(k\w+)\s*(\S*)\s*/,g=/::(place)/g,y=/:(read-only)/g,b=/[svh]\w+-[tblr]{2}/,w=/\(\s*(.*)\s*\)/g,x=/([\s\S]*?);/g,k=/-self|flex-/g,_=/[^]*?(:[rp][el]a[\w-]+)[^]*/,S=/stretch|:\s*\w+\-(?:conte|avail)/,C=/([^-])(image-set\()/,E=1,T=1,O=0,P=1,M=[],R=[],j=0,A=null,N=0;return u.use=function e(t){switch(t){case void 0:case null:j=R.length=0;break;default:if("function"==typeof t)R[j++]=t;else if("object"==typeof t)for(var n=0,r=t.length;n<r;++n)e(t[n]);else N=0|!!t}return e},u.set=l,void 0!==e&&l(e),u}},function(e,t,n){"use strict";t.a={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1}},function(e,t,n){"use strict";var r=n(24);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(0)),i=(0,r(n(28)).default)(o.default.createElement("path",{d:"M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"}),"Favorite");t.default=i},function(e,t,n){"use strict";var r=n(24);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(0)),i=(0,r(n(28)).default)(o.default.createElement("path",{d:"M22 4h-2c-.55 0-1 .45-1 1v9c0 .55.45 1 1 1h2V4zM2.17 11.12c-.11.25-.17.52-.17.8V13c0 1.1.9 2 2 2h5.5l-.92 4.65c-.05.22-.02.46.08.66.23.45.52.86.88 1.22L10 22l6.41-6.41c.38-.38.59-.89.59-1.42V6.34C17 5.05 15.95 4 14.66 4h-8.1c-.71 0-1.36.37-1.72.97l-2.67 6.15z"}),"ThumbDownAlt");t.default=i},function(e,t,n){"use strict";var r=n(24);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(0)),i=(0,r(n(28)).default)(o.default.createElement("path",{d:"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zm2.46-7.12l1.41-1.41L12 12.59l2.12-2.12 1.41 1.41L13.41 14l2.12 2.12-1.41 1.41L12 15.41l-2.12 2.12-1.41-1.41L10.59 14l-2.13-2.12zM15.5 4l-1-1h-5l-1 1H5v2h14V4z"}),"DeleteForever");t.default=i},function(e,t,n){"use strict";function r(e){for(var t="https://material-ui.com/production-error/?code="+e,n=1;n<arguments.length;n+=1)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified Material-UI error #"+e+"; visit "+t+" for the full message."}n.d(t,"a",(function(){return r}))},,,function(e,t){function n(t,r){return e.exports=n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},n(t,r)}e.exports=n},function(e,t){function n(t){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?e.exports=n=function(e){return typeof e}:e.exports=n=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(t)}e.exports=n},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(32),o="function"==typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,a=o?Symbol.for("react.portal"):60106,l=o?Symbol.for("react.fragment"):60107,u=o?Symbol.for("react.strict_mode"):60108,s=o?Symbol.for("react.profiler"):60114,c=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,d=o?Symbol.for("react.forward_ref"):60112,p=o?Symbol.for("react.suspense"):60113,h=o?Symbol.for("react.memo"):60115,m=o?Symbol.for("react.lazy"):60116,v="function"==typeof Symbol&&Symbol.iterator;function g(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var y={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},b={};function w(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||y}function x(){}function k(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||y}w.prototype.isReactComponent={},w.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(g(85));this.updater.enqueueSetState(this,e,t,"setState")},w.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},x.prototype=w.prototype;var _=k.prototype=new x;_.constructor=k,r(_,w.prototype),_.isPureReactComponent=!0;var S={current:null},C=Object.prototype.hasOwnProperty,E={key:!0,ref:!0,__self:!0,__source:!0};function T(e,t,n){var r,o={},a=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(a=""+t.key),t)C.call(t,r)&&!E.hasOwnProperty(r)&&(o[r]=t[r]);var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];o.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===o[r]&&(o[r]=u[r]);return{$$typeof:i,type:e,key:a,ref:l,props:o,_owner:S.current}}function O(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var P=/\/+/g,M=[];function R(e,t,n,r){if(M.length){var o=M.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function j(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>M.length&&M.push(e)}function A(e,t,n){return null==e?0:function e(t,n,r,o){var l=typeof t;"undefined"!==l&&"boolean"!==l||(t=null);var u=!1;if(null===t)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(t.$$typeof){case i:case a:u=!0}}if(u)return r(o,t,""===n?"."+N(t,0):n),1;if(u=0,n=""===n?".":n+":",Array.isArray(t))for(var s=0;s<t.length;s++){var c=n+N(l=t[s],s);u+=e(l,c,r,o)}else if(null===t||"object"!=typeof t?c=null:c="function"==typeof(c=v&&t[v]||t["@@iterator"])?c:null,"function"==typeof c)for(t=c.call(t),s=0;!(l=t.next()).done;)u+=e(l=l.value,c=n+N(l,s++),r,o);else if("object"===l)throw r=""+t,Error(g(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return u}(e,"",t,n)}function N(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function z(e,t){e.func.call(e.context,t,e.count++)}function L(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?I(e,r,n,(function(e){return e})):null!=e&&(O(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(P,"$&/")+"/")+n)),r.push(e))}function I(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(P,"$&/")+"/"),A(e,L,t=R(t,i,r,o)),j(t)}var D={current:null};function F(){var e=D.current;if(null===e)throw Error(g(321));return e}var U={ReactCurrentDispatcher:D,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:S,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:function(e,t,n){if(null==e)return e;var r=[];return I(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;A(e,z,t=R(null,null,t,n)),j(t)},count:function(e){return A(e,(function(){return null}),null)},toArray:function(e){var t=[];return I(e,t,null,(function(e){return e})),t},only:function(e){if(!O(e))throw Error(g(143));return e}},t.Component=w,t.Fragment=l,t.Profiler=s,t.PureComponent=k,t.StrictMode=u,t.Suspense=p,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=U,t.cloneElement=function(e,t,n){if(null==e)throw Error(g(267,e));var o=r({},e.props),a=e.key,l=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,u=S.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)C.call(t,c)&&!E.hasOwnProperty(c)&&(o[c]=void 0===t[c]&&void 0!==s?s[c]:t[c])}var c=arguments.length-2;if(1===c)o.children=n;else if(1<c){s=Array(c);for(var f=0;f<c;f++)s[f]=arguments[f+2];o.children=s}return{$$typeof:i,type:e.type,key:a,ref:l,props:o,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:c,_context:e},e.Consumer=e},t.createElement=T,t.createFactory=function(e){var t=T.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:d,render:e}},t.isValidElement=O,t.lazy=function(e){return{$$typeof:m,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:h,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return F().useCallback(e,t)},t.useContext=function(e,t){return F().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return F().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return F().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return F().useLayoutEffect(e,t)},t.useMemo=function(e,t){return F().useMemo(e,t)},t.useReducer=function(e,t,n){return F().useReducer(e,t,n)},t.useRef=function(e){return F().useRef(e)},t.useState=function(e){return F().useState(e)},t.version="16.13.1"},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),o=n(32),i=n(63);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));function l(e,t,n,r,o,i,a,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var u=!1,s=null,c=!1,f=null,d={onError:function(e){u=!0,s=e}};function p(e,t,n,r,o,i,a,c,f){u=!1,s=null,l.apply(d,arguments)}var h=null,m=null,v=null;function g(e,t,n){var r=e.type||"unknown-event";e.currentTarget=v(n),function(e,t,n,r,o,i,l,d,h){if(p.apply(this,arguments),u){if(!u)throw Error(a(198));var m=s;u=!1,s=null,c||(c=!0,f=m)}}(r,t,void 0,e),e.currentTarget=null}var y=null,b={};function w(){if(y)for(var e in b){var t=b[e],n=y.indexOf(e);if(!(-1<n))throw Error(a(96,e));if(!k[n]){if(!t.extractEvents)throw Error(a(97,e));for(var r in k[n]=t,n=t.eventTypes){var o=void 0,i=n[r],l=t,u=r;if(_.hasOwnProperty(u))throw Error(a(99,u));_[u]=i;var s=i.phasedRegistrationNames;if(s){for(o in s)s.hasOwnProperty(o)&&x(s[o],l,u);o=!0}else i.registrationName?(x(i.registrationName,l,u),o=!0):o=!1;if(!o)throw Error(a(98,r,e))}}}}function x(e,t,n){if(S[e])throw Error(a(100,e));S[e]=t,C[e]=t.eventTypes[n].dependencies}var k=[],_={},S={},C={};function E(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!b.hasOwnProperty(t)||b[t]!==r){if(b[t])throw Error(a(102,t));b[t]=r,n=!0}}n&&w()}var T=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),O=null,P=null,M=null;function R(e){if(e=m(e)){if("function"!=typeof O)throw Error(a(280));var t=e.stateNode;t&&(t=h(t),O(e.stateNode,e.type,t))}}function j(e){P?M?M.push(e):M=[e]:P=e}function A(){if(P){var e=P,t=M;if(M=P=null,R(e),t)for(e=0;e<t.length;e++)R(t[e])}}function N(e,t){return e(t)}function z(e,t,n,r,o){return e(t,n,r,o)}function L(){}var I=N,D=!1,F=!1;function U(){null===P&&null===M||(L(),A())}function B(e,t,n){if(F)return e(t,n);F=!0;try{return I(e,t,n)}finally{F=!1,U()}}var $=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,H=Object.prototype.hasOwnProperty,V={},W={};function q(e,t,n,r,o,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i}var K={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){K[e]=new q(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];K[t]=new q(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){K[e]=new q(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){K[e]=new q(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){K[e]=new q(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){K[e]=new q(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){K[e]=new q(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){K[e]=new q(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){K[e]=new q(e,5,!1,e.toLowerCase(),null,!1)}));var G=/[\-:]([a-z])/g;function Q(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(G,Q);K[t]=new q(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(G,Q);K[t]=new q(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(G,Q);K[t]=new q(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){K[e]=new q(e,1,!1,e.toLowerCase(),null,!1)})),K.xlinkHref=new q("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){K[e]=new q(e,1,!1,e.toLowerCase(),null,!0)}));var Z=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function Y(e,t,n,r){var o=K.hasOwnProperty(t)?K[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!H.call(W,e)||!H.call(V,e)&&($.test(e)?W[e]=!0:(V[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}Z.hasOwnProperty("ReactCurrentDispatcher")||(Z.ReactCurrentDispatcher={current:null}),Z.hasOwnProperty("ReactCurrentBatchConfig")||(Z.ReactCurrentBatchConfig={suspense:null});var X=/^(.*)[\\\/]/,J="function"==typeof Symbol&&Symbol.for,ee=J?Symbol.for("react.element"):60103,te=J?Symbol.for("react.portal"):60106,ne=J?Symbol.for("react.fragment"):60107,re=J?Symbol.for("react.strict_mode"):60108,oe=J?Symbol.for("react.profiler"):60114,ie=J?Symbol.for("react.provider"):60109,ae=J?Symbol.for("react.context"):60110,le=J?Symbol.for("react.concurrent_mode"):60111,ue=J?Symbol.for("react.forward_ref"):60112,se=J?Symbol.for("react.suspense"):60113,ce=J?Symbol.for("react.suspense_list"):60120,fe=J?Symbol.for("react.memo"):60115,de=J?Symbol.for("react.lazy"):60116,pe=J?Symbol.for("react.block"):60121,he="function"==typeof Symbol&&Symbol.iterator;function me(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=he&&e[he]||e["@@iterator"])?e:null}function ve(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case ne:return"Fragment";case te:return"Portal";case oe:return"Profiler";case re:return"StrictMode";case se:return"Suspense";case ce:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case ae:return"Context.Consumer";case ie:return"Context.Provider";case ue:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case fe:return ve(e.type);case pe:return ve(e.render);case de:if(e=1===e._status?e._result:null)return ve(e)}return null}function ge(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,o=e._debugSource,i=ve(e.type);n=null,r&&(n=ve(r.type)),r=i,i="",o?i=" (at "+o.fileName.replace(X,"")+":"+o.lineNumber+")":n&&(i=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+i}t+=n,e=e.return}while(e);return t}function ye(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function be(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function we(e){e._valueTracker||(e._valueTracker=function(e){var t=be(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function xe(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=be(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function ke(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function _e(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=ye(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Se(e,t){null!=(t=t.checked)&&Y(e,"checked",t,!1)}function Ce(e,t){Se(e,t);var n=ye(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Te(e,t.type,n):t.hasOwnProperty("defaultValue")&&Te(e,t.type,ye(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Ee(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Te(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Oe(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Pe(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+ye(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Me(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Re(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:ye(n)}}function je(e,t){var n=ye(t.value),r=ye(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Ae(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var Ne="http://www.w3.org/1999/xhtml",ze="http://www.w3.org/2000/svg";function Le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Ie(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var De,Fe=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==ze||"innerHTML"in e)e.innerHTML=t;else{for((De=De||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=De.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function Ue(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function Be(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var $e={animationend:Be("Animation","AnimationEnd"),animationiteration:Be("Animation","AnimationIteration"),animationstart:Be("Animation","AnimationStart"),transitionend:Be("Transition","TransitionEnd")},He={},Ve={};function We(e){if(He[e])return He[e];if(!$e[e])return e;var t,n=$e[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ve)return He[e]=n[t];return e}T&&(Ve=document.createElement("div").style,"AnimationEvent"in window||(delete $e.animationend.animation,delete $e.animationiteration.animation,delete $e.animationstart.animation),"TransitionEvent"in window||delete $e.transitionend.transition);var qe=We("animationend"),Ke=We("animationiteration"),Ge=We("animationstart"),Qe=We("transitionend"),Ze="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Ye=new("function"==typeof WeakMap?WeakMap:Map);function Xe(e){var t=Ye.get(e);return void 0===t&&(t=new Map,Ye.set(e,t)),t}function Je(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function et(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function tt(e){if(Je(e)!==e)throw Error(a(188))}function nt(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Je(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return tt(o),e;if(i===r)return tt(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var l=!1,u=o.child;u;){if(u===n){l=!0,n=o,r=i;break}if(u===r){l=!0,r=o,n=i;break}u=u.sibling}if(!l){for(u=i.child;u;){if(u===n){l=!0,n=i,r=o;break}if(u===r){l=!0,r=i,n=o;break}u=u.sibling}if(!l)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function rt(e,t){if(null==t)throw Error(a(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function ot(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var it=null;function at(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)g(e,t[r],n[r]);else t&&g(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function lt(e){if(null!==e&&(it=rt(it,e)),e=it,it=null,e){if(ot(e,at),it)throw Error(a(95));if(c)throw e=f,c=!1,f=null,e}}function ut(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function st(e){if(!T)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var ct=[];function ft(e){e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>ct.length&&ct.push(e)}function dt(e,t,n,r){if(ct.length){var o=ct.pop();return o.topLevelType=e,o.eventSystemFlags=r,o.nativeEvent=t,o.targetInst=n,o}return{topLevelType:e,eventSystemFlags:r,nativeEvent:t,targetInst:n,ancestors:[]}}function pt(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=Tn(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=ut(e.nativeEvent);r=e.topLevelType;var i=e.nativeEvent,a=e.eventSystemFlags;0===n&&(a|=64);for(var l=null,u=0;u<k.length;u++){var s=k[u];s&&(s=s.extractEvents(r,t,i,o,a))&&(l=rt(l,s))}lt(l)}}function ht(e,t,n){if(!n.has(e)){switch(e){case"scroll":Gt(t,"scroll",!0);break;case"focus":case"blur":Gt(t,"focus",!0),Gt(t,"blur",!0),n.set("blur",null),n.set("focus",null);break;case"cancel":case"close":st(e)&&Gt(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Ze.indexOf(e)&&Kt(e,t)}n.set(e,null)}}var mt,vt,gt,yt=!1,bt=[],wt=null,xt=null,kt=null,_t=new Map,St=new Map,Ct=[],Et="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),Tt="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function Ot(e,t,n,r,o){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:o,container:r}}function Pt(e,t){switch(e){case"focus":case"blur":wt=null;break;case"dragenter":case"dragleave":xt=null;break;case"mouseover":case"mouseout":kt=null;break;case"pointerover":case"pointerout":_t.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":St.delete(t.pointerId)}}function Mt(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e=Ot(t,n,r,o,i),null!==t&&(null!==(t=On(t))&&vt(t)),e):(e.eventSystemFlags|=r,e)}function Rt(e){var t=Tn(e.target);if(null!==t){var n=Je(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=et(n)))return e.blockedOn=t,void i.unstable_runWithPriority(e.priority,(function(){gt(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function jt(e){if(null!==e.blockedOn)return!1;var t=Xt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);if(null!==t){var n=On(t);return null!==n&&vt(n),e.blockedOn=t,!1}return!0}function At(e,t,n){jt(e)&&n.delete(t)}function Nt(){for(yt=!1;0<bt.length;){var e=bt[0];if(null!==e.blockedOn){null!==(e=On(e.blockedOn))&&mt(e);break}var t=Xt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);null!==t?e.blockedOn=t:bt.shift()}null!==wt&&jt(wt)&&(wt=null),null!==xt&&jt(xt)&&(xt=null),null!==kt&&jt(kt)&&(kt=null),_t.forEach(At),St.forEach(At)}function zt(e,t){e.blockedOn===t&&(e.blockedOn=null,yt||(yt=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,Nt)))}function Lt(e){function t(t){return zt(t,e)}if(0<bt.length){zt(bt[0],e);for(var n=1;n<bt.length;n++){var r=bt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==wt&&zt(wt,e),null!==xt&&zt(xt,e),null!==kt&&zt(kt,e),_t.forEach(t),St.forEach(t),n=0;n<Ct.length;n++)(r=Ct[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Ct.length&&null===(n=Ct[0]).blockedOn;)Rt(n),null===n.blockedOn&&Ct.shift()}var It={},Dt=new Map,Ft=new Map,Ut=["abort","abort",qe,"animationEnd",Ke,"animationIteration",Ge,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Qe,"transitionEnd","waiting","waiting"];function Bt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1],i="on"+(o[0].toUpperCase()+o.slice(1));i={phasedRegistrationNames:{bubbled:i,captured:i+"Capture"},dependencies:[r],eventPriority:t},Ft.set(r,t),Dt.set(r,i),It[o]=i}}Bt("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Bt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Bt(Ut,2);for(var $t="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Ht=0;Ht<$t.length;Ht++)Ft.set($t[Ht],0);var Vt=i.unstable_UserBlockingPriority,Wt=i.unstable_runWithPriority,qt=!0;function Kt(e,t){Gt(t,e,!1)}function Gt(e,t,n){var r=Ft.get(t);switch(void 0===r?2:r){case 0:r=Qt.bind(null,t,1,e);break;case 1:r=Zt.bind(null,t,1,e);break;default:r=Yt.bind(null,t,1,e)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Qt(e,t,n,r){D||L();var o=Yt,i=D;D=!0;try{z(o,e,t,n,r)}finally{(D=i)||U()}}function Zt(e,t,n,r){Wt(Vt,Yt.bind(null,e,t,n,r))}function Yt(e,t,n,r){if(qt)if(0<bt.length&&-1<Et.indexOf(e))e=Ot(null,e,t,n,r),bt.push(e);else{var o=Xt(e,t,n,r);if(null===o)Pt(e,r);else if(-1<Et.indexOf(e))e=Ot(o,e,t,n,r),bt.push(e);else if(!function(e,t,n,r,o){switch(t){case"focus":return wt=Mt(wt,e,t,n,r,o),!0;case"dragenter":return xt=Mt(xt,e,t,n,r,o),!0;case"mouseover":return kt=Mt(kt,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return _t.set(i,Mt(_t.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,St.set(i,Mt(St.get(i)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r)){Pt(e,r),e=dt(e,r,null,t);try{B(pt,e)}finally{ft(e)}}}}function Xt(e,t,n,r){if(null!==(n=Tn(n=ut(r)))){var o=Je(n);if(null===o)n=null;else{var i=o.tag;if(13===i){if(null!==(n=et(o)))return n;n=null}else if(3===i){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;n=null}else o!==n&&(n=null)}}e=dt(e,r,n,t);try{B(pt,e)}finally{ft(e)}return null}var Jt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},en=["Webkit","ms","Moz","O"];function tn(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||Jt.hasOwnProperty(e)&&Jt[e]?(""+t).trim():t+"px"}function nn(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=tn(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(Jt).forEach((function(e){en.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Jt[t]=Jt[e]}))}));var rn=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function on(e,t){if(t){if(rn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62,""))}}function an(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var ln=Ne;function un(e,t){var n=Xe(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=C[t];for(var r=0;r<t.length;r++)ht(t[r],e,n)}function sn(){}function cn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function fn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function dn(e,t){var n,r=fn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=fn(r)}}function pn(){for(var e=window,t=cn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=cn((e=t.contentWindow).document)}return t}function hn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var mn=null,vn=null;function gn(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function yn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var bn="function"==typeof setTimeout?setTimeout:void 0,wn="function"==typeof clearTimeout?clearTimeout:void 0;function xn(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function kn(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var _n=Math.random().toString(36).slice(2),Sn="__reactInternalInstance$"+_n,Cn="__reactEventHandlers$"+_n,En="__reactContainere$"+_n;function Tn(e){var t=e[Sn];if(t)return t;for(var n=e.parentNode;n;){if(t=n[En]||n[Sn]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=kn(e);null!==e;){if(n=e[Sn])return n;e=kn(e)}return t}n=(e=n).parentNode}return null}function On(e){return!(e=e[Sn]||e[En])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Pn(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function Mn(e){return e[Cn]||null}function Rn(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function jn(e,t){var n=e.stateNode;if(!n)return null;var r=h(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}function An(e,t,n){(t=jn(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function Nn(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=Rn(t);for(t=n.length;0<t--;)An(n[t],"captured",e);for(t=0;t<n.length;t++)An(n[t],"bubbled",e)}}function zn(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=jn(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function Ln(e){e&&e.dispatchConfig.registrationName&&zn(e._targetInst,null,e)}function In(e){ot(e,Nn)}var Dn=null,Fn=null,Un=null;function Bn(){if(Un)return Un;var e,t,n=Fn,r=n.length,o="value"in Dn?Dn.value:Dn.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return Un=o.slice(e,1<t?1-t:void 0)}function $n(){return!0}function Hn(){return!1}function Vn(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?$n:Hn,this.isPropagationStopped=Hn,this}function Wn(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function qn(e){if(!(e instanceof this))throw Error(a(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Kn(e){e.eventPool=[],e.getPooled=Wn,e.release=qn}o(Vn.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=$n)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=$n)},persist:function(){this.isPersistent=$n},isPersistent:Hn,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=Hn,this._dispatchInstances=this._dispatchListeners=null}}),Vn.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},Vn.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var i=new t;return o(i,n.prototype),n.prototype=i,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,Kn(n),n},Kn(Vn);var Gn=Vn.extend({data:null}),Qn=Vn.extend({data:null}),Zn=[9,13,27,32],Yn=T&&"CompositionEvent"in window,Xn=null;T&&"documentMode"in document&&(Xn=document.documentMode);var Jn=T&&"TextEvent"in window&&!Xn,er=T&&(!Yn||Xn&&8<Xn&&11>=Xn),tr=String.fromCharCode(32),nr={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},rr=!1;function or(e,t){switch(e){case"keyup":return-1!==Zn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function ir(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var ar=!1;var lr={eventTypes:nr,extractEvents:function(e,t,n,r){var o;if(Yn)e:{switch(e){case"compositionstart":var i=nr.compositionStart;break e;case"compositionend":i=nr.compositionEnd;break e;case"compositionupdate":i=nr.compositionUpdate;break e}i=void 0}else ar?or(e,n)&&(i=nr.compositionEnd):"keydown"===e&&229===n.keyCode&&(i=nr.compositionStart);return i?(er&&"ko"!==n.locale&&(ar||i!==nr.compositionStart?i===nr.compositionEnd&&ar&&(o=Bn()):(Fn="value"in(Dn=r)?Dn.value:Dn.textContent,ar=!0)),i=Gn.getPooled(i,t,n,r),o?i.data=o:null!==(o=ir(n))&&(i.data=o),In(i),o=i):o=null,(e=Jn?function(e,t){switch(e){case"compositionend":return ir(t);case"keypress":return 32!==t.which?null:(rr=!0,tr);case"textInput":return(e=t.data)===tr&&rr?null:e;default:return null}}(e,n):function(e,t){if(ar)return"compositionend"===e||!Yn&&or(e,t)?(e=Bn(),Un=Fn=Dn=null,ar=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return er&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=Qn.getPooled(nr.beforeInput,t,n,r)).data=e,In(t)):t=null,null===o?t:null===t?o:[o,t]}},ur={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function sr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!ur[e.type]:"textarea"===t}var cr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function fr(e,t,n){return(e=Vn.getPooled(cr.change,e,t,n)).type="change",j(n),In(e),e}var dr=null,pr=null;function hr(e){lt(e)}function mr(e){if(xe(Pn(e)))return e}function vr(e,t){if("change"===e)return t}var gr=!1;function yr(){dr&&(dr.detachEvent("onpropertychange",br),pr=dr=null)}function br(e){if("value"===e.propertyName&&mr(pr))if(e=fr(pr,e,ut(e)),D)lt(e);else{D=!0;try{N(hr,e)}finally{D=!1,U()}}}function wr(e,t,n){"focus"===e?(yr(),pr=n,(dr=t).attachEvent("onpropertychange",br)):"blur"===e&&yr()}function xr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return mr(pr)}function kr(e,t){if("click"===e)return mr(t)}function _r(e,t){if("input"===e||"change"===e)return mr(t)}T&&(gr=st("input")&&(!document.documentMode||9<document.documentMode));var Sr={eventTypes:cr,_isInputEventSupported:gr,extractEvents:function(e,t,n,r){var o=t?Pn(t):window,i=o.nodeName&&o.nodeName.toLowerCase();if("select"===i||"input"===i&&"file"===o.type)var a=vr;else if(sr(o))if(gr)a=_r;else{a=xr;var l=wr}else(i=o.nodeName)&&"input"===i.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(a=kr);if(a&&(a=a(e,t)))return fr(a,n,r);l&&l(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Te(o,"number",o.value)}},Cr=Vn.extend({view:null,detail:null}),Er={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Tr(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Er[e])&&!!t[e]}function Or(){return Tr}var Pr=0,Mr=0,Rr=!1,jr=!1,Ar=Cr.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Or,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Pr;return Pr=e.screenX,Rr?"mousemove"===e.type?e.screenX-t:0:(Rr=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Mr;return Mr=e.screenY,jr?"mousemove"===e.type?e.screenY-t:0:(jr=!0,0)}}),Nr=Ar.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),zr={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Lr={eventTypes:zr,extractEvents:function(e,t,n,r,o){var i="mouseover"===e||"pointerover"===e,a="mouseout"===e||"pointerout"===e;if(i&&0==(32&o)&&(n.relatedTarget||n.fromElement)||!a&&!i)return null;(i=r.window===r?r:(i=r.ownerDocument)?i.defaultView||i.parentWindow:window,a)?(a=t,null!==(t=(t=n.relatedTarget||n.toElement)?Tn(t):null)&&(t!==Je(t)||5!==t.tag&&6!==t.tag)&&(t=null)):a=null;if(a===t)return null;if("mouseout"===e||"mouseover"===e)var l=Ar,u=zr.mouseLeave,s=zr.mouseEnter,c="mouse";else"pointerout"!==e&&"pointerover"!==e||(l=Nr,u=zr.pointerLeave,s=zr.pointerEnter,c="pointer");if(e=null==a?i:Pn(a),i=null==t?i:Pn(t),(u=l.getPooled(u,a,n,r)).type=c+"leave",u.target=e,u.relatedTarget=i,(n=l.getPooled(s,t,n,r)).type=c+"enter",n.target=i,n.relatedTarget=e,c=t,(r=a)&&c)e:{for(s=c,a=0,e=l=r;e;e=Rn(e))a++;for(e=0,t=s;t;t=Rn(t))e++;for(;0<a-e;)l=Rn(l),a--;for(;0<e-a;)s=Rn(s),e--;for(;a--;){if(l===s||l===s.alternate)break e;l=Rn(l),s=Rn(s)}l=null}else l=null;for(s=l,l=[];r&&r!==s&&(null===(a=r.alternate)||a!==s);)l.push(r),r=Rn(r);for(r=[];c&&c!==s&&(null===(a=c.alternate)||a!==s);)r.push(c),c=Rn(c);for(c=0;c<l.length;c++)zn(l[c],"bubbled",u);for(c=r.length;0<c--;)zn(r[c],"captured",n);return 0==(64&o)?[u]:[u,n]}};var Ir="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},Dr=Object.prototype.hasOwnProperty;function Fr(e,t){if(Ir(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Dr.call(t,n[r])||!Ir(e[n[r]],t[n[r]]))return!1;return!0}var Ur=T&&"documentMode"in document&&11>=document.documentMode,Br={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},$r=null,Hr=null,Vr=null,Wr=!1;function qr(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Wr||null==$r||$r!==cn(n)?null:("selectionStart"in(n=$r)&&hn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Vr&&Fr(Vr,n)?null:(Vr=n,(e=Vn.getPooled(Br.select,Hr,e,t)).type="select",e.target=$r,In(e),e))}var Kr={eventTypes:Br,extractEvents:function(e,t,n,r,o,i){if(!(i=!(o=i||(r.window===r?r.document:9===r.nodeType?r:r.ownerDocument)))){e:{o=Xe(o),i=C.onSelect;for(var a=0;a<i.length;a++)if(!o.has(i[a])){o=!1;break e}o=!0}i=!o}if(i)return null;switch(o=t?Pn(t):window,e){case"focus":(sr(o)||"true"===o.contentEditable)&&($r=o,Hr=t,Vr=null);break;case"blur":Vr=Hr=$r=null;break;case"mousedown":Wr=!0;break;case"contextmenu":case"mouseup":case"dragend":return Wr=!1,qr(n,r);case"selectionchange":if(Ur)break;case"keydown":case"keyup":return qr(n,r)}return null}},Gr=Vn.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Qr=Vn.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Zr=Cr.extend({relatedTarget:null});function Yr(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var Xr={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Jr={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},eo=Cr.extend({key:function(e){if(e.key){var t=Xr[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Yr(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Jr[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Or,charCode:function(e){return"keypress"===e.type?Yr(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Yr(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),to=Ar.extend({dataTransfer:null}),no=Cr.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Or}),ro=Vn.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),oo=Ar.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),io={eventTypes:It,extractEvents:function(e,t,n,r){var o=Dt.get(e);if(!o)return null;switch(e){case"keypress":if(0===Yr(n))return null;case"keydown":case"keyup":e=eo;break;case"blur":case"focus":e=Zr;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Ar;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=to;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=no;break;case qe:case Ke:case Ge:e=Gr;break;case Qe:e=ro;break;case"scroll":e=Cr;break;case"wheel":e=oo;break;case"copy":case"cut":case"paste":e=Qr;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Nr;break;default:e=Vn}return In(t=e.getPooled(o,t,n,r)),t}};if(y)throw Error(a(101));y=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),w(),h=Mn,m=On,v=Pn,E({SimpleEventPlugin:io,EnterLeaveEventPlugin:Lr,ChangeEventPlugin:Sr,SelectEventPlugin:Kr,BeforeInputEventPlugin:lr});var ao=[],lo=-1;function uo(e){0>lo||(e.current=ao[lo],ao[lo]=null,lo--)}function so(e,t){lo++,ao[lo]=e.current,e.current=t}var co={},fo={current:co},po={current:!1},ho=co;function mo(e,t){var n=e.type.contextTypes;if(!n)return co;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function vo(e){return null!=(e=e.childContextTypes)}function go(){uo(po),uo(fo)}function yo(e,t,n){if(fo.current!==co)throw Error(a(168));so(fo,t),so(po,n)}function bo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(a(108,ve(t)||"Unknown",i));return o({},n,{},r)}function wo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||co,ho=fo.current,so(fo,e),so(po,po.current),!0}function xo(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=bo(e,t,ho),r.__reactInternalMemoizedMergedChildContext=e,uo(po),uo(fo),so(fo,e)):uo(po),so(po,n)}var ko=i.unstable_runWithPriority,_o=i.unstable_scheduleCallback,So=i.unstable_cancelCallback,Co=i.unstable_requestPaint,Eo=i.unstable_now,To=i.unstable_getCurrentPriorityLevel,Oo=i.unstable_ImmediatePriority,Po=i.unstable_UserBlockingPriority,Mo=i.unstable_NormalPriority,Ro=i.unstable_LowPriority,jo=i.unstable_IdlePriority,Ao={},No=i.unstable_shouldYield,zo=void 0!==Co?Co:function(){},Lo=null,Io=null,Do=!1,Fo=Eo(),Uo=1e4>Fo?Eo:function(){return Eo()-Fo};function Bo(){switch(To()){case Oo:return 99;case Po:return 98;case Mo:return 97;case Ro:return 96;case jo:return 95;default:throw Error(a(332))}}function $o(e){switch(e){case 99:return Oo;case 98:return Po;case 97:return Mo;case 96:return Ro;case 95:return jo;default:throw Error(a(332))}}function Ho(e,t){return e=$o(e),ko(e,t)}function Vo(e,t,n){return e=$o(e),_o(e,t,n)}function Wo(e){return null===Lo?(Lo=[e],Io=_o(Oo,Ko)):Lo.push(e),Ao}function qo(){if(null!==Io){var e=Io;Io=null,So(e)}Ko()}function Ko(){if(!Do&&null!==Lo){Do=!0;var e=0;try{var t=Lo;Ho(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Lo=null}catch(t){throw null!==Lo&&(Lo=Lo.slice(e+1)),_o(Oo,qo),t}finally{Do=!1}}}function Go(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function Qo(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var Zo={current:null},Yo=null,Xo=null,Jo=null;function ei(){Jo=Xo=Yo=null}function ti(e){var t=Zo.current;uo(Zo),e.type._context._currentValue=t}function ni(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function ri(e,t){Yo=e,Jo=Xo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(Ma=!0),e.firstContext=null)}function oi(e,t){if(Jo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Jo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Xo){if(null===Yo)throw Error(a(308));Xo=t,Yo.dependencies={expirationTime:0,firstContext:t,responders:null}}else Xo=Xo.next=t;return e._currentValue}var ii=!1;function ai(e){e.updateQueue={baseState:e.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}function li(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,baseQueue:e.baseQueue,shared:e.shared,effects:e.effects})}function ui(e,t){return(e={expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null}).next=e}function si(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function ci(e,t){var n=e.alternate;null!==n&&li(n,e),null===(n=(e=e.updateQueue).baseQueue)?(e.baseQueue=t.next=t,t.next=t):(t.next=n.next,n.next=t)}function fi(e,t,n,r){var i=e.updateQueue;ii=!1;var a=i.baseQueue,l=i.shared.pending;if(null!==l){if(null!==a){var u=a.next;a.next=l.next,l.next=u}a=l,i.shared.pending=null,null!==(u=e.alternate)&&(null!==(u=u.updateQueue)&&(u.baseQueue=l))}if(null!==a){u=a.next;var s=i.baseState,c=0,f=null,d=null,p=null;if(null!==u)for(var h=u;;){if((l=h.expirationTime)<r){var m={expirationTime:h.expirationTime,suspenseConfig:h.suspenseConfig,tag:h.tag,payload:h.payload,callback:h.callback,next:null};null===p?(d=p=m,f=s):p=p.next=m,l>c&&(c=l)}else{null!==p&&(p=p.next={expirationTime:1073741823,suspenseConfig:h.suspenseConfig,tag:h.tag,payload:h.payload,callback:h.callback,next:null}),iu(l,h.suspenseConfig);e:{var v=e,g=h;switch(l=t,m=n,g.tag){case 1:if("function"==typeof(v=g.payload)){s=v.call(m,s,l);break e}s=v;break e;case 3:v.effectTag=-4097&v.effectTag|64;case 0:if(null==(l="function"==typeof(v=g.payload)?v.call(m,s,l):v))break e;s=o({},s,l);break e;case 2:ii=!0}}null!==h.callback&&(e.effectTag|=32,null===(l=i.effects)?i.effects=[h]:l.push(h))}if(null===(h=h.next)||h===u){if(null===(l=i.shared.pending))break;h=a.next=l.next,l.next=u,i.baseQueue=a=l,i.shared.pending=null}}null===p?f=s:p.next=d,i.baseState=f,i.baseQueue=p,au(c),e.expirationTime=c,e.memoizedState=s}}function di(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=o,o=n,"function"!=typeof r)throw Error(a(191,r));r.call(o)}}}var pi=Z.ReactCurrentBatchConfig,hi=(new r.Component).refs;function mi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.expirationTime&&(e.updateQueue.baseState=n)}var vi={isMounted:function(e){return!!(e=e._reactInternalFiber)&&Je(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=ql(),o=pi.suspense;(o=ui(r=Kl(r,e,o),o)).payload=t,null!=n&&(o.callback=n),si(e,o),Gl(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=ql(),o=pi.suspense;(o=ui(r=Kl(r,e,o),o)).tag=1,o.payload=t,null!=n&&(o.callback=n),si(e,o),Gl(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=ql(),r=pi.suspense;(r=ui(n=Kl(n,e,r),r)).tag=2,null!=t&&(r.callback=t),si(e,r),Gl(e,n)}};function gi(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!t.prototype||!t.prototype.isPureReactComponent||(!Fr(n,r)||!Fr(o,i))}function yi(e,t,n){var r=!1,o=co,i=t.contextType;return"object"==typeof i&&null!==i?i=oi(i):(o=vo(t)?ho:fo.current,i=(r=null!=(r=t.contextTypes))?mo(e,o):co),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=vi,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function bi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&vi.enqueueReplaceState(t,t.state,null)}function wi(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=hi,ai(e);var i=t.contextType;"object"==typeof i&&null!==i?o.context=oi(i):(i=vo(t)?ho:fo.current,o.context=mo(e,i)),fi(e,n,o,r),o.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(mi(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&vi.enqueueReplaceState(o,o.state,null),fi(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var xi=Array.isArray;function ki(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===hi&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function _i(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function Si(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Eu(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function l(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Pu(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function s(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=ki(e,t,n),r.return=e,r):((r=Tu(n.type,n.key,n.props,null,e.mode,r)).ref=ki(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Mu(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=Ou(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Pu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case ee:return(n=Tu(t.type,t.key,t.props,null,e.mode,n)).ref=ki(e,null,t),n.return=e,n;case te:return(t=Mu(t,e.mode,n)).return=e,t}if(xi(t)||me(t))return(t=Ou(t,e.mode,n,null)).return=e,t;_i(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case ee:return n.key===o?n.type===ne?f(e,t,n.props.children,r,o):s(e,t,n,r):null;case te:return n.key===o?c(e,t,n,r):null}if(xi(n)||me(n))return null!==o?null:f(e,t,n,r,null);_i(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case ee:return e=e.get(null===r.key?n:r.key)||null,r.type===ne?f(t,e,r.props.children,o,r.key):s(t,e,r,o);case te:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(xi(r)||me(r))return f(t,e=e.get(n)||null,r,o,null);_i(t,r)}return null}function m(o,a,l,u){for(var s=null,c=null,f=a,m=a=0,v=null;null!==f&&m<l.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var g=p(o,f,l[m],u);if(null===g){null===f&&(f=v);break}e&&f&&null===g.alternate&&t(o,f),a=i(g,a,m),null===c?s=g:c.sibling=g,c=g,f=v}if(m===l.length)return n(o,f),s;if(null===f){for(;m<l.length;m++)null!==(f=d(o,l[m],u))&&(a=i(f,a,m),null===c?s=f:c.sibling=f,c=f);return s}for(f=r(o,f);m<l.length;m++)null!==(v=h(f,o,m,l[m],u))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),a=i(v,a,m),null===c?s=v:c.sibling=v,c=v);return e&&f.forEach((function(e){return t(o,e)})),s}function v(o,l,u,s){var c=me(u);if("function"!=typeof c)throw Error(a(150));if(null==(u=c.call(u)))throw Error(a(151));for(var f=c=null,m=l,v=l=0,g=null,y=u.next();null!==m&&!y.done;v++,y=u.next()){m.index>v?(g=m,m=null):g=m.sibling;var b=p(o,m,y.value,s);if(null===b){null===m&&(m=g);break}e&&m&&null===b.alternate&&t(o,m),l=i(b,l,v),null===f?c=b:f.sibling=b,f=b,m=g}if(y.done)return n(o,m),c;if(null===m){for(;!y.done;v++,y=u.next())null!==(y=d(o,y.value,s))&&(l=i(y,l,v),null===f?c=y:f.sibling=y,f=y);return c}for(m=r(o,m);!y.done;v++,y=u.next())null!==(y=h(m,o,v,y.value,s))&&(e&&null!==y.alternate&&m.delete(null===y.key?v:y.key),l=i(y,l,v),null===f?c=y:f.sibling=y,f=y);return e&&m.forEach((function(e){return t(o,e)})),c}return function(e,r,i,u){var s="object"==typeof i&&null!==i&&i.type===ne&&null===i.key;s&&(i=i.props.children);var c="object"==typeof i&&null!==i;if(c)switch(i.$$typeof){case ee:e:{for(c=i.key,s=r;null!==s;){if(s.key===c){switch(s.tag){case 7:if(i.type===ne){n(e,s.sibling),(r=o(s,i.props.children)).return=e,e=r;break e}break;default:if(s.elementType===i.type){n(e,s.sibling),(r=o(s,i.props)).ref=ki(e,s,i),r.return=e,e=r;break e}}n(e,s);break}t(e,s),s=s.sibling}i.type===ne?((r=Ou(i.props.children,e.mode,u,i.key)).return=e,e=r):((u=Tu(i.type,i.key,i.props,null,e.mode,u)).ref=ki(e,r,i),u.return=e,e=u)}return l(e);case te:e:{for(s=i.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Mu(i,e.mode,u)).return=e,e=r}return l(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=Pu(i,e.mode,u)).return=e,e=r),l(e);if(xi(i))return m(e,r,i,u);if(me(i))return v(e,r,i,u);if(c&&_i(e,i),void 0===i&&!s)switch(e.tag){case 1:case 0:throw e=e.type,Error(a(152,e.displayName||e.name||"Component"))}return n(e,r)}}var Ci=Si(!0),Ei=Si(!1),Ti={},Oi={current:Ti},Pi={current:Ti},Mi={current:Ti};function Ri(e){if(e===Ti)throw Error(a(174));return e}function ji(e,t){switch(so(Mi,t),so(Pi,e),so(Oi,Ti),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Ie(null,"");break;default:t=Ie(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}uo(Oi),so(Oi,t)}function Ai(){uo(Oi),uo(Pi),uo(Mi)}function Ni(e){Ri(Mi.current);var t=Ri(Oi.current),n=Ie(t,e.type);t!==n&&(so(Pi,e),so(Oi,n))}function zi(e){Pi.current===e&&(uo(Oi),uo(Pi))}var Li={current:0};function Ii(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function Di(e,t){return{responder:e,props:t}}var Fi=Z.ReactCurrentDispatcher,Ui=Z.ReactCurrentBatchConfig,Bi=0,$i=null,Hi=null,Vi=null,Wi=!1;function qi(){throw Error(a(321))}function Ki(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Ir(e[n],t[n]))return!1;return!0}function Gi(e,t,n,r,o,i){if(Bi=i,$i=t,t.memoizedState=null,t.updateQueue=null,t.expirationTime=0,Fi.current=null===e||null===e.memoizedState?ga:ya,e=n(r,o),t.expirationTime===Bi){i=0;do{if(t.expirationTime=0,!(25>i))throw Error(a(301));i+=1,Vi=Hi=null,t.updateQueue=null,Fi.current=ba,e=n(r,o)}while(t.expirationTime===Bi)}if(Fi.current=va,t=null!==Hi&&null!==Hi.next,Bi=0,Vi=Hi=$i=null,Wi=!1,t)throw Error(a(300));return e}function Qi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Vi?$i.memoizedState=Vi=e:Vi=Vi.next=e,Vi}function Zi(){if(null===Hi){var e=$i.alternate;e=null!==e?e.memoizedState:null}else e=Hi.next;var t=null===Vi?$i.memoizedState:Vi.next;if(null!==t)Vi=t,Hi=e;else{if(null===e)throw Error(a(310));e={memoizedState:(Hi=e).memoizedState,baseState:Hi.baseState,baseQueue:Hi.baseQueue,queue:Hi.queue,next:null},null===Vi?$i.memoizedState=Vi=e:Vi=Vi.next=e}return Vi}function Yi(e,t){return"function"==typeof t?t(e):t}function Xi(e){var t=Zi(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=Hi,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var l=o.next;o.next=i.next,i.next=l}r.baseQueue=o=i,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var u=l=i=null,s=o;do{var c=s.expirationTime;if(c<Bi){var f={expirationTime:s.expirationTime,suspenseConfig:s.suspenseConfig,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null};null===u?(l=u=f,i=r):u=u.next=f,c>$i.expirationTime&&($i.expirationTime=c,au(c))}else null!==u&&(u=u.next={expirationTime:1073741823,suspenseConfig:s.suspenseConfig,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null}),iu(c,s.suspenseConfig),r=s.eagerReducer===e?s.eagerState:e(r,s.action);s=s.next}while(null!==s&&s!==o);null===u?i=r:u.next=l,Ir(r,t.memoizedState)||(Ma=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=u,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function Ji(e){var t=Zi(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{i=e(i,l.action),l=l.next}while(l!==o);Ir(i,t.memoizedState)||(Ma=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function ea(e){var t=Qi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:Yi,lastRenderedState:e}).dispatch=ma.bind(null,$i,e),[t.memoizedState,e]}function ta(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=$i.updateQueue)?(t={lastEffect:null},$i.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function na(){return Zi().memoizedState}function ra(e,t,n,r){var o=Qi();$i.effectTag|=e,o.memoizedState=ta(1|t,n,void 0,void 0===r?null:r)}function oa(e,t,n,r){var o=Zi();r=void 0===r?null:r;var i=void 0;if(null!==Hi){var a=Hi.memoizedState;if(i=a.destroy,null!==r&&Ki(r,a.deps))return void ta(t,n,i,r)}$i.effectTag|=e,o.memoizedState=ta(1|t,n,i,r)}function ia(e,t){return ra(516,4,e,t)}function aa(e,t){return oa(516,4,e,t)}function la(e,t){return oa(4,2,e,t)}function ua(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function sa(e,t,n){return n=null!=n?n.concat([e]):null,oa(4,2,ua.bind(null,t,e),n)}function ca(){}function fa(e,t){return Qi().memoizedState=[e,void 0===t?null:t],e}function da(e,t){var n=Zi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ki(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function pa(e,t){var n=Zi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ki(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function ha(e,t,n){var r=Bo();Ho(98>r?98:r,(function(){e(!0)})),Ho(97<r?97:r,(function(){var r=Ui.suspense;Ui.suspense=void 0===t?null:t;try{e(!1),n()}finally{Ui.suspense=r}}))}function ma(e,t,n){var r=ql(),o=pi.suspense;o={expirationTime:r=Kl(r,e,o),suspenseConfig:o,action:n,eagerReducer:null,eagerState:null,next:null};var i=t.pending;if(null===i?o.next=o:(o.next=i.next,i.next=o),t.pending=o,i=e.alternate,e===$i||null!==i&&i===$i)Wi=!0,o.expirationTime=Bi,$i.expirationTime=Bi;else{if(0===e.expirationTime&&(null===i||0===i.expirationTime)&&null!==(i=t.lastRenderedReducer))try{var a=t.lastRenderedState,l=i(a,n);if(o.eagerReducer=i,o.eagerState=l,Ir(l,a))return}catch(e){}Gl(e,r)}}var va={readContext:oi,useCallback:qi,useContext:qi,useEffect:qi,useImperativeHandle:qi,useLayoutEffect:qi,useMemo:qi,useReducer:qi,useRef:qi,useState:qi,useDebugValue:qi,useResponder:qi,useDeferredValue:qi,useTransition:qi},ga={readContext:oi,useCallback:fa,useContext:oi,useEffect:ia,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ra(4,2,ua.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ra(4,2,e,t)},useMemo:function(e,t){var n=Qi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Qi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=ma.bind(null,$i,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Qi().memoizedState=e},useState:ea,useDebugValue:ca,useResponder:Di,useDeferredValue:function(e,t){var n=ea(e),r=n[0],o=n[1];return ia((function(){var n=Ui.suspense;Ui.suspense=void 0===t?null:t;try{o(e)}finally{Ui.suspense=n}}),[e,t]),r},useTransition:function(e){var t=ea(!1),n=t[0];return t=t[1],[fa(ha.bind(null,t,e),[t,e]),n]}},ya={readContext:oi,useCallback:da,useContext:oi,useEffect:aa,useImperativeHandle:sa,useLayoutEffect:la,useMemo:pa,useReducer:Xi,useRef:na,useState:function(){return Xi(Yi)},useDebugValue:ca,useResponder:Di,useDeferredValue:function(e,t){var n=Xi(Yi),r=n[0],o=n[1];return aa((function(){var n=Ui.suspense;Ui.suspense=void 0===t?null:t;try{o(e)}finally{Ui.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Xi(Yi),n=t[0];return t=t[1],[da(ha.bind(null,t,e),[t,e]),n]}},ba={readContext:oi,useCallback:da,useContext:oi,useEffect:aa,useImperativeHandle:sa,useLayoutEffect:la,useMemo:pa,useReducer:Ji,useRef:na,useState:function(){return Ji(Yi)},useDebugValue:ca,useResponder:Di,useDeferredValue:function(e,t){var n=Ji(Yi),r=n[0],o=n[1];return aa((function(){var n=Ui.suspense;Ui.suspense=void 0===t?null:t;try{o(e)}finally{Ui.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Ji(Yi),n=t[0];return t=t[1],[da(ha.bind(null,t,e),[t,e]),n]}},wa=null,xa=null,ka=!1;function _a(e,t){var n=Su(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Sa(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Ca(e){if(ka){var t=xa;if(t){var n=t;if(!Sa(e,t)){if(!(t=xn(n.nextSibling))||!Sa(e,t))return e.effectTag=-1025&e.effectTag|2,ka=!1,void(wa=e);_a(wa,n)}wa=e,xa=xn(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,ka=!1,wa=e}}function Ea(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;wa=e}function Ta(e){if(e!==wa)return!1;if(!ka)return Ea(e),ka=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!yn(t,e.memoizedProps))for(t=xa;t;)_a(e,t),t=xn(t.nextSibling);if(Ea(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){xa=xn(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}xa=null}}else xa=wa?xn(e.stateNode.nextSibling):null;return!0}function Oa(){xa=wa=null,ka=!1}var Pa=Z.ReactCurrentOwner,Ma=!1;function Ra(e,t,n,r){t.child=null===e?Ei(t,null,n,r):Ci(t,e.child,n,r)}function ja(e,t,n,r,o){n=n.render;var i=t.ref;return ri(t,o),r=Gi(e,t,n,r,i,o),null===e||Ma?(t.effectTag|=1,Ra(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Ga(e,t,o))}function Aa(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||Cu(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Tu(n.type,null,r,null,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Na(e,t,a,r,o,i))}return a=e.child,o<i&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:Fr)(o,r)&&e.ref===t.ref)?Ga(e,t,i):(t.effectTag|=1,(e=Eu(a,r)).ref=t.ref,e.return=t,t.child=e)}function Na(e,t,n,r,o,i){return null!==e&&Fr(e.memoizedProps,r)&&e.ref===t.ref&&(Ma=!1,o<i)?(t.expirationTime=e.expirationTime,Ga(e,t,i)):La(e,t,n,r,i)}function za(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function La(e,t,n,r,o){var i=vo(n)?ho:fo.current;return i=mo(t,i),ri(t,o),n=Gi(e,t,n,r,i,o),null===e||Ma?(t.effectTag|=1,Ra(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Ga(e,t,o))}function Ia(e,t,n,r,o){if(vo(n)){var i=!0;wo(t)}else i=!1;if(ri(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),yi(t,n,r),wi(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,l=t.memoizedProps;a.props=l;var u=a.context,s=n.contextType;"object"==typeof s&&null!==s?s=oi(s):s=mo(t,s=vo(n)?ho:fo.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||u!==s)&&bi(t,a,r,s),ii=!1;var d=t.memoizedState;a.state=d,fi(t,r,a,o),u=t.memoizedState,l!==r||d!==u||po.current||ii?("function"==typeof c&&(mi(t,n,c,r),u=t.memoizedState),(l=ii||gi(t,n,l,r,d,u,s))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=u),a.props=r,a.state=u,a.context=s,r=l):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,li(e,t),l=t.memoizedProps,a.props=t.type===t.elementType?l:Qo(t.type,l),u=a.context,"object"==typeof(s=n.contextType)&&null!==s?s=oi(s):s=mo(t,s=vo(n)?ho:fo.current),(f="function"==typeof(c=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||u!==s)&&bi(t,a,r,s),ii=!1,u=t.memoizedState,a.state=u,fi(t,r,a,o),d=t.memoizedState,l!==r||u!==d||po.current||ii?("function"==typeof c&&(mi(t,n,c,r),d=t.memoizedState),(c=ii||gi(t,n,l,r,u,d,s))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,d,s),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,d,s)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=d),a.props=r,a.state=d,a.context=s,r=c):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),r=!1);return Da(e,t,n,r,i,o)}function Da(e,t,n,r,o,i){za(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return o&&xo(t,n,!1),Ga(e,t,i);r=t.stateNode,Pa.current=t;var l=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=Ci(t,e.child,null,i),t.child=Ci(t,null,l,i)):Ra(e,t,l,i),t.memoizedState=r.state,o&&xo(t,n,!0),t.child}function Fa(e){var t=e.stateNode;t.pendingContext?yo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&yo(0,t.context,!1),ji(e,t.containerInfo)}var Ua,Ba,$a,Ha={dehydrated:null,retryTime:0};function Va(e,t,n){var r,o=t.mode,i=t.pendingProps,a=Li.current,l=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&a)&&(null===e||null!==e.memoizedState)),r?(l=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===i.fallback||!0===i.unstable_avoidThisFallback||(a|=1),so(Li,1&a),null===e){if(void 0!==i.fallback&&Ca(t),l){if(l=i.fallback,(i=Ou(null,o,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,i.child=e;null!==e;)e.return=i,e=e.sibling;return(n=Ou(l,o,n,null)).return=t,i.sibling=n,t.memoizedState=Ha,t.child=i,n}return o=i.children,t.memoizedState=null,t.child=Ei(t,null,o,n)}if(null!==e.memoizedState){if(o=(e=e.child).sibling,l){if(i=i.fallback,(n=Eu(e,e.pendingProps)).return=t,0==(2&t.mode)&&(l=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=l;null!==l;)l.return=n,l=l.sibling;return(o=Eu(o,i)).return=t,n.sibling=o,n.childExpirationTime=0,t.memoizedState=Ha,t.child=n,o}return n=Ci(t,e.child,i.children,n),t.memoizedState=null,t.child=n}if(e=e.child,l){if(l=i.fallback,(i=Ou(null,o,0,null)).return=t,i.child=e,null!==e&&(e.return=i),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,i.child=e;null!==e;)e.return=i,e=e.sibling;return(n=Ou(l,o,n,null)).return=t,i.sibling=n,n.effectTag|=2,i.childExpirationTime=0,t.memoizedState=Ha,t.child=i,n}return t.memoizedState=null,t.child=Ci(t,e,i.children,n)}function Wa(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),ni(e.return,t)}function qa(e,t,n,r,o,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailExpiration:0,tailMode:o,lastEffect:i}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailExpiration=0,a.tailMode=o,a.lastEffect=i)}function Ka(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(Ra(e,t,r.children,n),0!=(2&(r=Li.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Wa(e,n);else if(19===e.tag)Wa(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(so(Li,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Ii(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),qa(t,!1,o,n,i,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Ii(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}qa(t,!0,n,null,i,t.lastEffect);break;case"together":qa(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Ga(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&au(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Eu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Eu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Qa(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Za(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return vo(t.type)&&go(),null;case 3:return Ai(),uo(po),uo(fo),(n=t.stateNode).pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||!Ta(t)||(t.effectTag|=4),null;case 5:zi(t),n=Ri(Mi.current);var i=t.type;if(null!==e&&null!=t.stateNode)Ba(e,t,i,r,n),e.ref!==t.ref&&(t.effectTag|=128);else{if(!r){if(null===t.stateNode)throw Error(a(166));return null}if(e=Ri(Oi.current),Ta(t)){r=t.stateNode,i=t.type;var l=t.memoizedProps;switch(r[Sn]=t,r[Cn]=l,i){case"iframe":case"object":case"embed":Kt("load",r);break;case"video":case"audio":for(e=0;e<Ze.length;e++)Kt(Ze[e],r);break;case"source":Kt("error",r);break;case"img":case"image":case"link":Kt("error",r),Kt("load",r);break;case"form":Kt("reset",r),Kt("submit",r);break;case"details":Kt("toggle",r);break;case"input":_e(r,l),Kt("invalid",r),un(n,"onChange");break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Kt("invalid",r),un(n,"onChange");break;case"textarea":Re(r,l),Kt("invalid",r),un(n,"onChange")}for(var u in on(i,l),e=null,l)if(l.hasOwnProperty(u)){var s=l[u];"children"===u?"string"==typeof s?r.textContent!==s&&(e=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(e=["children",""+s]):S.hasOwnProperty(u)&&null!=s&&un(n,u)}switch(i){case"input":we(r),Ee(r,l,!0);break;case"textarea":we(r),Ae(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=sn)}n=e,t.updateQueue=n,null!==n&&(t.effectTag|=4)}else{switch(u=9===n.nodeType?n:n.ownerDocument,e===ln&&(e=Le(i)),e===ln?"script"===i?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(i,{is:r.is}):(e=u.createElement(i),"select"===i&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,i),e[Sn]=t,e[Cn]=r,Ua(e,t),t.stateNode=e,u=an(i,r),i){case"iframe":case"object":case"embed":Kt("load",e),s=r;break;case"video":case"audio":for(s=0;s<Ze.length;s++)Kt(Ze[s],e);s=r;break;case"source":Kt("error",e),s=r;break;case"img":case"image":case"link":Kt("error",e),Kt("load",e),s=r;break;case"form":Kt("reset",e),Kt("submit",e),s=r;break;case"details":Kt("toggle",e),s=r;break;case"input":_e(e,r),s=ke(e,r),Kt("invalid",e),un(n,"onChange");break;case"option":s=Oe(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},s=o({},r,{value:void 0}),Kt("invalid",e),un(n,"onChange");break;case"textarea":Re(e,r),s=Me(e,r),Kt("invalid",e),un(n,"onChange");break;default:s=r}on(i,s);var c=s;for(l in c)if(c.hasOwnProperty(l)){var f=c[l];"style"===l?nn(e,f):"dangerouslySetInnerHTML"===l?null!=(f=f?f.__html:void 0)&&Fe(e,f):"children"===l?"string"==typeof f?("textarea"!==i||""!==f)&&Ue(e,f):"number"==typeof f&&Ue(e,""+f):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(S.hasOwnProperty(l)?null!=f&&un(n,l):null!=f&&Y(e,l,f,u))}switch(i){case"input":we(e),Ee(e,r,!1);break;case"textarea":we(e),Ae(e);break;case"option":null!=r.value&&e.setAttribute("value",""+ye(r.value));break;case"select":e.multiple=!!r.multiple,null!=(n=r.value)?Pe(e,!!r.multiple,n,!1):null!=r.defaultValue&&Pe(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof s.onClick&&(e.onclick=sn)}gn(i,r)&&(t.effectTag|=4)}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)$a(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));n=Ri(Mi.current),Ri(Oi.current),Ta(t)?(n=t.stateNode,r=t.memoizedProps,n[Sn]=t,n.nodeValue!==r&&(t.effectTag|=4)):((n=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Sn]=t,t.stateNode=n)}return null;case 13:return uo(Li),r=t.memoizedState,0!=(64&t.effectTag)?(t.expirationTime=n,t):(n=null!==r,r=!1,null===e?void 0!==t.memoizedProps.fallback&&Ta(t):(r=null!==(i=e.memoizedState),n||null===i||null!==(i=e.child.sibling)&&(null!==(l=t.firstEffect)?(t.firstEffect=i,i.nextEffect=l):(t.firstEffect=t.lastEffect=i,i.nextEffect=null),i.effectTag=8)),n&&!r&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Li.current)?Tl===wl&&(Tl=xl):(Tl!==wl&&Tl!==xl||(Tl=kl),0!==jl&&null!==Sl&&(Au(Sl,El),Nu(Sl,jl)))),(n||r)&&(t.effectTag|=4),null);case 4:return Ai(),null;case 10:return ti(t),null;case 17:return vo(t.type)&&go(),null;case 19:if(uo(Li),null===(r=t.memoizedState))return null;if(i=0!=(64&t.effectTag),null===(l=r.rendering)){if(i)Qa(r,!1);else if(Tl!==wl||null!==e&&0!=(64&e.effectTag))for(l=t.child;null!==l;){if(null!==(e=Ii(l))){for(t.effectTag|=64,Qa(r,!1),null!==(i=e.updateQueue)&&(t.updateQueue=i,t.effectTag|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=t.child;null!==r;)l=n,(i=r).effectTag&=2,i.nextEffect=null,i.firstEffect=null,i.lastEffect=null,null===(e=i.alternate)?(i.childExpirationTime=0,i.expirationTime=l,i.child=null,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null):(i.childExpirationTime=e.childExpirationTime,i.expirationTime=e.expirationTime,i.child=e.child,i.memoizedProps=e.memoizedProps,i.memoizedState=e.memoizedState,i.updateQueue=e.updateQueue,l=e.dependencies,i.dependencies=null===l?null:{expirationTime:l.expirationTime,firstContext:l.firstContext,responders:l.responders}),r=r.sibling;return so(Li,1&Li.current|2),t.child}l=l.sibling}}else{if(!i)if(null!==(e=Ii(l))){if(t.effectTag|=64,i=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.effectTag|=4),Qa(r,!0),null===r.tail&&"hidden"===r.tailMode&&!l.alternate)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Uo()-r.renderingStartTime>r.tailExpiration&&1<n&&(t.effectTag|=64,i=!0,Qa(r,!1),t.expirationTime=t.childExpirationTime=n-1);r.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=r.last)?n.sibling=l:t.child=l,r.last=l)}return null!==r.tail?(0===r.tailExpiration&&(r.tailExpiration=Uo()+500),n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Uo(),n.sibling=null,t=Li.current,so(Li,i?1&t|2:1&t),n):null}throw Error(a(156,t.tag))}function Ya(e){switch(e.tag){case 1:vo(e.type)&&go();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(Ai(),uo(po),uo(fo),0!=(64&(t=e.effectTag)))throw Error(a(285));return e.effectTag=-4097&t|64,e;case 5:return zi(e),null;case 13:return uo(Li),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return uo(Li),null;case 4:return Ai(),null;case 10:return ti(e),null;default:return null}}function Xa(e,t){return{value:e,source:t,stack:ge(t)}}Ua=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ba=function(e,t,n,r,i){var a=e.memoizedProps;if(a!==r){var l,u,s=t.stateNode;switch(Ri(Oi.current),e=null,n){case"input":a=ke(s,a),r=ke(s,r),e=[];break;case"option":a=Oe(s,a),r=Oe(s,r),e=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":a=Me(s,a),r=Me(s,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(s.onclick=sn)}for(l in on(n,r),n=null,a)if(!r.hasOwnProperty(l)&&a.hasOwnProperty(l)&&null!=a[l])if("style"===l)for(u in s=a[l])s.hasOwnProperty(u)&&(n||(n={}),n[u]="");else"dangerouslySetInnerHTML"!==l&&"children"!==l&&"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(S.hasOwnProperty(l)?e||(e=[]):(e=e||[]).push(l,null));for(l in r){var c=r[l];if(s=null!=a?a[l]:void 0,r.hasOwnProperty(l)&&c!==s&&(null!=c||null!=s))if("style"===l)if(s){for(u in s)!s.hasOwnProperty(u)||c&&c.hasOwnProperty(u)||(n||(n={}),n[u]="");for(u in c)c.hasOwnProperty(u)&&s[u]!==c[u]&&(n||(n={}),n[u]=c[u])}else n||(e||(e=[]),e.push(l,n)),n=c;else"dangerouslySetInnerHTML"===l?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(e=e||[]).push(l,c)):"children"===l?s===c||"string"!=typeof c&&"number"!=typeof c||(e=e||[]).push(l,""+c):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&(S.hasOwnProperty(l)?(null!=c&&un(i,l),e||s===c||(e=[])):(e=e||[]).push(l,c))}n&&(e=e||[]).push("style",n),i=e,(t.updateQueue=i)&&(t.effectTag|=4)}},$a=function(e,t,n,r){n!==r&&(t.effectTag|=4)};var Ja="function"==typeof WeakSet?WeakSet:Set;function el(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=ge(n)),null!==n&&ve(n.type),t=t.value,null!==e&&1===e.tag&&ve(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function tl(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){yu(e,t)}else t.current=null}function nl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Qo(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(a(163))}function rl(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.destroy;n.destroy=void 0,void 0!==r&&r()}n=n.next}while(n!==t)}}function ol(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function il(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:return void ol(3,n);case 1:if(e=n.stateNode,4&n.effectTag)if(null===t)e.componentDidMount();else{var r=n.elementType===n.type?t.memoizedProps:Qo(n.type,t.memoizedProps);e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate)}return void(null!==(t=n.updateQueue)&&di(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}di(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.effectTag&&gn(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&Lt(n)))));case 19:case 17:case 20:case 21:return}throw Error(a(163))}function al(e,t,n){switch("function"==typeof ku&&ku(t),t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;Ho(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var o=t;try{n()}catch(e){yu(o,e)}}e=e.next}while(e!==r)}))}break;case 1:tl(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){yu(e,t)}}(t,n);break;case 5:tl(t);break;case 4:cl(e,t,n)}}function ll(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,e.stateNode=null,null!==t&&ll(t)}function ul(e){return 5===e.tag||3===e.tag||4===e.tag}function sl(e){e:{for(var t=e.return;null!==t;){if(ul(t)){var n=t;break e}t=t.return}throw Error(a(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.effectTag&&(Ue(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||ul(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}r?function e(t,n,r){var o=t.tag,i=5===o||6===o;if(i)t=i?t.stateNode:t.stateNode.instance,n?8===r.nodeType?r.parentNode.insertBefore(t,n):r.insertBefore(t,n):(8===r.nodeType?(n=r.parentNode).insertBefore(t,r):(n=r).appendChild(t),null!==(r=r._reactRootContainer)&&void 0!==r||null!==n.onclick||(n.onclick=sn));else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t):function e(t,n,r){var o=t.tag,i=5===o||6===o;if(i)t=i?t.stateNode:t.stateNode.instance,n?r.insertBefore(t,n):r.appendChild(t);else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t)}function cl(e,t,n){for(var r,o,i=t,l=!1;;){if(!l){l=i.return;e:for(;;){if(null===l)throw Error(a(160));switch(r=l.stateNode,l.tag){case 5:o=!1;break e;case 3:case 4:r=r.containerInfo,o=!0;break e}l=l.return}l=!0}if(5===i.tag||6===i.tag){e:for(var u=e,s=i,c=n,f=s;;)if(al(u,f,c),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===s)break e;for(;null===f.sibling;){if(null===f.return||f.return===s)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}o?(u=r,s=i.stateNode,8===u.nodeType?u.parentNode.removeChild(s):u.removeChild(s)):r.removeChild(i.stateNode)}else if(4===i.tag){if(null!==i.child){r=i.stateNode.containerInfo,o=!0,i.child.return=i,i=i.child;continue}}else if(al(e,i,n),null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)return;4===(i=i.return).tag&&(l=!1)}i.sibling.return=i.return,i=i.sibling}}function fl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void rl(3,t);case 1:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[Cn]=r,"input"===e&&"radio"===r.type&&null!=r.name&&Se(n,r),an(e,o),t=an(e,r),o=0;o<i.length;o+=2){var l=i[o],u=i[o+1];"style"===l?nn(n,u):"dangerouslySetInnerHTML"===l?Fe(n,u):"children"===l?Ue(n,u):Y(n,l,u,t)}switch(e){case"input":Ce(n,r);break;case"textarea":je(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?Pe(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?Pe(n,!!r.multiple,r.defaultValue,!0):Pe(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((t=t.stateNode).hydrate&&(t.hydrate=!1,Lt(t.containerInfo)));case 12:return;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,Nl=Uo()),null!==n)e:for(e=n;;){if(5===e.tag)i=e.stateNode,r?"function"==typeof(i=i.style).setProperty?i.setProperty("display","none","important"):i.display="none":(i=e.stateNode,o=null!=(o=e.memoizedProps.style)&&o.hasOwnProperty("display")?o.display:null,i.style.display=tn("display",o));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(i=e.child.sibling).return=e,e=i;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}return void dl(t);case 19:return void dl(t);case 17:return}throw Error(a(163))}function dl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Ja),t.forEach((function(t){var r=wu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var pl="function"==typeof WeakMap?WeakMap:Map;function hl(e,t,n){(n=ui(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Ll||(Ll=!0,Il=r),el(e,t)},n}function ml(e,t,n){(n=ui(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return el(e,t),r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Dl?Dl=new Set([this]):Dl.add(this),el(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var vl,gl=Math.ceil,yl=Z.ReactCurrentDispatcher,bl=Z.ReactCurrentOwner,wl=0,xl=3,kl=4,_l=0,Sl=null,Cl=null,El=0,Tl=wl,Ol=null,Pl=1073741823,Ml=1073741823,Rl=null,jl=0,Al=!1,Nl=0,zl=null,Ll=!1,Il=null,Dl=null,Fl=!1,Ul=null,Bl=90,$l=null,Hl=0,Vl=null,Wl=0;function ql(){return 0!=(48&_l)?1073741821-(Uo()/10|0):0!==Wl?Wl:Wl=1073741821-(Uo()/10|0)}function Kl(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=Bo();if(0==(4&t))return 99===r?1073741823:1073741822;if(0!=(16&_l))return El;if(null!==n)e=Go(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=Go(e,150,100);break;case 97:case 96:e=Go(e,5e3,250);break;case 95:e=2;break;default:throw Error(a(326))}return null!==Sl&&e===El&&--e,e}function Gl(e,t){if(50<Hl)throw Hl=0,Vl=null,Error(a(185));if(null!==(e=Ql(e,t))){var n=Bo();1073741823===t?0!=(8&_l)&&0==(48&_l)?Jl(e):(Yl(e),0===_l&&qo()):Yl(e),0==(4&_l)||98!==n&&99!==n||(null===$l?$l=new Map([[e,t]]):(void 0===(n=$l.get(e))||n>t)&&$l.set(e,t))}}function Ql(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return null!==o&&(Sl===o&&(au(t),Tl===kl&&Au(o,El)),Nu(o,t)),o}function Zl(e){var t=e.lastExpiredTime;if(0!==t)return t;if(!ju(e,t=e.firstPendingTime))return t;var n=e.lastPingedTime;return 2>=(e=n>(e=e.nextKnownPendingLevel)?n:e)&&t!==e?0:e}function Yl(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=Wo(Jl.bind(null,e));else{var t=Zl(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=ql();if(1073741823===t?r=99:1===t||2===t?r=95:r=0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var o=e.callbackPriority;if(e.callbackExpirationTime===t&&o>=r)return;n!==Ao&&So(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?Wo(Jl.bind(null,e)):Vo(r,Xl.bind(null,e),{timeout:10*(1073741821-t)-Uo()}),e.callbackNode=t}}}function Xl(e,t){if(Wl=0,t)return zu(e,t=ql()),Yl(e),null;var n=Zl(e);if(0!==n){if(t=e.callbackNode,0!=(48&_l))throw Error(a(327));if(mu(),e===Sl&&n===El||nu(e,n),null!==Cl){var r=_l;_l|=16;for(var o=ou();;)try{uu();break}catch(t){ru(e,t)}if(ei(),_l=r,yl.current=o,1===Tl)throw t=Ol,nu(e,n),Au(e,n),Yl(e),t;if(null===Cl)switch(o=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=Tl,Sl=null,r){case wl:case 1:throw Error(a(345));case 2:zu(e,2<n?2:n);break;case xl:if(Au(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=fu(o)),1073741823===Pl&&10<(o=Nl+500-Uo())){if(Al){var i=e.lastPingedTime;if(0===i||i>=n){e.lastPingedTime=n,nu(e,n);break}}if(0!==(i=Zl(e))&&i!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=bn(du.bind(null,e),o);break}du(e);break;case kl:if(Au(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=fu(o)),Al&&(0===(o=e.lastPingedTime)||o>=n)){e.lastPingedTime=n,nu(e,n);break}if(0!==(o=Zl(e))&&o!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==Ml?r=10*(1073741821-Ml)-Uo():1073741823===Pl?r=0:(r=10*(1073741821-Pl)-5e3,0>(r=(o=Uo())-r)&&(r=0),(n=10*(1073741821-n)-o)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*gl(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=bn(du.bind(null,e),r);break}du(e);break;case 5:if(1073741823!==Pl&&null!==Rl){i=Pl;var l=Rl;if(0>=(r=0|l.busyMinDurationMs)?r=0:(o=0|l.busyDelayMs,r=(i=Uo()-(10*(1073741821-i)-(0|l.timeoutMs||5e3)))<=o?0:o+r-i),10<r){Au(e,n),e.timeoutHandle=bn(du.bind(null,e),r);break}}du(e);break;default:throw Error(a(329))}if(Yl(e),e.callbackNode===t)return Xl.bind(null,e)}}return null}function Jl(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,0!=(48&_l))throw Error(a(327));if(mu(),e===Sl&&t===El||nu(e,t),null!==Cl){var n=_l;_l|=16;for(var r=ou();;)try{lu();break}catch(t){ru(e,t)}if(ei(),_l=n,yl.current=r,1===Tl)throw n=Ol,nu(e,t),Au(e,t),Yl(e),n;if(null!==Cl)throw Error(a(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,Sl=null,du(e),Yl(e)}return null}function eu(e,t){var n=_l;_l|=1;try{return e(t)}finally{0===(_l=n)&&qo()}}function tu(e,t){var n=_l;_l&=-2,_l|=8;try{return e(t)}finally{0===(_l=n)&&qo()}}function nu(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,wn(n)),null!==Cl)for(n=Cl.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&go();break;case 3:Ai(),uo(po),uo(fo);break;case 5:zi(r);break;case 4:Ai();break;case 13:case 19:uo(Li);break;case 10:ti(r)}n=n.return}Sl=e,Cl=Eu(e.current,null),El=t,Tl=wl,Ol=null,Ml=Pl=1073741823,Rl=null,jl=0,Al=!1}function ru(e,t){for(;;){try{if(ei(),Fi.current=va,Wi)for(var n=$i.memoizedState;null!==n;){var r=n.queue;null!==r&&(r.pending=null),n=n.next}if(Bi=0,Vi=Hi=$i=null,Wi=!1,null===Cl||null===Cl.return)return Tl=1,Ol=t,Cl=null;e:{var o=e,i=Cl.return,a=Cl,l=t;if(t=El,a.effectTag|=2048,a.firstEffect=a.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var u=l;if(0==(2&a.mode)){var s=a.alternate;s?(a.updateQueue=s.updateQueue,a.memoizedState=s.memoizedState,a.expirationTime=s.expirationTime):(a.updateQueue=null,a.memoizedState=null)}var c=0!=(1&Li.current),f=i;do{var d;if(d=13===f.tag){var p=f.memoizedState;if(null!==p)d=null!==p.dehydrated;else{var h=f.memoizedProps;d=void 0!==h.fallback&&(!0!==h.unstable_avoidThisFallback||!c)}}if(d){var m=f.updateQueue;if(null===m){var v=new Set;v.add(u),f.updateQueue=v}else m.add(u);if(0==(2&f.mode)){if(f.effectTag|=64,a.effectTag&=-2981,1===a.tag)if(null===a.alternate)a.tag=17;else{var g=ui(1073741823,null);g.tag=2,si(a,g)}a.expirationTime=1073741823;break e}l=void 0,a=t;var y=o.pingCache;if(null===y?(y=o.pingCache=new pl,l=new Set,y.set(u,l)):void 0===(l=y.get(u))&&(l=new Set,y.set(u,l)),!l.has(a)){l.add(a);var b=bu.bind(null,o,u,a);u.then(b,b)}f.effectTag|=4096,f.expirationTime=t;break e}f=f.return}while(null!==f);l=Error((ve(a.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+ge(a))}5!==Tl&&(Tl=2),l=Xa(l,a),f=i;do{switch(f.tag){case 3:u=l,f.effectTag|=4096,f.expirationTime=t,ci(f,hl(f,u,t));break e;case 1:u=l;var w=f.type,x=f.stateNode;if(0==(64&f.effectTag)&&("function"==typeof w.getDerivedStateFromError||null!==x&&"function"==typeof x.componentDidCatch&&(null===Dl||!Dl.has(x)))){f.effectTag|=4096,f.expirationTime=t,ci(f,ml(f,u,t));break e}}f=f.return}while(null!==f)}Cl=cu(Cl)}catch(e){t=e;continue}break}}function ou(){var e=yl.current;return yl.current=va,null===e?va:e}function iu(e,t){e<Pl&&2<e&&(Pl=e),null!==t&&e<Ml&&2<e&&(Ml=e,Rl=t)}function au(e){e>jl&&(jl=e)}function lu(){for(;null!==Cl;)Cl=su(Cl)}function uu(){for(;null!==Cl&&!No();)Cl=su(Cl)}function su(e){var t=vl(e.alternate,e,El);return e.memoizedProps=e.pendingProps,null===t&&(t=cu(e)),bl.current=null,t}function cu(e){Cl=e;do{var t=Cl.alternate;if(e=Cl.return,0==(2048&Cl.effectTag)){if(t=Za(t,Cl,El),1===El||1!==Cl.childExpirationTime){for(var n=0,r=Cl.child;null!==r;){var o=r.expirationTime,i=r.childExpirationTime;o>n&&(n=o),i>n&&(n=i),r=r.sibling}Cl.childExpirationTime=n}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=Cl.firstEffect),null!==Cl.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=Cl.firstEffect),e.lastEffect=Cl.lastEffect),1<Cl.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=Cl:e.firstEffect=Cl,e.lastEffect=Cl))}else{if(null!==(t=Ya(Cl)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=Cl.sibling))return t;Cl=e}while(null!==Cl);return Tl===wl&&(Tl=5),null}function fu(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function du(e){var t=Bo();return Ho(99,pu.bind(null,e,t)),null}function pu(e,t){do{mu()}while(null!==Ul);if(0!=(48&_l))throw Error(a(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var o=fu(n);if(e.firstPendingTime=o,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===Sl&&(Cl=Sl=null,El=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,o=n.firstEffect):o=n:o=n.firstEffect,null!==o){var i=_l;_l|=32,bl.current=null,mn=qt;var l=pn();if(hn(l)){if("selectionStart"in l)var u={start:l.selectionStart,end:l.selectionEnd};else e:{var s=(u=(u=l.ownerDocument)&&u.defaultView||window).getSelection&&u.getSelection();if(s&&0!==s.rangeCount){u=s.anchorNode;var c=s.anchorOffset,f=s.focusNode;s=s.focusOffset;try{u.nodeType,f.nodeType}catch(e){u=null;break e}var d=0,p=-1,h=-1,m=0,v=0,g=l,y=null;t:for(;;){for(var b;g!==u||0!==c&&3!==g.nodeType||(p=d+c),g!==f||0!==s&&3!==g.nodeType||(h=d+s),3===g.nodeType&&(d+=g.nodeValue.length),null!==(b=g.firstChild);)y=g,g=b;for(;;){if(g===l)break t;if(y===u&&++m===c&&(p=d),y===f&&++v===s&&(h=d),null!==(b=g.nextSibling))break;y=(g=y).parentNode}g=b}u=-1===p||-1===h?null:{start:p,end:h}}else u=null}u=u||{start:0,end:0}}else u=null;vn={activeElementDetached:null,focusedElem:l,selectionRange:u},qt=!1,zl=o;do{try{hu()}catch(e){if(null===zl)throw Error(a(330));yu(zl,e),zl=zl.nextEffect}}while(null!==zl);zl=o;do{try{for(l=e,u=t;null!==zl;){var w=zl.effectTag;if(16&w&&Ue(zl.stateNode,""),128&w){var x=zl.alternate;if(null!==x){var k=x.ref;null!==k&&("function"==typeof k?k(null):k.current=null)}}switch(1038&w){case 2:sl(zl),zl.effectTag&=-3;break;case 6:sl(zl),zl.effectTag&=-3,fl(zl.alternate,zl);break;case 1024:zl.effectTag&=-1025;break;case 1028:zl.effectTag&=-1025,fl(zl.alternate,zl);break;case 4:fl(zl.alternate,zl);break;case 8:cl(l,c=zl,u),ll(c)}zl=zl.nextEffect}}catch(e){if(null===zl)throw Error(a(330));yu(zl,e),zl=zl.nextEffect}}while(null!==zl);if(k=vn,x=pn(),w=k.focusedElem,u=k.selectionRange,x!==w&&w&&w.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(w.ownerDocument.documentElement,w)){null!==u&&hn(w)&&(x=u.start,void 0===(k=u.end)&&(k=x),"selectionStart"in w?(w.selectionStart=x,w.selectionEnd=Math.min(k,w.value.length)):(k=(x=w.ownerDocument||document)&&x.defaultView||window).getSelection&&(k=k.getSelection(),c=w.textContent.length,l=Math.min(u.start,c),u=void 0===u.end?l:Math.min(u.end,c),!k.extend&&l>u&&(c=u,u=l,l=c),c=dn(w,l),f=dn(w,u),c&&f&&(1!==k.rangeCount||k.anchorNode!==c.node||k.anchorOffset!==c.offset||k.focusNode!==f.node||k.focusOffset!==f.offset)&&((x=x.createRange()).setStart(c.node,c.offset),k.removeAllRanges(),l>u?(k.addRange(x),k.extend(f.node,f.offset)):(x.setEnd(f.node,f.offset),k.addRange(x))))),x=[];for(k=w;k=k.parentNode;)1===k.nodeType&&x.push({element:k,left:k.scrollLeft,top:k.scrollTop});for("function"==typeof w.focus&&w.focus(),w=0;w<x.length;w++)(k=x[w]).element.scrollLeft=k.left,k.element.scrollTop=k.top}qt=!!mn,vn=mn=null,e.current=n,zl=o;do{try{for(w=e;null!==zl;){var _=zl.effectTag;if(36&_&&il(w,zl.alternate,zl),128&_){x=void 0;var S=zl.ref;if(null!==S){var C=zl.stateNode;switch(zl.tag){case 5:x=C;break;default:x=C}"function"==typeof S?S(x):S.current=x}}zl=zl.nextEffect}}catch(e){if(null===zl)throw Error(a(330));yu(zl,e),zl=zl.nextEffect}}while(null!==zl);zl=null,zo(),_l=i}else e.current=n;if(Fl)Fl=!1,Ul=e,Bl=t;else for(zl=o;null!==zl;)t=zl.nextEffect,zl.nextEffect=null,zl=t;if(0===(t=e.firstPendingTime)&&(Dl=null),1073741823===t?e===Vl?Hl++:(Hl=0,Vl=e):Hl=0,"function"==typeof xu&&xu(n.stateNode,r),Yl(e),Ll)throw Ll=!1,e=Il,Il=null,e;return 0!=(8&_l)||qo(),null}function hu(){for(;null!==zl;){var e=zl.effectTag;0!=(256&e)&&nl(zl.alternate,zl),0==(512&e)||Fl||(Fl=!0,Vo(97,(function(){return mu(),null}))),zl=zl.nextEffect}}function mu(){if(90!==Bl){var e=97<Bl?97:Bl;return Bl=90,Ho(e,vu)}}function vu(){if(null===Ul)return!1;var e=Ul;if(Ul=null,0!=(48&_l))throw Error(a(331));var t=_l;for(_l|=32,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:case 22:rl(5,n),ol(5,n)}}catch(t){if(null===e)throw Error(a(330));yu(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return _l=t,qo(),!0}function gu(e,t,n){si(e,t=hl(e,t=Xa(n,t),1073741823)),null!==(e=Ql(e,1073741823))&&Yl(e)}function yu(e,t){if(3===e.tag)gu(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){gu(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Dl||!Dl.has(r))){si(n,e=ml(n,e=Xa(t,e),1073741823)),null!==(n=Ql(n,1073741823))&&Yl(n);break}}n=n.return}}function bu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),Sl===e&&El===n?Tl===kl||Tl===xl&&1073741823===Pl&&Uo()-Nl<500?nu(e,El):Al=!0:ju(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,Yl(e)))}function wu(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=Kl(t=ql(),e,null)),null!==(e=Ql(e,t))&&Yl(e)}vl=function(e,t,n){var r=t.expirationTime;if(null!==e){var o=t.pendingProps;if(e.memoizedProps!==o||po.current)Ma=!0;else{if(r<n){switch(Ma=!1,t.tag){case 3:Fa(t),Oa();break;case 5:if(Ni(t),4&t.mode&&1!==n&&o.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:vo(t.type)&&wo(t);break;case 4:ji(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value,o=t.type._context,so(Zo,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?Va(e,t,n):(so(Li,1&Li.current),null!==(t=Ga(e,t,n))?t.sibling:null);so(Li,1&Li.current);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return Ka(e,t,n);t.effectTag|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null),so(Li,Li.current),!r)return null}return Ga(e,t,n)}Ma=!1}}else Ma=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,o=mo(t,fo.current),ri(t,n),o=Gi(null,t,r,e,o,n),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,vo(r)){var i=!0;wo(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,ai(t);var l=r.getDerivedStateFromProps;"function"==typeof l&&mi(t,r,l,e),o.updater=vi,t.stateNode=o,o._reactInternalFiber=t,wi(t,r,e,n),t=Da(null,t,r,!0,i,n)}else t.tag=0,Ra(null,t,o,n),t=t.child;return t;case 16:e:{if(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(o),1!==o._status)throw o._result;switch(o=o._result,t.type=o,i=t.tag=function(e){if("function"==typeof e)return Cu(e)?1:0;if(null!=e){if((e=e.$$typeof)===ue)return 11;if(e===fe)return 14}return 2}(o),e=Qo(o,e),i){case 0:t=La(null,t,o,e,n);break e;case 1:t=Ia(null,t,o,e,n);break e;case 11:t=ja(null,t,o,e,n);break e;case 14:t=Aa(null,t,o,Qo(o.type,e),r,n);break e}throw Error(a(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,La(e,t,r,o=t.elementType===r?o:Qo(r,o),n);case 1:return r=t.type,o=t.pendingProps,Ia(e,t,r,o=t.elementType===r?o:Qo(r,o),n);case 3:if(Fa(t),r=t.updateQueue,null===e||null===r)throw Error(a(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,li(e,t),fi(t,r,null,n),(r=t.memoizedState.element)===o)Oa(),t=Ga(e,t,n);else{if((o=t.stateNode.hydrate)&&(xa=xn(t.stateNode.containerInfo.firstChild),wa=t,o=ka=!0),o)for(n=Ei(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else Ra(e,t,r,n),Oa();t=t.child}return t;case 5:return Ni(t),null===e&&Ca(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,l=o.children,yn(r,o)?l=null:null!==i&&yn(r,i)&&(t.effectTag|=16),za(e,t),4&t.mode&&1!==n&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Ra(e,t,l,n),t=t.child),t;case 6:return null===e&&Ca(t),null;case 13:return Va(e,t,n);case 4:return ji(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Ci(t,null,r,n):Ra(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,ja(e,t,r,o=t.elementType===r?o:Qo(r,o),n);case 7:return Ra(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ra(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,l=t.memoizedProps,i=o.value;var u=t.type._context;if(so(Zo,u._currentValue),u._currentValue=i,null!==l)if(u=l.value,0===(i=Ir(u,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,i):1073741823))){if(l.children===o.children&&!po.current){t=Ga(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var s=u.dependencies;if(null!==s){l=u.child;for(var c=s.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&i)){1===u.tag&&((c=ui(n,null)).tag=2,si(u,c)),u.expirationTime<n&&(u.expirationTime=n),null!==(c=u.alternate)&&c.expirationTime<n&&(c.expirationTime=n),ni(u.return,n),s.expirationTime<n&&(s.expirationTime=n);break}c=c.next}}else l=10===u.tag&&u.type===t.type?null:u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===t){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}Ra(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,ri(t,n),r=r(o=oi(o,i.unstable_observedBits)),t.effectTag|=1,Ra(e,t,r,n),t.child;case 14:return i=Qo(o=t.type,t.pendingProps),Aa(e,t,o,i=Qo(o.type,i),r,n);case 15:return Na(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Qo(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,vo(r)?(e=!0,wo(t)):e=!1,ri(t,n),yi(t,r,o),wi(t,r,o,n),Da(null,t,r,!0,e,n);case 19:return Ka(e,t,n)}throw Error(a(156,t.tag))};var xu=null,ku=null;function _u(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Su(e,t,n,r){return new _u(e,t,n,r)}function Cu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Eu(e,t){var n=e.alternate;return null===n?((n=Su(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Tu(e,t,n,r,o,i){var l=2;if(r=e,"function"==typeof e)Cu(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case ne:return Ou(n.children,o,i,t);case le:l=8,o|=7;break;case re:l=8,o|=1;break;case oe:return(e=Su(12,n,t,8|o)).elementType=oe,e.type=oe,e.expirationTime=i,e;case se:return(e=Su(13,n,t,o)).type=se,e.elementType=se,e.expirationTime=i,e;case ce:return(e=Su(19,n,t,o)).elementType=ce,e.expirationTime=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case ie:l=10;break e;case ae:l=9;break e;case ue:l=11;break e;case fe:l=14;break e;case de:l=16,r=null;break e;case pe:l=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Su(l,n,t,o)).elementType=e,t.type=r,t.expirationTime=i,t}function Ou(e,t,n,r){return(e=Su(7,e,r,t)).expirationTime=n,e}function Pu(e,t,n){return(e=Su(6,e,null,t)).expirationTime=n,e}function Mu(e,t,n){return(t=Su(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Ru(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function ju(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function Au(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function Nu(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function zu(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function Lu(e,t,n,r){var o=t.current,i=ql(),l=pi.suspense;i=Kl(i,o,l);e:if(n){t:{if(Je(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(a(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(vo(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(a(171))}if(1===n.tag){var s=n.type;if(vo(s)){n=bo(n,s,u);break e}}n=u}else n=co;return null===t.context?t.context=n:t.pendingContext=n,(t=ui(i,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),si(o,t),Gl(o,i),i}function Iu(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Du(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function Fu(e,t){Du(e,t),(e=e.alternate)&&Du(e,t)}function Uu(e,t,n){var r=new Ru(e,t,n=null!=n&&!0===n.hydrate),o=Su(3,null,null,2===t?7:1===t?3:0);r.current=o,o.stateNode=r,ai(o),e[En]=r.current,n&&0!==t&&function(e,t){var n=Xe(t);Et.forEach((function(e){ht(e,t,n)})),Tt.forEach((function(e){ht(e,t,n)}))}(0,9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function Bu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function $u(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i._internalRoot;if("function"==typeof o){var l=o;o=function(){var e=Iu(a);l.call(e)}}Lu(t,a,e,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Uu(e,0,t?{hydrate:!0}:void 0)}(n,r),a=i._internalRoot,"function"==typeof o){var u=o;o=function(){var e=Iu(a);u.call(e)}}tu((function(){Lu(t,a,e,o)}))}return Iu(a)}function Hu(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:te,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Vu(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Bu(t))throw Error(a(200));return Hu(e,t,null,n)}Uu.prototype.render=function(e){Lu(e,this._internalRoot,null,null)},Uu.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Lu(null,e,null,(function(){t[En]=null}))},mt=function(e){if(13===e.tag){var t=Go(ql(),150,100);Gl(e,t),Fu(e,t)}},vt=function(e){13===e.tag&&(Gl(e,3),Fu(e,3))},gt=function(e){if(13===e.tag){var t=ql();Gl(e,t=Kl(t,e,null)),Fu(e,t)}},O=function(e,t,n){switch(t){case"input":if(Ce(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=Mn(r);if(!o)throw Error(a(90));xe(r),Ce(r,o)}}}break;case"textarea":je(e,n);break;case"select":null!=(t=n.value)&&Pe(e,!!n.multiple,t,!1)}},N=eu,z=function(e,t,n,r,o){var i=_l;_l|=4;try{return Ho(98,e.bind(null,t,n,r,o))}finally{0===(_l=i)&&qo()}},L=function(){0==(49&_l)&&(function(){if(null!==$l){var e=$l;$l=null,e.forEach((function(e,t){zu(t,e),Yl(t)})),qo()}}(),mu())},I=function(e,t){var n=_l;_l|=2;try{return e(t)}finally{0===(_l=n)&&qo()}};var Wu,qu,Ku={Events:[On,Pn,Mn,E,_,In,function(e){ot(e,Ln)},j,A,Yt,lt,mu,{current:!1}]};qu=(Wu={findFiberByHostInstance:Tn,bundleType:0,version:"16.13.1",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);xu=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},ku=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(o({},Wu,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:Z.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=nt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return qu?qu(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null})),t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Ku,t.createPortal=Vu,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return e=null===(e=nt(t))?null:e.stateNode},t.flushSync=function(e,t){if(0!=(48&_l))throw Error(a(187));var n=_l;_l|=1;try{return Ho(99,e.bind(null,t))}finally{_l=n,qo()}},t.hydrate=function(e,t,n){if(!Bu(t))throw Error(a(200));return $u(null,e,t,!0,n)},t.render=function(e,t,n){if(!Bu(t))throw Error(a(200));return $u(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Bu(e))throw Error(a(40));return!!e._reactRootContainer&&(tu((function(){$u(null,null,e,!1,(function(){e._reactRootContainer=null,e[En]=null}))})),!0)},t.unstable_batchedUpdates=eu,t.unstable_createPortal=function(e,t){return Vu(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Bu(n))throw Error(a(200));if(null==e||void 0===e._reactInternalFiber)throw Error(a(38));return $u(e,t,n,!1,r)},t.version="16.13.1"},function(e,t,n){"use strict";e.exports=n(64)},function(e,t,n){"use strict";
/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,o,i,a,l;if("undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,s=null,c=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(c,0),e}},f=Date.now();t.unstable_now=function(){return Date.now()-f},r=function(e){null!==u?setTimeout(r,0,e):(u=e,setTimeout(c,0))},o=function(e,t){s=setTimeout(e,t)},i=function(){clearTimeout(s)},a=function(){return!1},l=t.unstable_forceFrameRate=function(){}}else{var d=window.performance,p=window.Date,h=window.setTimeout,m=window.clearTimeout;if("undefined"!=typeof console){var v=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof v&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof d&&"function"==typeof d.now)t.unstable_now=function(){return d.now()};else{var g=p.now();t.unstable_now=function(){return p.now()-g}}var y=!1,b=null,w=-1,x=5,k=0;a=function(){return t.unstable_now()>=k},l=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):x=0<e?Math.floor(1e3/e):5};var _=new MessageChannel,S=_.port2;_.port1.onmessage=function(){if(null!==b){var e=t.unstable_now();k=e+x;try{b(!0,e)?S.postMessage(null):(y=!1,b=null)}catch(e){throw S.postMessage(null),e}}else y=!1},r=function(e){b=e,y||(y=!0,S.postMessage(null))},o=function(e,n){w=h((function(){e(t.unstable_now())}),n)},i=function(){m(w),w=-1}}function C(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<O(o,t)))break e;e[r]=t,e[n]=o,n=r}}function E(e){return void 0===(e=e[0])?null:e}function T(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var i=2*(r+1)-1,a=e[i],l=i+1,u=e[l];if(void 0!==a&&0>O(a,n))void 0!==u&&0>O(u,a)?(e[r]=u,e[l]=n,r=l):(e[r]=a,e[i]=n,r=i);else{if(!(void 0!==u&&0>O(u,n)))break e;e[r]=u,e[l]=n,r=l}}}return t}return null}function O(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var P=[],M=[],R=1,j=null,A=3,N=!1,z=!1,L=!1;function I(e){for(var t=E(M);null!==t;){if(null===t.callback)T(M);else{if(!(t.startTime<=e))break;T(M),t.sortIndex=t.expirationTime,C(P,t)}t=E(M)}}function D(e){if(L=!1,I(e),!z)if(null!==E(P))z=!0,r(F);else{var t=E(M);null!==t&&o(D,t.startTime-e)}}function F(e,n){z=!1,L&&(L=!1,i()),N=!0;var r=A;try{for(I(n),j=E(P);null!==j&&(!(j.expirationTime>n)||e&&!a());){var l=j.callback;if(null!==l){j.callback=null,A=j.priorityLevel;var u=l(j.expirationTime<=n);n=t.unstable_now(),"function"==typeof u?j.callback=u:j===E(P)&&T(P),I(n)}else T(P);j=E(P)}if(null!==j)var s=!0;else{var c=E(M);null!==c&&o(D,c.startTime-n),s=!1}return s}finally{j=null,A=r,N=!1}}function U(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var B=l;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){z||N||(z=!0,r(F))},t.unstable_getCurrentPriorityLevel=function(){return A},t.unstable_getFirstCallbackNode=function(){return E(P)},t.unstable_next=function(e){switch(A){case 1:case 2:case 3:var t=3;break;default:t=A}var n=A;A=t;try{return e()}finally{A=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=B,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=A;A=e;try{return t()}finally{A=n}},t.unstable_scheduleCallback=function(e,n,a){var l=t.unstable_now();if("object"==typeof a&&null!==a){var u=a.delay;u="number"==typeof u&&0<u?l+u:l,a="number"==typeof a.timeout?a.timeout:U(e)}else a=U(e),u=l;return e={id:R++,callback:n,priorityLevel:e,startTime:u,expirationTime:a=u+a,sortIndex:-1},u>l?(e.sortIndex=u,C(M,e),null===E(P)&&e===E(M)&&(L?i():L=!0,o(D,u-l))):(e.sortIndex=a,C(P,e),z||N||(z=!0,r(F))),e},t.unstable_shouldYield=function(){var e=t.unstable_now();I(e);var n=E(P);return n!==j&&null!==j&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<j.expirationTime||a()},t.unstable_wrapCallback=function(e){var t=A;return function(){var n=A;A=t;try{return e.apply(this,arguments)}finally{A=n}}}},function(e,t,n){var r=n(66);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0};n(68)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=e.exports=n(67)(!1)).push([e.i,"@import url(https://fonts.googleapis.com/css?family=Raleway:300,400,600);",""]),t.push([e.i,"* {\n  font-family: 'Raleway', sans-serif; }\n\n* {\n  box-sizing: border-box; }\n\nbody {\n  background: #ececec; }\n\n.home {\n  display: block;\n  width: 1024px;\n  height: auto;\n  margin: 50px auto;\n  background: #fff;\n  border-radius: 5px;\n  padding: 15px 50px; }\n",""])},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),i=r.sources.map((function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"}));return[n].concat(i).concat([o]).join("\n")}var a;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n})).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<e.length;o++){var a=e[o];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},function(e,t,n){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),l=function(e){var t={};return function(n){if(void 0===t[n]){var r=e.call(this,n);if(r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[n]=r}return t[n]}}((function(e){return document.querySelector(e)})),u=null,s=0,c=[],f=n(69);function d(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(y(r.parts[a],t))}else{var l=[];for(a=0;a<r.parts.length;a++)l.push(y(r.parts[a],t));i[r.id]={id:r.id,refs:1,parts:l}}}}function p(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=t.base?i[0]+t.base:i[0],l={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(l):n.push(r[a]={id:a,parts:[l]})}return n}function h(e,t){var n=l(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=c[c.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),c.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=l(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,o)}}function m(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=c.indexOf(e);t>=0&&c.splice(t,1)}function v(e){var t=document.createElement("style");return e.attrs.type="text/css",g(t,e.attrs),h(e,t),t}function g(e,t){Object.keys(t).forEach((function(n){e.setAttribute(n,t[n])}))}function y(e,t){var n,r,o,i;if(t.transform&&e.css){if(!(i=t.transform(e.css)))return function(){};e.css=i}if(t.singleton){var a=s++;n=u||(u=v(t)),r=x.bind(null,n,a,!1),o=x.bind(null,n,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return e.attrs.type="text/css",e.attrs.rel="stylesheet",g(t,e.attrs),h(e,t),t}(t),r=_.bind(null,n,t),o=function(){m(n),n.href&&URL.revokeObjectURL(n.href)}):(n=v(t),r=k.bind(null,n),o=function(){m(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=p(e,t);return d(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var a=n[o];(l=i[a.id]).refs--,r.push(l)}e&&d(p(e,t),t);for(o=0;o<r.length;o++){var l;if(0===(l=r[o]).refs){for(var u=0;u<l.parts.length;u++)l.parts[u]();delete i[l.id]}}}};var b,w=(b=[],function(e,t){return b[e]=t,b.filter(Boolean).join("\n")});function x(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=w(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function k(e,t){var n=t.css,r=t.media;if(r&&e.setAttribute("media",r),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}function _(e,t,n){var r=n.css,o=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=f(r)),o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),l=e.href;e.href=URL.createObjectURL(a),l&&URL.revokeObjectURL(l)}},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(e,t){var o,i=t.trim().replace(/^"(.*)"$/,(function(e,t){return t})).replace(/^'(.*)'$/,(function(e,t){return t}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(i)?e:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")}))}},function(e,t,n){"use strict";var r=n(7),o=n(33),i=n(71),a=n(40);function l(e){var t=new i(e),n=o(i.prototype.request,t);return r.extend(n,i.prototype,t),r.extend(n,t),n}var u=l(n(36));u.Axios=i,u.create=function(e){return l(a(u.defaults,e))},u.Cancel=n(41),u.CancelToken=n(84),u.isCancel=n(35),u.all=function(e){return Promise.all(e)},u.spread=n(85),e.exports=u,e.exports.default=u},function(e,t,n){"use strict";var r=n(7),o=n(34),i=n(72),a=n(73),l=n(40);function u(e){this.defaults=e,this.interceptors={request:new i,response:new i}}u.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=l(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=[a,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)n=n.then(t.shift(),t.shift());return n},u.prototype.getUri=function(e){return e=l(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){u.prototype[e]=function(t,n){return this.request(r.merge(n||{},{method:e,url:t}))}})),r.forEach(["post","put","patch"],(function(e){u.prototype[e]=function(t,n,o){return this.request(r.merge(o||{},{method:e,url:t,data:n}))}})),e.exports=u},function(e,t,n){"use strict";var r=n(7);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},function(e,t,n){"use strict";var r=n(7),o=n(74),i=n(35),a=n(36);function l(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return l(e),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||a.adapter)(e).then((function(t){return l(e),t.data=o(t.data,t.headers,e.transformResponse),t}),(function(t){return i(t)||(l(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},function(e,t,n){"use strict";var r=n(7);e.exports=function(e,t,n){return r.forEach(n,(function(n){e=n(e,t)})),e}},function(e,t,n){"use strict";var r=n(7);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},function(e,t,n){"use strict";var r=n(39);e.exports=function(e,t,n){var o=n.config.validateStatus;!o||o(n.status)?e(n):t(r("Request failed with status code "+n.status,n.config,null,n.request,n))}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,t,n){"use strict";var r=n(79),o=n(80);e.exports=function(e,t){return e&&!r(t)?o(e,t):t}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(7),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,i,a={};return e?(r.forEach(e.split("\n"),(function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),n=r.trim(e.substr(i+1)),t){if(a[t]&&o.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([n]):a[t]?a[t]+", "+n:n}})),a):a}},function(e,t,n){"use strict";var r=n(7);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r=n(7);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,i,a){var l=[];l.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&l.push("expires="+new Date(n).toGMTString()),r.isString(o)&&l.push("path="+o),r.isString(i)&&l.push("domain="+i),!0===a&&l.push("secure"),document.cookie=l.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(41);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){"use strict";t.__esModule=!0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(0),a=O(i),l=O(n(4)),u=O(n(16)),s=O(n(89)),c=O(n(90)),f=O(n(42)),d=O(n(92)),p=n(93),h=O(n(94)),m=O(n(96)),v=O(n(98)),g=O(n(99)),y=O(n(43)),b=O(n(100)),w=O(n(101)),x=O(n(102)),k=O(n(103)),_=O(n(44)),S=O(n(104)),C=O(n(105)),E=O(n(106)),T=O(n(48));function O(e){return e&&e.__esModule?e:{default:e}}var P=void 0!==u.default.createPortal,M=P?u.default.createPortal:u.default.unstable_renderSubtreeIntoContainer;function R(){return{overviewMapControl:!1,streetViewControl:!1,rotateControl:!0,mapTypeControl:!1,styles:[{featureType:"poi",elementType:"labels",stylers:[{visibility:"off"}]}],minZoom:3}}var j=function(e){return(0,S.default)(e)?e:{lat:e[0],lng:e[1]}},A=function(e,t){return t<e?e:t},N=function(e){function t(n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,n));if(i._getMinZoom=function(){if(i.geoService_.getWidth()>0||i.geoService_.getHeight()>0){var e=Math.ceil(i.geoService_.getWidth()/256)+2,t=Math.ceil(i.geoService_.getHeight()/256)+2,n=Math.max(e,t);return Math.ceil((0,b.default)(n))}return 3},i._computeMinZoom=function(e){return(0,w.default)(e)?i._getMinZoom():e},i._mapDomResizeCallback=function(){if(i.resetSizeOnIdle_=!0,i.maps_){var e=i.props.center||i.props.defaultCenter,t=i.map_.getCenter();i.maps_.event.trigger(i.map_,"resize"),i.map_.setCenter(i.props.resetBoundsOnResize?e:t)}},i._setLayers=function(e){e.forEach((function(e){i.layers_[e]=new i.maps_[e],i.layers_[e].setMap(i.map_)}))},i._renderPortal=function(){return a.default.createElement(f.default,{experimental:i.props.experimental,onChildClick:i._onChildClick,onChildMouseDown:i._onChildMouseDown,onChildMouseEnter:i._onChildMouseEnter,onChildMouseLeave:i._onChildMouseLeave,geoService:i.geoService_,insideMapPanes:!0,distanceToMouse:i.props.distanceToMouse,getHoverDistance:i._getHoverDistance,dispatcher:i.markersDispatcher_})},i._initMap=function(){if(!i.initialized_){i.initialized_=!0;var e=j(i.props.center||i.props.defaultCenter);i.geoService_.setView(e,i.props.zoom||i.props.defaultZoom,0),i._onBoundsChanged();var t=o({},i.props.apiKey&&{key:i.props.apiKey},i.props.bootstrapURLKeys);i.props.googleMapLoader(t,i.props.heatmapLibrary).then((function(e){if(i.mounted_){var t=i.geoService_.getCenter(),n={zoom:i.props.zoom||i.props.defaultZoom,center:new e.LatLng(t.lat,t.lng)};i.props.heatmap.positions&&(Object.assign(i,{heatmap:(0,p.generateHeatmap)(e,i.props.heatmap)}),(0,p.optionsHeatmap)(i.heatmap,i.props.heatmap));var a=(0,g.default)(e,S.default),l="function"==typeof i.props.options?i.props.options(a):i.props.options,s={overviewMapControl:!1,streetViewControl:!1,rotateControl:!0,mapTypeControl:!1,styles:[{featureType:"poi",elementType:"labels",stylers:[{visibility:"off"}]}],minZoom:3},c=!(0,w.default)(i.props.draggable)&&{draggable:i.props.draggable},f=i._computeMinZoom(l.minZoom);i.minZoom_=f;var d=o({},s,{minZoom:f},l,n);i.defaultDraggableOption_=(0,w.default)(d.draggable)?i.defaultDraggableOption_:d.draggable;var h=o({},d,c);h.minZoom=A(h.minZoom,f);var m=new e.Map(u.default.findDOMNode(i.googleMapDom_),h);i.map_=m,i.maps_=e,i._setLayers(i.props.layerTypes);var y=e.version.match(/^3\.(\d+)\./),b=y&&Number(y[1]),x=i,k=Object.assign(new e.OverlayView,{onAdd:function(){var t="undefined"!=typeof screen?screen.width+"px":"2000px",n="undefined"!=typeof screen?screen.height+"px":"2000px",o=document.createElement("div");if(o.style.backgroundColor="transparent",o.style.position="absolute",o.style.left="0px",o.style.top="0px",o.style.width=t,o.style.height=n,x.props.overlayViewDivStyle){var i=x.props.overlayViewDivStyle;"object"===(void 0===i?"undefined":r(i))&&Object.keys(i).forEach((function(e){o.style[e]=i[e]}))}this.getPanes().overlayMouseTarget.appendChild(o),x.geoService_.setMapCanvasProjection(e,k.getProjection()),P?x.setState({overlay:o}):M(x,x._renderPortal(),o,(function(){return x.setState({overlay:o})}))},onRemove:function(){var e=x.state.overlay;e&&!P&&u.default.unmountComponentAtNode(e),x.setState({overlay:null})},draw:function(){if(x.updateCounter_++,x._onBoundsChanged(m,e,!x.props.debounced),x.googleApiLoadedCalled_||(x._onGoogleApiLoaded({map:m,maps:e,ref:x.googleMapDom_}),x.googleApiLoadedCalled_=!0),x.mouse_){var t=x.geoService_.fromContainerPixelToLatLng(x.mouse_);x.mouse_.lat=t.lat,x.mouse_.lng=t.lng}x._onChildMouseMove(),x.markersDispatcher_&&(x.markersDispatcher_.emit("kON_CHANGE"),x.fireMouseEventOnIdle_&&x.markersDispatcher_.emit("kON_MOUSE_POSITION_CHANGE"))}});i.overlay_=k,k.setMap(m),i.props.heatmap.positions&&i.heatmap.setMap(m),i.props.onTilesLoaded&&e.event.addListener(m,"tilesloaded",(function(){x._onTilesLoaded()})),e.event.addListener(m,"zoom_changed",(function(){if(x.geoService_.getZoom()!==m.getZoom()&&(x.zoomAnimationInProgress_||(x.zoomAnimationInProgress_=!0,x._onZoomAnimationStart(m.zoom)),b<32)){(new Date).getTime()-i.zoomControlClickTime_<300?(0,v.default)((function(){return(0,v.default)((function(){x.updateCounter_++,x._onBoundsChanged(m,e)}))})):(x.updateCounter_++,x._onBoundsChanged(m,e))}})),e.event.addListener(m,"idle",(function(){if(i.resetSizeOnIdle_){i._setViewSize();var t=i._computeMinZoom(i.props.options.minZoom);t!==i.minZoom_&&(i.minZoom_=t,m.setOptions({minZoom:t})),i.resetSizeOnIdle_=!1}x.zoomAnimationInProgress_&&(x.zoomAnimationInProgress_=!1,x._onZoomAnimationEnd(m.zoom)),x.updateCounter_++,x._onBoundsChanged(m,e),x.dragTime_=0,x.markersDispatcher_&&x.markersDispatcher_.emit("kON_CHANGE")})),e.event.addListener(m,"mouseover",(function(){x.mouseInMap_=!0})),e.event.addListener(m,"click",(function(){x.mouseInMap_=!0})),e.event.addListener(m,"mouseout",(function(){x.mouseInMap_=!1,x.mouse_=null,x.markersDispatcher_.emit("kON_MOUSE_POSITION_CHANGE")})),e.event.addListener(m,"drag",(function(){x.dragTime_=(new Date).getTime(),x._onDrag(m)})),e.event.addListener(m,"dragend",(function(){var t=e.event.addListener(m,"idle",(function(){e.event.removeListener(t),x._onDragEnd(m)}))})),e.event.addListener(m,"maptypeid_changed",(function(){x._onMapTypeIdChange(m.getMapTypeId())}))}})).catch((function(e){throw i._onGoogleApiLoaded({map:null,maps:null,ref:i.googleMapDom_}),console.error(e),e}))}},i._onGoogleApiLoaded=function(){var e;i.props.onGoogleApiLoaded&&(e=i.props).onGoogleApiLoaded.apply(e,arguments)},i._getHoverDistance=function(){return i.props.hoverDistance},i._onDrag=function(){var e;return i.props.onDrag&&(e=i.props).onDrag.apply(e,arguments)},i._onDragEnd=function(){var e;return i.props.onDragEnd&&(e=i.props).onDragEnd.apply(e,arguments)},i._onMapTypeIdChange=function(){var e;return i.props.onMapTypeIdChange&&(e=i.props).onMapTypeIdChange.apply(e,arguments)},i._onZoomAnimationStart=function(){var e;return i.props.onZoomAnimationStart&&(e=i.props).onZoomAnimationStart.apply(e,arguments)},i._onZoomAnimationEnd=function(){var e;return i.props.onZoomAnimationEnd&&(e=i.props).onZoomAnimationEnd.apply(e,arguments)},i._onTilesLoaded=function(){return i.props.onTilesLoaded&&i.props.onTilesLoaded()},i._onChildClick=function(){var e;if(i.props.onChildClick)return(e=i.props).onChildClick.apply(e,arguments)},i._onChildMouseDown=function(e,t){i.childMouseDownArgs_=[e,t],i.props.onChildMouseDown&&i.props.onChildMouseDown(e,t,o({},i.mouse_))},i._onChildMouseUp=function(){if(i.childMouseDownArgs_){var e;if(i.props.onChildMouseUp)(e=i.props).onChildMouseUp.apply(e,i.childMouseDownArgs_.concat([o({},i.mouse_)]));i.childMouseDownArgs_=null,i.childMouseUpTime_=(new Date).getTime()}},i._onChildMouseMove=function(){var e;i.childMouseDownArgs_&&(i.props.onChildMouseMove&&(e=i.props).onChildMouseMove.apply(e,i.childMouseDownArgs_.concat([o({},i.mouse_)])))},i._onChildMouseEnter=function(){var e;if(i.props.onChildMouseEnter)return(e=i.props).onChildMouseEnter.apply(e,arguments)},i._onChildMouseLeave=function(){var e;if(i.props.onChildMouseLeave)return(e=i.props).onChildMouseLeave.apply(e,arguments)},i._setViewSize=function(){if(i.mounted_){if(document.fullscreen||document.webkitIsFullScreen||document.mozFullScreen||document.msFullscreenElement)i.geoService_.setViewSize(window.innerWidth,window.innerHeight);else{var e=u.default.findDOMNode(i.googleMapDom_);i.geoService_.setViewSize(e.clientWidth,e.clientHeight)}i._onBoundsChanged()}},i._onWindowResize=function(){i.resetSizeOnIdle_=!0},i._onMapMouseMove=function(e){if(i.mouseInMap_){var t=(new Date).getTime();t-i.mouseMoveTime_>50&&(i.boundingRect_=e.currentTarget.getBoundingClientRect()),i.mouseMoveTime_=t;var n=e.clientX-i.boundingRect_.left,r=e.clientY-i.boundingRect_.top;i.mouse_||(i.mouse_={x:0,y:0,lat:0,lng:0}),i.mouse_.x=n,i.mouse_.y=r;var o=i.geoService_.fromContainerPixelToLatLng(i.mouse_);i.mouse_.lat=o.lat,i.mouse_.lng=o.lng,i._onChildMouseMove(),t-i.dragTime_<100?i.fireMouseEventOnIdle_=!0:(i.markersDispatcher_.emit("kON_MOUSE_POSITION_CHANGE"),i.fireMouseEventOnIdle_=!1)}},i._onClick=function(){var e;return i.props.onClick&&!i.childMouseDownArgs_&&(new Date).getTime()-i.childMouseUpTime_>300&&0===i.dragTime_&&(e=i.props).onClick.apply(e,arguments)},i._onMapClick=function(e){i.markersDispatcher_&&(i._onMapMouseMove(e),(new Date).getTime()-i.dragTime_>100&&(i.mouse_&&i._onClick(o({},i.mouse_,{event:e})),i.markersDispatcher_.emit("kON_CLICK",e)))},i._onMapMouseDownNative=function(e){i.mouseInMap_&&i._onMapMouseDown(e)},i._onMapMouseDown=function(e){i.markersDispatcher_&&((new Date).getTime()-i.dragTime_>100&&(i._onMapMouseMove(e),i.markersDispatcher_.emit("kON_MDOWN",e)))},i._onMapMouseDownCapture=function(){(0,k.default)().isChrome&&(i.zoomControlClickTime_=(new Date).getTime())},i._onKeyDownCapture=function(){(0,k.default)().isChrome&&(i.zoomControlClickTime_=(new Date).getTime())},i._isCenterDefined=function(e){return e&&((0,S.default)(e)&&(0,x.default)(e.lat)&&(0,x.default)(e.lng)||2===e.length&&(0,x.default)(e[0])&&(0,x.default)(e[1]))},i._onBoundsChanged=function(e,t,n){if(e){var r=e.getCenter();i.geoService_.setView([r.lat(),r.lng()],e.getZoom(),0)}if((i.props.onChange||i.props.onBoundsChange)&&i.geoService_.canProject()){var a=i.geoService_.getZoom(),l=i.geoService_.getBounds(),u=i.geoService_.getCenter();if(!(0,C.default)(l,i.prevBounds_,1e-5)&&!1!==n){var s=i.geoService_.getBounds(i.props.margin);i.props.onBoundsChange&&i.props.onBoundsChange(i.centerIsObject_?o({},u):[u.lat,u.lng],a,l,s),i.props.onChange&&i.props.onChange({center:o({},u),zoom:a,bounds:{nw:{lat:l[0],lng:l[1]},se:{lat:l[2],lng:l[3]},sw:{lat:l[4],lng:l[5]},ne:{lat:l[6],lng:l[7]}},marginBounds:{nw:{lat:s[0],lng:s[1]},se:{lat:s[2],lng:s[3]},sw:{lat:s[4],lng:s[5]},ne:{lat:s[6],lng:s[7]}},size:i.geoService_.hasSize()?{width:i.geoService_.getWidth(),height:i.geoService_.getHeight()}:{width:0,height:0}}),i.prevBounds_=l}}},i._registerChild=function(e){i.googleMapDom_=e},i.mounted_=!1,i.initialized_=!1,i.googleApiLoadedCalled_=!1,i.map_=null,i.maps_=null,i.prevBounds_=null,i.heatmap=null,i.layers_={},i.mouse_=null,i.mouseMoveTime_=0,i.boundingRect_=null,i.mouseInMap_=!0,i.dragTime_=0,i.fireMouseEventOnIdle_=!1,i.updateCounter_=0,i.markersDispatcher_=new c.default(i),i.geoService_=new m.default(256),i.centerIsObject_=(0,S.default)(i.props.center),i.minZoom_=3,i.defaultDraggableOption_=!0,i.zoomControlClickTime_=0,i.childMouseDownArgs_=null,i.childMouseUpTime_=0,i.googleMapDom_=null,i._isCenterDefined(i.props.center||i.props.defaultCenter)){var l=j(i.props.center||i.props.defaultCenter);i.geoService_.setView(l,i.props.zoom||i.props.defaultZoom,0)}return i.zoomAnimationInProgress_=!1,i.state={overlay:null},i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentDidMount=function(){var e=this;this.mounted_=!0,(0,T.default)(window,"resize",this._onWindowResize,!1),(0,T.default)(window,"keydown",this._onKeyDownCapture,!0);var t=u.default.findDOMNode(this.googleMapDom_);t&&(0,T.default)(t,"mousedown",this._onMapMouseDownNative,!0),(0,T.default)(window,"mouseup",this._onChildMouseUp,!1);var n=o({},this.props.apiKey&&{key:this.props.apiKey},this.props.bootstrapURLKeys);if(this.props.googleMapLoader(n,this.props.heatmapLibrary),setTimeout((function(){e._setViewSize(),e._isCenterDefined(e.props.center||e.props.defaultCenter)&&e._initMap()}),0,this),this.props.resetBoundsOnResize){E.default.addResizeListener(t,this._mapDomResizeCallback)}},t.prototype.UNSAFE_componentWillReceiveProps=function(e){var t=this;if(!this._isCenterDefined(this.props.center)&&this._isCenterDefined(e.center)&&setTimeout((function(){return t._initMap()}),0),this.map_){var n=this.geoService_.getCenter();if(this._isCenterDefined(e.center)){var r=j(e.center),o=this._isCenterDefined(this.props.center)?j(this.props.center):null;(!o||Math.abs(r.lat-o.lat)+Math.abs(r.lng-o.lng)>1e-5)&&Math.abs(r.lat-n.lat)+Math.abs(r.lng-n.lng)>1e-5&&this.map_.panTo({lat:r.lat,lng:r.lng})}if((0,w.default)(e.zoom)||Math.abs(e.zoom-this.props.zoom)>0&&this.map_.setZoom(e.zoom),!(0,w.default)(this.props.draggable)&&(0,w.default)(e.draggable)?this.map_.setOptions({draggable:this.defaultDraggableOption_}):(0,_.default)(this.props.draggable,e.draggable)||this.map_.setOptions({draggable:e.draggable}),!(0,w.default)(e.options)&&!(0,_.default)(this.props.options,e.options)){var i=(0,g.default)(this.maps_,S.default),a="function"==typeof e.options?e.options(i):e.options;if("minZoom"in(a=(0,y.default)(a,["zoom","center","draggable"]))){var l=this._computeMinZoom(a.minZoom);a.minZoom=A(a.minZoom,l)}this.map_.setOptions(a)}(0,_.default)(e.layerTypes,this.props.layerTypes)||(Object.keys(this.layers_).forEach((function(e){t.layers_[e].setMap(null),delete t.layers_[e]})),this._setLayers(e.layerTypes)),this.heatmap&&!(0,_.default)(e.heatmap.positions,this.props.heatmap.positions)&&this.heatmap.setData(e.heatmap.positions.map((function(e){return{location:new t.maps_.LatLng(e.lat,e.lng),weight:e.weight}})))}},t.prototype.shouldComponentUpdate=function(e,t){return!(0,_.default)((0,y.default)(this.props,["draggable"]),(0,y.default)(e,["draggable"]))||!(0,_.default)(this.state,t)},t.prototype.componentDidUpdate=function(e){this.markersDispatcher_.emit("kON_CHANGE"),(0,_.default)(this.props.hoverDistance,e.hoverDistance)||this.markersDispatcher_.emit("kON_MOUSE_POSITION_CHANGE")},t.prototype.componentWillUnmount=function(){this.mounted_=!1;var e=u.default.findDOMNode(this.googleMapDom_);e&&e.removeEventListener("mousedown",this._onMapMouseDownNative,!0),window.removeEventListener("resize",this._onWindowResize),window.removeEventListener("keydown",this._onKeyDownCapture),window.removeEventListener("mouseup",this._onChildMouseUp,!1),this.props.resetBoundsOnResize&&E.default.removeResizeListener(e,this._mapDomResizeCallback),this.overlay_&&this.overlay_.setMap(null),this.maps_&&this.map_&&this.props.shouldUnregisterMapOnUnmount&&(this.map_.setOptions({scrollwheel:!1}),this.maps_.event.clearInstanceListeners(this.map_)),this.props.shouldUnregisterMapOnUnmount&&(this.map_=null,this.maps_=null),this.markersDispatcher_.dispose(),this.resetSizeOnIdle_=!1,this.props.shouldUnregisterMapOnUnmount&&(delete this.map_,delete this.markersDispatcher_)},t.prototype.render=function(){var e=this.state.overlay,t=e?null:a.default.createElement(d.default,{experimental:this.props.experimental,onChildClick:this._onChildClick,onChildMouseDown:this._onChildMouseDown,onChildMouseEnter:this._onChildMouseEnter,onChildMouseLeave:this._onChildMouseLeave,geoService:this.geoService_,insideMapPanes:!1,distanceToMouse:this.props.distanceToMouse,getHoverDistance:this._getHoverDistance,dispatcher:this.markersDispatcher_});return a.default.createElement("div",{style:this.props.style,onMouseMove:this._onMapMouseMove,onMouseDownCapture:this._onMapMouseDownCapture,onClick:this._onMapClick},a.default.createElement(s.default,{registerChild:this._registerChild}),P&&e&&M(this._renderPortal(),e),t)},t}(i.Component);N.propTypes={apiKey:l.default.string,bootstrapURLKeys:l.default.any,defaultCenter:l.default.oneOfType([l.default.array,l.default.shape({lat:l.default.number,lng:l.default.number})]),center:l.default.oneOfType([l.default.array,l.default.shape({lat:l.default.number,lng:l.default.number})]),defaultZoom:l.default.number,zoom:l.default.number,onBoundsChange:l.default.func,onChange:l.default.func,onClick:l.default.func,onChildClick:l.default.func,onChildMouseDown:l.default.func,onChildMouseUp:l.default.func,onChildMouseMove:l.default.func,onChildMouseEnter:l.default.func,onChildMouseLeave:l.default.func,onZoomAnimationStart:l.default.func,onZoomAnimationEnd:l.default.func,onDrag:l.default.func,onDragEnd:l.default.func,onMapTypeIdChange:l.default.func,onTilesLoaded:l.default.func,options:l.default.any,distanceToMouse:l.default.func,hoverDistance:l.default.number,debounced:l.default.bool,margin:l.default.array,googleMapLoader:l.default.any,onGoogleApiLoaded:l.default.func,yesIWantToUseGoogleMapApiInternals:l.default.bool,draggable:l.default.bool,style:l.default.any,resetBoundsOnResize:l.default.bool,layerTypes:l.default.arrayOf(l.default.string),shouldUnregisterMapOnUnmount:l.default.bool},N.defaultProps={distanceToMouse:function(e,t){return Math.sqrt((e.x-t.x)*(e.x-t.x)+(e.y-t.y)*(e.y-t.y))},hoverDistance:30,debounced:!0,options:R,googleMapLoader:h.default,yesIWantToUseGoogleMapApiInternals:!1,style:{width:"100%",height:"100%",margin:0,padding:0,position:"relative"},layerTypes:[],heatmap:{},heatmapLibrary:!1,shouldUnregisterMapOnUnmount:!0},N.googleMapLoader=h.default,t.default=N},function(e,t,n){"use strict";var r=n(88);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";t.__esModule=!0;var r,o=n(0),i=(r=o)&&r.__esModule?r:{default:r};function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u={width:"100%",height:"100%",left:0,top:0,margin:0,padding:0,position:"absolute"},s=function(e){function t(){return a(this,t),l(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.shouldComponentUpdate=function(){return!1},t.prototype.render=function(){var e=this.props.registerChild;return i.default.createElement("div",{ref:e,style:u})},t}(o.Component);t.default=s},function(e,t,n){"use strict";t.__esModule=!0;var r,o=n(91);var i=function(e){function t(n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this));return r.gmapInstance=n,r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildren=function(){return this.gmapInstance.props.children},t.prototype.getMousePosition=function(){return this.gmapInstance.mouse_},t.prototype.getUpdateCounter=function(){return this.gmapInstance.updateCounter_},t.prototype.dispose=function(){this.gmapInstance=null,this.removeAllListeners()},t}(((r=o)&&r.__esModule?r:{default:r}).default);t.default=i},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty,o="function"!=typeof Object.create&&"~";function i(e,t,n){this.fn=e,this.context=t,this.once=n||!1}function a(){}a.prototype._events=void 0,a.prototype.eventNames=function(){var e,t=this._events,n=[];if(!t)return n;for(e in t)r.call(t,e)&&n.push(o?e.slice(1):e);return Object.getOwnPropertySymbols?n.concat(Object.getOwnPropertySymbols(t)):n},a.prototype.listeners=function(e,t){var n=o?o+e:e,r=this._events&&this._events[n];if(t)return!!r;if(!r)return[];if(r.fn)return[r.fn];for(var i=0,a=r.length,l=new Array(a);i<a;i++)l[i]=r[i].fn;return l},a.prototype.emit=function(e,t,n,r,i,a){var l=o?o+e:e;if(!this._events||!this._events[l])return!1;var u,s,c=this._events[l],f=arguments.length;if("function"==typeof c.fn){switch(c.once&&this.removeListener(e,c.fn,void 0,!0),f){case 1:return c.fn.call(c.context),!0;case 2:return c.fn.call(c.context,t),!0;case 3:return c.fn.call(c.context,t,n),!0;case 4:return c.fn.call(c.context,t,n,r),!0;case 5:return c.fn.call(c.context,t,n,r,i),!0;case 6:return c.fn.call(c.context,t,n,r,i,a),!0}for(s=1,u=new Array(f-1);s<f;s++)u[s-1]=arguments[s];c.fn.apply(c.context,u)}else{var d,p=c.length;for(s=0;s<p;s++)switch(c[s].once&&this.removeListener(e,c[s].fn,void 0,!0),f){case 1:c[s].fn.call(c[s].context);break;case 2:c[s].fn.call(c[s].context,t);break;case 3:c[s].fn.call(c[s].context,t,n);break;default:if(!u)for(d=1,u=new Array(f-1);d<f;d++)u[d-1]=arguments[d];c[s].fn.apply(c[s].context,u)}}return!0},a.prototype.on=function(e,t,n){var r=new i(t,n||this),a=o?o+e:e;return this._events||(this._events=o?{}:Object.create(null)),this._events[a]?this._events[a].fn?this._events[a]=[this._events[a],r]:this._events[a].push(r):this._events[a]=r,this},a.prototype.once=function(e,t,n){var r=new i(t,n||this,!0),a=o?o+e:e;return this._events||(this._events=o?{}:Object.create(null)),this._events[a]?this._events[a].fn?this._events[a]=[this._events[a],r]:this._events[a].push(r):this._events[a]=r,this},a.prototype.removeListener=function(e,t,n,r){var i=o?o+e:e;if(!this._events||!this._events[i])return this;var a=this._events[i],l=[];if(t)if(a.fn)(a.fn!==t||r&&!a.once||n&&a.context!==n)&&l.push(a);else for(var u=0,s=a.length;u<s;u++)(a[u].fn!==t||r&&!a[u].once||n&&a[u].context!==n)&&l.push(a[u]);return l.length?this._events[i]=1===l.length?l[0]:l:delete this._events[i],this},a.prototype.removeAllListeners=function(e){return this._events?(e?delete this._events[o?o+e:e]:this._events=o?{}:Object.create(null),this):this},a.prototype.off=a.prototype.removeListener,a.prototype.addListener=a.prototype.on,a.prototype.setMaxListeners=function(){return this},a.prefixed=o,e.exports=a},function(e,t,n){"use strict";t.__esModule=!0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t.default=function(e){return o.default.createElement("div",{style:l},o.default.createElement(i.default,r({},e,{prerender:!0})))};var o=a(n(0)),i=a(n(42));function a(e){return e&&e.__esModule?e:{default:e}}var l={width:"50%",height:"50%",left:"50%",top:"50%",margin:0,padding:0,position:"absolute"}},function(e,t,n){"use strict";t.__esModule=!0;t.generateHeatmap=function(e,t){var n=t.positions;return new e.visualization.HeatmapLayer({data:n.reduce((function(t,n){var r=n.lat,o=n.lng,i=n.weight,a=void 0===i?1:i;return t.push({location:new e.LatLng(r,o),weight:a}),t}),[])})},t.optionsHeatmap=function(e,t){var n=t.options,r=void 0===n?{}:n;return Object.keys(r).map((function(t){return e.set(t,r[t])}))}},function(e,t,n){"use strict";t.__esModule=!0;var r=null,o=void 0,i=void 0,a=new Promise((function(e){i=e}));t.default=function(e,t){return r||(r=n(95)),e?o||(o=new Promise((function(n,o){if("undefined"!=typeof window)if(window.google&&window.google.maps)n(window.google.maps);else{void 0!==window._$_google_map_initialize_$_&&o(new Error("google map initialization error")),window._$_google_map_initialize_$_=function(){delete window._$_google_map_initialize_$_,n(window.google.maps)};var i=Object.keys(e).reduce((function(t,n){return t+"&"+n+"="+e[n]}),"");r("https://maps.googleapis.com/maps/api/js?callback=_$_google_map_initialize_$_"+i+(t?"&libraries=visualization":""),(function(){return void 0===window.google&&o(new Error("google map initialization error (not loaded)"))}))}else o(new Error("google map cannot be loaded outside browser env"))})),i(o),o):a}},function(e,t,n){var r,o,i;
/*!
  * $script.js JS loader & dependency manager
  * https://github.com/ded/script.js
  * (c) Dustin Diaz 2014 | License MIT
  */i=function(){var e,t,n=document,r=n.getElementsByTagName("head")[0],o={},i={},a={},l={};function u(e,t){for(var n=0,r=e.length;n<r;++n)if(!t(e[n]))return!1;return 1}function s(e,t){u(e,(function(e){return t(e),1}))}function c(t,n,r){t=t.push?t:[t];var d=n&&n.call,p=d?n:r,h=d?t.join(""):n,m=t.length;function v(e){return e.call?e():o[e]}function g(){if(!--m)for(var e in o[h]=1,p&&p(),a)u(e.split("|"),v)&&!s(a[e],v)&&(a[e]=[])}return setTimeout((function(){s(t,(function t(n,r){return null===n?g():(r||/^https?:\/\//.test(n)||!e||(n=-1===n.indexOf(".js")?e+n+".js":e+n),l[n]?(h&&(i[h]=1),2==l[n]?g():setTimeout((function(){t(n,!0)}),0)):(l[n]=1,h&&(i[h]=1),void f(n,g)))}))}),0),c}function f(e,o){var i,a=n.createElement("script");a.onload=a.onerror=a.onreadystatechange=function(){a.readyState&&!/^c|loade/.test(a.readyState)||i||(a.onload=a.onreadystatechange=null,i=1,l[e]=2,o())},a.async=1,a.src=t?e+(-1===e.indexOf("?")?"?":"&")+t:e,r.insertBefore(a,r.lastChild)}return c.get=f,c.order=function(e,t,n){!function r(o){o=e.shift(),e.length?c(o,r):c(o,t,n)}()},c.path=function(t){e=t},c.urlArgs=function(e){t=e},c.ready=function(e,t,n){e=e.push?e:[e];var r,i=[];return!s(e,(function(e){o[e]||i.push(e)}))&&u(e,(function(e){return o[e]}))?t():(r=e.join("|"),a[r]=a[r]||[],a[r].push(t),n&&n(i)),c},c.done=function(e){c([null],e)},c},e.exports?e.exports=i():void 0===(o="function"==typeof(r=i)?r.call(t,n,t,e):r)||(e.exports=o)},function(e,t,n){"use strict";t.__esModule=!0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=l(n(45)),i=l(n(46)),a=l(n(97));function l(e){return e&&e.__esModule?e:{default:e}}var u=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.hasSize_=!1,this.hasView_=!1,this.transform_=new a.default(t||512)}return e.prototype.setView=function(e,t,n){this.transform_.center=i.default.convert(e),this.transform_.zoom=+t,this.transform_.bearing=+n,this.hasView_=!0},e.prototype.setViewSize=function(e,t){this.transform_.width=e,this.transform_.height=t,this.hasSize_=!0},e.prototype.setMapCanvasProjection=function(e,t){this.maps_=e,this.mapCanvasProjection_=t},e.prototype.canProject=function(){return this.hasSize_&&this.hasView_},e.prototype.hasSize=function(){return this.hasSize_},e.prototype.fromLatLngToCenterPixel=function(e){return this.transform_.locationPoint(i.default.convert(e))},e.prototype.fromLatLngToDivPixel=function(e){if(this.mapCanvasProjection_){var t=new this.maps_.LatLng(e.lat,e.lng);return this.mapCanvasProjection_.fromLatLngToDivPixel(t)}return this.fromLatLngToCenterPixel(e)},e.prototype.fromLatLngToContainerPixel=function(e){if(this.mapCanvasProjection_){var t=new this.maps_.LatLng(e.lat,e.lng);return this.mapCanvasProjection_.fromLatLngToContainerPixel(t)}var n=this.fromLatLngToCenterPixel(e);return n.x-=this.transform_.worldSize*Math.round(n.x/this.transform_.worldSize),n.x+=this.transform_.width/2,n.y+=this.transform_.height/2,n},e.prototype.fromContainerPixelToLatLng=function(e){if(this.mapCanvasProjection_){var t=this.mapCanvasProjection_.fromContainerPixelToLatLng(e);return{lat:t.lat(),lng:t.lng()}}var n=r({},e);n.x-=this.transform_.width/2,n.y-=this.transform_.height/2;var i=this.transform_.pointLocation(o.default.convert(n));return i.lng-=360*Math.round(i.lng/360),i},e.prototype.getWidth=function(){return this.transform_.width},e.prototype.getHeight=function(){return this.transform_.height},e.prototype.getZoom=function(){return this.transform_.zoom},e.prototype.getCenter=function(){return this.transform_.pointLocation({x:0,y:0})},e.prototype.getBounds=function(e,t){var n=e&&e[0]||0,r=e&&e[1]||0,i=e&&e[2]||0,a=e&&e[3]||0;if(this.getWidth()-r-a>0&&this.getHeight()-n-i>0){var l=this.transform_.pointLocation(o.default.convert({x:a-this.getWidth()/2,y:n-this.getHeight()/2})),u=this.transform_.pointLocation(o.default.convert({x:this.getWidth()/2-r,y:this.getHeight()/2-i})),s=[l.lat,l.lng,u.lat,u.lng,u.lat,l.lng,l.lat,u.lng];return t&&(s=s.map((function(e){return Math.round(e*t)/t}))),s}return[0,0,0,0]},e}();t.default=u},function(e,t,n){"use strict";t.__esModule=!0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=l(n(45)),i=l(n(46)),a=n(47);function l(e){return e&&e.__esModule?e:{default:e}}var u=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.tileSize=t||512,this._minZoom=n||0,this._maxZoom=r||52,this.latRange=[-85.05113,85.05113],this.width=0,this.height=0,this.zoom=0,this.center=new i.default(0,0),this.angle=0}return e.prototype.zoomScale=function(e){return Math.pow(2,e)},e.prototype.scaleZoom=function(e){return Math.log(e)/Math.LN2},e.prototype.project=function(e,t){return new o.default(this.lngX(e.lng,t),this.latY(e.lat,t))},e.prototype.unproject=function(e,t){return new i.default(this.yLat(e.y,t),this.xLng(e.x,t))},e.prototype.lngX=function(e,t){return(180+e)*(t||this.worldSize)/360},e.prototype.latY=function(e,t){return(180-180/Math.PI*Math.log(Math.tan(Math.PI/4+e*Math.PI/360)))*(t||this.worldSize)/360},e.prototype.xLng=function(e,t){return 360*e/(t||this.worldSize)-180},e.prototype.yLat=function(e,t){var n=180-360*e/(t||this.worldSize);return 360/Math.PI*Math.atan(Math.exp(n*Math.PI/180))-90},e.prototype.locationPoint=function(e){var t=this.project(e);return this.centerPoint._sub(this.point._sub(t)._rotate(this.angle))},e.prototype.pointLocation=function(e){var t=this.centerPoint._sub(e)._rotate(-this.angle);return this.unproject(this.point.sub(t))},r(e,[{key:"minZoom",get:function(){return this._minZoom},set:function(e){this._minZoom=e,this.zoom=Math.max(this.zoom,e)}},{key:"maxZoom",get:function(){return this._maxZoom},set:function(e){this._maxZoom=e,this.zoom=Math.min(this.zoom,e)}},{key:"worldSize",get:function(){return this.tileSize*this.scale}},{key:"centerPoint",get:function(){return new o.default(0,0)}},{key:"size",get:function(){return new o.default(this.width,this.height)}},{key:"bearing",get:function(){return-this.angle/Math.PI*180},set:function(e){this.angle=-(0,a.wrap)(e,-180,180)*Math.PI/180}},{key:"zoom",get:function(){return this._zoom},set:function(e){var t=Math.min(Math.max(e,this.minZoom),this.maxZoom);this._zoom=t,this.scale=this.zoomScale(t),this.tileZoom=Math.floor(t),this.zoomFraction=t-this.tileZoom}},{key:"x",get:function(){return this.lngX(this.center.lng)}},{key:"y",get:function(){return this.latY(this.center.lat)}},{key:"point",get:function(){return new o.default(this.x,this.y)}}]),e}();t.default=u},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){if(window.requestAnimationFrame)return window.requestAnimationFrame(e);var t=window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame;return t?t(e):window.setTimeout(e,1e3/60)}},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t){return Object.keys(e).reduce((function(n,r){return t(e[r])&&(n[r]=e[r]),n}),{})}},function(e,t,n){"use strict";t.__esModule=!0;var r=Math.log2?Math.log2:function(e){return Math.log(e)/Math.LN2};t.default=r},function(e,t,n){"use strict";t.__esModule=!0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.default=function(e){if(null!==e&&"object"===(void 0===e?"undefined":r(e))){if(0===Object.keys(e).length)return!0}else if(null==e||""===e)return!0;return!1}},function(e,t,n){"use strict";t.__esModule=!0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.default=function(e){return"number"==typeof e||function(e){return!!e&&"object"===(void 0===e?"undefined":r(e))}(e)&&"[object Number]"===o.call(e)};var o=Object.prototype.toString},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(){if(r)return r;if("undefined"!=typeof navigator){var e=navigator.userAgent.indexOf("MSIE")>-1,t=navigator.userAgent.indexOf("Firefox")>-1,n=navigator.userAgent.toLowerCase().indexOf("op")>-1,o=navigator.userAgent.indexOf("Chrome")>-1,i=navigator.userAgent.indexOf("Safari")>-1;return o&&i&&(i=!1),o&&n&&(o=!1),r={isExplorer:e,isFirefox:t,isOpera:n,isChrome:o,isSafari:i}}return r={isChrome:!0,isExplorer:!1,isFirefox:!1,isOpera:!1,isSafari:!1}};var r=null},function(e,t,n){"use strict";t.__esModule=!0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.default=function(e){if(!e||"object"!==(void 0===e?"undefined":r(e)))return!1;var t="function"==typeof e.constructor?Object.getPrototypeOf(e):Object.prototype;if(null===t)return!0;var n=t.constructor;return"function"==typeof n&&n instanceof n&&o(n)===o(Object)};var o=function(e){return Function.prototype.toString.call(e)}},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t,n){if(e&&t){for(var r=0;r!==e.length;++r)if(Math.abs(e[r]-t[r])>n)return!1;return!0}return!1}},function(e,t,n){"use strict";var r,o=n(48),i=(r=o)&&r.__esModule?r:{default:r};var a,l=!("undefined"==typeof window||!window.document||!window.document.createElement);a=l?window:"undefined"!=typeof self?self:void 0;var u,s,c="undefined"!=typeof document&&document.attachEvent,f=!1;if(l&&!c){var d=(s=a.requestAnimationFrame||a.mozRequestAnimationFrame||a.webkitRequestAnimationFrame||function(e){return a.setTimeout(e,20)},function(e){return s(e)}),p=(u=a.cancelAnimationFrame||a.mozCancelAnimationFrame||a.webkitCancelAnimationFrame||a.clearTimeout,function(e){return u(e)}),h=function(e){var t=e.__resizeTriggers__,n=t.firstElementChild,r=t.lastElementChild,o=n.firstElementChild;r.scrollLeft=r.scrollWidth,r.scrollTop=r.scrollHeight,o.style.width=n.offsetWidth+1+"px",o.style.height=n.offsetHeight+1+"px",n.scrollLeft=n.scrollWidth,n.scrollTop=n.scrollHeight},m=function(e){var t=this;h(this),this.__resizeRAF__&&p(this.__resizeRAF__),this.__resizeRAF__=d((function(){(function(e){return e.offsetWidth!=e.__resizeLast__.width||e.offsetHeight!=e.__resizeLast__.height})(t)&&(t.__resizeLast__.width=t.offsetWidth,t.__resizeLast__.height=t.offsetHeight,t.__resizeListeners__.forEach((function(n){n.call(t,e)})))}))},v=!1,g="",y="animationstart",b="Webkit Moz O ms".split(" "),w="webkitAnimationStart animationstart oAnimationStart MSAnimationStart".split(" "),x="";if(l){var k=document.createElement("fakeelement");if(void 0!==k.style.animationName&&(v=!0),!1===v)for(var _=0;_<b.length;_++)if(void 0!==k.style[b[_]+"AnimationName"]){(x=b[_])+"Animation",g="-"+x.toLowerCase()+"-",y=w[_],v=!0;break}}var S="resizeanim",C="@"+g+"keyframes "+S+" { from { opacity: 0; } to { opacity: 0; } } ",E=g+"animation: 1ms "+S+"; "}e.exports={addResizeListener:function(e,t){if(void 0===e.parentNode){var n=document.createElement("div");e.parentNode=n}e=e.parentNode,c?e.attachEvent("onresize",t):(e.__resizeTriggers__||("static"==getComputedStyle(e).position&&(e.style.position="relative"),function(){if(!f){var e=(C||"")+".resize-triggers { "+(E||"")+'visibility: hidden; opacity: 0; } .resize-triggers, .resize-triggers > div, .contract-trigger:before { content: " "; display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; } .resize-triggers > div { background: #eee; overflow: auto; } .contract-trigger:before { width: 200%; height: 200%; }',t=document.head||document.getElementsByTagName("head")[0],n=document.createElement("style");n.type="text/css",n.styleSheet?n.styleSheet.cssText=e:n.appendChild(document.createTextNode(e)),t.appendChild(n),f=!0}}(),e.__resizeLast__={},e.__resizeListeners__=[],(e.__resizeTriggers__=document.createElement("div")).className="resize-triggers",e.__resizeTriggers__.innerHTML='<div class="expand-trigger"><div></div></div><div class="contract-trigger"></div>',e.appendChild(e.__resizeTriggers__),h(e),(0,i.default)(e,"scroll",m,!0),y&&e.__resizeTriggers__.addEventListener(y,(function(t){t.animationName==S&&h(e)}))),e.__resizeListeners__.push(t))},removeResizeListener:function(e,t){e=e.parentNode,c?e.detachEvent("onresize",t):(e.__resizeListeners__.splice(e.__resizeListeners__.indexOf(t),1),e.__resizeListeners__.length||(e.removeEventListener("scroll",m),e.__resizeTriggers__=!e.removeChild(e.__resizeTriggers__)))}}},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,l=r?Symbol.for("react.strict_mode"):60108,u=r?Symbol.for("react.profiler"):60114,s=r?Symbol.for("react.provider"):60109,c=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,m=r?Symbol.for("react.suspense_list"):60120,v=r?Symbol.for("react.memo"):60115,g=r?Symbol.for("react.lazy"):60116,y=r?Symbol.for("react.block"):60121,b=r?Symbol.for("react.fundamental"):60117,w=r?Symbol.for("react.responder"):60118,x=r?Symbol.for("react.scope"):60119;function k(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case d:case a:case u:case l:case h:return e;default:switch(e=e&&e.$$typeof){case c:case p:case g:case v:case s:return e;default:return t}}case i:return t}}}function _(e){return k(e)===d}t.AsyncMode=f,t.ConcurrentMode=d,t.ContextConsumer=c,t.ContextProvider=s,t.Element=o,t.ForwardRef=p,t.Fragment=a,t.Lazy=g,t.Memo=v,t.Portal=i,t.Profiler=u,t.StrictMode=l,t.Suspense=h,t.isAsyncMode=function(e){return _(e)||k(e)===f},t.isConcurrentMode=_,t.isContextConsumer=function(e){return k(e)===c},t.isContextProvider=function(e){return k(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return k(e)===p},t.isFragment=function(e){return k(e)===a},t.isLazy=function(e){return k(e)===g},t.isMemo=function(e){return k(e)===v},t.isPortal=function(e){return k(e)===i},t.isProfiler=function(e){return k(e)===u},t.isStrictMode=function(e){return k(e)===l},t.isSuspense=function(e){return k(e)===h},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===d||e===u||e===l||e===h||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===v||e.$$typeof===s||e.$$typeof===c||e.$$typeof===p||e.$$typeof===b||e.$$typeof===w||e.$$typeof===x||e.$$typeof===y)},t.typeOf=k},function(e,t,n){"use strict";n.r(t);var r=n(11),o=n.n(r),i=n(12),a=n.n(i),l=n(13),u=n.n(l),s=n(14),c=n.n(s),f=n(8),d=n.n(f),p=n(0),h=n.n(p),m=n(16),v=(n(65),n(9)),g=n.n(v);function y(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=d()(e);if(t){var o=d()(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return c()(this,n)}}var b=function(e){u()(n,e);var t=y(n);function n(e){var r;return o()(this,n),(r=t.call(this,e)).state={usercre:{email:"unknown",password:""},user:{displayName:""}},r}return a()(n,[{key:"fetchUser",value:function(){var e=this;"unknown"!=this.state.usercre.email&&(console.log("Calling http://localhost:8080/users/".concat(this.state.usercre.email,"/").concat(this.state.usercre.password)),g.a.get("http://localhost:8080/users/".concat(this.state.usercre.email,"/").concat(this.state.usercre.password)).then((function(t){console.log(t),e.setState({user:t.data})})))}},{key:"render",value:function(){var e=this;return h.a.createElement("div",{className:"user"},h.a.createElement("button",{onClick:function(){var t=document.getElementById("input_useremail").value,n=document.getElementById("input_userpassword").value;e.setState({usercre:{email:t,password:n}}),e.fetchUser()}},"Login"),h.a.createElement("h1",null,"Hello ",this.state.user.displayName))}}]),n}(p.Component),w=n(25),x=n.n(w),k=n(29),_=n.n(k),S=n(49),C=n.n(S),E=n(4),T=n.n(E),O=n(30);function P(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=d()(e);if(t){var o=d()(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return c()(this,n)}}function M(){var e=_()(["\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 22px;\n  height: 22px;\n  background-color: green;\n  border: 2px solid #fff;\n  border-radius: 100%;\n  user-select: none;\n  transform: translate(-50%, -50%);\n  cursor: ",";\n  &:hover {\n    z-index: 1;\n  }\n"]);return M=function(){return e},e}function R(){var e=_()(["\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 18px;\n  height: 18px;\n  background-color: red;\n  border: 2px solid #fff;\n  border-radius: 100%;\n  user-select: none;\n  transform: translate(-50%, -50%);\n  cursor: ",";\n  &:hover {\n    z-index: 1;\n  }\n"]);return R=function(){return e},e}var j=O.a.div(R(),(function(e){return e.onClick?"pointer":"default"})),A=O.a.div(M(),(function(e){return e.onClick?"pointer":"default"})),N=function(e){return h.a.createElement(j,x()({alt:e.text},e.onClick?{onClick:e.onClick}:{}),e.text)},z=function(e){return h.a.createElement(A,x()({alt:e.text},e.onClick?{onClick:e.onClick}:{}),e.text)};N.defaultProps={onClick:null},N.propTypes={onClick:T.a.func,text:T.a.string.isRequired};var L=function(e){u()(n,e);var t=P(n);function n(e){var r;return o()(this,n),(r=t.call(this,e)).state={center:{lat:49.2827,lng:-123.1207},range:1,markers:[]},r}return a()(n,[{key:"searchDestination",value:function(e,t,n){var r=this;this.setState({center:{lat:parseFloat(e),lng:parseFloat(t)},range:parseFloat(n)}),g.a.get("http://localhost:8080/covidcaserangelist/".concat(this.state.center.lat,"/").concat(this.state.center.lng,"/").concat(this.state.range)).then((function(e){var t=e.data.map((function(e){return{lat:e.latitude,lng:e.longitude,type:e.caseType,count:e.count}}));r.setState({markers:t})}))}},{key:"render",value:function(){var e=this;return h.a.createElement("div",{style:{height:"100vh",width:"100%"}},h.a.createElement("button",{onClick:function(){var t=document.getElementById("input_lat").value,n=document.getElementById("input_lng").value,r=document.getElementById("input_range").value;console.log("inputting lat: "+t+", lng: "+n,", range: "+r),e.searchDestination(t,n,r)}},"Search location"),h.a.createElement(C.a,{bootstrapURLKeys:{key:"AIzaSyDEIHcUjpFubnsH8aw0UmIql_nU9Y8fU1o"},defaultCenter:this.state.center,center:this.state.center,defaultZoom:this.props.zoom},this.state.markers.map((function(e){var t=e.lat,n=e.lng;return console.log({lat:t,lng:n}+"".concat(5*parseInt(e.count),"px")),h.a.createElement(N,{lat:t,lng:n,text:e.count,style:{height:"".concat(5*parseInt(e.count),"px"),width:"".concat(5*parseInt(e.count),"px")},onClick:function(){return console.log("Clicked")}})})),h.a.createElement(z,{lat:this.state.center.lat,lng:this.state.center.lng,text:"Destination",onClick:function(){return console.log("Destination was Clicked")}})))}}]),n}(p.Component);L.defaultProps={zoom:10};var I=L,D=n(19),F=n.n(D),U=n(1),B=n(2),$=n(3),H=n(5),V=p.forwardRef((function(e,t){var n=e.classes,r=e.className,o=e.component,i=void 0===o?"div":o,a=e.square,l=void 0!==a&&a,u=e.elevation,s=void 0===u?1:u,c=e.variant,f=void 0===c?"elevation":c,d=Object(B.a)(e,["classes","className","component","square","elevation","variant"]);return p.createElement(i,Object(U.a)({className:Object($.a)(n.root,r,"outlined"===f?n.outlined:n["elevation".concat(s)],!l&&n.rounded),ref:t},d))})),W=Object(H.a)((function(e){var t={};return e.shadows.forEach((function(e,n){t["elevation".concat(n)]={boxShadow:e}})),Object(U.a)({root:{backgroundColor:e.palette.background.paper,color:e.palette.text.primary,transition:e.transitions.create("box-shadow")},rounded:{borderRadius:e.shape.borderRadius},outlined:{border:"1px solid ".concat(e.palette.divider)}},t)}),{name:"MuiPaper"})(V),q=p.forwardRef((function(e,t){var n=e.classes,r=e.className,o=e.raised,i=void 0!==o&&o,a=Object(B.a)(e,["classes","className","raised"]);return p.createElement(W,Object(U.a)({className:Object($.a)(n.root,r),elevation:i?8:1,ref:t},a))})),K=Object(H.a)({root:{overflow:"hidden"}},{name:"MuiCard"})(q),G=p.forwardRef((function(e,t){var n=e.classes,r=e.className,o=e.component,i=void 0===o?"div":o,a=Object(B.a)(e,["classes","className","component"]);return p.createElement(i,Object(U.a)({className:Object($.a)(n.root,r),ref:t},a))})),Q=Object(H.a)({root:{padding:16,"&:last-child":{paddingBottom:24}}},{name:"MuiCardContent"})(G),Z=n(10),Y={h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",subtitle1:"h6",subtitle2:"h6",body1:"p",body2:"p"},X=p.forwardRef((function(e,t){var n=e.align,r=void 0===n?"inherit":n,o=e.classes,i=e.className,a=e.color,l=void 0===a?"initial":a,u=e.component,s=e.display,c=void 0===s?"initial":s,f=e.gutterBottom,d=void 0!==f&&f,h=e.noWrap,m=void 0!==h&&h,v=e.paragraph,g=void 0!==v&&v,y=e.variant,b=void 0===y?"body1":y,w=e.variantMapping,x=void 0===w?Y:w,k=Object(B.a)(e,["align","classes","className","color","component","display","gutterBottom","noWrap","paragraph","variant","variantMapping"]),_=u||(g?"p":x[b]||Y[b])||"span";return p.createElement(_,Object(U.a)({className:Object($.a)(o.root,i,"inherit"!==b&&o[b],"initial"!==l&&o["color".concat(Object(Z.a)(l))],m&&o.noWrap,d&&o.gutterBottom,g&&o.paragraph,"inherit"!==r&&o["align".concat(Object(Z.a)(r))],"initial"!==c&&o["display".concat(Object(Z.a)(c))]),ref:t},k))})),J=Object(H.a)((function(e){return{root:{margin:0},body2:e.typography.body2,body1:e.typography.body1,caption:e.typography.caption,button:e.typography.button,h1:e.typography.h1,h2:e.typography.h2,h3:e.typography.h3,h4:e.typography.h4,h5:e.typography.h5,h6:e.typography.h6,subtitle1:e.typography.subtitle1,subtitle2:e.typography.subtitle2,overline:e.typography.overline,srOnly:{position:"absolute",height:1,width:1,overflow:"hidden"},alignLeft:{textAlign:"left"},alignCenter:{textAlign:"center"},alignRight:{textAlign:"right"},alignJustify:{textAlign:"justify"},noWrap:{overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"},gutterBottom:{marginBottom:"0.35em"},paragraph:{marginBottom:16},colorInherit:{color:"inherit"},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},colorTextPrimary:{color:e.palette.text.primary},colorTextSecondary:{color:e.palette.text.secondary},colorError:{color:e.palette.error.main},displayInline:{display:"inline"},displayBlock:{display:"block"}}}),{name:"MuiTypography"})(X),ee=p.forwardRef((function(e,t){var n=e.action,r=e.avatar,o=e.classes,i=e.className,a=e.component,l=void 0===a?"div":a,u=e.disableTypography,s=void 0!==u&&u,c=e.subheader,f=e.subheaderTypographyProps,d=e.title,h=e.titleTypographyProps,m=Object(B.a)(e,["action","avatar","classes","className","component","disableTypography","subheader","subheaderTypographyProps","title","titleTypographyProps"]),v=d;null==v||v.type===J||s||(v=p.createElement(J,Object(U.a)({variant:r?"body2":"h5",className:o.title,component:"span",display:"block"},h),v));var g=c;return null==g||g.type===J||s||(g=p.createElement(J,Object(U.a)({variant:r?"body2":"body1",className:o.subheader,color:"textSecondary",component:"span",display:"block"},f),g)),p.createElement(l,Object(U.a)({className:Object($.a)(o.root,i),ref:t},m),r&&p.createElement("div",{className:o.avatar},r),p.createElement("div",{className:o.content},v,g),n&&p.createElement("div",{className:o.action},n))})),te=Object(H.a)({root:{display:"flex",alignItems:"center",padding:16},avatar:{flex:"0 0 auto",marginRight:16},action:{flex:"0 0 auto",alignSelf:"flex-start",marginTop:-8,marginRight:-8},content:{flex:"1 1 auto"},title:{},subheader:{}},{name:"MuiCardHeader"})(ee),ne=n(53),re=n.n(ne),oe=n(55),ie=n.n(oe),ae=n(15);function le(e,t){"function"==typeof e?e(t):e&&(e.current=t)}function ue(e,t){return p.useMemo((function(){return null==e&&null==t?null:function(n){le(e,n),le(t,n)}}),[e,t])}var se="undefined"!=typeof window?p.useLayoutEffect:p.useEffect;function ce(e){var t=p.useRef(e);return se((function(){t.current=e})),p.useCallback((function(){return t.current.apply(void 0,arguments)}),[])}var fe=!0,de=!1,pe=null,he={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function me(e){e.metaKey||e.altKey||e.ctrlKey||(fe=!0)}function ve(){fe=!1}function ge(){"hidden"===this.visibilityState&&de&&(fe=!0)}function ye(e){var t,n,r,o=e.target;try{return o.matches(":focus-visible")}catch(e){}return fe||(n=(t=o).type,!("INPUT"!==(r=t.tagName)||!he[n]||t.readOnly)||"TEXTAREA"===r&&!t.readOnly||!!t.isContentEditable)}function be(){de=!0,window.clearTimeout(pe),pe=window.setTimeout((function(){de=!1}),100)}function we(){return{isFocusVisible:ye,onBlurVisible:be,ref:p.useCallback((function(e){var t,n=m.findDOMNode(e);null!=n&&((t=n.ownerDocument).addEventListener("keydown",me,!0),t.addEventListener("mousedown",ve,!0),t.addEventListener("pointerdown",ve,!0),t.addEventListener("touchstart",ve,!0),t.addEventListener("visibilitychange",ge,!0))}),[])}}var xe=n(18),ke=n(17),_e=n(22),Se=n(21),Ce=h.a.createContext(null);function Ee(e,t){var n=Object.create(null);return e&&p.Children.map(e,(function(e){return e})).forEach((function(e){n[e.key]=function(e){return t&&Object(p.isValidElement)(e)?t(e):e}(e)})),n}function Te(e,t,n){return null!=n[t]?n[t]:e.props[t]}function Oe(e,t,n){var r=Ee(e.children),o=function(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,o=Object.create(null),i=[];for(var a in e)a in t?i.length&&(o[a]=i,i=[]):i.push(a);var l={};for(var u in t){if(o[u])for(r=0;r<o[u].length;r++){var s=o[u][r];l[o[u][r]]=n(s)}l[u]=n(u)}for(r=0;r<i.length;r++)l[i[r]]=n(i[r]);return l}(t,r);return Object.keys(o).forEach((function(i){var a=o[i];if(Object(p.isValidElement)(a)){var l=i in t,u=i in r,s=t[i],c=Object(p.isValidElement)(s)&&!s.props.in;!u||l&&!c?u||!l||c?u&&l&&Object(p.isValidElement)(s)&&(o[i]=Object(p.cloneElement)(a,{onExited:n.bind(null,a),in:s.props.in,exit:Te(a,"exit",e),enter:Te(a,"enter",e)})):o[i]=Object(p.cloneElement)(a,{in:!1}):o[i]=Object(p.cloneElement)(a,{onExited:n.bind(null,a),in:!0,exit:Te(a,"exit",e),enter:Te(a,"enter",e)})}})),o}var Pe=Object.values||function(e){return Object.keys(e).map((function(t){return e[t]}))},Me=function(e){function t(t,n){var r,o=(r=e.call(this,t,n)||this).handleExited.bind(Object(_e.a)(r));return r.state={contextValue:{isMounting:!0},handleExited:o,firstRender:!0},r}Object(Se.a)(t,e);var n=t.prototype;return n.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},n.componentWillUnmount=function(){this.mounted=!1},t.getDerivedStateFromProps=function(e,t){var n,r,o=t.children,i=t.handleExited;return{children:t.firstRender?(n=e,r=i,Ee(n.children,(function(e){return Object(p.cloneElement)(e,{onExited:r.bind(null,e),in:!0,appear:Te(e,"appear",n),enter:Te(e,"enter",n),exit:Te(e,"exit",n)})}))):Oe(e,o,i),firstRender:!1}},n.handleExited=function(e,t){var n=Ee(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState((function(t){var n=Object(U.a)({},t.children);return delete n[e.key],{children:n}})))},n.render=function(){var e=this.props,t=e.component,n=e.childFactory,r=Object(ke.a)(e,["component","childFactory"]),o=this.state.contextValue,i=Pe(this.state.children).map(n);return delete r.appear,delete r.enter,delete r.exit,null===t?h.a.createElement(Ce.Provider,{value:o},i):h.a.createElement(Ce.Provider,{value:o},h.a.createElement(t,r,i))},t}(h.a.Component);Me.propTypes={},Me.defaultProps={component:"div",childFactory:function(e){return e}};var Re=Me,je="undefined"==typeof window?p.useEffect:p.useLayoutEffect;var Ae=function(e){var t=e.classes,n=e.pulsate,r=void 0!==n&&n,o=e.rippleX,i=e.rippleY,a=e.rippleSize,l=e.in,u=e.onExited,s=void 0===u?function(){}:u,c=e.timeout,f=p.useState(!1),d=f[0],h=f[1],m=Object($.a)(t.ripple,t.rippleVisible,r&&t.ripplePulsate),v={width:a,height:a,top:-a/2+i,left:-a/2+o},g=Object($.a)(t.child,d&&t.childLeaving,r&&t.childPulsate),y=ce(s);return je((function(){if(!l){h(!0);var e=setTimeout(y,c);return function(){clearTimeout(e)}}}),[y,l,c]),p.createElement("span",{className:m,style:v},p.createElement("span",{className:g}))},Ne=p.forwardRef((function(e,t){var n=e.center,r=void 0!==n&&n,o=e.classes,i=e.className,a=Object(B.a)(e,["center","classes","className"]),l=p.useState([]),u=l[0],s=l[1],c=p.useRef(0),f=p.useRef(null);p.useEffect((function(){f.current&&(f.current(),f.current=null)}),[u]);var d=p.useRef(!1),h=p.useRef(null),m=p.useRef(null),v=p.useRef(null);p.useEffect((function(){return function(){clearTimeout(h.current)}}),[]);var g=p.useCallback((function(e){var t=e.pulsate,n=e.rippleX,r=e.rippleY,i=e.rippleSize,a=e.cb;s((function(e){return[].concat(Object(xe.a)(e),[p.createElement(Ae,{key:c.current,classes:o,timeout:550,pulsate:t,rippleX:n,rippleY:r,rippleSize:i})])})),c.current+=1,f.current=a}),[o]),y=p.useCallback((function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2?arguments[2]:void 0,o=t.pulsate,i=void 0!==o&&o,a=t.center,l=void 0===a?r||t.pulsate:a,u=t.fakeElement,s=void 0!==u&&u;if("mousedown"===e.type&&d.current)d.current=!1;else{"touchstart"===e.type&&(d.current=!0);var c,f,p,y=s?null:v.current,b=y?y.getBoundingClientRect():{width:0,height:0,left:0,top:0};if(l||0===e.clientX&&0===e.clientY||!e.clientX&&!e.touches)c=Math.round(b.width/2),f=Math.round(b.height/2);else{var w=e.touches?e.touches[0]:e,x=w.clientX,k=w.clientY;c=Math.round(x-b.left),f=Math.round(k-b.top)}if(l)(p=Math.sqrt((2*Math.pow(b.width,2)+Math.pow(b.height,2))/3))%2==0&&(p+=1);else{var _=2*Math.max(Math.abs((y?y.clientWidth:0)-c),c)+2,S=2*Math.max(Math.abs((y?y.clientHeight:0)-f),f)+2;p=Math.sqrt(Math.pow(_,2)+Math.pow(S,2))}e.touches?null===m.current&&(m.current=function(){g({pulsate:i,rippleX:c,rippleY:f,rippleSize:p,cb:n})},h.current=setTimeout((function(){m.current&&(m.current(),m.current=null)}),80)):g({pulsate:i,rippleX:c,rippleY:f,rippleSize:p,cb:n})}}),[r,g]),b=p.useCallback((function(){y({},{pulsate:!0})}),[y]),w=p.useCallback((function(e,t){if(clearTimeout(h.current),"touchend"===e.type&&m.current)return e.persist(),m.current(),m.current=null,void(h.current=setTimeout((function(){w(e,t)})));m.current=null,s((function(e){return e.length>0?e.slice(1):e})),f.current=t}),[]);return p.useImperativeHandle(t,(function(){return{pulsate:b,start:y,stop:w}}),[b,y,w]),p.createElement("span",Object(U.a)({className:Object($.a)(o.root,i),ref:v},a),p.createElement(Re,{component:null,exit:!0},u))})),ze=Object(H.a)((function(e){return{root:{overflow:"hidden",pointerEvents:"none",position:"absolute",zIndex:0,top:0,right:0,bottom:0,left:0,borderRadius:"inherit"},ripple:{opacity:0,position:"absolute"},rippleVisible:{opacity:.3,transform:"scale(1)",animation:"$enter ".concat(550,"ms ").concat(e.transitions.easing.easeInOut)},ripplePulsate:{animationDuration:"".concat(e.transitions.duration.shorter,"ms")},child:{opacity:1,display:"block",width:"100%",height:"100%",borderRadius:"50%",backgroundColor:"currentColor"},childLeaving:{opacity:0,animation:"$exit ".concat(550,"ms ").concat(e.transitions.easing.easeInOut)},childPulsate:{position:"absolute",left:0,top:0,animation:"$pulsate 2500ms ".concat(e.transitions.easing.easeInOut," 200ms infinite")},"@keyframes enter":{"0%":{transform:"scale(0)",opacity:.1},"100%":{transform:"scale(1)",opacity:.3}},"@keyframes exit":{"0%":{opacity:1},"100%":{opacity:0}},"@keyframes pulsate":{"0%":{transform:"scale(1)"},"50%":{transform:"scale(0.92)"},"100%":{transform:"scale(1)"}}}}),{flip:!1,name:"MuiTouchRipple"})(p.memo(Ne)),Le=p.forwardRef((function(e,t){var n=e.action,r=e.buttonRef,o=e.centerRipple,i=void 0!==o&&o,a=e.children,l=e.classes,u=e.className,s=e.component,c=void 0===s?"button":s,f=e.disabled,d=void 0!==f&&f,h=e.disableRipple,v=void 0!==h&&h,g=e.disableTouchRipple,y=void 0!==g&&g,b=e.focusRipple,w=void 0!==b&&b,x=e.focusVisibleClassName,k=e.onBlur,_=e.onClick,S=e.onFocus,C=e.onFocusVisible,E=e.onKeyDown,T=e.onKeyUp,O=e.onMouseDown,P=e.onMouseLeave,M=e.onMouseUp,R=e.onTouchEnd,j=e.onTouchMove,A=e.onTouchStart,N=e.onDragLeave,z=e.tabIndex,L=void 0===z?0:z,I=e.TouchRippleProps,D=e.type,F=void 0===D?"button":D,H=Object(B.a)(e,["action","buttonRef","centerRipple","children","classes","className","component","disabled","disableRipple","disableTouchRipple","focusRipple","focusVisibleClassName","onBlur","onClick","onFocus","onFocusVisible","onKeyDown","onKeyUp","onMouseDown","onMouseLeave","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","onDragLeave","tabIndex","TouchRippleProps","type"]),V=p.useRef(null);var W=p.useRef(null),q=p.useState(!1),K=q[0],G=q[1];d&&K&&G(!1);var Q=we(),Z=Q.isFocusVisible,Y=Q.onBlurVisible,X=Q.ref;function J(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:y;return ce((function(r){return t&&t(r),!n&&W.current&&W.current[e](r),!0}))}p.useImperativeHandle(n,(function(){return{focusVisible:function(){G(!0),V.current.focus()}}}),[]),p.useEffect((function(){K&&w&&!v&&W.current.pulsate()}),[v,w,K]);var ee=J("start",O),te=J("stop",N),ne=J("stop",M),re=J("stop",(function(e){K&&e.preventDefault(),P&&P(e)})),oe=J("start",A),ie=J("stop",R),ae=J("stop",j),le=J("stop",(function(e){K&&(Y(e),G(!1)),k&&k(e)}),!1),se=ce((function(e){V.current||(V.current=e.currentTarget),Z(e)&&(G(!0),C&&C(e)),S&&S(e)})),fe=function(){var e=m.findDOMNode(V.current);return c&&"button"!==c&&!("A"===e.tagName&&e.href)},de=p.useRef(!1),pe=ce((function(e){w&&!de.current&&K&&W.current&&" "===e.key&&(de.current=!0,e.persist(),W.current.stop(e,(function(){W.current.start(e)}))),e.target===e.currentTarget&&fe()&&" "===e.key&&e.preventDefault(),E&&E(e),e.target===e.currentTarget&&fe()&&"Enter"===e.key&&!d&&(e.preventDefault(),_&&_(e))})),he=ce((function(e){w&&" "===e.key&&W.current&&K&&!e.defaultPrevented&&(de.current=!1,e.persist(),W.current.stop(e,(function(){W.current.pulsate(e)}))),T&&T(e),_&&e.target===e.currentTarget&&fe()&&" "===e.key&&!e.defaultPrevented&&_(e)})),me=c;"button"===me&&H.href&&(me="a");var ve={};"button"===me?(ve.type=F,ve.disabled=d):("a"===me&&H.href||(ve.role="button"),ve["aria-disabled"]=d);var ge=ue(r,t),ye=ue(X,V),be=ue(ge,ye),xe=p.useState(!1),ke=xe[0],_e=xe[1];p.useEffect((function(){_e(!0)}),[]);var Se=ke&&!v&&!d;return p.createElement(me,Object(U.a)({className:Object($.a)(l.root,u,K&&[l.focusVisible,x],d&&l.disabled),onBlur:le,onClick:_,onFocus:se,onKeyDown:pe,onKeyUp:he,onMouseDown:ee,onMouseLeave:re,onMouseUp:ne,onDragLeave:te,onTouchEnd:ie,onTouchMove:ae,onTouchStart:oe,ref:be,tabIndex:d?-1:L},ve,H),a,Se?p.createElement(ze,Object(U.a)({ref:W,center:i},I)):null)})),Ie=Object(H.a)({root:{display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle","-moz-appearance":"none","-webkit-appearance":"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},"&$disabled":{pointerEvents:"none",cursor:"default"},"@media print":{colorAdjust:"exact"}},disabled:{},focusVisible:{}},{name:"MuiButtonBase"})(Le),De=p.forwardRef((function(e,t){var n=e.edge,r=void 0!==n&&n,o=e.children,i=e.classes,a=e.className,l=e.color,u=void 0===l?"default":l,s=e.disabled,c=void 0!==s&&s,f=e.disableFocusRipple,d=void 0!==f&&f,h=e.size,m=void 0===h?"medium":h,v=Object(B.a)(e,["edge","children","classes","className","color","disabled","disableFocusRipple","size"]);return p.createElement(Ie,Object(U.a)({className:Object($.a)(i.root,a,"default"!==u&&i["color".concat(Object(Z.a)(u))],c&&i.disabled,"small"===m&&i["size".concat(Object(Z.a)(m))],{start:i.edgeStart,end:i.edgeEnd}[r]),centerRipple:!0,focusRipple:!d,disabled:c,ref:t},v),p.createElement("span",{className:i.label},o))})),Fe=Object(H.a)((function(e){return{root:{textAlign:"center",flex:"0 0 auto",fontSize:e.typography.pxToRem(24),padding:12,borderRadius:"50%",overflow:"visible",color:e.palette.action.active,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest}),"&:hover":{backgroundColor:Object(ae.b)(e.palette.action.active,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"&$disabled":{backgroundColor:"transparent",color:e.palette.action.disabled}},edgeStart:{marginLeft:-12,"$sizeSmall&":{marginLeft:-3}},edgeEnd:{marginRight:-12,"$sizeSmall&":{marginRight:-3}},colorInherit:{color:"inherit"},colorPrimary:{color:e.palette.primary.main,"&:hover":{backgroundColor:Object(ae.b)(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},colorSecondary:{color:e.palette.secondary.main,"&:hover":{backgroundColor:Object(ae.b)(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},disabled:{},sizeSmall:{padding:3,fontSize:e.typography.pxToRem(18)},label:{width:"100%",display:"flex",alignItems:"inherit",justifyContent:"inherit"}}}),{name:"MuiIconButton"})(De),Ue=n(54),Be=n.n(Ue);function $e(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=d()(e);if(t){var o=d()(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return c()(this,n)}}var He=function(e){u()(n,e);var t=$e(n);function n(e){var r;return o()(this,n),(r=t.call(this,e)).state={comments:[],textFieldValue:"",user:""},r.fetchAllComments=r.fetchAllComments.bind(F()(r)),r.createComment=r.createComment.bind(F()(r)),r.handleInputChange=r.handleInputChange.bind(F()(r)),r}return a()(n,[{key:"createComment",value:function(e){var t=this;g.a.post("http://localhost:8080/comment",{ccontent:e,upvote:0,downvote:0,longitude:-123.2034,latitude:49.2649,userId:1,id:3}).then((function(){t.fetchAllComments()}))}},{key:"handleInputChange",value:function(e){var t=e.target.value;this.setState({textFieldValue:t}),console.log(this.state.textFieldValue)}},{key:"fetchAllComments",value:function(){var e=this;g.a.get("http://localhost:8080/comments").then((function(t){var n=t.data;e.setState({comments:n})}))}},{key:"componentDidMount",value:function(){this.fetchAllComments()}},{key:"render",value:function(){var e=this;return h.a.createElement("div",{className:"container",style:{marginTop:"50px"}},h.a.createElement(K,{className:"input-area my-3"},h.a.createElement("div",{className:"row"},h.a.createElement("div",{className:"col-lg-10"},h.a.createElement("textarea",{className:"text-box mx-2 mt-3",rows:"3",placeholder:"Post a comment here",required:!0,onChange:function(t){e.handleInputChange(t)}}),h.a.createElement("button",{type:"button",className:"btn btn-primary float-right mx-4 mb-3",onClick:function(){e.createComment(e.state.textFieldValue)}},"Submit")))),this.state.comments.map((function(t){return h.a.createElement(Ve,{comment:t.ccontent,_id:t.id,upvote:t.upvote,downvote:t.downvote,parentMethod:function(){return e.fetchAllComments()}})})))}}]),n}(p.Component),Ve=function(e){u()(n,e);var t=$e(n);function n(e){var r;return o()(this,n),(r=t.call(this,e)).state={user:e.user,_id:e._id,upvote:e.upvote,downvote:e.downvote,comment:e.comment,parentMethod:e.parentMethod},r}return a()(n,[{key:"upvote",value:function(){var e=this;g.a.put("http://localhost:8080/upvote/".concat(this.state._id)).then((function(){e.fetchUpvoteById(e.state._id)}))}},{key:"downvote",value:function(){var e=this;g.a.put("http://localhost:8080/downvote/".concat(this.state._id)).then((function(){e.fetchDownvoteById(e.state._id)}))}},{key:"delete",value:function(){var e=this;g.a.delete("http://localhost:8080/comment/".concat(this.state._id)).then((function(){e.props.parentMethod()}))}},{key:"fetchUpvoteById",value:function(e){var t=this;g.a.get("http://localhost:8080/upvote/".concat(e)).then((function(e){var n=e.data;t.setState({upvote:n})}))}},{key:"fetchDownvoteById",value:function(e){var t=this;g.a.get("http://localhost:8080/downvote/".concat(e)).then((function(e){var n=e.data;t.setState({downvote:n})}))}},{key:"render",value:function(){var e=this;return h.a.createElement("div",{className:"container"},h.a.createElement(K,{className:"comment"},h.a.createElement(te,{title:this.state.user}),h.a.createElement(Q,null,h.a.createElement(J,{variant:"body2",color:"textPrimary",component:"p"},this.state.comment)),h.a.createElement(Fe,{"aria-label":"upvote",onClick:function(){return e.upvote()}},h.a.createElement(re.a,{color:"secondary"}),h.a.createElement("div",null,this.state.upvote)),h.a.createElement(Fe,{"aria-label":"downvote",onClick:function(){return e.downvote()}},h.a.createElement(Be.a,{color:"default"}),h.a.createElement("div",null,this.state.downvote)),h.a.createElement(Fe,{"aria-label":"delete",onClick:function(){return e.delete()}},h.a.createElement(ie.a,{color:"default"}))))}}]),n}(p.Component);function We(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=d()(e);if(t){var o=d()(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return c()(this,n)}}var qe=function(e){u()(n,e);var t=We(n);function n(){return o()(this,n),t.apply(this,arguments)}return a()(n,[{key:"render",value:function(){return h.a.createElement("div",{className:"home"},h.a.createElement("input",{id:"input_useremail",placeholder:"user email"}),h.a.createElement("input",{id:"input_userpassword",placeholder:"user password"}),h.a.createElement(b,null),h.a.createElement("p",null,"Welcome to Travel Buddy Covid-19 edition! Please enter your destination:"),h.a.createElement("input",{id:"input_lat",type:"number",placeholder:"latitude"}),h.a.createElement("input",{id:"input_lng",type:"number",placeholder:"longitude"}),h.a.createElement("input",{id:"input_range",type:"number",placeholder:"range"}),h.a.createElement(I,null),h.a.createElement(He,null))}}]),n}(h.a.Component);Object(m.render)(h.a.createElement(qe,null),document.getElementById("app"))},function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return c}));var r=n(1),o=n(2),i=n(0),a=(n(4),n(3)),l=n(5),u=n(10),s=i.forwardRef((function(e,t){var n=e.children,l=e.classes,s=e.className,c=e.color,f=void 0===c?"inherit":c,d=e.component,p=void 0===d?"svg":d,h=e.fontSize,m=void 0===h?"default":h,v=e.htmlColor,g=e.titleAccess,y=e.viewBox,b=void 0===y?"0 0 24 24":y,w=Object(o.a)(e,["children","classes","className","color","component","fontSize","htmlColor","titleAccess","viewBox"]);return i.createElement(p,Object(r.a)({className:Object(a.a)(l.root,s,"inherit"!==f&&l["color".concat(Object(u.a)(f))],"default"!==m&&l["fontSize".concat(Object(u.a)(m))]),focusable:"false",viewBox:b,color:v,"aria-hidden":!g||void 0,role:g?"img":void 0,ref:t},w),n,g?i.createElement("title",null,g):null)}));s.muiName="SvgIcon";var c=Object(l.a)((function(e){return{root:{userSelect:"none",width:"1em",height:"1em",display:"inline-block",fill:"currentColor",flexShrink:0,fontSize:e.typography.pxToRem(24),transition:e.transitions.create("fill",{duration:e.transitions.duration.shorter})},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},colorAction:{color:e.palette.action.active},colorError:{color:e.palette.error.main},colorDisabled:{color:e.palette.action.disabled},fontSizeInherit:{fontSize:"inherit"},fontSizeSmall:{fontSize:e.typography.pxToRem(20)},fontSizeLarge:{fontSize:e.typography.pxToRem(35)}}}),{name:"MuiSvgIcon"})(s)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2Nsc3gvZGlzdC9jbHN4Lm0uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvaXMtaW4tYnJvd3Nlci9kaXN0L21vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvanNzL2Rpc3QvanNzLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL21lcmdlQ2xhc3Nlcy9tZXJnZUNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9tYWtlU3R5bGVzL211bHRpS2V5U3RvcmUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS91c2VUaGVtZS9UaGVtZUNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS91c2VUaGVtZS91c2VUaGVtZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL1RoZW1lUHJvdmlkZXIvbmVzdGVkLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUvY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLXJ1bGUtdmFsdWUtZnVuY3Rpb24vZGlzdC9qc3MtcGx1Z2luLXJ1bGUtdmFsdWUtZnVuY3Rpb24uZXNtLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvanNzLXBsdWdpbi1nbG9iYWwvZGlzdC9qc3MtcGx1Z2luLWdsb2JhbC5lc20uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLW5lc3RlZC9kaXN0L2pzcy1wbHVnaW4tbmVzdGVkLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2h5cGhlbmF0ZS1zdHlsZS1uYW1lL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvanNzLXBsdWdpbi1jYW1lbC1jYXNlL2Rpc3QvanNzLXBsdWdpbi1jYW1lbC1jYXNlLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2pzcy1wbHVnaW4tZGVmYXVsdC11bml0L2Rpc3QvanNzLXBsdWdpbi1kZWZhdWx0LXVuaXQuZXNtLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY3NzLXZlbmRvci9kaXN0L2Nzcy12ZW5kb3IuZXNtLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvanNzLXBsdWdpbi12ZW5kb3ItcHJlZml4ZXIvZGlzdC9qc3MtcGx1Z2luLXZlbmRvci1wcmVmaXhlci5lc20uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLXByb3BzLXNvcnQvZGlzdC9qc3MtcGx1Z2luLXByb3BzLXNvcnQuZXNtLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vanNzUHJlc2V0L2pzc1ByZXNldC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL1N0eWxlc1Byb3ZpZGVyL1N0eWxlc1Byb3ZpZGVyLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vbWFrZVN0eWxlcy9pbmRleENvdW50ZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2YuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvdXRpbHMvZXNtL2RlZXBtZXJnZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL2dldFN0eWxlc0NyZWF0b3IvZ2V0U3R5bGVzQ3JlYXRvci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL2dldFN0eWxlc0NyZWF0b3Ivbm9vcFRoZW1lLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vbWFrZVN0eWxlcy9tYWtlU3R5bGVzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vZ2V0VGhlbWVQcm9wcy9nZXRUaGVtZVByb3BzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vd2l0aFN0eWxlcy93aXRoU3R5bGVzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL2NyZWF0ZUJyZWFrcG9pbnRzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9jcmVhdGVNaXhpbnMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vY29sb3JzL2NvbW1vbi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9jb2xvcnMvZ3JleS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9jb2xvcnMvaW5kaWdvLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2NvbG9ycy9waW5rLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2NvbG9ycy9yZWQuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vY29sb3JzL29yYW5nZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9jb2xvcnMvYmx1ZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9jb2xvcnMvZ3JlZW4uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL2NyZWF0ZVBhbGV0dGUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL2NyZWF0ZVR5cG9ncmFwaHkuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL3NoYWRvd3MuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL3NoYXBlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5V2l0aEhvbGVzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaXRlcmFibGVUb0FycmF5TGltaXQuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9ub25JdGVyYWJsZVJlc3QuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3lzdGVtL2VzbS9tZXJnZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zeXN0ZW0vZXNtL2JyZWFrcG9pbnRzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9lc20vc3BhY2luZy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zeXN0ZW0vZXNtL21lbW9pemUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL2NyZWF0ZVNwYWNpbmcuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL3RyYW5zaXRpb25zLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy96SW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL2NyZWF0ZU11aVRoZW1lLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9kZWZhdWx0VGhlbWUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL3dpdGhTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vdXRpbHMvY2FwaXRhbGl6ZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0cy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvY29sb3JNYW5pcHVsYXRvci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5V2l0aG91dEhvbGVzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaXRlcmFibGVUb0FycmF5LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vbm9uSXRlcmFibGVTcHJlYWQuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5TGlrZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvdXRpbHMvY3JlYXRlU3ZnSWNvbi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdGFnZ2VkVGVtcGxhdGVMaXRlcmFsLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvc3R5bGVkLWNvbXBvbmVudHMvZGlzdC9zdHlsZWQtY29tcG9uZW50cy5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL21lbW9pemUvZGlzdC9tZW1vaXplLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vaXMtcHJvcC12YWxpZC9kaXN0L2lzLXByb3AtdmFsaWQuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYmluZC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9pc0NhbmNlbC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9jcmVhdGVFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL21lcmdlQ29uZmlnLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9nb29nbGUtbWFwLXJlYWN0L2xpYi9nb29nbGVfbWFwX21hcmtlcnMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9nb29nbGUtbWFwLXJlYWN0L2xpYi91dGlscy9vbWl0LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZ29vZ2xlLW1hcC1yZWFjdC9saWIvdXRpbHMvc2hhbGxvd0VxdWFsLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQG1hcGJveC9wb2ludC1nZW9tZXRyeS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2dvb2dsZS1tYXAtcmVhY3QvbGliL3V0aWxzL2xpYl9nZW8vbGF0X2xuZy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2dvb2dsZS1tYXAtcmVhY3QvbGliL3V0aWxzL2xpYl9nZW8vd3JhcC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2dvb2dsZS1tYXAtcmVhY3QvbGliL3V0aWxzL3Bhc3NpdmVFdmVudHMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9nb29nbGUtbWFwLXJlYWN0L2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3NoYWxsb3dlcXVhbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3N0eWxpcy9kaXN0L3N0eWxpcy5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3VuaXRsZXNzL2Rpc3QvdW5pdGxlc3MuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvRmF2b3JpdGUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvVGh1bWJEb3duQWx0LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL0RlbGV0ZUZvcmV2ZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvdXRpbHMvZXNtL2Zvcm1hdE11aUVycm9yTWVzc2FnZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2V0UHJvdG90eXBlT2YuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vc2Nzcy9tYWluLnNjc3M/NWMzMSIsIndlYnBhY2s6Ly8vLi9zY3NzL21haW4uc2NzcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL3VybHMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYXhpb3MuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvYnVpbGRGdWxsUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Nvb2tpZXMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZ29vZ2xlLW1hcC1yZWFjdC9saWIvZ29vZ2xlX21hcC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9nb29nbGUtbWFwLXJlYWN0L2xpYi9nb29nbGVfbWFwX21hcC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2dvb2dsZS1tYXAtcmVhY3QvbGliL21hcmtlcl9kaXNwYXRjaGVyLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZ29vZ2xlLW1hcC1yZWFjdC9ub2RlX21vZHVsZXMvZXZlbnRlbWl0dGVyMy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2dvb2dsZS1tYXAtcmVhY3QvbGliL2dvb2dsZV9tYXBfbWFya2Vyc19wcmVyZW5kZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9nb29nbGUtbWFwLXJlYWN0L2xpYi9nb29nbGVfaGVhdG1hcC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2dvb2dsZS1tYXAtcmVhY3QvbGliL2xvYWRlcnMvZ29vZ2xlX21hcF9sb2FkZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9zY3JpcHRqcy9kaXN0L3NjcmlwdC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2dvb2dsZS1tYXAtcmVhY3QvbGliL3V0aWxzL2dlby5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2dvb2dsZS1tYXAtcmVhY3QvbGliL3V0aWxzL2xpYl9nZW8vdHJhbnNmb3JtLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZ29vZ2xlLW1hcC1yZWFjdC9saWIvdXRpbHMvcmFmLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZ29vZ2xlLW1hcC1yZWFjdC9saWIvdXRpbHMvcGljay5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2dvb2dsZS1tYXAtcmVhY3QvbGliL3V0aWxzL21hdGgvbG9nMi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2dvb2dsZS1tYXAtcmVhY3QvbGliL3V0aWxzL2lzRW1wdHkuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9nb29nbGUtbWFwLXJlYWN0L2xpYi91dGlscy9pc051bWJlci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2dvb2dsZS1tYXAtcmVhY3QvbGliL3V0aWxzL2RldGVjdC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2dvb2dsZS1tYXAtcmVhY3QvbGliL3V0aWxzL2lzUGxhaW5PYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9nb29nbGUtbWFwLXJlYWN0L2xpYi91dGlscy9pc0FycmF5c0VxdWFsRXBzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZ29vZ2xlLW1hcC1yZWFjdC9saWIvdXRpbHMvZGV0ZWN0RWxlbWVudFJlc2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvY29tcG9uZW50cy9Vc2VyLmpzeCIsIndlYnBhY2s6Ly8vLi9hcHAvY29tcG9uZW50cy9HbWFwLmpzeCIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9QYXBlci9QYXBlci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9DYXJkL0NhcmQuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vQ2FyZENvbnRlbnQvQ2FyZENvbnRlbnQuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vVHlwb2dyYXBoeS9UeXBvZ3JhcGh5LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0NhcmRIZWFkZXIvQ2FyZEhlYWRlci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91dGlscy9zZXRSZWYuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vdXRpbHMvdXNlRm9ya1JlZi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91dGlscy91c2VFdmVudENhbGxiYWNrLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL3VzZUlzRm9jdXNWaXNpYmxlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvZXNtL3V0aWxzL0NoaWxkTWFwcGluZy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvZXNtL1RyYW5zaXRpb25Hcm91cC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9CdXR0b25CYXNlL1JpcHBsZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9CdXR0b25CYXNlL1RvdWNoUmlwcGxlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0J1dHRvbkJhc2UvQnV0dG9uQmFzZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9JY29uQnV0dG9uL0ljb25CdXR0b24uanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL2NvbXBvbmVudHMvQ29tbWVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vYXBwL2luZGV4LmpzeCIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9TdmdJY29uL1N2Z0ljb24uanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJfZXh0ZW5kcyIsImFzc2lnbiIsInRhcmdldCIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsImFwcGx5IiwidGhpcyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImV4Y2x1ZGVkIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic291cmNlU3ltYm9sS2V5cyIsImluZGV4T2YiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInRvVmFsIiwibWl4IiwiayIsInkiLCJzdHIiLCJBcnJheSIsImlzQXJyYXkiLCJ0bXAiLCJ4IiwiX3R5cGVvZiIsIml0ZXJhdG9yIiwib2JqIiwiY29uc3RydWN0b3IiLCJ3aW5kb3ciLCJkb2N1bWVudCIsIm5vZGVUeXBlIiwiX2RlZmluZVByb3BlcnRpZXMiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl9jcmVhdGVDbGFzcyIsIkNvbnN0cnVjdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwicGxhaW5PYmplY3RDb25zdHJ1cmN0b3IiLCJjbG9uZVN0eWxlIiwic3R5bGUiLCJtYXAiLCJuZXdTdHlsZSIsImNyZWF0ZVJ1bGUiLCJkZWNsIiwib3B0aW9ucyIsImpzcyIsImRlY2xDb3B5IiwicnVsZSIsInBsdWdpbnMiLCJvbkNyZWF0ZVJ1bGUiLCJqb2luIiwiYnkiLCJyZXN1bHQiLCJ0b0Nzc1ZhbHVlIiwiaWdub3JlSW1wb3J0YW50IiwiY3NzVmFsdWUiLCJpbmRlbnRTdHIiLCJpbmRlbnQiLCJpbmRleCIsInRvQ3NzIiwic2VsZWN0b3IiLCJfb3B0aW9ucyRpbmRlbnQiLCJmYWxsYmFja3MiLCJmYWxsYmFjayIsInByb3AiLCJfcHJvcCIsIl92YWx1ZSIsIl9wcm9wMiIsIl92YWx1ZTIiLCJhbGxvd0VtcHR5IiwiZXNjYXBlUmVnZXgiLCJuYXRpdmVFc2NhcGUiLCJDU1MiLCJlc2NhcGUiLCJyZXBsYWNlIiwiQmFzZVN0eWxlUnVsZSIsInR5cGUiLCJpc1Byb2Nlc3NlZCIsInJlbmRlcmVyIiwicmVuZGVyYWJsZSIsInNoZWV0IiwiUmVuZGVyZXIiLCJ1bmRlZmluZWQiLCJmb3JjZSIsIm5ld1ZhbHVlIiwicHJvY2VzcyIsIm9uQ2hhbmdlVmFsdWUiLCJpc0VtcHR5IiwiaXNEZWZpbmVkIiwicmVtb3ZlIiwicmVtb3ZlUHJvcGVydHkiLCJzZXRQcm9wZXJ0eSIsImF0dGFjaGVkIiwiX0Jhc2VTdHlsZVJ1bGUiLCJTdHlsZVJ1bGUiLCJfdGhpcyIsInNlbGVjdG9yVGV4dCIsImlkIiwic2NvcGVkIiwiZ2VuZXJhdGVJZCIsIl9wcm90bzIiLCJhcHBseVRvIiwianNvbiIsInRvSlNPTiIsInRvU3RyaW5nIiwib3B0cyIsImxpbmsiLCJzZXQiLCJzZXRTZWxlY3RvciIsInJlcGxhY2VSdWxlIiwicGx1Z2luU3R5bGVSdWxlIiwicGFyZW50IiwiZGVmYXVsdFRvU3RyaW5nT3B0aW9ucyIsImNoaWxkcmVuIiwiYXRSZWdFeHAiLCJDb25kaXRpb25hbFJ1bGUiLCJzdHlsZXMiLCJhdCIsInF1ZXJ5IiwicnVsZXMiLCJhdE1hdGNoIiwibWF0Y2giLCJhZGQiLCJfcHJvdG8iLCJnZXRSdWxlIiwiYWRkUnVsZSIsIm9uUHJvY2Vzc1J1bGUiLCJrZXlSZWdFeHAiLCJwbHVnaW5Db25kaXRpb25hbFJ1bGUiLCJ0ZXN0IiwiZGVmYXVsdFRvU3RyaW5nT3B0aW9ucyQxIiwibmFtZVJlZ0V4cCIsIktleWZyYW1lc1J1bGUiLCJmcmFtZXMiLCJuYW1lTWF0Y2giLCJrZXlSZWdFeHAkMSIsInJlZlJlZ0V4cCIsImZpbmRSZWZlcmVuY2VkS2V5ZnJhbWUiLCJ2YWwiLCJrZXlmcmFtZXMiLCJyZWZLZXlmcmFtZSIsIm9uUHJvY2Vzc1N0eWxlIiwiS2V5ZnJhbWVSdWxlIiwiX2xlbiIsImFyZ3MiLCJfa2V5IiwiY29uY2F0IiwicGx1Z2luS2V5ZnJhbWVSdWxlIiwiRm9udEZhY2VSdWxlIiwia2V5UmVnRXhwJDIiLCJwbHVnaW5Gb250RmFjZVJ1bGUiLCJWaWV3cG9ydFJ1bGUiLCJwbHVnaW5WaWV3cG9ydFJ1bGUiLCJTaW1wbGVSdWxlIiwia2V5c01hcCIsImRlZmF1bHRVcGRhdGVPcHRpb25zIiwiZm9yY2VVcGRhdGVPcHRpb25zIiwiUnVsZUxpc3QiLCJyYXciLCJjb3VudGVyIiwiY2xhc3NlcyIsInJ1bGVPcHRpb25zIiwiX3RoaXMkb3B0aW9ucyIsInJlZ2lzdGVyIiwic3BsaWNlIiwidW5yZWdpc3RlciIsInNsaWNlIiwiZm9yRWFjaCIsInVwZGF0ZSIsImRhdGEiLCJ1cGRhdGVPbmUiLCJfdGhpcyRvcHRpb25zMiIsInN0eWxlUnVsZSIsIm9uVXBkYXRlIiwibmV4dFZhbHVlIiwiX25leHRWYWx1ZSIsIl9wcmV2VmFsdWUiLCJjc3MiLCJTdHlsZVNoZWV0IiwiZGVwbG95ZWQiLCJxdWV1ZSIsImF0dGFjaCIsImRlcGxveSIsImRldGFjaCIsInB1c2giLCJpbnNlcnRSdWxlIiwiYWRkUnVsZXMiLCJhZGRlZCIsImRlbGV0ZVJ1bGUiLCJfdGhpcyRydWxlcyIsIlBsdWdpbnNSZWdpc3RyeSIsImludGVybmFsIiwiZXh0ZXJuYWwiLCJyZWdpc3RyeSIsIm9uUHJvY2Vzc1NoZWV0IiwicHJvY2Vzc2VkVmFsdWUiLCJ1c2UiLCJuZXdQbHVnaW4iLCJyZWR1Y2UiLCJwbHVnaW4iLCJzaGVldHMiLCJTaGVldHNSZWdpc3RyeSIsInJlc2V0IiwiX3RlbXAiLCJfcmVmIiwiZ2xvYmFsVGhpcyIsIk1hdGgiLCJzZWxmIiwiRnVuY3Rpb24iLCJjcmVhdGVHZW5lcmF0ZUlkIiwicnVsZUNvdW50ZXIiLCJqc3NJZCIsInByZWZpeCIsImNsYXNzTmFtZVByZWZpeCIsIlN0cmluZyIsIm1pbmlmeSIsIm1lbW9pemUiLCJmbiIsImdldFByb3BlcnR5VmFsdWUiLCJjc3NSdWxlIiwiYXR0cmlidXRlU3R5bGVNYXAiLCJlcnIiLCJkZWxldGUiLCJnZXRIZWFkIiwicXVlcnlTZWxlY3RvciIsImZpbmRQcmV2Tm9kZSIsImluc2VydGlvblBvaW50IiwiZmluZEhpZ2hlclNoZWV0IiwiZWxlbWVudCIsInBhcmVudE5vZGUiLCJub2RlIiwiZmluZEhpZ2hlc3RTaGVldCIsIm5leHRTaWJsaW5nIiwiY29tbWVudCIsInRleHQiLCJoZWFkIiwiY2hpbGROb2RlcyIsIm5vZGVWYWx1ZSIsInRyaW0iLCJmaW5kQ29tbWVudE5vZGUiLCJnZXROb25jZSIsImdldEF0dHJpYnV0ZSIsIl9pbnNlcnRSdWxlIiwiY29udGFpbmVyIiwibWF4SW5kZXgiLCJjc3NSdWxlcyIsImFwcGVuZFJ1bGUiLCJEb21SZW5kZXJlciIsImhhc0luc2VydGVkUnVsZXMiLCJtZWRpYSIsIm1ldGEiLCJlbCIsImNyZWF0ZUVsZW1lbnQiLCJ0ZXh0Q29udGVudCIsImNyZWF0ZVN0eWxlIiwic2V0QXR0cmlidXRlIiwibm9uY2UiLCJuZXh0Tm9kZSIsImluc2VydEJlZm9yZSIsImluc2VydGlvblBvaW50RWxlbWVudCIsImFwcGVuZENoaWxkIiwiaW5zZXJ0U3R5bGUiLCJCb29sZWFuIiwicmVtb3ZlQ2hpbGQiLCJpbnNlcnRSdWxlcyIsIm5hdGl2ZVBhcmVudCIsImxhdGVzdE5hdGl2ZVBhcmVudCIsInBhcmVudFN0eWxlU2hlZXQiLCJydWxlU3RyIiwibmF0aXZlUnVsZSIsImdldFJ1bGVzIiwiaW5zdGFuY2VDb3VudGVyIiwiSnNzIiwidmVyc2lvbiIsInNldHVwIiwiY3JlYXRlU3R5bGVTaGVldCIsInJlbW92ZVN0eWxlU2hlZXQiLCJoYXNDU1NUT01TdXBwb3J0IiwibWVyZ2VDbGFzc2VzIiwiYmFzZUNsYXNzZXMiLCJuZXdDbGFzc2VzIiwiQ29tcG9uZW50IiwibmV4dENsYXNzZXMiLCJrZXlzIiwiY2FjaGUiLCJrZXkxIiwia2V5MiIsInN1YkNhY2hlIiwiTWFwIiwiY3JlYXRlQ29udGV4dCIsInVzZVRoZW1lIiwidXNlQ29udGV4dCIsImZvciIsIm5vdyIsIkRhdGUiLCJmblZhbHVlc05zIiwiZm5SdWxlTnMiLCJmblZhbHVlcyIsImZuUnVsZSIsIkdsb2JhbENvbnRhaW5lclJ1bGUiLCJHbG9iYWxQcmVmaXhlZFJ1bGUiLCJzdWJzdHIiLCJzZXBhcmF0b3JSZWdFeHAiLCJhZGRTY29wZSIsInNjb3BlIiwicGFydHMiLCJzcGxpdCIsImhhbmRsZU5lc3RlZEdsb2JhbENvbnRhaW5lclJ1bGUiLCJoYW5kbGVQcmVmaXhlZEdsb2JhbFJ1bGUiLCJwYXJlbnRSZWdFeHAiLCJnZXRSZXBsYWNlUmVmIiwicmVwbGFjZVBhcmVudFJlZnMiLCJuZXN0ZWRQcm9wIiwicGFyZW50UHJvcCIsInBhcmVudFNlbGVjdG9ycyIsIm5lc3RlZFNlbGVjdG9ycyIsImoiLCJuZXN0ZWQiLCJnZXRPcHRpb25zIiwicHJldk9wdGlvbnMiLCJuZXN0aW5nTGV2ZWwiLCJyZXBsYWNlUmVmIiwiaXNOZXN0ZWQiLCJpc05lc3RlZENvbmRpdGlvbmFsIiwidXBwZXJjYXNlUGF0dGVybiIsIm1zUGF0dGVybiIsInRvSHlwaGVuTG93ZXIiLCJ0b0xvd2VyQ2FzZSIsImhOYW1lIiwiY29udmVydENhc2UiLCJjb252ZXJ0ZWQiLCJoeXBoZW5hdGVkUHJvcCIsInB4IiwibXMiLCJwZXJjZW50IiwiYWRkQ2FtZWxDYXNlZFZlcnNpb24iLCJyZWdFeHAiLCJ0b1VwcGVyQ2FzZSIsIm5ld09iaiIsInVuaXRzIiwiYm9yZGVyIiwibWFyZ2luIiwicGFkZGluZyIsImhlaWdodCIsIndpZHRoIiwiYm90dG9tIiwibGVmdCIsInRvcCIsInJpZ2h0IiwibW90aW9uIiwib3V0bGluZSIsInBlcnNwZWN0aXZlIiwic2l6ZSIsImdyaWQiLCJpdGVyYXRlIiwiaW5uZXJQcm9wIiwiX2lubmVyUHJvcCIsInVuaXQiLCJjYW1lbENhc2VkT3B0aW9ucyIsImpzIiwidmVuZG9yIiwiYnJvd3NlciIsImlzVG91Y2giLCJkb2N1bWVudEVsZW1lbnQiLCJqc0Nzc01hcCIsIk1veiIsIk8iLCJXZWJraXQiLCJhcHBlYXJlbmNlIiwibm9QcmVmaWxsIiwic3VwcG9ydGVkUHJvcGVydHkiLCJjb2xvckFkanVzdCIsInRvVXBwZXIiLCJjYW1lbGl6ZSIsInBhc2NhbGl6ZSIsIm1hc2siLCJ0ZXh0T3JpZW50YXRpb24iLCJ0cmFuc2Zvcm0iLCJ0cmFuc2l0aW9uIiwid3JpdGluZ01vZGUiLCJ1c2VyU2VsZWN0IiwiYnJlYWtQcm9wc09sZCIsImlubGluZUxvZ2ljYWxPbGQiLCJuZXdQcm9wIiwidW5wcmVmaXhlZCIsInByZWZpeGVkIiwicGFzY2FsaXplZCIsInNjcm9sbFNuYXAiLCJzdWJzdHJpbmciLCJvdmVyc2Nyb2xsQmVoYXZpb3IiLCJwcm9wTWFwIiwib3JkZXIiLCJmbGV4MjAxMiIsInByb3BNYXAkMSIsImZsZXgiLCJwcm9wS2V5cyIsInByZWZpeENzcyIsIm11bHRpcGxlIiwicHJvcGVydHlEZXRlY3RvcnMiLCJmaWx0ZXIiLCJhIiwiY29tcHV0ZWQiLCJnZXRDb21wdXRlZFN0eWxlIiwia2V5JDEiLCJpc05hTiIsImVsJDEiLCJjYWNoZSQxIiwidHJhbnNpdGlvblByb3BlcnRpZXMiLCJ0cmFuc1Byb3BzUmVnRXhwIiwicHJlZml4VHJhbnNpdGlvbkNhbGxiYWNrIiwicDEiLCJwMiIsInByZWZpeGVkVmFsdWUiLCJzdXBwb3J0ZWRWYWx1ZSIsInBhcnNlSW50IiwiY2FjaGVLZXkiLCJwcmVmaXhTdHlsZSIsImNoYW5nZVByb3AiLCJzdXBwb3J0ZWRQcm9wIiwiY2hhbmdlVmFsdWUiLCJzdXBwb3J0ZWRWYWx1ZSQxIiwiYXRSdWxlIiwic29ydCIsInByb3AwIiwicHJvcDEiLCJqc3NQcmVzZXQiLCJkZWZhdWx0T3B0aW9ucyIsImRpc2FibGVHZW5lcmF0aW9uIiwiZ2VuZXJhdGVDbGFzc05hbWUiLCJfb3B0aW9ucyRkaXNhYmxlR2xvYmEiLCJkaXNhYmxlR2xvYmFsIiwiX29wdGlvbnMkcHJvZHVjdGlvblByIiwicHJvZHVjdGlvblByZWZpeCIsIl9vcHRpb25zJHNlZWQiLCJzZWVkIiwic2VlZFByZWZpeCIsImdldE5leHRDb3VudGVySWQiLCJzdHlsZVNoZWV0IiwidGhlbWUiLCJjcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSIsInNoZWV0c0NhY2hlIiwic2hlZXRzTWFuYWdlciIsInNoZWV0c1JlZ2lzdHJ5IiwiU3R5bGVzQ29udGV4dCIsImluZGV4Q291bnRlciIsImluY3JlbWVudCIsImlzUGxhaW5PYmplY3QiLCJpdGVtIiwiZGVlcG1lcmdlIiwiY2xvbmUiLCJvdXRwdXQiLCJnZXRTdHlsZXNDcmVhdG9yIiwic3R5bGVzT3JDcmVhdG9yIiwidGhlbWluZ0VuYWJsZWQiLCJvdmVycmlkZXMiLCJzdHlsZXNXaXRoT3ZlcnJpZGVzIiwiZ2V0Q2xhc3NlcyIsInN0YXRlIiwic3R5bGVzT3B0aW9ucyIsImNhY2hlQ2xhc3NlcyIsImxhc3RQcm9wIiwibGFzdEpTUyIsImdlbmVyYXRlIiwiX3JlZjIiLCJzdHlsZXNDcmVhdG9yIiwic2hlZXRNYW5hZ2VyIiwicmVmcyIsInN0YXRpY1NoZWV0IiwiZHluYW1pY1N0eWxlcyIsImZsaXAiLCJkaXJlY3Rpb24iLCJzZXJ2ZXJHZW5lcmF0ZUNsYXNzTmFtZSIsImdldER5bmFtaWNTdHlsZXMiLCJ0byIsImV4dHJhY3RlZCIsImR5bmFtaWNTaGVldCIsIl9yZWYzIiwiX3JlZjQiLCJ1c2VTeW5jaHJvbm91c0VmZmVjdCIsImZ1bmMiLCJ2YWx1ZXMiLCJ1c2VSZWYiLCJjdXJyZW50S2V5IiwidXNlTWVtbyIsImN1cnJlbnQiLCJ1c2VFZmZlY3QiLCJtYWtlU3R5bGVzIiwiY2xhc3NOYW1lUHJlZml4T3B0aW9uIiwiX29wdGlvbnMkZGVmYXVsdFRoZW1lIiwiZGVmYXVsdFRoZW1lIiwic3R5bGVzT3B0aW9uczIiLCJ1c2VTdHlsZXMiLCJpbnN0YW5jZSIsInNob3VsZFVwZGF0ZSIsImdldFRoZW1lUHJvcHMiLCJwYXJhbXMiLCJwcm9wTmFtZSIsImRlZmF1bHRQcm9wcyIsIl9vcHRpb25zJHdpdGhUaGVtZSIsIndpdGhUaGVtZSIsImRpc3BsYXlOYW1lIiwiV2l0aFN0eWxlcyIsImZvcndhcmRSZWYiLCJyZWYiLCJpbm5lclJlZiIsIm90aGVyIiwibW9yZSIsIl9kZWZpbmVQcm9wZXJ0eSIsImNyZWF0ZUJyZWFrcG9pbnRzIiwiYnJlYWtwb2ludHMiLCJfYnJlYWtwb2ludHMkdmFsdWVzIiwieHMiLCJzbSIsIm1kIiwibGciLCJ4bCIsIl9icmVha3BvaW50cyR1bml0IiwiX2JyZWFrcG9pbnRzJHN0ZXAiLCJzdGVwIiwidXAiLCJiZXR3ZWVuIiwic3RhcnQiLCJlbmQiLCJlbmRJbmRleCIsImRvd24iLCJ1cHBlcmJvdW5kIiwib25seSIsImNyZWF0ZU1peGlucyIsInNwYWNpbmciLCJtaXhpbnMiLCJfdG9vbGJhciIsImd1dHRlcnMiLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsInRvb2xiYXIiLCJtaW5IZWlnaHQiLCJibGFjayIsIndoaXRlIiwiNTAiLCIxMDAiLCIyMDAiLCIzMDAiLCI0MDAiLCI1MDAiLCI2MDAiLCI3MDAiLCI4MDAiLCI5MDAiLCJBMTAwIiwiQTIwMCIsIkE0MDAiLCJBNzAwIiwibGlnaHQiLCJwcmltYXJ5Iiwic2Vjb25kYXJ5IiwiZGlzYWJsZWQiLCJoaW50IiwiZGl2aWRlciIsImJhY2tncm91bmQiLCJwYXBlciIsImRlZmF1bHQiLCJhY3Rpb24iLCJhY3RpdmUiLCJob3ZlciIsImhvdmVyT3BhY2l0eSIsInNlbGVjdGVkIiwic2VsZWN0ZWRPcGFjaXR5IiwiZGlzYWJsZWRCYWNrZ3JvdW5kIiwiZGlzYWJsZWRPcGFjaXR5IiwiZm9jdXMiLCJmb2N1c09wYWNpdHkiLCJhY3RpdmF0ZWRPcGFjaXR5IiwiZGFyayIsImljb24iLCJhZGRMaWdodE9yRGFyayIsImludGVudCIsInNoYWRlIiwidG9uYWxPZmZzZXQiLCJ0b25hbE9mZnNldExpZ2h0IiwidG9uYWxPZmZzZXREYXJrIiwibWFpbiIsImNyZWF0ZVBhbGV0dGUiLCJwYWxldHRlIiwiX3BhbGV0dGUkcHJpbWFyeSIsIl9wYWxldHRlJHNlY29uZGFyeSIsIl9wYWxldHRlJGVycm9yIiwiZXJyb3IiLCJfcGFsZXR0ZSR3YXJuaW5nIiwid2FybmluZyIsIl9wYWxldHRlJGluZm8iLCJpbmZvIiwiX3BhbGV0dGUkc3VjY2VzcyIsInN1Y2Nlc3MiLCJfcGFsZXR0ZSR0eXBlIiwiX3BhbGV0dGUkY29udHJhc3RUaHJlIiwiY29udHJhc3RUaHJlc2hvbGQiLCJfcGFsZXR0ZSR0b25hbE9mZnNldCIsImdldENvbnRyYXN0VGV4dCIsImF1Z21lbnRDb2xvciIsImNvbG9yIiwibWFpblNoYWRlIiwibGlnaHRTaGFkZSIsImRhcmtTaGFkZSIsIkVycm9yIiwiSlNPTiIsInN0cmluZ2lmeSIsImNvbnRyYXN0VGV4dCIsInR5cGVzIiwiY29tbW9uIiwiZ3JleSIsInJvdW5kIiwiY2FzZUFsbENhcHMiLCJ0ZXh0VHJhbnNmb3JtIiwiY3JlYXRlVHlwb2dyYXBoeSIsInR5cG9ncmFwaHkiLCJfcmVmJGZvbnRGYW1pbHkiLCJmb250RmFtaWx5IiwiX3JlZiRmb250U2l6ZSIsImZvbnRTaXplIiwiX3JlZiRmb250V2VpZ2h0TGlnaHQiLCJmb250V2VpZ2h0TGlnaHQiLCJfcmVmJGZvbnRXZWlnaHRSZWd1bGEiLCJmb250V2VpZ2h0UmVndWxhciIsIl9yZWYkZm9udFdlaWdodE1lZGl1bSIsImZvbnRXZWlnaHRNZWRpdW0iLCJfcmVmJGZvbnRXZWlnaHRCb2xkIiwiZm9udFdlaWdodEJvbGQiLCJfcmVmJGh0bWxGb250U2l6ZSIsImh0bWxGb250U2l6ZSIsImFsbFZhcmlhbnRzIiwicHhUb1JlbTIiLCJweFRvUmVtIiwiY29lZiIsImJ1aWxkVmFyaWFudCIsImZvbnRXZWlnaHQiLCJsaW5lSGVpZ2h0IiwibGV0dGVyU3BhY2luZyIsImNhc2luZyIsInZhcmlhbnRzIiwiaDEiLCJoMiIsImgzIiwiaDQiLCJoNSIsImg2Iiwic3VidGl0bGUxIiwic3VidGl0bGUyIiwiYm9keTEiLCJib2R5MiIsImJ1dHRvbiIsImNhcHRpb24iLCJvdmVybGluZSIsImNyZWF0ZVNoYWRvdyIsImJvcmRlclJhZGl1cyIsIl9zbGljZWRUb0FycmF5IiwiYXJyIiwiX2FyciIsIl9uIiwiX2QiLCJfZSIsIl9zIiwiX2kiLCJuZXh0IiwiZG9uZSIsInVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiVHlwZUVycm9yIiwiYWNjIiwiZGVmYXVsdEJyZWFrcG9pbnRzIiwicHJvcGVydGllcyIsImRpcmVjdGlvbnMiLCJiIiwiYWxpYXNlcyIsIm1hcmdpblgiLCJtYXJnaW5ZIiwicGFkZGluZ1giLCJwYWRkaW5nWSIsImdldENzc1Byb3BlcnRpZXMiLCJhcmciLCJfcHJvcCRzcGxpdDIiLCJkaXIiLCJzcGFjaW5nS2V5cyIsImNyZWF0ZVVuYXJ5U3BhY2luZyIsInRoZW1lU3BhY2luZyIsImFicyIsImdldFN0eWxlRnJvbVByb3BWYWx1ZSIsImNzc1Byb3BlcnRpZXMiLCJ0cmFuc2Zvcm1lciIsInByb3BWYWx1ZSIsImNzc1Byb3BlcnR5IiwidHJhbnNmb3JtZWQiLCJnZXRWYWx1ZSIsInN0eWxlRnJvbVByb3BWYWx1ZSIsInRoZW1lQnJlYWtwb2ludHMiLCJfdGhlbWVCcmVha3BvaW50cyIsImJyZWFrcG9pbnQiLCJoYW5kbGVCcmVha3BvaW50cyIsInByb3BUeXBlcyIsImZpbHRlclByb3BzIiwiY3JlYXRlU3BhY2luZyIsInNwYWNpbmdJbnB1dCIsIm11aSIsImFyZ3VtZW50IiwiZWFzaW5nIiwiZWFzZUluT3V0IiwiZWFzZU91dCIsImVhc2VJbiIsInNoYXJwIiwiZHVyYXRpb24iLCJzaG9ydGVzdCIsInNob3J0ZXIiLCJzaG9ydCIsInN0YW5kYXJkIiwiY29tcGxleCIsImVudGVyaW5nU2NyZWVuIiwibGVhdmluZ1NjcmVlbiIsImZvcm1hdE1zIiwibWlsbGlzZWNvbmRzIiwiX29wdGlvbnMkZHVyYXRpb24iLCJkdXJhdGlvbk9wdGlvbiIsIl9vcHRpb25zJGVhc2luZyIsImVhc2luZ09wdGlvbiIsIl9vcHRpb25zJGRlbGF5IiwiZGVsYXkiLCJhbmltYXRlZFByb3AiLCJnZXRBdXRvSGVpZ2h0RHVyYXRpb24iLCJjb25zdGFudCIsInBvdyIsIm1vYmlsZVN0ZXBwZXIiLCJzcGVlZERpYWwiLCJhcHBCYXIiLCJkcmF3ZXIiLCJtb2RhbCIsInNuYWNrYmFyIiwidG9vbHRpcCIsIl9vcHRpb25zJGJyZWFrcG9pbnRzIiwiYnJlYWtwb2ludHNJbnB1dCIsIl9vcHRpb25zJG1peGlucyIsIm1peGluc0lucHV0IiwiX29wdGlvbnMkcGFsZXR0ZSIsInBhbGV0dGVJbnB1dCIsIl9vcHRpb25zJHR5cG9ncmFwaHkiLCJ0eXBvZ3JhcGh5SW5wdXQiLCJtdWlUaGVtZSIsInNoYWRvd3MiLCJzaGFwZSIsInRyYW5zaXRpb25zIiwiekluZGV4IiwiaXNVbmRlZmluZWQiLCJpc09iamVjdCIsImlzRnVuY3Rpb24iLCJpc0FycmF5QnVmZmVyIiwiaXNCdWZmZXIiLCJpc0Zvcm1EYXRhIiwiRm9ybURhdGEiLCJpc0FycmF5QnVmZmVyVmlldyIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwiYnVmZmVyIiwiaXNTdHJpbmciLCJpc051bWJlciIsImlzRGF0ZSIsImlzRmlsZSIsImlzQmxvYiIsImlzU3RyZWFtIiwicGlwZSIsImlzVVJMU2VhcmNoUGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwiaXNTdGFuZGFyZEJyb3dzZXJFbnYiLCJuYXZpZ2F0b3IiLCJwcm9kdWN0IiwibWVyZ2UiLCJhc3NpZ25WYWx1ZSIsImRlZXBNZXJnZSIsImV4dGVuZCIsInRoaXNBcmciLCJfZ2V0UHJvdG90eXBlT2YiLCJzZXRQcm90b3R5cGVPZiIsImdldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiY2FwaXRhbGl6ZSIsInN0cmluZyIsImNoYXJBdCIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImFzc2VydFRoaXNJbml0aWFsaXplZCIsImNsYW1wIiwibWluIiwibWF4IiwiZGVjb21wb3NlQ29sb3IiLCJyZSIsIlJlZ0V4cCIsImNvbG9ycyIsImhleFRvUmdiIiwibWFya2VyIiwicGFyc2VGbG9hdCIsInJlY29tcG9zZUNvbG9yIiwiZ2V0Q29udHJhc3RSYXRpbyIsImZvcmVncm91bmQiLCJsdW1BIiwiZ2V0THVtaW5hbmNlIiwibHVtQiIsInJnYiIsImgiLCJmIiwiaHNsVG9SZ2IiLCJOdW1iZXIiLCJ0b0ZpeGVkIiwiZmFkZSIsImRhcmtlbiIsImNvZWZmaWNpZW50IiwibGlnaHRlbiIsImNoZWNrRENFIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiY29uc29sZSIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwic291cmNlS2V5cyIsIl90b0NvbnN1bWFibGVBcnJheSIsImFycmF5TGlrZVRvQXJyYXkiLCJpdGVyIiwiZnJvbSIsIlJlZmVyZW5jZUVycm9yIiwicmVhY3RJcyIsIlJFQUNUX1NUQVRJQ1MiLCJjaGlsZENvbnRleHRUeXBlcyIsImNvbnRleHRUeXBlIiwiY29udGV4dFR5cGVzIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwiS05PV05fU1RBVElDUyIsImNhbGxlciIsImNhbGxlZSIsImFyaXR5IiwiTUVNT19TVEFUSUNTIiwiY29tcGFyZSIsIlRZUEVfU1RBVElDUyIsImdldFN0YXRpY3MiLCJjb21wb25lbnQiLCJpc01lbW8iLCJGb3J3YXJkUmVmIiwicmVuZGVyIiwiTWVtbyIsImdldE93blByb3BlcnR5TmFtZXMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJvYmplY3RQcm90b3R5cGUiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsInRhcmdldENvbXBvbmVudCIsInNvdXJjZUNvbXBvbmVudCIsImJsYWNrbGlzdCIsImluaGVyaXRlZENvbXBvbmVudCIsInRhcmdldFN0YXRpY3MiLCJzb3VyY2VTdGF0aWNzIiwiZSIsIl9pbmhlcml0c0xvb3NlIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsIl9hcnJheUxpa2VUb0FycmF5IiwibGVuIiwiYXJyMiIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIm1pbkxlbiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJwYXRoIiwiX3JlYWN0IiwibWVtbyIsIl9TdmdJY29uIiwiX2V4dGVuZHMyIiwibXVpTmFtZSIsInN0cmluZ3MiLCJmcmVlemUiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiaW50ZXJsZWF2ZSIsImludGVycG9sYXRpb25zIiwiRU1QVFlfQVJSQVkiLCJFTVBUWV9PQkpFQ1QiLCJnZXRDb21wb25lbnROYW1lIiwiaXNTdHlsZWRDb21wb25lbnQiLCJzdHlsZWRDb21wb25lbnRJZCIsIlNDX0FUVFIiLCJlbnYiLCJSRUFDVF9BUFBfU0NfQVRUUiIsIklTX0JST1dTRVIiLCJESVNBQkxFX1NQRUVEWSIsIlNDX0RJU0FCTEVfU1BFRURZIiwiUkVBQ1RfQVBQX1NDX0RJU0FCTEVfU1BFRURZIiwidGhyb3dTdHlsZWRDb21wb25lbnRzRXJyb3IiLCJjb2RlIiwibWFrZVN0eWxlVGFnIiwicHJldlN0eWxlIiwiY2hpbGQiLCJoYXNBdHRyaWJ1dGUiLCJmaW5kTGFzdFN0eWxlVGFnIiwiQ1NTT01UYWciLCJjcmVhdGVUZXh0Tm9kZSIsInRhZyIsInN0eWxlU2hlZXRzIiwib3duZXJOb2RlIiwiZ2V0U2hlZXQiLCJfZXJyb3IiLCJjc3NUZXh0IiwiVGV4dFRhZyIsIm5vZGVzIiwicmVmTm9kZSIsIlZpcnR1YWxUYWciLCJfdGFyZ2V0IiwiX3Byb3RvMyIsIkRlZmF1bHRHcm91cGVkVGFnIiwiZ3JvdXBTaXplcyIsIlVpbnQzMkFycmF5IiwiaW5kZXhPZkdyb3VwIiwiZ3JvdXAiLCJvbGRCdWZmZXIiLCJvbGRTaXplIiwibmV3U2l6ZSIsInJ1bGVJbmRleCIsImNsZWFyR3JvdXAiLCJzdGFydEluZGV4IiwiZ2V0R3JvdXAiLCJncm91cElEUmVnaXN0ZXIiLCJyZXZlcnNlUmVnaXN0ZXIiLCJuZXh0RnJlZUdyb3VwIiwiZ2V0R3JvdXBGb3JJZCIsImhhcyIsImdldElkRm9yR3JvdXAiLCJzZXRHcm91cEZvcklkIiwiU0VMRUNUT1IiLCJNQVJLRVJfUkUiLCJyZWh5ZHJhdGVOYW1lc0Zyb21Db250ZW50IiwiY29udGVudCIsIm5hbWVzIiwicmVnaXN0ZXJOYW1lIiwicmVoeWRyYXRlU2hlZXRGcm9tVGFnIiwiaW5uZXJIVE1MIiwicGFydCIsImdldFRhZyIsIlNIT1VMRF9SRUhZRFJBVEUiLCJpc1NlcnZlciIsInVzZUNTU09NSW5qZWN0aW9uIiwiZ2xvYmFsU3R5bGVzIiwiZ3MiLCJxdWVyeVNlbGVjdG9yQWxsIiwicmVoeWRyYXRlU2hlZXQiLCJyZWdpc3RlcklkIiwicmVjb25zdHJ1Y3RXaXRoT3B0aW9ucyIsImFsbG9jYXRlR1NJbnN0YW5jZSIsImhhc05hbWVGb3JJZCIsImdyb3VwTmFtZXMiLCJTZXQiLCJjbGVhck5hbWVzIiwiY2xlYXIiLCJjbGVhclJ1bGVzIiwiY2xlYXJUYWciLCJvdXRwdXRTaGVldCIsInBoYXNoIiwiY2hhckNvZGVBdCIsImhhc2giLCJDT01NRU5UX1JFR0VYIiwiY3JlYXRlU3R5bGlzSW5zdGFuY2UiLCJfY29tcG9uZW50SWQiLCJfc2VsZWN0b3IiLCJfc2VsZWN0b3JSZWdleHAiLCJfcmVmJG9wdGlvbnMiLCJfcmVmJHBsdWdpbnMiLCJzdHlsaXMiLCJwYXJzaW5nUnVsZXMiLCJwYXJzZVJ1bGVzUGx1Z2luIiwidG9TaGVldCIsImJsb2NrIiwiY29udGV4dCIsInNlbGVjdG9ycyIsInBhcmVudHMiLCJsaW5lIiwiY29sdW1uIiwiZGVwdGgiLCJkZWxpbWl0ZXIiLCJpbnNlcnRSdWxlUGx1Z2luIiwic2VsZlJlZmVyZW5jZVJlcGxhY2VyIiwib2Zmc2V0Iiwic3RyaW5naWZ5UnVsZXMiLCJjb21wb25lbnRJZCIsImZsYXRDU1MiLCJjc3NTdHIiLCJfIiwibGFzdEluZGV4T2YiLCJwYXJzZWRSdWxlcyIsIlN0eWxlU2hlZXRDb250ZXh0IiwiU3R5bGlzQ29udGV4dCIsIkNvbnN1bWVyIiwibWFzdGVyU2hlZXQiLCJtYXN0ZXJTdHlsaXMiLCJ1c2VTdHlsZVNoZWV0IiwidXNlU3R5bGlzIiwiS2V5ZnJhbWVzIiwic3RyaW5naWZ5QXJncyIsImluamVjdCIsImdldE5hbWUiLCJoeXBoZW5hdGVTdHlsZU5hbWUiLCJpc0ZhbHNpc2giLCJjaHVuayIsIm9ialRvQ3NzQXJyYXkiLCJwcmV2S2V5IiwiZmxhdHRlbiIsImV4ZWN1dGlvbkNvbnRleHQiLCJydWxlU2V0IiwiaXNSZWFjdENvbXBvbmVudCIsImlzVmFsaWRLZXkiLCJtaXhpbiIsIm1peGluRGVlcCIsInJlc3QiLCJfcmVzdCIsIkFEX1JFUExBQ0VSX1IiLCJnZXRBbHBoYWJldGljQ2hhciIsImZyb21DaGFyQ29kZSIsImdlbmVyYXRlQWxwaGFiZXRpY05hbWUiLCJpc1N0YXRpY1J1bGVzIiwiQ29tcG9uZW50U3R5bGUiLCJzdGF0aWNSdWxlc0lkIiwiaXNTdGF0aWMiLCJiYXNlSGFzaCIsImdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzIiwiY3NzU3RhdGljIiwiY3NzU3RhdGljRm9ybWF0dGVkIiwiZHluYW1pY0hhc2giLCJwYXJ0UnVsZSIsInBhcnRDaHVuayIsInBhcnRTdHJpbmciLCJfbmFtZSIsImNzc0Zvcm1hdHRlZCIsImRldGVybWluZVRoZW1lIiwicHJvdmlkZWRUaGVtZSIsImRhc2hlc0F0RW5kcyIsImlzVGFnIiwiZ2VuZXJhdGVDb21wb25lbnRJZCIsIlRoZW1lQ29udGV4dCIsImlkZW50aWZpZXJzIiwidXNlU3R5bGVkQ29tcG9uZW50SW1wbCIsImZvcndhcmRlZENvbXBvbmVudCIsImZvcndhcmRlZFJlZiIsImNvbXBvbmVudEF0dHJzIiwiYXR0cnMiLCJjb21wb25lbnRTdHlsZSIsImZvbGRlZENvbXBvbmVudElkcyIsInNob3VsZEZvcndhcmRQcm9wIiwiX3VzZVJlc29sdmVkQXR0cnMiLCJyZXNvbHZlZEF0dHJzIiwiYXR0ckRlZiIsInJlc29sdmVkQXR0ckRlZiIsInVzZVJlc29sdmVkQXR0cnMiLCJnZW5lcmF0ZWRDbGFzc05hbWUiLCJoYXNBdHRycyIsIndhcm5Ub29NYW55Q2xhc3NlcyIsImNsYXNzTmFtZSIsInVzZUluamVjdGVkU3R5bGUiLCJyZWZUb0ZvcndhcmQiLCJlbGVtZW50VG9CZUNyZWF0ZWQiLCIkYXMiLCJhcyIsImlzVGFyZ2V0VGFnIiwiY29tcHV0ZWRQcm9wcyIsInByb3BGaWx0ZXJGbiIsInByb3BzRm9yRWxlbWVudCIsImNyZWF0ZVN0eWxlZENvbXBvbmVudCIsImlzVGFyZ2V0U3R5bGVkQ29tcCIsImlzQ29tcG9zaXRlQ29tcG9uZW50IiwiX29wdGlvbnMkZGlzcGxheU5hbWUiLCJnZW5lcmF0ZURpc3BsYXlOYW1lIiwiX29wdGlvbnMkY29tcG9uZW50SWQiLCJwYXJlbnRDb21wb25lbnRJZCIsIl9vcHRpb25zJGF0dHJzIiwiZmluYWxBdHRycyIsImZpbHRlckZuIiwiV3JhcHBlZFN0eWxlZENvbXBvbmVudCIsIndpdGhDb21wb25lbnQiLCJwcmV2aW91c0NvbXBvbmVudElkIiwib3B0aW9uc1RvQ29weSIsIm5ld0NvbXBvbmVudElkIiwiX2ZvbGRlZERlZmF1bHRQcm9wcyIsInN0eWxlZCIsImNvbnN0cnVjdFdpdGhPcHRpb25zIiwiY29tcG9uZW50Q29uc3RydWN0b3IiLCJ0ZW1wbGF0ZUZ1bmN0aW9uIiwid2l0aENvbmZpZyIsImNvbmZpZyIsImRvbUVsZW1lbnQiLCJyZWFjdFByb3BzUmVnZXgiLCJwcm9wSXNFbnVtZXJhYmxlIiwidG9PYmplY3QiLCJ0ZXN0MSIsInRlc3QyIiwidGVzdDMiLCJsZXR0ZXIiLCJzaG91bGRVc2VOYXRpdmUiLCJzeW1ib2xzIiwidXRpbHMiLCJlbmNvZGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJ1cmwiLCJwYXJhbXNTZXJpYWxpemVyIiwic2VyaWFsaXplZFBhcmFtcyIsInYiLCJ0b0lTT1N0cmluZyIsImhhc2htYXJrSW5kZXgiLCJfX0NBTkNFTF9fIiwibm9ybWFsaXplSGVhZGVyTmFtZSIsIkRFRkFVTFRfQ09OVEVOVF9UWVBFIiwic2V0Q29udGVudFR5cGVJZlVuc2V0IiwiaGVhZGVycyIsImFkYXB0ZXIiLCJkZWZhdWx0cyIsIlhNTEh0dHBSZXF1ZXN0IiwidHJhbnNmb3JtUmVxdWVzdCIsInRyYW5zZm9ybVJlc3BvbnNlIiwicGFyc2UiLCJ0aW1lb3V0IiwieHNyZkNvb2tpZU5hbWUiLCJ4c3JmSGVhZGVyTmFtZSIsIm1heENvbnRlbnRMZW5ndGgiLCJ2YWxpZGF0ZVN0YXR1cyIsInN0YXR1cyIsIm1ldGhvZCIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiY3VycmVudFF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5RdWV1ZSIsInJ1biIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJhcnJheSIsIm5vb3AiLCJuZXh0VGljayIsInRpdGxlIiwiYXJndiIsInZlcnNpb25zIiwib24iLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwidW1hc2siLCJzZXR0bGUiLCJidWlsZFVSTCIsImJ1aWxkRnVsbFBhdGgiLCJwYXJzZUhlYWRlcnMiLCJpc1VSTFNhbWVPcmlnaW4iLCJjcmVhdGVFcnJvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVxdWVzdERhdGEiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3QiLCJhdXRoIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsIkF1dGhvcml6YXRpb24iLCJidG9hIiwiZnVsbFBhdGgiLCJiYXNlVVJMIiwib3BlbiIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJyZXNwb25zZVVSTCIsInJlc3BvbnNlSGVhZGVycyIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInJlc3BvbnNlIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0Iiwic3RhdHVzVGV4dCIsIm9uYWJvcnQiLCJvbmVycm9yIiwib250aW1lb3V0IiwidGltZW91dEVycm9yTWVzc2FnZSIsImNvb2tpZXMiLCJ4c3JmVmFsdWUiLCJ3aXRoQ3JlZGVudGlhbHMiLCJyZWFkIiwic2V0UmVxdWVzdEhlYWRlciIsIm9uRG93bmxvYWRQcm9ncmVzcyIsImFkZEV2ZW50TGlzdGVuZXIiLCJvblVwbG9hZFByb2dyZXNzIiwidXBsb2FkIiwiY2FuY2VsVG9rZW4iLCJwcm9taXNlIiwidGhlbiIsImNhbmNlbCIsImFib3J0Iiwic2VuZCIsImVuaGFuY2VFcnJvciIsIm1lc3NhZ2UiLCJjb25maWcxIiwiY29uZmlnMiIsInZhbHVlRnJvbUNvbmZpZzJLZXlzIiwibWVyZ2VEZWVwUHJvcGVydGllc0tleXMiLCJkZWZhdWx0VG9Db25maWcyS2V5cyIsImF4aW9zS2V5cyIsIm90aGVyS2V5cyIsIkNhbmNlbCIsIl9yZWFjdDIiLCJfcHJvcFR5cGVzMiIsIl9vbWl0MiIsIl9zaGFsbG93RXF1YWwyIiwibWFpblN0eWxlIiwicG9zaXRpb24iLCJiYWNrZ3JvdW5kQ29sb3IiLCJHb29nbGVNYXBNYXJrZXJzIiwiX0NvbXBvbmVudCIsIl9jbGFzc0NhbGxDaGVjayIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiX2dldFN0YXRlIiwiZGlzcGF0Y2hlciIsImdldENoaWxkcmVuIiwidXBkYXRlQ291bnRlciIsImdldFVwZGF0ZUNvdW50ZXIiLCJfb25DaGFuZ2VIYW5kbGVyIiwiZGltZW5zaW9uc0NhY2hlXyIsInByZXZDaGlsZENvdW50Iiwic2V0U3RhdGUiLCJfb25Nb3VzZUNoYW5nZUhhbmRsZXIiLCJfb25DaGlsZENsaWNrIiwib25DaGlsZENsaWNrIiwiaG92ZXJDaGlsZFByb3BzXyIsImhvdmVyS2V5IiwiaG92ZXJLZXlfIiwiY2hpbGRQcm9wcyIsIl9vbkNoaWxkTW91c2VEb3duIiwib25DaGlsZE1vdXNlRG93biIsIl9vbkNoaWxkTW91c2VFbnRlciIsIm9uQ2hpbGRNb3VzZUVudGVyIiwiX29uQ2hpbGRNb3VzZUxlYXZlIiwib25DaGlsZE1vdXNlTGVhdmUiLCJfb25Nb3VzZUFsbG93IiwiYWxsb3dNb3VzZV8iLCJfb25Nb3VzZUNoYW5nZUhhbmRsZXJSYWYiLCJtcCIsImdldE1vdXNlUG9zaXRpb24iLCJkaXN0YW5jZXMiLCJob3ZlckRpc3RhbmNlIiwiZ2V0SG92ZXJEaXN0YW5jZSIsIkNoaWxkcmVuIiwiY2hpbGRJbmRleCIsImxhdExuZyIsImxhdCIsImxuZyIsImNoaWxkS2V5IiwiZGlzdCIsImRpc3RhbmNlVG9Nb3VzZSIsIl9nZXREaW1lbnNpb25zIiwiX2luaGVyaXRzIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwibmV4dFByb3BzIiwibmV4dFN0YXRlIiwiZXhwZXJpbWVudGFsIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJfdGhpczIiLCJtYWluRWxlbWVudFN0eWxlIiwibWFya2VycyIsImNsb25lRWxlbWVudCIsIiRnZW9TZXJ2aWNlIiwiZ2VvU2VydmljZSIsIiRvbk1vdXNlQWxsb3ciLCIkcHJlcmVuZGVyIiwicHJlcmVuZGVyIiwicHQiLCJpbnNpZGVNYXBQYW5lcyIsImZyb21MYXRMbmdUb0RpdlBpeGVsIiwiZnJvbUxhdExuZ1RvQ2VudGVyUGl4ZWwiLCJzdHlsZVB0UG9zIiwic2VMYXRMbmciLCJzZUxhdCIsInNlTG5nIiwic2VQdCIsImNvbnRhaW5lclB0IiwiZnJvbUxhdExuZ1RvQ29udGFpbmVyUGl4ZWwiLCIkbWFya2VySG9sZGVyQ2xhc3NOYW1lIiwiJGhvdmVyIiwiJGdldERpbWVuc2lvbnMiLCIkZGltZW5zaW9uS2V5IiwiYW55IiwiYm9vbCIsImlzIiwib2JqQSIsIm9iakIiLCJrZXlzQSIsImtleXNCIiwiUG9pbnQiLCJfYWRkIiwic3ViIiwiX3N1YiIsIm11bHRCeVBvaW50IiwiX211bHRCeVBvaW50IiwiZGl2QnlQb2ludCIsIl9kaXZCeVBvaW50IiwibXVsdCIsIl9tdWx0IiwiZGl2IiwiX2RpdiIsInJvdGF0ZSIsIl9yb3RhdGUiLCJyb3RhdGVBcm91bmQiLCJfcm90YXRlQXJvdW5kIiwibWF0TXVsdCIsIl9tYXRNdWx0IiwiX3VuaXQiLCJwZXJwIiwiX3BlcnAiLCJfcm91bmQiLCJtYWciLCJzcXJ0IiwiZXF1YWxzIiwiZGlzdFNxciIsImR4IiwiZHkiLCJhbmdsZSIsImF0YW4yIiwiYW5nbGVUbyIsImFuZ2xlV2l0aCIsImFuZ2xlV2l0aFNlcCIsImNvcyIsInNpbiIsImNvbnZlcnQiLCJfd3JhcDIiLCJMYXRMbmciLCJ3cmFwIiwiZXZlbnROYW1lIiwiY2FwdHVyZSIsInBhc3NpdmVTdXBwb3J0ZWQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaGFzUGFzc2l2ZVN1cHBvcnQiLCJwYXNzaXZlIiwiX2dvb2dsZV9tYXAiLCJfZ29vZ2xlX21hcDIiLCJjb21wYXJlQ29udGV4dCIsInJldCIsImJIYXNPd25Qcm9wZXJ0eSIsImlkeCIsInZhbHVlQSIsInZhbHVlQiIsIlciLCJYIiwiaWEiLCJaIiwiRiIsIlAiLCJ3IiwiTCIsImphIiwia2EiLCJhYSIsIkciLCJiYSIsImxhIiwibWEiLCJSIiwibmEiLCJlYSIsIm9hIiwiSCIsInEiLCJnIiwiQSIsIlMiLCJCIiwiVSIsIkQiLCJ6IiwiTSIsIkMiLCJLIiwidSIsIkkiLCJKIiwiTiIsImNhIiwiZGEiLCJmYSIsIlkiLCJFIiwiaGEiLCJRIiwiVCIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsIm1zR3JpZFJvdyIsIm1zR3JpZFJvd1NwYW4iLCJtc0dyaWRDb2x1bW4iLCJtc0dyaWRDb2x1bW5TcGFuIiwib3BhY2l0eSIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiem9vbSIsIldlYmtpdExpbmVDbGFtcCIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsIl9kZWZhdWx0IiwiZm9ybWF0TXVpRXJyb3JNZXNzYWdlIiwiX3NldFByb3RvdHlwZU9mIiwiaXNNb3VudGVkIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVTZXRTdGF0ZSIsInVwZGF0ZXIiLCJmb3JjZVVwZGF0ZSIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiX19zZWxmIiwiX19zb3VyY2UiLCIkJHR5cGVvZiIsIl9vd25lciIsInBvcCIsImtleVByZWZpeCIsImNvdW50IiwiViIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIiLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsInN1c3BlbnNlIiwiUmVhY3RDdXJyZW50T3duZXIiLCJJc1NvbWVSZW5kZXJlckFjdGluZyIsInRvQXJyYXkiLCJGcmFnbWVudCIsIlByb2ZpbGVyIiwiUHVyZUNvbXBvbmVudCIsIlN0cmljdE1vZGUiLCJTdXNwZW5zZSIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX2N1cnJlbnRWYWx1ZSIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiUHJvdmlkZXIiLCJfY29udGV4dCIsImNyZWF0ZUZhY3RvcnkiLCJjcmVhdGVSZWYiLCJpc1ZhbGlkRWxlbWVudCIsImxhenkiLCJfY3RvciIsIl9zdGF0dXMiLCJfcmVzdWx0IiwidXNlQ2FsbGJhY2siLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZUxheW91dEVmZmVjdCIsInVzZVJlZHVjZXIiLCJ1c2VTdGF0ZSIsIm9uRXJyb3IiLCJjdXJyZW50VGFyZ2V0IiwicGEiLCJxYSIsInJhIiwic2EiLCJleHRyYWN0RXZlbnRzIiwiZXZlbnRUeXBlcyIsInRhIiwicGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMiLCJ1YSIsInJlZ2lzdHJhdGlvbk5hbWUiLCJ2YSIsIndhIiwiZGVwZW5kZW5jaWVzIiwieGEiLCJ5YSIsInphIiwiQWEiLCJCYSIsIkNhIiwic3RhdGVOb2RlIiwiRGEiLCJFYSIsIkZhIiwiR2EiLCJIYSIsIklhIiwiSmEiLCJLYSIsIkxhIiwiTWEiLCJOYSIsIk9hIiwiUGEiLCJRYSIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJzYW5pdGl6ZVVSTCIsIlVhIiwiVmEiLCJ4bGlua0hyZWYiLCJXYSIsIlhhIiwiU2EiLCJUYSIsIlJhIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJZYSIsIlphIiwiJGEiLCJhYiIsImJiIiwiY2IiLCJkYiIsImViIiwiZmIiLCJnYiIsImhiIiwiaWIiLCJqYiIsImtiIiwibGIiLCJtYiIsIm5iIiwicGIiLCJxYiIsIl9kZWJ1Z093bmVyIiwiX2RlYnVnU291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwicmV0dXJuIiwicmIiLCJzYiIsIm5vZGVOYW1lIiwieGIiLCJfdmFsdWVUcmFja2VyIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJ0YiIsInliIiwiY2hlY2tlZCIsInpiIiwiZGVmYXVsdENoZWNrZWQiLCJkZWZhdWx0VmFsdWUiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJBYiIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCJCYiIsIkNiIiwiRGIiLCJFYiIsIm93bmVyRG9jdW1lbnQiLCJhY3RpdmVFbGVtZW50IiwiR2IiLCJGYiIsIkhiIiwiZGVmYXVsdFNlbGVjdGVkIiwiSWIiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIkpiIiwiS2IiLCJMYiIsIk1iIiwiTmIiLCJPYiIsIlBiIiwiUWIiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwibmFtZXNwYWNlVVJJIiwidmFsdWVPZiIsImZpcnN0Q2hpbGQiLCJSYiIsImxhc3RDaGlsZCIsIlNiIiwiVGIiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJVYiIsIlZiIiwiV2IiLCJhbmltYXRpb24iLCJYYiIsIlliIiwiWmIiLCIkYiIsImFjIiwiYmMiLCJXZWFrTWFwIiwiY2MiLCJkYyIsImFsdGVybmF0ZSIsImVmZmVjdFRhZyIsImVjIiwibWVtb2l6ZWRTdGF0ZSIsImRlaHlkcmF0ZWQiLCJmYyIsImhjIiwic2libGluZyIsImdjIiwiaWMiLCJqYyIsImtjIiwibGMiLCJfZGlzcGF0Y2hMaXN0ZW5lcnMiLCJfZGlzcGF0Y2hJbnN0YW5jZXMiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImlzUGVyc2lzdGVudCIsInJlbGVhc2UiLCJtYyIsIm5jIiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50Iiwib2MiLCJwYyIsInFjIiwidG9wTGV2ZWxUeXBlIiwibmF0aXZlRXZlbnQiLCJ0YXJnZXRJbnN0IiwiYW5jZXN0b3JzIiwicmMiLCJldmVudFN5c3RlbUZsYWdzIiwic2MiLCJjb250YWluZXJJbmZvIiwidGMiLCJ1YyIsInZjIiwid2MiLCJ4YyIsInljIiwiemMiLCJBYyIsIkJjIiwiQ2MiLCJEYyIsIkVjIiwiRmMiLCJHYyIsIkhjIiwiSWMiLCJLYyIsImJsb2NrZWRPbiIsIkxjIiwicG9pbnRlcklkIiwiTWMiLCJOYyIsIlBjIiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwicHJpb3JpdHkiLCJoeWRyYXRlIiwiUWMiLCJSYyIsIlNjIiwiVGMiLCJzaGlmdCIsIlVjIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiVmMiLCJXYyIsIlljIiwiWmMiLCIkYyIsImFkIiwiYnViYmxlZCIsImNhcHR1cmVkIiwiZXZlbnRQcmlvcml0eSIsImJkIiwiY2QiLCJkZCIsInVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5IiwiZWQiLCJmZCIsImdkIiwiaGQiLCJPYyIsImpkIiwiZ3JpZEFyZWEiLCJsaW5lQ2xhbXAiLCJrZCIsImxkIiwibmQiLCJtZW51aXRlbSIsImFyZWEiLCJiYXNlIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwiaW5wdXQiLCJrZXlnZW4iLCJwYXJhbSIsInRyYWNrIiwid2JyIiwib2QiLCJwZCIsInFkIiwicmQiLCJzZCIsInRkIiwiYm9keSIsInVkIiwidmQiLCJ4ZCIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudFdpbmRvdyIsImxvY2F0aW9uIiwiaHJlZiIsInlkIiwiY29udGVudEVkaXRhYmxlIiwiRGQiLCJFZCIsIkZkIiwiYXV0b0ZvY3VzIiwiR2QiLCJfX2h0bWwiLCJIZCIsIklkIiwiSmQiLCJLZCIsInByZXZpb3VzU2libGluZyIsIkxkIiwicmFuZG9tIiwiTWQiLCJOZCIsIk9kIiwiUGQiLCJRZCIsIlJkIiwiU2QiLCJUZCIsImRpc3BhdGNoQ29uZmlnIiwiVWQiLCJfdGFyZ2V0SW5zdCIsIlZkIiwiV2QiLCJYZCIsIllkIiwiWmQiLCIkZCIsImFlIiwiYmUiLCJjZSIsIkludGVyZmFjZSIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsImVlIiwiZXZlbnRQb29sIiwiZmUiLCJkZXN0cnVjdG9yIiwiZGUiLCJnZXRQb29sZWQiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJpc1RydXN0ZWQiLCJnZSIsImhlIiwiaWUiLCJqZSIsImtlIiwiZG9jdW1lbnRNb2RlIiwibGUiLCJtZSIsIm5lIiwib2UiLCJiZWZvcmVJbnB1dCIsImNvbXBvc2l0aW9uRW5kIiwiY29tcG9zaXRpb25TdGFydCIsImNvbXBvc2l0aW9uVXBkYXRlIiwicGUiLCJxZSIsImtleUNvZGUiLCJkZXRhaWwiLCJzZSIsInZlIiwibG9jYWxlIiwid2hpY2giLCJ0ZSIsImN0cmxLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiY2hhciIsInVlIiwid2UiLCJkYXRlIiwiZGF0ZXRpbWUiLCJlbWFpbCIsIm1vbnRoIiwibnVtYmVyIiwicmFuZ2UiLCJzZWFyY2giLCJ0ZWwiLCJ0aW1lIiwid2VlayIsInhlIiwieWUiLCJjaGFuZ2UiLCJ6ZSIsIkFlIiwiQmUiLCJDZSIsIkRlIiwiRWUiLCJGZSIsIkdlIiwiZGV0YWNoRXZlbnQiLCJIZSIsIkllIiwiYXR0YWNoRXZlbnQiLCJKZSIsIktlIiwiTGUiLCJNZSIsIl9pc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJOZSIsInZpZXciLCJPZSIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJQZSIsImdldE1vZGlmaWVyU3RhdGUiLCJRZSIsIlJlIiwiU2UiLCJUZSIsIlVlIiwiVmUiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsInNoaWZ0S2V5IiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsIldlIiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsIlhlIiwibW91c2VFbnRlciIsIm1vdXNlTGVhdmUiLCJwb2ludGVyRW50ZXIiLCJwb2ludGVyTGVhdmUiLCJZZSIsImRlZmF1bHRWaWV3IiwicGFyZW50V2luZG93IiwiJGUiLCJhZiIsImJmIiwiY2YiLCJkZiIsInNlbGVjdCIsImVmIiwiZmYiLCJnZiIsImhmIiwiamYiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsImFuY2hvck5vZGUiLCJnZXRTZWxlY3Rpb24iLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsImtmIiwib25TZWxlY3QiLCJsZiIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJtZiIsImNsaXBib2FyZERhdGEiLCJuZiIsIm9mIiwiY2hhckNvZGUiLCJwZiIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJxZiIsIjgiLCI5IiwiMTIiLCIxMyIsIjE2IiwiMTciLCIxOCIsIjE5IiwiMjAiLCIyNyIsIjMyIiwiMzMiLCIzNCIsIjM1IiwiMzYiLCIzNyIsIjM4IiwiMzkiLCI0MCIsIjQ1IiwiNDYiLCIxMTIiLCIxMTMiLCIxMTQiLCIxMTUiLCIxMTYiLCIxMTciLCIxMTgiLCIxMTkiLCIxMjAiLCIxMjEiLCIxMjIiLCIxMjMiLCIxNDQiLCIxNDUiLCIyMjQiLCJyZiIsInJlcGVhdCIsInNmIiwiZGF0YVRyYW5zZmVyIiwidGYiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwidWYiLCJ2ZiIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwid2YiLCJTaW1wbGVFdmVudFBsdWdpbiIsIkVudGVyTGVhdmVFdmVudFBsdWdpbiIsIkNoYW5nZUV2ZW50UGx1Z2luIiwiU2VsZWN0RXZlbnRQbHVnaW4iLCJCZWZvcmVJbnB1dEV2ZW50UGx1Z2luIiwieWYiLCJ6ZiIsIkFmIiwiQmYiLCJDZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsIkRmIiwiRWYiLCJGZiIsImdldENoaWxkQ29udGV4dCIsIkdmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJIZiIsIklmIiwiSmYiLCJLZiIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwiTGYiLCJ1bnN0YWJsZV9yZXF1ZXN0UGFpbnQiLCJNZiIsInVuc3RhYmxlX25vdyIsIk5mIiwidW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwiLCJPZiIsInVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5IiwiUGYiLCJRZiIsIlJmIiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJTZiIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsIlRmIiwiVWYiLCJ1bnN0YWJsZV9zaG91bGRZaWVsZCIsIlZmIiwiV2YiLCJYZiIsIllmIiwiWmYiLCIkZiIsImFnIiwiYmciLCJjZyIsImRnIiwiZWciLCJmZyIsImdnIiwiaGciLCJpZyIsImpnIiwia2ciLCJtZyIsIm5nIiwib2ciLCJwZyIsImNoaWxkRXhwaXJhdGlvblRpbWUiLCJxZyIsImZpcnN0Q29udGV4dCIsImV4cGlyYXRpb25UaW1lIiwicmciLCJzZyIsIm9ic2VydmVkQml0cyIsInJlc3BvbmRlcnMiLCJ0ZyIsInVnIiwidXBkYXRlUXVldWUiLCJiYXNlU3RhdGUiLCJiYXNlUXVldWUiLCJzaGFyZWQiLCJwZW5kaW5nIiwiZWZmZWN0cyIsInZnIiwid2ciLCJzdXNwZW5zZUNvbmZpZyIsInBheWxvYWQiLCJjYWxsYmFjayIsInhnIiwieWciLCJ6ZyIsIkFnIiwiQmciLCJDZyIsIkRnIiwiRWciLCJGZyIsIkpnIiwiX3JlYWN0SW50ZXJuYWxGaWJlciIsIkdnIiwiSGciLCJJZyIsIktnIiwiTGciLCJNZyIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIk5nIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJPZyIsIlBnIiwiX3N0cmluZ1JlZiIsIlFnIiwiUmciLCJsYXN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImZpcnN0RWZmZWN0IiwiU2ciLCJUZyIsImVsZW1lbnRUeXBlIiwiVWciLCJpbXBsZW1lbnRhdGlvbiIsIlZnIiwiV2ciLCJYZyIsIllnIiwiWmciLCIkZyIsImFoIiwiYmgiLCJjaCIsImRoIiwidGFnTmFtZSIsImVoIiwiZmgiLCJnaCIsImhoIiwibWVtb2l6ZWRQcm9wcyIsInJldmVhbE9yZGVyIiwiaWgiLCJyZXNwb25kZXIiLCJqaCIsImtoIiwibGgiLCJtaCIsIm5oIiwib2giLCJwaCIsInFoIiwicmgiLCJzaCIsInRoIiwidWgiLCJ2aCIsIndoIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsImVhZ2VyUmVkdWNlciIsImVhZ2VyU3RhdGUiLCJsYXN0UmVuZGVyZWRTdGF0ZSIsImRpc3BhdGNoIiwieGgiLCJ5aCIsInpoIiwiQWgiLCJkZXN0cm95IiwiZGVwcyIsIkJoIiwiQ2giLCJEaCIsIkVoIiwiRmgiLCJHaCIsIkhoIiwiSWgiLCJKaCIsIktoIiwiTGgiLCJNaCIsIk5oIiwicmVhZENvbnRleHQiLCJ1c2VSZXNwb25kZXIiLCJ1c2VEZWZlcnJlZFZhbHVlIiwidXNlVHJhbnNpdGlvbiIsIk9oIiwiUGgiLCJRaCIsIlJoIiwiU2giLCJUaCIsInBlbmRpbmdQcm9wcyIsIlVoIiwiVmgiLCJXaCIsIlhoIiwiWWgiLCJaaCIsIiRoIiwiYWkiLCJiaSIsImNpIiwiZGkiLCJlaSIsImZpIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwiZ2kiLCJoaSIsInBlbmRpbmdDb250ZXh0IiwibmkiLCJwaSIsInFpIiwiaWkiLCJyZXRyeVRpbWUiLCJqaSIsInVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrIiwia2kiLCJsaSIsImlzQmFja3dhcmRzIiwicmVuZGVyaW5nIiwicmVuZGVyaW5nU3RhcnRUaW1lIiwibGFzdCIsInRhaWwiLCJ0YWlsRXhwaXJhdGlvbiIsInRhaWxNb2RlIiwibWkiLCJyaSIsInNpIiwid2FzTXVsdGlwbGUiLCJvbkNsaWNrIiwib25jbGljayIsImNyZWF0ZUVsZW1lbnROUyIsInRpIiwidWkiLCJ2aSIsIndpIiwieGkiLCJ5aSIsInppIiwiQWkiLCJzdGFjayIsIkJpIiwiV2Vha1NldCIsIkNpIiwiRmkiLCJFaSIsIkdpIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJIaSIsIklpIiwiSmkiLCJLaSIsIkxpIiwiRGkiLCJNaSIsIk5pIiwiT2kiLCJQaSIsIlFpIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsIlJpIiwiU2kiLCJUaSIsImRpc3BsYXkiLCJVaSIsIlZpIiwiV2kiLCJYaSIsIllpIiwiWmkiLCIkaSIsImNvbXBvbmVudERpZENhdGNoIiwiYWoiLCJjb21wb25lbnRTdGFjayIsIlJqIiwiYmoiLCJjZWlsIiwiY2oiLCJkaiIsImtqIiwibGoiLCJtaiIsIm5qIiwib2oiLCJxaiIsInJqIiwic2oiLCJ0aiIsInVqIiwidmoiLCJ3aiIsInRpbWVvdXRNcyIsInhqIiwieWoiLCJ6aiIsImxhc3RFeHBpcmVkVGltZSIsIkFqIiwiZmlyc3RQZW5kaW5nVGltZSIsImxhc3RQaW5nZWRUaW1lIiwibmV4dEtub3duUGVuZGluZ0xldmVsIiwiY2FsbGJhY2tFeHBpcmF0aW9uVGltZSIsImNhbGxiYWNrUHJpb3JpdHkiLCJjYWxsYmFja05vZGUiLCJCaiIsIkNqIiwiRGoiLCJFaiIsIkZqIiwiR2oiLCJIaiIsImZpbmlzaGVkV29yayIsImZpbmlzaGVkRXhwaXJhdGlvblRpbWUiLCJsYXN0U3VzcGVuZGVkVGltZSIsIklqIiwidGltZW91dEhhbmRsZSIsIkpqIiwiYnVzeU1pbkR1cmF0aW9uTXMiLCJidXN5RGVsYXlNcyIsIktqIiwiTWoiLCJOaiIsInBpbmdDYWNoZSIsIk9qIiwidWIiLCJQaiIsIlhjIiwiUWoiLCJTaiIsImZpcnN0U3VzcGVuZGVkVGltZSIsInJhbmdlQ291bnQiLCJ3YiIsImFjdGl2ZUVsZW1lbnREZXRhY2hlZCIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJUaiIsIndkIiwiY29udGFpbnMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsInNjcm9sbExlZnQiLCJzY3JvbGxUb3AiLCJ2YiIsIlVqIiwiVmoiLCJXaiIsImhpZGRlbiIsIm9iIiwiWGoiLCJ1bnN0YWJsZV9vYnNlcnZlZEJpdHMiLCJaaiIsInBlbmRpbmdDaGlsZHJlbiIsImFrIiwiYmsiLCJjayIsImRrIiwiZWsiLCJmayIsIkpjIiwiX2ludGVybmFsUm9vdCIsImdrIiwiaWsiLCJoayIsImprIiwia2siLCJ1bm1vdW50IiwiZm9ybSIsIkxqIiwibGsiLCJFdmVudHMiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImJ1bmRsZVR5cGUiLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiWWoiLCJvdmVycmlkZUhvb2tTdGF0ZSIsIm92ZXJyaWRlUHJvcHMiLCJzZXRTdXNwZW5zZUhhbmRsZXIiLCJzY2hlZHVsZVVwZGF0ZSIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2giLCJzY2hlZHVsZVJlZnJlc2giLCJzY2hlZHVsZVJvb3QiLCJzZXRSZWZyZXNoSGFuZGxlciIsImdldEN1cnJlbnRGaWJlciIsImNyZWF0ZVBvcnRhbCIsImZpbmRET01Ob2RlIiwiZmx1c2hTeW5jIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJNZXNzYWdlQ2hhbm5lbCIsInVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlIiwicGVyZm9ybWFuY2UiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImZsb29yIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwic29ydEluZGV4Iiwic3RhcnRUaW1lIiwicHJpb3JpdHlMZXZlbCIsInVuc3RhYmxlX1Byb2ZpbGluZyIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUiLCJ1bnN0YWJsZV9uZXh0IiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJsb2NhbHMiLCJ1c2VTb3VyY2VNYXAiLCJsaXN0IiwiY3NzTWFwcGluZyIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VNYXAiLCJ1bmVzY2FwZSIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlUm9vdCIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJtZWRpYVF1ZXJ5IiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsInN0eWxlc0luRG9tIiwiaXNPbGRJRSIsImFsbCIsImF0b2IiLCJnZXRFbGVtZW50Iiwic3R5bGVUYXJnZXQiLCJjb250ZW50RG9jdW1lbnQiLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwic3R5bGVzSW5zZXJ0ZWRBdFRvcCIsImZpeFVybHMiLCJhZGRTdHlsZXNUb0RvbSIsImRvbVN0eWxlIiwiYWRkU3R5bGUiLCJsaXN0VG9TdHlsZXMiLCJuZXdTdHlsZXMiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJpbnNlcnRJbnRvIiwibGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AiLCJpbnNlcnRBdCIsImJlZm9yZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsImNyZWF0ZVN0eWxlRWxlbWVudCIsImFkZEF0dHJzIiwic3R5bGVJbmRleCIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJyZXZva2VPYmplY3RVUkwiLCJCbG9iIiwicmVsIiwiY3JlYXRlTGlua0VsZW1lbnQiLCJ1cGRhdGVMaW5rIiwiYXBwbHlUb1RhZyIsIkRFQlVHIiwibmV3TGlzdCIsIm1heVJlbW92ZSIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJjc3NOb2RlIiwiYXV0b0ZpeFVybHMiLCJjb252ZXJ0VG9BYnNvbHV0ZVVybHMiLCJibG9iIiwib2xkU3JjIiwiYmFzZVVybCIsInByb3RvY29sIiwiaG9zdCIsImN1cnJlbnREaXIiLCJwYXRobmFtZSIsImZ1bGxNYXRjaCIsIm9yaWdVcmwiLCJuZXdVcmwiLCJ1bnF1b3RlZE9yaWdVcmwiLCIkMSIsIkF4aW9zIiwibWVyZ2VDb25maWciLCJjcmVhdGVJbnN0YW5jZSIsImRlZmF1bHRDb25maWciLCJheGlvcyIsImluc3RhbmNlQ29uZmlnIiwiQ2FuY2VsVG9rZW4iLCJpc0NhbmNlbCIsInByb21pc2VzIiwic3ByZWFkIiwiSW50ZXJjZXB0b3JNYW5hZ2VyIiwiZGlzcGF0Y2hSZXF1ZXN0IiwiaW50ZXJjZXB0b3JzIiwiY2hhaW4iLCJpbnRlcmNlcHRvciIsInVuc2hpZnQiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsImdldFVyaSIsImhhbmRsZXJzIiwiZWplY3QiLCJ0cmFuc2Zvcm1EYXRhIiwidGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZCIsInRocm93SWZSZXF1ZXN0ZWQiLCJyZWFzb24iLCJmbnMiLCJub3JtYWxpemVkTmFtZSIsImlzQXhpb3NFcnJvciIsImRlc2NyaXB0aW9uIiwiY29sdW1uTnVtYmVyIiwiaXNBYnNvbHV0ZVVSTCIsImNvbWJpbmVVUkxzIiwicmVxdWVzdGVkVVJMIiwicmVsYXRpdmVVUkwiLCJpZ25vcmVEdXBsaWNhdGVPZiIsInBhcnNlZCIsIm9yaWdpblVSTCIsIm1zaWUiLCJ1c2VyQWdlbnQiLCJ1cmxQYXJzaW5nTm9kZSIsInJlc29sdmVVUkwiLCJob3N0bmFtZSIsInBvcnQiLCJyZXF1ZXN0VVJMIiwid3JpdGUiLCJleHBpcmVzIiwiZG9tYWluIiwic2VjdXJlIiwiY29va2llIiwidG9HTVRTdHJpbmciLCJkZWNvZGVVUklDb21wb25lbnQiLCJleGVjdXRvciIsInJlc29sdmVQcm9taXNlIiwidG9rZW4iLCJfcmVhY3REb20yIiwiX2dvb2dsZV9tYXBfbWFwMiIsIl9tYXJrZXJfZGlzcGF0Y2hlcjIiLCJfZ29vZ2xlX21hcF9tYXJrZXJzMiIsIl9nb29nbGVfbWFwX21hcmtlcnNfcHJlcmVuZGVyMiIsIl9nb29nbGVfaGVhdG1hcCIsIl9nb29nbGVfbWFwX2xvYWRlcjIiLCJfZ2VvMiIsIl9yYWYyIiwiX3BpY2syIiwiX2xvZzIiLCJfaXNFbXB0eTIiLCJfaXNOdW1iZXIyIiwiX2RldGVjdDIiLCJfaXNQbGFpbk9iamVjdDIiLCJfaXNBcnJheXNFcXVhbEVwczIiLCJfZGV0ZWN0RWxlbWVudFJlc2l6ZTIiLCJfcGFzc2l2ZUV2ZW50czIiLCJJU19SRUFDVF8xNiIsImRlZmF1bHRPcHRpb25zXyIsIm92ZXJ2aWV3TWFwQ29udHJvbCIsInN0cmVldFZpZXdDb250cm9sIiwicm90YXRlQ29udHJvbCIsIm1hcFR5cGVDb250cm9sIiwiZmVhdHVyZVR5cGUiLCJzdHlsZXJzIiwidmlzaWJpbGl0eSIsIm1pblpvb20iLCJsYXRMbmcyT2JqIiwiX2NoZWNrTWluWm9vbSIsIkdvb2dsZU1hcCIsIl9nZXRNaW5ab29tIiwiZ2VvU2VydmljZV8iLCJnZXRXaWR0aCIsImdldEhlaWdodCIsInRpbGVzUGVyV2lkdGgiLCJ0aWxlc1BlckhlaWdodCIsIm1heFRpbGVzUGVyRGltIiwiX2NvbXB1dGVNaW5ab29tIiwiX21hcERvbVJlc2l6ZUNhbGxiYWNrIiwicmVzZXRTaXplT25JZGxlXyIsIm1hcHNfIiwib3JpZ2luYWxDZW50ZXIiLCJjZW50ZXIiLCJkZWZhdWx0Q2VudGVyIiwiY3VycmVudENlbnRlciIsIm1hcF8iLCJnZXRDZW50ZXIiLCJldmVudCIsInRyaWdnZXIiLCJzZXRDZW50ZXIiLCJyZXNldEJvdW5kc09uUmVzaXplIiwiX3NldExheWVycyIsImxheWVyVHlwZXMiLCJsYXllclR5cGUiLCJsYXllcnNfIiwic2V0TWFwIiwiX3JlbmRlclBvcnRhbCIsIl9nZXRIb3ZlckRpc3RhbmNlIiwibWFya2Vyc0Rpc3BhdGNoZXJfIiwiX2luaXRNYXAiLCJpbml0aWFsaXplZF8iLCJwcm9wc0NlbnRlciIsInNldFZpZXciLCJkZWZhdWx0Wm9vbSIsIl9vbkJvdW5kc0NoYW5nZWQiLCJib290c3RyYXBVUkxLZXlzIiwiYXBpS2V5IiwiZ29vZ2xlTWFwTG9hZGVyIiwiaGVhdG1hcExpYnJhcnkiLCJtYXBzIiwibW91bnRlZF8iLCJjZW50ZXJMYXRMbmciLCJwcm9wc09wdGlvbnMiLCJoZWF0bWFwIiwicG9zaXRpb25zIiwiZ2VuZXJhdGVIZWF0bWFwIiwib3B0aW9uc0hlYXRtYXAiLCJtYXBQbGFpbk9iamVjdHMiLCJkcmFnZ2FibGVPcHRpb25zIiwiZHJhZ2dhYmxlIiwibWluWm9vbV8iLCJwcmVNYXBPcHRpb25zIiwiZGVmYXVsdERyYWdnYWJsZU9wdGlvbl8iLCJtYXBPcHRpb25zIiwiZ29vZ2xlTWFwRG9tXyIsInZlcnNpb25NYXRjaCIsIm1hcHNWZXJzaW9uIiwidGhpc18iLCJvdmVybGF5IiwiT3ZlcmxheVZpZXciLCJvbkFkZCIsIktfTUFYX1dJRFRIIiwic2NyZWVuIiwiS19NQVhfSEVJR0hUIiwib3ZlcmxheVZpZXdEaXZTdHlsZSIsImdldFBhbmVzIiwib3ZlcmxheU1vdXNlVGFyZ2V0Iiwic2V0TWFwQ2FudmFzUHJvamVjdGlvbiIsImdldFByb2plY3Rpb24iLCJvblJlbW92ZSIsInJlbmRlcmVkT3ZlcmxheSIsImRyYXciLCJ1cGRhdGVDb3VudGVyXyIsImRlYm91bmNlZCIsImdvb2dsZUFwaUxvYWRlZENhbGxlZF8iLCJfb25Hb29nbGVBcGlMb2FkZWQiLCJtb3VzZV8iLCJmcm9tQ29udGFpbmVyUGl4ZWxUb0xhdExuZyIsIl9vbkNoaWxkTW91c2VNb3ZlIiwiZmlyZU1vdXNlRXZlbnRPbklkbGVfIiwib3ZlcmxheV8iLCJvblRpbGVzTG9hZGVkIiwiX29uVGlsZXNMb2FkZWQiLCJnZXRab29tIiwiem9vbUFuaW1hdGlvbkluUHJvZ3Jlc3NfIiwiX29uWm9vbUFuaW1hdGlvblN0YXJ0IiwiZ2V0VGltZSIsInpvb21Db250cm9sQ2xpY2tUaW1lXyIsIl9zZXRWaWV3U2l6ZSIsImN1cnJNaW5ab29tIiwic2V0T3B0aW9ucyIsIl9vblpvb21BbmltYXRpb25FbmQiLCJkcmFnVGltZV8iLCJtb3VzZUluTWFwXyIsIl9vbkRyYWciLCJpZGxlTGlzdGVuZXIiLCJfb25EcmFnRW5kIiwiX29uTWFwVHlwZUlkQ2hhbmdlIiwiZ2V0TWFwVHlwZUlkIiwiY2F0Y2giLCJfdGhpcyRwcm9wcyIsIm9uR29vZ2xlQXBpTG9hZGVkIiwiX3RoaXMkcHJvcHMyIiwib25EcmFnIiwiX3RoaXMkcHJvcHMzIiwib25EcmFnRW5kIiwiX3RoaXMkcHJvcHM0Iiwib25NYXBUeXBlSWRDaGFuZ2UiLCJfdGhpcyRwcm9wczUiLCJvblpvb21BbmltYXRpb25TdGFydCIsIl90aGlzJHByb3BzNiIsIm9uWm9vbUFuaW1hdGlvbkVuZCIsIl90aGlzJHByb3BzNyIsImNoaWxkTW91c2VEb3duQXJnc18iLCJfb25DaGlsZE1vdXNlVXAiLCJfdGhpcyRwcm9wczgiLCJvbkNoaWxkTW91c2VVcCIsImNoaWxkTW91c2VVcFRpbWVfIiwiX3RoaXMkcHJvcHM5Iiwib25DaGlsZE1vdXNlTW92ZSIsIl90aGlzJHByb3BzMTAiLCJfdGhpcyRwcm9wczExIiwiZnVsbHNjcmVlbiIsIndlYmtpdElzRnVsbFNjcmVlbiIsIm1vekZ1bGxTY3JlZW4iLCJtc0Z1bGxzY3JlZW5FbGVtZW50Iiwic2V0Vmlld1NpemUiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJtYXBEb20iLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsIl9vbldpbmRvd1Jlc2l6ZSIsIl9vbk1hcE1vdXNlTW92ZSIsImN1cnJUaW1lIiwibW91c2VNb3ZlVGltZV8iLCJib3VuZGluZ1JlY3RfIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwibW91c2VQb3NYIiwibW91c2VQb3NZIiwiX29uQ2xpY2siLCJfdGhpcyRwcm9wczEyIiwiX29uTWFwQ2xpY2siLCJfb25NYXBNb3VzZURvd25OYXRpdmUiLCJfb25NYXBNb3VzZURvd24iLCJfb25NYXBNb3VzZURvd25DYXB0dXJlIiwiaXNDaHJvbWUiLCJfb25LZXlEb3duQ2FwdHVyZSIsIl9pc0NlbnRlckRlZmluZWQiLCJjYWxsRXh0Qm91bmRzQ2hhbmdlIiwiZ21DIiwib25DaGFuZ2UiLCJvbkJvdW5kc0NoYW5nZSIsImNhblByb2plY3QiLCJib3VuZHMiLCJnZXRCb3VuZHMiLCJwcmV2Qm91bmRzXyIsIm1hcmdpbkJvdW5kcyIsImNlbnRlcklzT2JqZWN0XyIsIm53Iiwic3ciLCJoYXNTaXplIiwiX3JlZ2lzdGVyQ2hpbGQiLCJhZGRSZXNpemVMaXN0ZW5lciIsIl90aGlzMyIsIm5leHRQcm9wc0NlbnRlciIsImN1cnJDZW50ZXIiLCJwYW5UbyIsInNldFpvb20iLCJsYXllcktleSIsInNldERhdGEiLCJ3ZWlnaHQiLCJwcmV2UHJvcHMiLCJyZW1vdmVSZXNpemVMaXN0ZW5lciIsInNob3VsZFVucmVnaXN0ZXJNYXBPblVubW91bnQiLCJzY3JvbGx3aGVlbCIsImNsZWFySW5zdGFuY2VMaXN0ZW5lcnMiLCJkaXNwb3NlIiwibWFwTWFya2VyUHJlcmVuZGVyIiwib25Nb3VzZU1vdmUiLCJvbk1vdXNlRG93bkNhcHR1cmUiLCJyZWdpc3RlckNoaWxkIiwib25lT2ZUeXBlIiwieWVzSVdhbnRUb1VzZUdvb2dsZU1hcEFwaUludGVybmFscyIsImFycmF5T2YiLCJtb3VzZVBvcyIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0IiwiZW1wdHlGdW5jdGlvbiIsImVtcHR5RnVuY3Rpb25XaXRoUmVzZXQiLCJyZXNldFdhcm5pbmdDYWNoZSIsInNoaW0iLCJjb21wb25lbnROYW1lIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZ2V0U2hpbSIsImlzUmVxdWlyZWQiLCJSZWFjdFByb3BUeXBlcyIsInN5bWJvbCIsImluc3RhbmNlT2YiLCJvYmplY3RPZiIsIm9uZU9mIiwiZXhhY3QiLCJjaGVja1Byb3BUeXBlcyIsIlByb3BUeXBlcyIsIkdvb2dsZU1hcE1hcCIsIl9ldmVudGVtaXR0ZXIiLCJNYXJrZXJEaXNwYXRjaGVyIiwiX0V2ZW50RW1pdHRlciIsImdtYXBJbnN0YW5jZSIsIkVFIiwiRXZlbnRFbWl0dGVyIiwiX2V2ZW50cyIsImV2ZW50TmFtZXMiLCJldmVudHMiLCJleGlzdHMiLCJldnQiLCJhdmFpbGFibGUiLCJhMSIsImEyIiwiYTMiLCJhNCIsImE1IiwibGlzdGVuZXIiLCJzZXRNYXhMaXN0ZW5lcnMiLCJ2aXN1YWxpemF0aW9uIiwiSGVhdG1hcExheWVyIiwiX3JlZjIkd2VpZ2h0IiwiX3JlZjMkb3B0aW9ucyIsIm9wdGlvbiIsIiRzY3JpcHRfIiwibG9hZFByb21pc2VfIiwicmVzb2x2ZUN1c3RvbVByb21pc2VfIiwiX2N1c3RvbVByb21pc2UiLCJnb29nbGUiLCJfJF9nb29nbGVfbWFwX2luaXRpYWxpemVfJF8iLCJkZWZpbml0aW9uIiwic2NyaXB0cGF0aCIsInVybEFyZ3MiLCJkb2MiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImlkcyIsInNjcmlwdHMiLCJldmVyeSIsImFyIiwiZWFjaCIsIiRzY3JpcHQiLCJwYXRocyIsImlkT3JEb25lIiwib3B0RG9uZSIsImlkT3JEb25lSXNEb25lIiwibG9vcEZuIiwiZHNldCIsImxvYWRpbmciLCJsb2FkZWQiLCJvbmxvYWQiLCJhc3luYyIsInNyYyIsInJlYWR5IiwicmVxIiwibWlzc2luZyIsImRlcCIsIl9wb2ludEdlb21ldHJ5MiIsIl9sYXRfbG5nMiIsIl90cmFuc2Zvcm0yIiwiR2VvIiwidGlsZVNpemUiLCJoYXNTaXplXyIsImhhc1ZpZXdfIiwidHJhbnNmb3JtXyIsImJlYXJpbmciLCJtYXBDYW52YXNQcm9qZWN0aW9uIiwibWFwQ2FudmFzUHJvamVjdGlvbl8iLCJwdExhdExuZyIsImxvY2F0aW9uUG9pbnQiLCJ3b3JsZFNpemUiLCJwdFhZIiwicHR4eSIsInB0UmVzIiwicG9pbnRMb2NhdGlvbiIsIm1hcmdpbnMiLCJyb3VuZEZhY3RvciIsImJuZFQiLCJibmRSIiwiYm5kQiIsImJuZEwiLCJ0b3BMZWZ0Q29ybmVyIiwiYm90dG9tUmlnaHRDb3JuZXIiLCJyZXMiLCJfd3JhcCIsIlRyYW5zZm9ybSIsIm1heFpvb20iLCJfbWluWm9vbSIsIl9tYXhab29tIiwibGF0UmFuZ2UiLCJ6b29tU2NhbGUiLCJzY2FsZVpvb20iLCJzY2FsZSIsImxvZyIsIkxOMiIsInByb2plY3QiLCJsYXRsbmciLCJsbmdYIiwibGF0WSIsInVucHJvamVjdCIsInBvaW50IiwieUxhdCIsInhMbmciLCJsb24iLCJQSSIsInRhbiIsInkyIiwiYXRhbiIsImV4cCIsImNlbnRlclBvaW50IiwiX3pvb20iLCJ6b29tViIsInRpbGVab29tIiwiem9vbUZyYWN0aW9uIiwibmF0aXZlUmFmIiwid2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibG9nMiIsImlzT2JqZWN0TGlrZSIsIm9iamVjdFRvU3RyaW5nIiwiZGV0ZWN0QnJvd3NlclJlc3VsdF8iLCJpc0V4cGxvcmVyIiwiaXNGaXJlZm94IiwiaXNPcGVyYSIsImlzU2FmYXJpIiwicHJvdG8iLCJmblRvU3RyaW5nIiwiYXJyYXlBIiwiYXJyYXlCIiwiZXBzIiwiX3Bhc3NpdmVFdmVudHMiLCJfd2luZG93IiwiY2FuVXNlRE9NIiwicmFmIiwic3R5bGVzQ3JlYXRlZCIsInJlcXVlc3RGcmFtZSIsImNhbmNlbEZyYW1lIiwibW96Q2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJ3ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZSIsInJlc2V0VHJpZ2dlcnMiLCJ0cmlnZ2VycyIsIl9fcmVzaXplVHJpZ2dlcnNfXyIsImV4cGFuZCIsImZpcnN0RWxlbWVudENoaWxkIiwiY29udHJhY3QiLCJsYXN0RWxlbWVudENoaWxkIiwiZXhwYW5kQ2hpbGQiLCJzY3JvbGxXaWR0aCIsInNjcm9sbEhlaWdodCIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0Iiwic2Nyb2xsTGlzdGVuZXIiLCJfX3Jlc2l6ZVJBRl9fIiwiX19yZXNpemVMYXN0X18iLCJjaGVja1RyaWdnZXJzIiwiX19yZXNpemVMaXN0ZW5lcnNfXyIsImtleWZyYW1lcHJlZml4IiwiYW5pbWF0aW9uc3RhcnRldmVudCIsImRvbVByZWZpeGVzIiwic3RhcnRFdmVudHMiLCJwZngiLCJlbG0iLCJhbmltYXRpb25LZXlmcmFtZXMiLCJhbmltYXRpb25TdHlsZSIsInRlbXBQYXJlbnREaXYiLCJjcmVhdGVTdHlsZXMiLCJBc3luY01vZGUiLCJDb25jdXJyZW50TW9kZSIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkVsZW1lbnQiLCJMYXp5IiwiUG9ydGFsIiwiaXNBc3luY01vZGUiLCJpc0NvbmN1cnJlbnRNb2RlIiwiaXNDb250ZXh0Q29uc3VtZXIiLCJpc0NvbnRleHRQcm92aWRlciIsImlzRWxlbWVudCIsImlzRm9yd2FyZFJlZiIsImlzRnJhZ21lbnQiLCJpc0xhenkiLCJpc1BvcnRhbCIsImlzUHJvZmlsZXIiLCJpc1N0cmljdE1vZGUiLCJpc1N1c3BlbnNlIiwiaXNWYWxpZEVsZW1lbnRUeXBlIiwidHlwZU9mIiwiVXNlciIsInVzZXJjcmUiLCJ1c2VyIiwidWVtYWlsIiwiZ2V0RWxlbWVudEJ5SWQiLCJ1cHciLCJmZXRjaFVzZXIiLCJXcmFwcGVyIiwiQ2VudGVyV3JhcHBlciIsIkNvdmlkQ2FzZSIsImFsdCIsIkNlbnRlciIsIkdtYXAiLCJidWZfbGF0IiwiYnVmX2xuZyIsInNlYXJjaERlc3RpbmF0aW9uIiwiX3Byb3BzJGNvbXBvbmVudCIsIl9wcm9wcyRzcXVhcmUiLCJzcXVhcmUiLCJfcHJvcHMkZWxldmF0aW9uIiwiZWxldmF0aW9uIiwiX3Byb3BzJHZhcmlhbnQiLCJ2YXJpYW50Iiwicm9vdCIsIm91dGxpbmVkIiwicm91bmRlZCIsIndpdGhTdHlsZXMiLCJlbGV2YXRpb25zIiwic2hhZG93IiwiYm94U2hhZG93IiwiX3Byb3BzJHJhaXNlZCIsInJhaXNlZCIsIm92ZXJmbG93IiwicGFkZGluZ0JvdHRvbSIsImRlZmF1bHRWYXJpYW50TWFwcGluZyIsIl9wcm9wcyRhbGlnbiIsImFsaWduIiwiX3Byb3BzJGNvbG9yIiwiX3Byb3BzJGRpc3BsYXkiLCJfcHJvcHMkZ3V0dGVyQm90dG9tIiwiZ3V0dGVyQm90dG9tIiwiX3Byb3BzJG5vV3JhcCIsIm5vV3JhcCIsIl9wcm9wcyRwYXJhZ3JhcGgiLCJwYXJhZ3JhcGgiLCJfcHJvcHMkdmFyaWFudE1hcHBpbmciLCJ2YXJpYW50TWFwcGluZyIsInNyT25seSIsImFsaWduTGVmdCIsInRleHRBbGlnbiIsImFsaWduQ2VudGVyIiwiYWxpZ25SaWdodCIsImFsaWduSnVzdGlmeSIsInRleHRPdmVyZmxvdyIsIndoaXRlU3BhY2UiLCJtYXJnaW5Cb3R0b20iLCJjb2xvckluaGVyaXQiLCJjb2xvclByaW1hcnkiLCJjb2xvclNlY29uZGFyeSIsImNvbG9yVGV4dFByaW1hcnkiLCJjb2xvclRleHRTZWNvbmRhcnkiLCJjb2xvckVycm9yIiwiZGlzcGxheUlubGluZSIsImRpc3BsYXlCbG9jayIsImF2YXRhciIsIl9wcm9wcyRkaXNhYmxlVHlwb2dyYSIsImRpc2FibGVUeXBvZ3JhcGh5Iiwic3ViaGVhZGVyUHJvcCIsInN1YmhlYWRlciIsInN1YmhlYWRlclR5cG9ncmFwaHlQcm9wcyIsInRpdGxlUHJvcCIsInRpdGxlVHlwb2dyYXBoeVByb3BzIiwiYWxpZ25JdGVtcyIsIm1hcmdpblJpZ2h0IiwiYWxpZ25TZWxmIiwibWFyZ2luVG9wIiwic2V0UmVmIiwidXNlRm9ya1JlZiIsInJlZkEiLCJyZWZCIiwicmVmVmFsdWUiLCJ1c2VFbmhhbmNlZEVmZmVjdCIsInVzZUV2ZW50Q2FsbGJhY2siLCJoYWRLZXlib2FyZEV2ZW50IiwiaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkiLCJoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQiLCJpbnB1dFR5cGVzV2hpdGVsaXN0IiwiaGFuZGxlUG9pbnRlckRvd24iLCJoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlIiwidmlzaWJpbGl0eVN0YXRlIiwibWF0Y2hlcyIsInJlYWRPbmx5IiwiaXNDb250ZW50RWRpdGFibGUiLCJoYW5kbGVCbHVyVmlzaWJsZSIsInVzZUlzRm9jdXNWaXNpYmxlIiwiaXNGb2N1c1Zpc2libGUiLCJvbkJsdXJWaXNpYmxlIiwiZ2V0Q2hpbGRNYXBwaW5nIiwibWFwRm4iLCJtYXBwZXIiLCJnZXRQcm9wIiwiZ2V0TmV4dENoaWxkTWFwcGluZyIsInByZXZDaGlsZE1hcHBpbmciLCJvbkV4aXRlZCIsIm5leHRDaGlsZE1hcHBpbmciLCJwcmV2IiwiZ2V0VmFsdWVGb3JLZXkiLCJuZXh0S2V5c1BlbmRpbmciLCJwZW5kaW5nS2V5cyIsImNoaWxkTWFwcGluZyIsIm5leHRLZXkiLCJwZW5kaW5nTmV4dEtleSIsIm1lcmdlQ2hpbGRNYXBwaW5ncyIsImhhc1ByZXYiLCJoYXNOZXh0IiwicHJldkNoaWxkIiwiaXNMZWF2aW5nIiwiaW4iLCJleGl0IiwiZW50ZXIiLCJfUmVhY3QkQ29tcG9uZW50IiwiVHJhbnNpdGlvbkdyb3VwIiwiaGFuZGxlRXhpdGVkIiwiY29udGV4dFZhbHVlIiwiaXNNb3VudGluZyIsImZpcnN0UmVuZGVyIiwibW91bnRlZCIsImFwcGVhciIsImN1cnJlbnRDaGlsZE1hcHBpbmciLCJjaGlsZEZhY3RvcnkiLCJUcmFuc2l0aW9uR3JvdXBDb250ZXh0IiwiX3Byb3BzJHB1bHNhdGUiLCJwdWxzYXRlIiwicmlwcGxlWCIsInJpcHBsZVkiLCJyaXBwbGVTaXplIiwiaW5Qcm9wIiwiX3Byb3BzJG9uRXhpdGVkIiwiX1JlYWN0JHVzZVN0YXRlIiwibGVhdmluZyIsInNldExlYXZpbmciLCJyaXBwbGVDbGFzc05hbWUiLCJyaXBwbGUiLCJyaXBwbGVWaXNpYmxlIiwicmlwcGxlUHVsc2F0ZSIsInJpcHBsZVN0eWxlcyIsImNoaWxkQ2xhc3NOYW1lIiwiY2hpbGRMZWF2aW5nIiwiY2hpbGRQdWxzYXRlIiwidGltZW91dElkIiwiX3Byb3BzJGNlbnRlciIsImNlbnRlclByb3AiLCJyaXBwbGVzIiwic2V0UmlwcGxlcyIsInJpcHBsZUNhbGxiYWNrIiwiaWdub3JpbmdNb3VzZURvd24iLCJzdGFydFRpbWVyIiwic3RhcnRUaW1lckNvbW1pdCIsInN0YXJ0Q29tbWl0Iiwib2xkUmlwcGxlcyIsIl9vcHRpb25zJHB1bHNhdGUiLCJfb3B0aW9ucyRjZW50ZXIiLCJfb3B0aW9ucyRmYWtlRWxlbWVudCIsImZha2VFbGVtZW50IiwicmVjdCIsInNpemVYIiwic2l6ZVkiLCJzdG9wIiwicG9pbnRlckV2ZW50cyIsImFuaW1hdGlvbkR1cmF0aW9uIiwiYnV0dG9uUmVmUHJvcCIsImJ1dHRvblJlZiIsIl9wcm9wcyRjZW50ZXJSaXBwbGUiLCJjZW50ZXJSaXBwbGUiLCJfcHJvcHMkZGlzYWJsZWQiLCJfcHJvcHMkZGlzYWJsZVJpcHBsZSIsImRpc2FibGVSaXBwbGUiLCJfcHJvcHMkZGlzYWJsZVRvdWNoUmkiLCJkaXNhYmxlVG91Y2hSaXBwbGUiLCJfcHJvcHMkZm9jdXNSaXBwbGUiLCJmb2N1c1JpcHBsZSIsImZvY3VzVmlzaWJsZUNsYXNzTmFtZSIsIm9uQmx1ciIsIm9uRm9jdXMiLCJvbkZvY3VzVmlzaWJsZSIsIm9uS2V5RG93biIsIm9uS2V5VXAiLCJvbk1vdXNlRG93biIsIm9uTW91c2VMZWF2ZSIsIm9uTW91c2VVcCIsIm9uVG91Y2hFbmQiLCJvblRvdWNoTW92ZSIsIm9uVG91Y2hTdGFydCIsIm9uRHJhZ0xlYXZlIiwiX3Byb3BzJHRhYkluZGV4IiwidGFiSW5kZXgiLCJUb3VjaFJpcHBsZVByb3BzIiwiX3Byb3BzJHR5cGUiLCJyaXBwbGVSZWYiLCJmb2N1c1Zpc2libGUiLCJzZXRGb2N1c1Zpc2libGUiLCJfdXNlSXNGb2N1c1Zpc2libGUiLCJmb2N1c1Zpc2libGVSZWYiLCJ1c2VSaXBwbGVIYW5kbGVyIiwicmlwcGxlQWN0aW9uIiwiZXZlbnRDYWxsYmFjayIsInNraXBSaXBwbGVBY3Rpb24iLCJoYW5kbGVNb3VzZURvd24iLCJoYW5kbGVEcmFnTGVhdmUiLCJoYW5kbGVNb3VzZVVwIiwiaGFuZGxlTW91c2VMZWF2ZSIsImhhbmRsZVRvdWNoU3RhcnQiLCJoYW5kbGVUb3VjaEVuZCIsImhhbmRsZVRvdWNoTW92ZSIsImhhbmRsZUJsdXIiLCJoYW5kbGVGb2N1cyIsImlzTm9uTmF0aXZlQnV0dG9uIiwia2V5ZG93blJlZiIsImhhbmRsZUtleURvd24iLCJoYW5kbGVLZXlVcCIsIkNvbXBvbmVudFByb3AiLCJidXR0b25Qcm9wcyIsInJvbGUiLCJoYW5kbGVVc2VyUmVmIiwiaGFuZGxlT3duUmVmIiwiaGFuZGxlUmVmIiwiX1JlYWN0JHVzZVN0YXRlMiIsIm1vdW50ZWRTdGF0ZSIsInNldE1vdW50ZWRTdGF0ZSIsImVuYWJsZVRvdWNoUmlwcGxlIiwianVzdGlmeUNvbnRlbnQiLCJXZWJraXRUYXBIaWdobGlnaHRDb2xvciIsImN1cnNvciIsInZlcnRpY2FsQWxpZ24iLCJ0ZXh0RGVjb3JhdGlvbiIsImJvcmRlclN0eWxlIiwiX3Byb3BzJGVkZ2UiLCJlZGdlIiwiX3Byb3BzJGRpc2FibGVGb2N1c1JpIiwiZGlzYWJsZUZvY3VzUmlwcGxlIiwiX3Byb3BzJHNpemUiLCJlZGdlU3RhcnQiLCJlZGdlRW5kIiwibGFiZWwiLCJtYXJnaW5MZWZ0Iiwic2l6ZVNtYWxsIiwiSW5wdXQiLCJjb21tZW50cyIsInRleHRGaWVsZFZhbHVlIiwiZmV0Y2hBbGxDb21tZW50cyIsImNyZWF0ZUNvbW1lbnQiLCJoYW5kbGVJbnB1dENoYW5nZSIsInBvc3QiLCJyb3dzIiwicGxhY2Vob2xkZXIiLCJyZXF1aXJlZCIsImNjb250ZW50IiwiX2lkIiwidXB2b3RlIiwiZG93bnZvdGUiLCJwYXJlbnRNZXRob2QiLCJDb21tZW50IiwicHV0IiwiZmV0Y2hVcHZvdGVCeUlkIiwiZmV0Y2hEb3dudm90ZUJ5SWQiLCJhcmlhLWxhYmVsIiwiQXBwIiwiUmVhY3QiLCJfcHJvcHMkZm9udFNpemUiLCJodG1sQ29sb3IiLCJ0aXRsZUFjY2VzcyIsIl9wcm9wcyR2aWV3Qm94Iiwidmlld0JveCIsImZvY3VzYWJsZSIsImZpbGwiLCJjb2xvckFjdGlvbiIsImNvbG9yRGlzYWJsZWQiLCJmb250U2l6ZUluaGVyaXQiLCJmb250U2l6ZVNtYWxsIiwiZm9udFNpemVMYXJnZSJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNu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RUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxHQUFJLElBQUssRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxHQUFJLElBQUssRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxHQUFJLElBQUssRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxHQUFJLElBQUssRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxHQUFJLElBQUssRUFBRyxF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QU9qSyxFQUFNZ0osUUFBUUksTUFBTU4sTUFJN0I0bEYsY0FBZSxDQUNiemtGLE1BQU9qSyxFQUFNZ0osUUFBUXJCLE9BQU9OLFVBSTlCc25GLGdCQUFpQixDQUNmdmpGLFNBQVUsV0FJWndqRixjQUFlLENBQ2J4akYsU0FBVXBMLEVBQU1nTCxXQUFXaUIsUUFBUSxLQUlyQzRpRixjQUFlLENBQ2J6akYsU0FBVXBMLEVBQU1nTCxXQUFXaUIsUUFBUSxRQW1HUCxDQUNoQ2xwQixLQUFNLGNBRE8sQ0FFWiIsImZpbGUiOiJjbGllbnQubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDEwOCk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59IiwiaW1wb3J0IG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIi4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSBvYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpO1xuICB2YXIga2V5LCBpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTtcbiAgICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSIsImZ1bmN0aW9uIHRvVmFsKG1peCkge1xuXHR2YXIgaywgeSwgc3RyPScnO1xuXG5cdGlmICh0eXBlb2YgbWl4ID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgbWl4ID09PSAnbnVtYmVyJykge1xuXHRcdHN0ciArPSBtaXg7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG1peCA9PT0gJ29iamVjdCcpIHtcblx0XHRpZiAoQXJyYXkuaXNBcnJheShtaXgpKSB7XG5cdFx0XHRmb3IgKGs9MDsgayA8IG1peC5sZW5ndGg7IGsrKykge1xuXHRcdFx0XHRpZiAobWl4W2tdKSB7XG5cdFx0XHRcdFx0aWYgKHkgPSB0b1ZhbChtaXhba10pKSB7XG5cdFx0XHRcdFx0XHRzdHIgJiYgKHN0ciArPSAnICcpO1xuXHRcdFx0XHRcdFx0c3RyICs9IHk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoayBpbiBtaXgpIHtcblx0XHRcdFx0aWYgKG1peFtrXSkge1xuXHRcdFx0XHRcdHN0ciAmJiAoc3RyICs9ICcgJyk7XG5cdFx0XHRcdFx0c3RyICs9IGs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gc3RyO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKSB7XG5cdHZhciBpPTAsIHRtcCwgeCwgc3RyPScnO1xuXHR3aGlsZSAoaSA8IGFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRpZiAodG1wID0gYXJndW1lbnRzW2krK10pIHtcblx0XHRcdGlmICh4ID0gdG9WYWwodG1wKSkge1xuXHRcdFx0XHRzdHIgJiYgKHN0ciArPSAnICcpO1xuXHRcdFx0XHRzdHIgKz0geFxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRyZXR1cm4gc3RyO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwidmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5leHBvcnQgdmFyIGlzQnJvd3NlciA9ICh0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2Yod2luZG93KSkgPT09IFwib2JqZWN0XCIgJiYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKGRvY3VtZW50KSkgPT09ICdvYmplY3QnICYmIGRvY3VtZW50Lm5vZGVUeXBlID09PSA5O1xuXG5leHBvcnQgZGVmYXVsdCBpc0Jyb3dzZXI7XG4iLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IGlzSW5Ccm93c2VyIGZyb20gJ2lzLWluLWJyb3dzZXInO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MnO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlJztcblxudmFyIHBsYWluT2JqZWN0Q29uc3RydXJjdG9yID0ge30uY29uc3RydWN0b3I7XG5mdW5jdGlvbiBjbG9uZVN0eWxlKHN0eWxlKSB7XG4gIGlmIChzdHlsZSA9PSBudWxsIHx8IHR5cGVvZiBzdHlsZSAhPT0gJ29iamVjdCcpIHJldHVybiBzdHlsZTtcbiAgaWYgKEFycmF5LmlzQXJyYXkoc3R5bGUpKSByZXR1cm4gc3R5bGUubWFwKGNsb25lU3R5bGUpO1xuICBpZiAoc3R5bGUuY29uc3RydWN0b3IgIT09IHBsYWluT2JqZWN0Q29uc3RydXJjdG9yKSByZXR1cm4gc3R5bGU7XG4gIHZhciBuZXdTdHlsZSA9IHt9O1xuXG4gIGZvciAodmFyIG5hbWUgaW4gc3R5bGUpIHtcbiAgICBuZXdTdHlsZVtuYW1lXSA9IGNsb25lU3R5bGUoc3R5bGVbbmFtZV0pO1xuICB9XG5cbiAgcmV0dXJuIG5ld1N0eWxlO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIHJ1bGUgaW5zdGFuY2UuXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlUnVsZShuYW1lLCBkZWNsLCBvcHRpb25zKSB7XG4gIGlmIChuYW1lID09PSB2b2lkIDApIHtcbiAgICBuYW1lID0gJ3VubmFtZWQnO1xuICB9XG5cbiAgdmFyIGpzcyA9IG9wdGlvbnMuanNzO1xuICB2YXIgZGVjbENvcHkgPSBjbG9uZVN0eWxlKGRlY2wpO1xuICB2YXIgcnVsZSA9IGpzcy5wbHVnaW5zLm9uQ3JlYXRlUnVsZShuYW1lLCBkZWNsQ29weSwgb3B0aW9ucyk7XG4gIGlmIChydWxlKSByZXR1cm4gcnVsZTsgLy8gSXQgaXMgYW4gYXQtcnVsZSBhbmQgaXQgaGFzIG5vIGluc3RhbmNlLlxuXG4gIGlmIChuYW1lWzBdID09PSAnQCcpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIFVua25vd24gcnVsZSBcIiArIG5hbWUpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbnZhciBqb2luID0gZnVuY3Rpb24gam9pbih2YWx1ZSwgYnkpIHtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAvLyBSZW1vdmUgIWltcG9ydGFudCBmcm9tIHRoZSB2YWx1ZSwgaXQgd2lsbCBiZSByZWFkZGVkIGxhdGVyLlxuICAgIGlmICh2YWx1ZVtpXSA9PT0gJyFpbXBvcnRhbnQnKSBicmVhaztcbiAgICBpZiAocmVzdWx0KSByZXN1bHQgKz0gYnk7XG4gICAgcmVzdWx0ICs9IHZhbHVlW2ldO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4vKipcbiAqIENvbnZlcnRzIGFycmF5IHZhbHVlcyB0byBzdHJpbmcuXG4gKlxuICogYG1hcmdpbjogW1snNXB4JywgJzEwcHgnXV1gID4gYG1hcmdpbjogNXB4IDEwcHg7YFxuICogYGJvcmRlcjogWycxcHgnLCAnMnB4J11gID4gYGJvcmRlcjogMXB4LCAycHg7YFxuICogYG1hcmdpbjogW1snNXB4JywgJzEwcHgnXSwgJyFpbXBvcnRhbnQnXWAgPiBgbWFyZ2luOiA1cHggMTBweCAhaW1wb3J0YW50O2BcbiAqIGBjb2xvcjogWydyZWQnLCAhaW1wb3J0YW50XWAgPiBgY29sb3I6IHJlZCAhaW1wb3J0YW50O2BcbiAqL1xuXG5cbmZ1bmN0aW9uIHRvQ3NzVmFsdWUodmFsdWUsIGlnbm9yZUltcG9ydGFudCkge1xuICBpZiAoaWdub3JlSW1wb3J0YW50ID09PSB2b2lkIDApIHtcbiAgICBpZ25vcmVJbXBvcnRhbnQgPSBmYWxzZTtcbiAgfVxuXG4gIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgdmFyIGNzc1ZhbHVlID0gJyc7IC8vIFN1cHBvcnQgc3BhY2Ugc2VwYXJhdGVkIHZhbHVlcyB2aWEgYFtbJzVweCcsICcxMHB4J11dYC5cblxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZVswXSkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodmFsdWVbaV0gPT09ICchaW1wb3J0YW50JykgYnJlYWs7XG4gICAgICBpZiAoY3NzVmFsdWUpIGNzc1ZhbHVlICs9ICcsICc7XG4gICAgICBjc3NWYWx1ZSArPSBqb2luKHZhbHVlW2ldLCAnICcpO1xuICAgIH1cbiAgfSBlbHNlIGNzc1ZhbHVlID0gam9pbih2YWx1ZSwgJywgJyk7IC8vIEFkZCAhaW1wb3J0YW50LCBiZWNhdXNlIGl0IHdhcyBpZ25vcmVkLlxuXG5cbiAgaWYgKCFpZ25vcmVJbXBvcnRhbnQgJiYgdmFsdWVbdmFsdWUubGVuZ3RoIC0gMV0gPT09ICchaW1wb3J0YW50Jykge1xuICAgIGNzc1ZhbHVlICs9ICcgIWltcG9ydGFudCc7XG4gIH1cblxuICByZXR1cm4gY3NzVmFsdWU7XG59XG5cbi8qKlxuICogSW5kZW50IGEgc3RyaW5nLlxuICogaHR0cDovL2pzcGVyZi5jb20vYXJyYXktam9pbi12cy1mb3JcbiAqL1xuZnVuY3Rpb24gaW5kZW50U3RyKHN0ciwgaW5kZW50KSB7XG4gIHZhciByZXN1bHQgPSAnJztcblxuICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgaW5kZW50OyBpbmRleCsrKSB7XG4gICAgcmVzdWx0ICs9ICcgICc7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0ICsgc3RyO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIFJ1bGUgdG8gQ1NTIHN0cmluZy5cbiAqL1xuXG5cbmZ1bmN0aW9uIHRvQ3NzKHNlbGVjdG9yLCBzdHlsZSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAoIXN0eWxlKSByZXR1cm4gcmVzdWx0O1xuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgX29wdGlvbnMkaW5kZW50ID0gX29wdGlvbnMuaW5kZW50LFxuICAgICAgaW5kZW50ID0gX29wdGlvbnMkaW5kZW50ID09PSB2b2lkIDAgPyAwIDogX29wdGlvbnMkaW5kZW50O1xuICB2YXIgZmFsbGJhY2tzID0gc3R5bGUuZmFsbGJhY2tzO1xuICBpZiAoc2VsZWN0b3IpIGluZGVudCsrOyAvLyBBcHBseSBmYWxsYmFja3MgZmlyc3QuXG5cbiAgaWYgKGZhbGxiYWNrcykge1xuICAgIC8vIEFycmF5IHN5bnRheCB7ZmFsbGJhY2tzOiBbe3Byb3A6IHZhbHVlfV19XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZmFsbGJhY2tzKSkge1xuICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGZhbGxiYWNrcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgdmFyIGZhbGxiYWNrID0gZmFsbGJhY2tzW2luZGV4XTtcblxuICAgICAgICBmb3IgKHZhciBwcm9wIGluIGZhbGxiYWNrKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gZmFsbGJhY2tbcHJvcF07XG5cbiAgICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHJlc3VsdCkgcmVzdWx0ICs9ICdcXG4nO1xuICAgICAgICAgICAgcmVzdWx0ICs9IFwiXCIgKyBpbmRlbnRTdHIocHJvcCArIFwiOiBcIiArIHRvQ3NzVmFsdWUodmFsdWUpICsgXCI7XCIsIGluZGVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE9iamVjdCBzeW50YXgge2ZhbGxiYWNrczoge3Byb3A6IHZhbHVlfX1cbiAgICAgIGZvciAodmFyIF9wcm9wIGluIGZhbGxiYWNrcykge1xuICAgICAgICB2YXIgX3ZhbHVlID0gZmFsbGJhY2tzW19wcm9wXTtcblxuICAgICAgICBpZiAoX3ZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICBpZiAocmVzdWx0KSByZXN1bHQgKz0gJ1xcbic7XG4gICAgICAgICAgcmVzdWx0ICs9IFwiXCIgKyBpbmRlbnRTdHIoX3Byb3AgKyBcIjogXCIgKyB0b0Nzc1ZhbHVlKF92YWx1ZSkgKyBcIjtcIiwgaW5kZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIF9wcm9wMiBpbiBzdHlsZSkge1xuICAgIHZhciBfdmFsdWUyID0gc3R5bGVbX3Byb3AyXTtcblxuICAgIGlmIChfdmFsdWUyICE9IG51bGwgJiYgX3Byb3AyICE9PSAnZmFsbGJhY2tzJykge1xuICAgICAgaWYgKHJlc3VsdCkgcmVzdWx0ICs9ICdcXG4nO1xuICAgICAgcmVzdWx0ICs9IFwiXCIgKyBpbmRlbnRTdHIoX3Byb3AyICsgXCI6IFwiICsgdG9Dc3NWYWx1ZShfdmFsdWUyKSArIFwiO1wiLCBpbmRlbnQpO1xuICAgIH1cbiAgfSAvLyBBbGxvdyBlbXB0eSBzdHlsZSBpbiB0aGlzIGNhc2UsIGJlY2F1c2UgcHJvcGVydGllcyB3aWxsIGJlIGFkZGVkIGR5bmFtaWNhbGx5LlxuXG5cbiAgaWYgKCFyZXN1bHQgJiYgIW9wdGlvbnMuYWxsb3dFbXB0eSkgcmV0dXJuIHJlc3VsdDsgLy8gV2hlbiBydWxlIGlzIGJlaW5nIHN0cmluZ2lmaWVkIGJlZm9yZSBzZWxlY3RvciB3YXMgZGVmaW5lZC5cblxuICBpZiAoIXNlbGVjdG9yKSByZXR1cm4gcmVzdWx0O1xuICBpbmRlbnQtLTtcbiAgaWYgKHJlc3VsdCkgcmVzdWx0ID0gXCJcXG5cIiArIHJlc3VsdCArIFwiXFxuXCI7XG4gIHJldHVybiBpbmRlbnRTdHIoc2VsZWN0b3IgKyBcIiB7XCIgKyByZXN1bHQsIGluZGVudCkgKyBpbmRlbnRTdHIoJ30nLCBpbmRlbnQpO1xufVxuXG52YXIgZXNjYXBlUmVnZXggPSAvKFtbXFxdLiMqJD48K349fF46KCksXCInYFxcc10pL2c7XG52YXIgbmF0aXZlRXNjYXBlID0gdHlwZW9mIENTUyAhPT0gJ3VuZGVmaW5lZCcgJiYgQ1NTLmVzY2FwZTtcbnZhciBlc2NhcGUgPSAoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gbmF0aXZlRXNjYXBlID8gbmF0aXZlRXNjYXBlKHN0cikgOiBzdHIucmVwbGFjZShlc2NhcGVSZWdleCwgJ1xcXFwkMScpO1xufSk7XG5cbnZhciBCYXNlU3R5bGVSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQmFzZVN0eWxlUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ3N0eWxlJztcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5zdHlsZSA9IHZvaWQgMDtcbiAgICB0aGlzLnJlbmRlcmVyID0gdm9pZCAwO1xuICAgIHRoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdmFyIHNoZWV0ID0gb3B0aW9ucy5zaGVldCxcbiAgICAgICAgUmVuZGVyZXIgPSBvcHRpb25zLlJlbmRlcmVyO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5zdHlsZSA9IHN0eWxlO1xuICAgIGlmIChzaGVldCkgdGhpcy5yZW5kZXJlciA9IHNoZWV0LnJlbmRlcmVyO2Vsc2UgaWYgKFJlbmRlcmVyKSB0aGlzLnJlbmRlcmVyID0gbmV3IFJlbmRlcmVyKCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBvciBzZXQgYSBzdHlsZSBwcm9wZXJ0eS5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gQmFzZVN0eWxlUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnByb3AgPSBmdW5jdGlvbiBwcm9wKG5hbWUsIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgLy8gSXQncyBhIGdldHRlci5cbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHRoaXMuc3R5bGVbbmFtZV07IC8vIERvbid0IGRvIGFueXRoaW5nIGlmIHRoZSB2YWx1ZSBoYXMgbm90IGNoYW5nZWQuXG5cbiAgICB2YXIgZm9yY2UgPSBvcHRpb25zID8gb3B0aW9ucy5mb3JjZSA6IGZhbHNlO1xuICAgIGlmICghZm9yY2UgJiYgdGhpcy5zdHlsZVtuYW1lXSA9PT0gdmFsdWUpIHJldHVybiB0aGlzO1xuICAgIHZhciBuZXdWYWx1ZSA9IHZhbHVlO1xuXG4gICAgaWYgKCFvcHRpb25zIHx8IG9wdGlvbnMucHJvY2VzcyAhPT0gZmFsc2UpIHtcbiAgICAgIG5ld1ZhbHVlID0gdGhpcy5vcHRpb25zLmpzcy5wbHVnaW5zLm9uQ2hhbmdlVmFsdWUodmFsdWUsIG5hbWUsIHRoaXMpO1xuICAgIH1cblxuICAgIHZhciBpc0VtcHR5ID0gbmV3VmFsdWUgPT0gbnVsbCB8fCBuZXdWYWx1ZSA9PT0gZmFsc2U7XG4gICAgdmFyIGlzRGVmaW5lZCA9IG5hbWUgaW4gdGhpcy5zdHlsZTsgLy8gVmFsdWUgaXMgZW1wdHkgYW5kIHdhc24ndCBkZWZpbmVkIGJlZm9yZS5cblxuICAgIGlmIChpc0VtcHR5ICYmICFpc0RlZmluZWQgJiYgIWZvcmNlKSByZXR1cm4gdGhpczsgLy8gV2UgYXJlIGdvaW5nIHRvIHJlbW92ZSB0aGlzIHZhbHVlLlxuXG4gICAgdmFyIHJlbW92ZSA9IGlzRW1wdHkgJiYgaXNEZWZpbmVkO1xuICAgIGlmIChyZW1vdmUpIGRlbGV0ZSB0aGlzLnN0eWxlW25hbWVdO2Vsc2UgdGhpcy5zdHlsZVtuYW1lXSA9IG5ld1ZhbHVlOyAvLyBSZW5kZXJhYmxlIGlzIGRlZmluZWQgaWYgU3R5bGVTaGVldCBvcHRpb24gYGxpbmtgIGlzIHRydWUuXG5cbiAgICBpZiAodGhpcy5yZW5kZXJhYmxlICYmIHRoaXMucmVuZGVyZXIpIHtcbiAgICAgIGlmIChyZW1vdmUpIHRoaXMucmVuZGVyZXIucmVtb3ZlUHJvcGVydHkodGhpcy5yZW5kZXJhYmxlLCBuYW1lKTtlbHNlIHRoaXMucmVuZGVyZXIuc2V0UHJvcGVydHkodGhpcy5yZW5kZXJhYmxlLCBuYW1lLCBuZXdWYWx1ZSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgc2hlZXQgPSB0aGlzLm9wdGlvbnMuc2hlZXQ7XG5cbiAgICBpZiAoc2hlZXQgJiYgc2hlZXQuYXR0YWNoZWQpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdbSlNTXSBSdWxlIGlzIG5vdCBsaW5rZWQuIE1pc3Npbmcgc2hlZXQgb3B0aW9uIFwibGluazogdHJ1ZVwiLicpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHJldHVybiBCYXNlU3R5bGVSdWxlO1xufSgpO1xudmFyIFN0eWxlUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0Jhc2VTdHlsZVJ1bGUpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3R5bGVSdWxlLCBfQmFzZVN0eWxlUnVsZSk7XG5cbiAgZnVuY3Rpb24gU3R5bGVSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9CYXNlU3R5bGVSdWxlLmNhbGwodGhpcywga2V5LCBzdHlsZSwgb3B0aW9ucykgfHwgdGhpcztcbiAgICBfdGhpcy5zZWxlY3RvclRleHQgPSB2b2lkIDA7XG4gICAgX3RoaXMuaWQgPSB2b2lkIDA7XG4gICAgX3RoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICB2YXIgc2VsZWN0b3IgPSBvcHRpb25zLnNlbGVjdG9yLFxuICAgICAgICBzY29wZWQgPSBvcHRpb25zLnNjb3BlZCxcbiAgICAgICAgc2hlZXQgPSBvcHRpb25zLnNoZWV0LFxuICAgICAgICBnZW5lcmF0ZUlkID0gb3B0aW9ucy5nZW5lcmF0ZUlkO1xuXG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICBfdGhpcy5zZWxlY3RvclRleHQgPSBzZWxlY3RvcjtcbiAgICB9IGVsc2UgaWYgKHNjb3BlZCAhPT0gZmFsc2UpIHtcbiAgICAgIF90aGlzLmlkID0gZ2VuZXJhdGVJZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgc2hlZXQpO1xuICAgICAgX3RoaXMuc2VsZWN0b3JUZXh0ID0gXCIuXCIgKyBlc2NhcGUoX3RoaXMuaWQpO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogU2V0IHNlbGVjdG9yIHN0cmluZy5cbiAgICogQXR0ZW50aW9uOiB1c2UgdGhpcyB3aXRoIGNhdXRpb24uIE1vc3QgYnJvd3NlcnMgZGlkbid0IGltcGxlbWVudFxuICAgKiBzZWxlY3RvclRleHQgc2V0dGVyLCBzbyB0aGlzIG1heSByZXN1bHQgaW4gcmVyZW5kZXJpbmcgb2YgZW50aXJlIFN0eWxlIFNoZWV0LlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8yID0gU3R5bGVSdWxlLnByb3RvdHlwZTtcblxuICAvKipcbiAgICogQXBwbHkgcnVsZSB0byBhbiBlbGVtZW50IGlubGluZS5cbiAgICovXG4gIF9wcm90bzIuYXBwbHlUbyA9IGZ1bmN0aW9uIGFwcGx5VG8ocmVuZGVyYWJsZSkge1xuICAgIHZhciByZW5kZXJlciA9IHRoaXMucmVuZGVyZXI7XG5cbiAgICBpZiAocmVuZGVyZXIpIHtcbiAgICAgIHZhciBqc29uID0gdGhpcy50b0pTT04oKTtcblxuICAgICAgZm9yICh2YXIgcHJvcCBpbiBqc29uKSB7XG4gICAgICAgIHJlbmRlcmVyLnNldFByb3BlcnR5KHJlbmRlcmFibGUsIHByb3AsIGpzb25bcHJvcF0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIEpTT04gcmVwcmVzZW50YXRpb24gb2YgdGhlIHJ1bGUuXG4gICAqIEZhbGxiYWNrcyBhcmUgbm90IHN1cHBvcnRlZC5cbiAgICogVXNlZnVsIGZvciBpbmxpbmUgc3R5bGVzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90bzIudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHZhciBqc29uID0ge307XG5cbiAgICBmb3IgKHZhciBwcm9wIGluIHRoaXMuc3R5bGUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHRoaXMuc3R5bGVbcHJvcF07XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JykganNvbltwcm9wXSA9IHZhbHVlO2Vsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSBqc29uW3Byb3BdID0gdG9Dc3NWYWx1ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGpzb247XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvMi50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICB2YXIgc2hlZXQgPSB0aGlzLm9wdGlvbnMuc2hlZXQ7XG4gICAgdmFyIGxpbmsgPSBzaGVldCA/IHNoZWV0Lm9wdGlvbnMubGluayA6IGZhbHNlO1xuICAgIHZhciBvcHRzID0gbGluayA/IF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBhbGxvd0VtcHR5OiB0cnVlXG4gICAgfSkgOiBvcHRpb25zO1xuICAgIHJldHVybiB0b0Nzcyh0aGlzLnNlbGVjdG9yVGV4dCwgdGhpcy5zdHlsZSwgb3B0cyk7XG4gIH07XG5cbiAgX2NyZWF0ZUNsYXNzKFN0eWxlUnVsZSwgW3tcbiAgICBrZXk6IFwic2VsZWN0b3JcIixcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChzZWxlY3Rvcikge1xuICAgICAgaWYgKHNlbGVjdG9yID09PSB0aGlzLnNlbGVjdG9yVGV4dCkgcmV0dXJuO1xuICAgICAgdGhpcy5zZWxlY3RvclRleHQgPSBzZWxlY3RvcjtcbiAgICAgIHZhciByZW5kZXJlciA9IHRoaXMucmVuZGVyZXIsXG4gICAgICAgICAgcmVuZGVyYWJsZSA9IHRoaXMucmVuZGVyYWJsZTtcbiAgICAgIGlmICghcmVuZGVyYWJsZSB8fCAhcmVuZGVyZXIpIHJldHVybjtcbiAgICAgIHZhciBoYXNDaGFuZ2VkID0gcmVuZGVyZXIuc2V0U2VsZWN0b3IocmVuZGVyYWJsZSwgc2VsZWN0b3IpOyAvLyBJZiBzZWxlY3RvciBzZXR0ZXIgaXMgbm90IGltcGxlbWVudGVkLCByZXJlbmRlciB0aGUgcnVsZS5cblxuICAgICAgaWYgKCFoYXNDaGFuZ2VkKSB7XG4gICAgICAgIHJlbmRlcmVyLnJlcGxhY2VSdWxlKHJlbmRlcmFibGUsIHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgc2VsZWN0b3Igc3RyaW5nLlxuICAgICAqL1xuICAgICxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnNlbGVjdG9yVGV4dDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU3R5bGVSdWxlO1xufShCYXNlU3R5bGVSdWxlKTtcbnZhciBwbHVnaW5TdHlsZVJ1bGUgPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKG5hbWUsIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgaWYgKG5hbWVbMF0gPT09ICdAJyB8fCBvcHRpb25zLnBhcmVudCAmJiBvcHRpb25zLnBhcmVudC50eXBlID09PSAna2V5ZnJhbWVzJykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBTdHlsZVJ1bGUobmFtZSwgc3R5bGUsIG9wdGlvbnMpO1xuICB9XG59O1xuXG52YXIgZGVmYXVsdFRvU3RyaW5nT3B0aW9ucyA9IHtcbiAgaW5kZW50OiAxLFxuICBjaGlsZHJlbjogdHJ1ZVxufTtcbnZhciBhdFJlZ0V4cCA9IC9AKFtcXHctXSspLztcbi8qKlxuICogQ29uZGl0aW9uYWwgcnVsZSBmb3IgQG1lZGlhLCBAc3VwcG9ydHNcbiAqL1xuXG52YXIgQ29uZGl0aW9uYWxSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ29uZGl0aW9uYWxSdWxlKGtleSwgc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ2NvbmRpdGlvbmFsJztcbiAgICB0aGlzLmF0ID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMucXVlcnkgPSB2b2lkIDA7XG4gICAgdGhpcy5ydWxlcyA9IHZvaWQgMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgIHRoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICB0aGlzLmtleSA9IGtleTsgLy8gS2V5IG1pZ2h0IGNvbnRhaW4gYSB1bmlxdWUgc3VmZml4IGluIGNhc2UgdGhlIGBuYW1lYCBwYXNzZWQgYnkgdXNlciB3YXMgZHVwbGljYXRlLlxuXG4gICAgdGhpcy5xdWVyeSA9IG9wdGlvbnMubmFtZTtcbiAgICB2YXIgYXRNYXRjaCA9IGtleS5tYXRjaChhdFJlZ0V4cCk7XG4gICAgdGhpcy5hdCA9IGF0TWF0Y2ggPyBhdE1hdGNoWzFdIDogJ3Vua25vd24nO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5ydWxlcyA9IG5ldyBSdWxlTGlzdChfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgcGFyZW50OiB0aGlzXG4gICAgfSkpO1xuXG4gICAgZm9yICh2YXIgbmFtZSBpbiBzdHlsZXMpIHtcbiAgICAgIHRoaXMucnVsZXMuYWRkKG5hbWUsIHN0eWxlc1tuYW1lXSk7XG4gICAgfVxuXG4gICAgdGhpcy5ydWxlcy5wcm9jZXNzKCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhIHJ1bGUuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IENvbmRpdGlvbmFsUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmdldFJ1bGUgPSBmdW5jdGlvbiBnZXRSdWxlKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5nZXQobmFtZSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBpbmRleCBvZiBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mKHJ1bGUpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5pbmRleE9mKHJ1bGUpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYW5kIHJlZ2lzdGVyIHJ1bGUsIHJ1biBwbHVnaW5zLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5hZGRSdWxlID0gZnVuY3Rpb24gYWRkUnVsZShuYW1lLCBzdHlsZSwgb3B0aW9ucykge1xuICAgIHZhciBydWxlID0gdGhpcy5ydWxlcy5hZGQobmFtZSwgc3R5bGUsIG9wdGlvbnMpO1xuICAgIGlmICghcnVsZSkgcmV0dXJuIG51bGw7XG4gICAgdGhpcy5vcHRpb25zLmpzcy5wbHVnaW5zLm9uUHJvY2Vzc1J1bGUocnVsZSk7XG4gICAgcmV0dXJuIHJ1bGU7XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSBkZWZhdWx0VG9TdHJpbmdPcHRpb25zO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmluZGVudCA9PSBudWxsKSBvcHRpb25zLmluZGVudCA9IGRlZmF1bHRUb1N0cmluZ09wdGlvbnMuaW5kZW50O1xuICAgIGlmIChvcHRpb25zLmNoaWxkcmVuID09IG51bGwpIG9wdGlvbnMuY2hpbGRyZW4gPSBkZWZhdWx0VG9TdHJpbmdPcHRpb25zLmNoaWxkcmVuO1xuXG4gICAgaWYgKG9wdGlvbnMuY2hpbGRyZW4gPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gdGhpcy5xdWVyeSArIFwiIHt9XCI7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5ydWxlcy50b1N0cmluZyhvcHRpb25zKTtcbiAgICByZXR1cm4gY2hpbGRyZW4gPyB0aGlzLnF1ZXJ5ICsgXCIge1xcblwiICsgY2hpbGRyZW4gKyBcIlxcbn1cIiA6ICcnO1xuICB9O1xuXG4gIHJldHVybiBDb25kaXRpb25hbFJ1bGU7XG59KCk7XG52YXIga2V5UmVnRXhwID0gL0BtZWRpYXxAc3VwcG9ydHNcXHMrLztcbnZhciBwbHVnaW5Db25kaXRpb25hbFJ1bGUgPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKGtleSwgc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGtleVJlZ0V4cC50ZXN0KGtleSkgPyBuZXcgQ29uZGl0aW9uYWxSdWxlKGtleSwgc3R5bGVzLCBvcHRpb25zKSA6IG51bGw7XG4gIH1cbn07XG5cbnZhciBkZWZhdWx0VG9TdHJpbmdPcHRpb25zJDEgPSB7XG4gIGluZGVudDogMSxcbiAgY2hpbGRyZW46IHRydWVcbn07XG52YXIgbmFtZVJlZ0V4cCA9IC9Aa2V5ZnJhbWVzXFxzKyhbXFx3LV0rKS87XG4vKipcbiAqIFJ1bGUgZm9yIEBrZXlmcmFtZXNcbiAqL1xuXG52YXIgS2V5ZnJhbWVzUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEtleWZyYW1lc1J1bGUoa2V5LCBmcmFtZXMsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAna2V5ZnJhbWVzJztcbiAgICB0aGlzLmF0ID0gJ0BrZXlmcmFtZXMnO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMubmFtZSA9IHZvaWQgMDtcbiAgICB0aGlzLmlkID0gdm9pZCAwO1xuICAgIHRoaXMucnVsZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5vcHRpb25zID0gdm9pZCAwO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICB0aGlzLnJlbmRlcmFibGUgPSB2b2lkIDA7XG4gICAgdmFyIG5hbWVNYXRjaCA9IGtleS5tYXRjaChuYW1lUmVnRXhwKTtcblxuICAgIGlmIChuYW1lTWF0Y2ggJiYgbmFtZU1hdGNoWzFdKSB7XG4gICAgICB0aGlzLm5hbWUgPSBuYW1lTWF0Y2hbMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubmFtZSA9ICdub25hbWUnO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBCYWQga2V5ZnJhbWVzIG5hbWUgXCIgKyBrZXkpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIHRoaXMua2V5ID0gdGhpcy50eXBlICsgXCItXCIgKyB0aGlzLm5hbWU7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB2YXIgc2NvcGVkID0gb3B0aW9ucy5zY29wZWQsXG4gICAgICAgIHNoZWV0ID0gb3B0aW9ucy5zaGVldCxcbiAgICAgICAgZ2VuZXJhdGVJZCA9IG9wdGlvbnMuZ2VuZXJhdGVJZDtcbiAgICB0aGlzLmlkID0gc2NvcGVkID09PSBmYWxzZSA/IHRoaXMubmFtZSA6IGVzY2FwZShnZW5lcmF0ZUlkKHRoaXMsIHNoZWV0KSk7XG4gICAgdGhpcy5ydWxlcyA9IG5ldyBSdWxlTGlzdChfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgcGFyZW50OiB0aGlzXG4gICAgfSkpO1xuXG4gICAgZm9yICh2YXIgbmFtZSBpbiBmcmFtZXMpIHtcbiAgICAgIHRoaXMucnVsZXMuYWRkKG5hbWUsIGZyYW1lc1tuYW1lXSwgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgICAgcGFyZW50OiB0aGlzXG4gICAgICB9KSk7XG4gICAgfVxuXG4gICAgdGhpcy5ydWxlcy5wcm9jZXNzKCk7XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IEtleWZyYW1lc1J1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0gZGVmYXVsdFRvU3RyaW5nT3B0aW9ucyQxO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmluZGVudCA9PSBudWxsKSBvcHRpb25zLmluZGVudCA9IGRlZmF1bHRUb1N0cmluZ09wdGlvbnMkMS5pbmRlbnQ7XG4gICAgaWYgKG9wdGlvbnMuY2hpbGRyZW4gPT0gbnVsbCkgb3B0aW9ucy5jaGlsZHJlbiA9IGRlZmF1bHRUb1N0cmluZ09wdGlvbnMkMS5jaGlsZHJlbjtcblxuICAgIGlmIChvcHRpb25zLmNoaWxkcmVuID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIHRoaXMuYXQgKyBcIiBcIiArIHRoaXMuaWQgKyBcIiB7fVwiO1xuICAgIH1cblxuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucnVsZXMudG9TdHJpbmcob3B0aW9ucyk7XG4gICAgaWYgKGNoaWxkcmVuKSBjaGlsZHJlbiA9IFwiXFxuXCIgKyBjaGlsZHJlbiArIFwiXFxuXCI7XG4gICAgcmV0dXJuIHRoaXMuYXQgKyBcIiBcIiArIHRoaXMuaWQgKyBcIiB7XCIgKyBjaGlsZHJlbiArIFwifVwiO1xuICB9O1xuXG4gIHJldHVybiBLZXlmcmFtZXNSdWxlO1xufSgpO1xudmFyIGtleVJlZ0V4cCQxID0gL0BrZXlmcmFtZXNcXHMrLztcbnZhciByZWZSZWdFeHAgPSAvXFwkKFtcXHctXSspL2c7XG5cbnZhciBmaW5kUmVmZXJlbmNlZEtleWZyYW1lID0gZnVuY3Rpb24gZmluZFJlZmVyZW5jZWRLZXlmcmFtZSh2YWwsIGtleWZyYW1lcykge1xuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsLnJlcGxhY2UocmVmUmVnRXhwLCBmdW5jdGlvbiAobWF0Y2gsIG5hbWUpIHtcbiAgICAgIGlmIChuYW1lIGluIGtleWZyYW1lcykge1xuICAgICAgICByZXR1cm4ga2V5ZnJhbWVzW25hbWVdO1xuICAgICAgfVxuXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIFJlZmVyZW5jZWQga2V5ZnJhbWVzIHJ1bGUgXFxcIlwiICsgbmFtZSArIFwiXFxcIiBpcyBub3QgZGVmaW5lZC5cIikgOiB2b2lkIDA7XG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gdmFsO1xufTtcbi8qKlxuICogUmVwbGFjZSB0aGUgcmVmZXJlbmNlIGZvciBhIGFuaW1hdGlvbiBuYW1lLlxuICovXG5cblxudmFyIHJlcGxhY2VSZWYgPSBmdW5jdGlvbiByZXBsYWNlUmVmKHN0eWxlLCBwcm9wLCBrZXlmcmFtZXMpIHtcbiAgdmFyIHZhbHVlID0gc3R5bGVbcHJvcF07XG4gIHZhciByZWZLZXlmcmFtZSA9IGZpbmRSZWZlcmVuY2VkS2V5ZnJhbWUodmFsdWUsIGtleWZyYW1lcyk7XG5cbiAgaWYgKHJlZktleWZyYW1lICE9PSB2YWx1ZSkge1xuICAgIHN0eWxlW3Byb3BdID0gcmVmS2V5ZnJhbWU7XG4gIH1cbn07XG5cbnZhciBwbHVnaW4gPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKGtleSwgZnJhbWVzLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIGtleVJlZ0V4cCQxLnRlc3Qoa2V5KSA/IG5ldyBLZXlmcmFtZXNSdWxlKGtleSwgZnJhbWVzLCBvcHRpb25zKSA6IG51bGw7XG4gIH0sXG4gIC8vIEFuaW1hdGlvbiBuYW1lIHJlZiByZXBsYWNlci5cbiAgb25Qcm9jZXNzU3R5bGU6IGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlLCBzaGVldCkge1xuICAgIGlmIChydWxlLnR5cGUgIT09ICdzdHlsZScgfHwgIXNoZWV0KSByZXR1cm4gc3R5bGU7XG4gICAgaWYgKCdhbmltYXRpb24tbmFtZScgaW4gc3R5bGUpIHJlcGxhY2VSZWYoc3R5bGUsICdhbmltYXRpb24tbmFtZScsIHNoZWV0LmtleWZyYW1lcyk7XG4gICAgaWYgKCdhbmltYXRpb24nIGluIHN0eWxlKSByZXBsYWNlUmVmKHN0eWxlLCAnYW5pbWF0aW9uJywgc2hlZXQua2V5ZnJhbWVzKTtcbiAgICByZXR1cm4gc3R5bGU7XG4gIH0sXG4gIG9uQ2hhbmdlVmFsdWU6IGZ1bmN0aW9uIG9uQ2hhbmdlVmFsdWUodmFsLCBwcm9wLCBydWxlKSB7XG4gICAgdmFyIHNoZWV0ID0gcnVsZS5vcHRpb25zLnNoZWV0O1xuXG4gICAgaWYgKCFzaGVldCkge1xuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHByb3ApIHtcbiAgICAgIGNhc2UgJ2FuaW1hdGlvbic6XG4gICAgICAgIHJldHVybiBmaW5kUmVmZXJlbmNlZEtleWZyYW1lKHZhbCwgc2hlZXQua2V5ZnJhbWVzKTtcblxuICAgICAgY2FzZSAnYW5pbWF0aW9uLW5hbWUnOlxuICAgICAgICByZXR1cm4gZmluZFJlZmVyZW5jZWRLZXlmcmFtZSh2YWwsIHNoZWV0LmtleWZyYW1lcyk7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuICB9XG59O1xuXG52YXIgS2V5ZnJhbWVSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQmFzZVN0eWxlUnVsZSkge1xuICBfaW5oZXJpdHNMb29zZShLZXlmcmFtZVJ1bGUsIF9CYXNlU3R5bGVSdWxlKTtcblxuICBmdW5jdGlvbiBLZXlmcmFtZVJ1bGUoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX0Jhc2VTdHlsZVJ1bGUuY2FsbC5hcHBseShfQmFzZVN0eWxlUnVsZSwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBLZXlmcmFtZVJ1bGUucHJvdG90eXBlO1xuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIHZhciBzaGVldCA9IHRoaXMub3B0aW9ucy5zaGVldDtcbiAgICB2YXIgbGluayA9IHNoZWV0ID8gc2hlZXQub3B0aW9ucy5saW5rIDogZmFsc2U7XG4gICAgdmFyIG9wdHMgPSBsaW5rID8gX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIGFsbG93RW1wdHk6IHRydWVcbiAgICB9KSA6IG9wdGlvbnM7XG4gICAgcmV0dXJuIHRvQ3NzKHRoaXMua2V5LCB0aGlzLnN0eWxlLCBvcHRzKTtcbiAgfTtcblxuICByZXR1cm4gS2V5ZnJhbWVSdWxlO1xufShCYXNlU3R5bGVSdWxlKTtcbnZhciBwbHVnaW5LZXlmcmFtZVJ1bGUgPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5wYXJlbnQgJiYgb3B0aW9ucy5wYXJlbnQudHlwZSA9PT0gJ2tleWZyYW1lcycpIHtcbiAgICAgIHJldHVybiBuZXcgS2V5ZnJhbWVSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG59O1xuXG52YXIgRm9udEZhY2VSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRm9udEZhY2VSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAnZm9udC1mYWNlJztcbiAgICB0aGlzLmF0ID0gJ0Bmb250LWZhY2UnO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMuc3R5bGUgPSB2b2lkIDA7XG4gICAgdGhpcy5vcHRpb25zID0gdm9pZCAwO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICB0aGlzLnJlbmRlcmFibGUgPSB2b2lkIDA7XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy5zdHlsZSA9IHN0eWxlO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IEZvbnRGYWNlUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuc3R5bGUpKSB7XG4gICAgICB2YXIgc3RyID0gJyc7XG5cbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnN0eWxlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBzdHIgKz0gdG9Dc3ModGhpcy5hdCwgdGhpcy5zdHlsZVtpbmRleF0pO1xuICAgICAgICBpZiAodGhpcy5zdHlsZVtpbmRleCArIDFdKSBzdHIgKz0gJ1xcbic7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRvQ3NzKHRoaXMuYXQsIHRoaXMuc3R5bGUsIG9wdGlvbnMpO1xuICB9O1xuXG4gIHJldHVybiBGb250RmFjZVJ1bGU7XG59KCk7XG52YXIga2V5UmVnRXhwJDIgPSAvQGZvbnQtZmFjZS87XG52YXIgcGx1Z2luRm9udEZhY2VSdWxlID0ge1xuICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGtleVJlZ0V4cCQyLnRlc3Qoa2V5KSA/IG5ldyBGb250RmFjZVJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykgOiBudWxsO1xuICB9XG59O1xuXG52YXIgVmlld3BvcnRSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gVmlld3BvcnRSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAndmlld3BvcnQnO1xuICAgIHRoaXMuYXQgPSAnQHZpZXdwb3J0JztcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLnN0eWxlID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMuc3R5bGUgPSBzdHlsZTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBWaWV3cG9ydFJ1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdG9Dc3ModGhpcy5rZXksIHRoaXMuc3R5bGUsIG9wdGlvbnMpO1xuICB9O1xuXG4gIHJldHVybiBWaWV3cG9ydFJ1bGU7XG59KCk7XG52YXIgcGx1Z2luVmlld3BvcnRSdWxlID0ge1xuICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGtleSA9PT0gJ0B2aWV3cG9ydCcgfHwga2V5ID09PSAnQC1tcy12aWV3cG9ydCcgPyBuZXcgVmlld3BvcnRSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIDogbnVsbDtcbiAgfVxufTtcblxudmFyIFNpbXBsZVJ1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTaW1wbGVSdWxlKGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAnc2ltcGxlJztcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLnZhbHVlID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG5cblxuICB2YXIgX3Byb3RvID0gU2ltcGxlUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMudmFsdWUpKSB7XG4gICAgICB2YXIgc3RyID0gJyc7XG5cbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnZhbHVlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBzdHIgKz0gdGhpcy5rZXkgKyBcIiBcIiArIHRoaXMudmFsdWVbaW5kZXhdICsgXCI7XCI7XG4gICAgICAgIGlmICh0aGlzLnZhbHVlW2luZGV4ICsgMV0pIHN0ciArPSAnXFxuJztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5rZXkgKyBcIiBcIiArIHRoaXMudmFsdWUgKyBcIjtcIjtcbiAgfTtcblxuICByZXR1cm4gU2ltcGxlUnVsZTtcbn0oKTtcbnZhciBrZXlzTWFwID0ge1xuICAnQGNoYXJzZXQnOiB0cnVlLFxuICAnQGltcG9ydCc6IHRydWUsXG4gICdAbmFtZXNwYWNlJzogdHJ1ZVxufTtcbnZhciBwbHVnaW5TaW1wbGVSdWxlID0ge1xuICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGtleSBpbiBrZXlzTWFwID8gbmV3IFNpbXBsZVJ1bGUoa2V5LCB2YWx1ZSwgb3B0aW9ucykgOiBudWxsO1xuICB9XG59O1xuXG52YXIgcGx1Z2lucyA9IFtwbHVnaW5TdHlsZVJ1bGUsIHBsdWdpbkNvbmRpdGlvbmFsUnVsZSwgcGx1Z2luLCBwbHVnaW5LZXlmcmFtZVJ1bGUsIHBsdWdpbkZvbnRGYWNlUnVsZSwgcGx1Z2luVmlld3BvcnRSdWxlLCBwbHVnaW5TaW1wbGVSdWxlXTtcblxudmFyIGRlZmF1bHRVcGRhdGVPcHRpb25zID0ge1xuICBwcm9jZXNzOiB0cnVlXG59O1xudmFyIGZvcmNlVXBkYXRlT3B0aW9ucyA9IHtcbiAgZm9yY2U6IHRydWUsXG4gIHByb2Nlc3M6IHRydWVcbiAgLyoqXG4gICAqIENvbnRhaW5zIHJ1bGVzIG9iamVjdHMgYW5kIGFsbG93cyBhZGRpbmcvcmVtb3ZpbmcgZXRjLlxuICAgKiBJcyB1c2VkIGZvciBlLmcuIGJ5IGBTdHlsZVNoZWV0YCBvciBgQ29uZGl0aW9uYWxSdWxlYC5cbiAgICovXG5cbn07XG5cbnZhciBSdWxlTGlzdCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIC8vIFJ1bGVzIHJlZ2lzdHJ5IGZvciBhY2Nlc3MgYnkgLmdldCgpIG1ldGhvZC5cbiAgLy8gSXQgY29udGFpbnMgdGhlIHNhbWUgcnVsZSByZWdpc3RlcmVkIGJ5IG5hbWUgYW5kIGJ5IHNlbGVjdG9yLlxuICAvLyBPcmlnaW5hbCBzdHlsZXMgb2JqZWN0LlxuICAvLyBVc2VkIHRvIGVuc3VyZSBjb3JyZWN0IHJ1bGVzIG9yZGVyLlxuICBmdW5jdGlvbiBSdWxlTGlzdChvcHRpb25zKSB7XG4gICAgdGhpcy5tYXAgPSB7fTtcbiAgICB0aGlzLnJhdyA9IHt9O1xuICAgIHRoaXMuaW5kZXggPSBbXTtcbiAgICB0aGlzLmNvdW50ZXIgPSAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmNsYXNzZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5rZXlmcmFtZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLmNsYXNzZXMgPSBvcHRpb25zLmNsYXNzZXM7XG4gICAgdGhpcy5rZXlmcmFtZXMgPSBvcHRpb25zLmtleWZyYW1lcztcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGFuZCByZWdpc3RlciBydWxlLlxuICAgKlxuICAgKiBXaWxsIG5vdCByZW5kZXIgYWZ0ZXIgU3R5bGUgU2hlZXQgd2FzIHJlbmRlcmVkIHRoZSBmaXJzdCB0aW1lLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBSdWxlTGlzdC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmFkZCA9IGZ1bmN0aW9uIGFkZChuYW1lLCBkZWNsLCBydWxlT3B0aW9ucykge1xuICAgIHZhciBfdGhpcyRvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICBwYXJlbnQgPSBfdGhpcyRvcHRpb25zLnBhcmVudCxcbiAgICAgICAgc2hlZXQgPSBfdGhpcyRvcHRpb25zLnNoZWV0LFxuICAgICAgICBqc3MgPSBfdGhpcyRvcHRpb25zLmpzcyxcbiAgICAgICAgUmVuZGVyZXIgPSBfdGhpcyRvcHRpb25zLlJlbmRlcmVyLFxuICAgICAgICBnZW5lcmF0ZUlkID0gX3RoaXMkb3B0aW9ucy5nZW5lcmF0ZUlkLFxuICAgICAgICBzY29wZWQgPSBfdGhpcyRvcHRpb25zLnNjb3BlZDtcblxuICAgIHZhciBvcHRpb25zID0gX2V4dGVuZHMoe1xuICAgICAgY2xhc3NlczogdGhpcy5jbGFzc2VzLFxuICAgICAgcGFyZW50OiBwYXJlbnQsXG4gICAgICBzaGVldDogc2hlZXQsXG4gICAgICBqc3M6IGpzcyxcbiAgICAgIFJlbmRlcmVyOiBSZW5kZXJlcixcbiAgICAgIGdlbmVyYXRlSWQ6IGdlbmVyYXRlSWQsXG4gICAgICBzY29wZWQ6IHNjb3BlZCxcbiAgICAgIG5hbWU6IG5hbWVcbiAgICB9LCBydWxlT3B0aW9ucyk7IC8vIFdoZW4gdXNlciB1c2VzIC5jcmVhdGVTdHlsZVNoZWV0KCksIGR1cGxpY2F0ZSBuYW1lcyBhcmUgbm90IHBvc3NpYmxlLCBidXRcbiAgICAvLyBgc2hlZXQuYWRkUnVsZSgpYCBvcGVucyB0aGUgZG9vciBmb3IgYW55IGR1cGxpY2F0ZSBydWxlIG5hbWUuIFdoZW4gdGhpcyBoYXBwZW5zXG4gICAgLy8gd2UgbmVlZCB0byBtYWtlIHRoZSBrZXkgdW5pcXVlIHdpdGhpbiB0aGlzIFJ1bGVMaXN0IGluc3RhbmNlIHNjb3BlLlxuXG5cbiAgICB2YXIga2V5ID0gbmFtZTtcblxuICAgIGlmIChuYW1lIGluIHRoaXMucmF3KSB7XG4gICAgICBrZXkgPSBuYW1lICsgXCItZFwiICsgdGhpcy5jb3VudGVyKys7XG4gICAgfSAvLyBXZSBuZWVkIHRvIHNhdmUgdGhlIG9yaWdpbmFsIGRlY2wgYmVmb3JlIGNyZWF0aW5nIHRoZSBydWxlXG4gICAgLy8gYmVjYXVzZSBjYWNoZSBwbHVnaW4gbmVlZHMgdG8gdXNlIGl0IGFzIGEga2V5IHRvIHJldHVybiBhIGNhY2hlZCBydWxlLlxuXG5cbiAgICB0aGlzLnJhd1trZXldID0gZGVjbDtcblxuICAgIGlmIChrZXkgaW4gdGhpcy5jbGFzc2VzKSB7XG4gICAgICAvLyBFLmcuIHJ1bGVzIGluc2lkZSBvZiBAbWVkaWEgY29udGFpbmVyXG4gICAgICBvcHRpb25zLnNlbGVjdG9yID0gXCIuXCIgKyBlc2NhcGUodGhpcy5jbGFzc2VzW2tleV0pO1xuICAgIH1cblxuICAgIHZhciBydWxlID0gY3JlYXRlUnVsZShrZXksIGRlY2wsIG9wdGlvbnMpO1xuICAgIGlmICghcnVsZSkgcmV0dXJuIG51bGw7XG4gICAgdGhpcy5yZWdpc3RlcihydWxlKTtcbiAgICB2YXIgaW5kZXggPSBvcHRpb25zLmluZGV4ID09PSB1bmRlZmluZWQgPyB0aGlzLmluZGV4Lmxlbmd0aCA6IG9wdGlvbnMuaW5kZXg7XG4gICAgdGhpcy5pbmRleC5zcGxpY2UoaW5kZXgsIDAsIHJ1bGUpO1xuICAgIHJldHVybiBydWxlO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5nZXQgPSBmdW5jdGlvbiBnZXQobmFtZSkge1xuICAgIHJldHVybiB0aGlzLm1hcFtuYW1lXTtcbiAgfVxuICAvKipcbiAgICogRGVsZXRlIGEgcnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKHJ1bGUpIHtcbiAgICB0aGlzLnVucmVnaXN0ZXIocnVsZSk7XG4gICAgZGVsZXRlIHRoaXMucmF3W3J1bGUua2V5XTtcbiAgICB0aGlzLmluZGV4LnNwbGljZSh0aGlzLmluZGV4LmluZGV4T2YocnVsZSksIDEpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgaW5kZXggb2YgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZihydWxlKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5kZXguaW5kZXhPZihydWxlKTtcbiAgfVxuICAvKipcbiAgICogUnVuIGBvblByb2Nlc3NSdWxlKClgIHBsdWdpbnMgb24gZXZlcnkgcnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucHJvY2VzcyA9IGZ1bmN0aW9uIHByb2Nlc3MoKSB7XG4gICAgdmFyIHBsdWdpbnMgPSB0aGlzLm9wdGlvbnMuanNzLnBsdWdpbnM7IC8vIFdlIG5lZWQgdG8gY2xvbmUgYXJyYXkgYmVjYXVzZSBpZiB3ZSBtb2RpZnkgdGhlIGluZGV4IHNvbWV3aGVyZSBlbHNlIGR1cmluZyBhIGxvb3BcbiAgICAvLyB3ZSBlbmQgdXAgd2l0aCB2ZXJ5IGhhcmQtdG8tdHJhY2stZG93biBzaWRlIGVmZmVjdHMuXG5cbiAgICB0aGlzLmluZGV4LnNsaWNlKDApLmZvckVhY2gocGx1Z2lucy5vblByb2Nlc3NSdWxlLCBwbHVnaW5zKTtcbiAgfVxuICAvKipcbiAgICogUmVnaXN0ZXIgYSBydWxlIGluIGAubWFwYCwgYC5jbGFzc2VzYCBhbmQgYC5rZXlmcmFtZXNgIG1hcHMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlZ2lzdGVyID0gZnVuY3Rpb24gcmVnaXN0ZXIocnVsZSkge1xuICAgIHRoaXMubWFwW3J1bGUua2V5XSA9IHJ1bGU7XG5cbiAgICBpZiAocnVsZSBpbnN0YW5jZW9mIFN0eWxlUnVsZSkge1xuICAgICAgdGhpcy5tYXBbcnVsZS5zZWxlY3Rvcl0gPSBydWxlO1xuICAgICAgaWYgKHJ1bGUuaWQpIHRoaXMuY2xhc3Nlc1tydWxlLmtleV0gPSBydWxlLmlkO1xuICAgIH0gZWxzZSBpZiAocnVsZSBpbnN0YW5jZW9mIEtleWZyYW1lc1J1bGUgJiYgdGhpcy5rZXlmcmFtZXMpIHtcbiAgICAgIHRoaXMua2V5ZnJhbWVzW3J1bGUubmFtZV0gPSBydWxlLmlkO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVW5yZWdpc3RlciBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVucmVnaXN0ZXIgPSBmdW5jdGlvbiB1bnJlZ2lzdGVyKHJ1bGUpIHtcbiAgICBkZWxldGUgdGhpcy5tYXBbcnVsZS5rZXldO1xuXG4gICAgaWYgKHJ1bGUgaW5zdGFuY2VvZiBTdHlsZVJ1bGUpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLm1hcFtydWxlLnNlbGVjdG9yXTtcbiAgICAgIGRlbGV0ZSB0aGlzLmNsYXNzZXNbcnVsZS5rZXldO1xuICAgIH0gZWxzZSBpZiAocnVsZSBpbnN0YW5jZW9mIEtleWZyYW1lc1J1bGUpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLmtleWZyYW1lc1tydWxlLm5hbWVdO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVXBkYXRlIHRoZSBmdW5jdGlvbiB2YWx1ZXMgd2l0aCBhIG5ldyBkYXRhLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgdmFyIG5hbWU7XG4gICAgdmFyIGRhdGE7XG4gICAgdmFyIG9wdGlvbnM7XG5cbiAgICBpZiAodHlwZW9mIChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pID09PSAnc3RyaW5nJykge1xuICAgICAgbmFtZSA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXTsgLy8gJEZsb3dGaXhNZVxuXG4gICAgICBkYXRhID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzFdOyAvLyAkRmxvd0ZpeE1lXG5cbiAgICAgIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDIgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMl07XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF07IC8vICRGbG93Rml4TWVcblxuICAgICAgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxXTtcbiAgICAgIG5hbWUgPSBudWxsO1xuICAgIH1cblxuICAgIGlmIChuYW1lKSB7XG4gICAgICB0aGlzLnVwZGF0ZU9uZSh0aGlzLm1hcFtuYW1lXSwgZGF0YSwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLmluZGV4Lmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICB0aGlzLnVwZGF0ZU9uZSh0aGlzLmluZGV4W2luZGV4XSwgZGF0YSwgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBFeGVjdXRlIHBsdWdpbnMsIHVwZGF0ZSBydWxlIHByb3BzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGVPbmUgPSBmdW5jdGlvbiB1cGRhdGVPbmUocnVsZSwgZGF0YSwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSBkZWZhdWx0VXBkYXRlT3B0aW9ucztcbiAgICB9XG5cbiAgICB2YXIgX3RoaXMkb3B0aW9uczIgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgIHBsdWdpbnMgPSBfdGhpcyRvcHRpb25zMi5qc3MucGx1Z2lucyxcbiAgICAgICAgc2hlZXQgPSBfdGhpcyRvcHRpb25zMi5zaGVldDsgLy8gSXQgaXMgYSBydWxlcyBjb250YWluZXIgbGlrZSBmb3IgZS5nLiBDb25kaXRpb25hbFJ1bGUuXG5cbiAgICBpZiAocnVsZS5ydWxlcyBpbnN0YW5jZW9mIFJ1bGVMaXN0KSB7XG4gICAgICBydWxlLnJ1bGVzLnVwZGF0ZShkYXRhLCBvcHRpb25zKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgc3R5bGVSdWxlID0gcnVsZTtcbiAgICB2YXIgc3R5bGUgPSBzdHlsZVJ1bGUuc3R5bGU7XG4gICAgcGx1Z2lucy5vblVwZGF0ZShkYXRhLCBydWxlLCBzaGVldCwgb3B0aW9ucyk7IC8vIFdlIHJlbHkgb24gYSBuZXcgYHN0eWxlYCByZWYgaW4gY2FzZSBpdCB3YXMgbXV0YXRlZCBkdXJpbmcgb25VcGRhdGUgaG9vay5cblxuICAgIGlmIChvcHRpb25zLnByb2Nlc3MgJiYgc3R5bGUgJiYgc3R5bGUgIT09IHN0eWxlUnVsZS5zdHlsZSkge1xuICAgICAgLy8gV2UgbmVlZCB0byBydW4gdGhlIHBsdWdpbnMgaW4gY2FzZSBuZXcgYHN0eWxlYCByZWxpZXMgb24gc3ludGF4IHBsdWdpbnMuXG4gICAgICBwbHVnaW5zLm9uUHJvY2Vzc1N0eWxlKHN0eWxlUnVsZS5zdHlsZSwgc3R5bGVSdWxlLCBzaGVldCk7IC8vIFVwZGF0ZSBhbmQgYWRkIHByb3BzLlxuXG4gICAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlUnVsZS5zdHlsZSkge1xuICAgICAgICB2YXIgbmV4dFZhbHVlID0gc3R5bGVSdWxlLnN0eWxlW3Byb3BdO1xuICAgICAgICB2YXIgcHJldlZhbHVlID0gc3R5bGVbcHJvcF07IC8vIFdlIG5lZWQgdG8gdXNlIGBmb3JjZTogdHJ1ZWAgYmVjYXVzZSBgcnVsZS5zdHlsZWAgaGFzIGJlZW4gdXBkYXRlZCBkdXJpbmcgb25VcGRhdGUgaG9vaywgc28gYHJ1bGUucHJvcCgpYCB3aWxsIG5vdCB1cGRhdGUgdGhlIENTU09NIHJ1bGUuXG4gICAgICAgIC8vIFdlIGRvIHRoaXMgY29tcGFyaXNvbiB0byBhdm9pZCB1bm5lZWRlZCBgcnVsZS5wcm9wKClgIGNhbGxzLCBzaW5jZSB3ZSBoYXZlIHRoZSBvbGQgYHN0eWxlYCBvYmplY3QgaGVyZS5cblxuICAgICAgICBpZiAobmV4dFZhbHVlICE9PSBwcmV2VmFsdWUpIHtcbiAgICAgICAgICBzdHlsZVJ1bGUucHJvcChwcm9wLCBuZXh0VmFsdWUsIGZvcmNlVXBkYXRlT3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gUmVtb3ZlIHByb3BzLlxuXG5cbiAgICAgIGZvciAodmFyIF9wcm9wIGluIHN0eWxlKSB7XG4gICAgICAgIHZhciBfbmV4dFZhbHVlID0gc3R5bGVSdWxlLnN0eWxlW19wcm9wXTtcbiAgICAgICAgdmFyIF9wcmV2VmFsdWUgPSBzdHlsZVtfcHJvcF07IC8vIFdlIG5lZWQgdG8gdXNlIGBmb3JjZTogdHJ1ZWAgYmVjYXVzZSBgcnVsZS5zdHlsZWAgaGFzIGJlZW4gdXBkYXRlZCBkdXJpbmcgb25VcGRhdGUgaG9vaywgc28gYHJ1bGUucHJvcCgpYCB3aWxsIG5vdCB1cGRhdGUgdGhlIENTU09NIHJ1bGUuXG4gICAgICAgIC8vIFdlIGRvIHRoaXMgY29tcGFyaXNvbiB0byBhdm9pZCB1bm5lZWRlZCBgcnVsZS5wcm9wKClgIGNhbGxzLCBzaW5jZSB3ZSBoYXZlIHRoZSBvbGQgYHN0eWxlYCBvYmplY3QgaGVyZS5cblxuICAgICAgICBpZiAoX25leHRWYWx1ZSA9PSBudWxsICYmIF9uZXh0VmFsdWUgIT09IF9wcmV2VmFsdWUpIHtcbiAgICAgICAgICBzdHlsZVJ1bGUucHJvcChfcHJvcCwgbnVsbCwgZm9yY2VVcGRhdGVPcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ29udmVydCBydWxlcyB0byBhIENTUyBzdHJpbmcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIHZhciBzdHIgPSAnJztcbiAgICB2YXIgc2hlZXQgPSB0aGlzLm9wdGlvbnMuc2hlZXQ7XG4gICAgdmFyIGxpbmsgPSBzaGVldCA/IHNoZWV0Lm9wdGlvbnMubGluayA6IGZhbHNlO1xuXG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuaW5kZXgubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICB2YXIgcnVsZSA9IHRoaXMuaW5kZXhbaW5kZXhdO1xuICAgICAgdmFyIGNzcyA9IHJ1bGUudG9TdHJpbmcob3B0aW9ucyk7IC8vIE5vIG5lZWQgdG8gcmVuZGVyIGFuIGVtcHR5IHJ1bGUuXG5cbiAgICAgIGlmICghY3NzICYmICFsaW5rKSBjb250aW51ZTtcbiAgICAgIGlmIChzdHIpIHN0ciArPSAnXFxuJztcbiAgICAgIHN0ciArPSBjc3M7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0cjtcbiAgfTtcblxuICByZXR1cm4gUnVsZUxpc3Q7XG59KCk7XG5cbnZhciBTdHlsZVNoZWV0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3R5bGVTaGVldChzdHlsZXMsIG9wdGlvbnMpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5kZXBsb3llZCA9IHZvaWQgMDtcbiAgICB0aGlzLmF0dGFjaGVkID0gdm9pZCAwO1xuICAgIHRoaXMucnVsZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5yZW5kZXJlciA9IHZvaWQgMDtcbiAgICB0aGlzLmNsYXNzZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5rZXlmcmFtZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5xdWV1ZSA9IHZvaWQgMDtcbiAgICB0aGlzLmF0dGFjaGVkID0gZmFsc2U7XG4gICAgdGhpcy5kZXBsb3llZCA9IGZhbHNlO1xuICAgIHRoaXMuY2xhc3NlcyA9IHt9O1xuICAgIHRoaXMua2V5ZnJhbWVzID0ge307XG4gICAgdGhpcy5vcHRpb25zID0gX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHNoZWV0OiB0aGlzLFxuICAgICAgcGFyZW50OiB0aGlzLFxuICAgICAgY2xhc3NlczogdGhpcy5jbGFzc2VzLFxuICAgICAga2V5ZnJhbWVzOiB0aGlzLmtleWZyYW1lc1xuICAgIH0pO1xuXG4gICAgaWYgKG9wdGlvbnMuUmVuZGVyZXIpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIgPSBuZXcgb3B0aW9ucy5SZW5kZXJlcih0aGlzKTtcbiAgICB9XG5cbiAgICB0aGlzLnJ1bGVzID0gbmV3IFJ1bGVMaXN0KHRoaXMub3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBuYW1lIGluIHN0eWxlcykge1xuICAgICAgdGhpcy5ydWxlcy5hZGQobmFtZSwgc3R5bGVzW25hbWVdKTtcbiAgICB9XG5cbiAgICB0aGlzLnJ1bGVzLnByb2Nlc3MoKTtcbiAgfVxuICAvKipcbiAgICogQXR0YWNoIHJlbmRlcmFibGUgdG8gdGhlIHJlbmRlciB0cmVlLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBTdHlsZVNoZWV0LnByb3RvdHlwZTtcblxuICBfcHJvdG8uYXR0YWNoID0gZnVuY3Rpb24gYXR0YWNoKCkge1xuICAgIGlmICh0aGlzLmF0dGFjaGVkKSByZXR1cm4gdGhpcztcbiAgICBpZiAodGhpcy5yZW5kZXJlcikgdGhpcy5yZW5kZXJlci5hdHRhY2goKTtcbiAgICB0aGlzLmF0dGFjaGVkID0gdHJ1ZTsgLy8gT3JkZXIgaXMgaW1wb3J0YW50LCBiZWNhdXNlIHdlIGNhbid0IHVzZSBpbnNlcnRSdWxlIEFQSSBpZiBzdHlsZSBlbGVtZW50IGlzIG5vdCBhdHRhY2hlZC5cblxuICAgIGlmICghdGhpcy5kZXBsb3llZCkgdGhpcy5kZXBsb3koKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIHJlbmRlcmFibGUgZnJvbSByZW5kZXIgdHJlZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGV0YWNoID0gZnVuY3Rpb24gZGV0YWNoKCkge1xuICAgIGlmICghdGhpcy5hdHRhY2hlZCkgcmV0dXJuIHRoaXM7XG4gICAgaWYgKHRoaXMucmVuZGVyZXIpIHRoaXMucmVuZGVyZXIuZGV0YWNoKCk7XG4gICAgdGhpcy5hdHRhY2hlZCA9IGZhbHNlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBBZGQgYSBydWxlIHRvIHRoZSBjdXJyZW50IHN0eWxlc2hlZXQuXG4gICAqIFdpbGwgaW5zZXJ0IGEgcnVsZSBhbHNvIGFmdGVyIHRoZSBzdHlsZXNoZWV0IGhhcyBiZWVuIHJlbmRlcmVkIGZpcnN0IHRpbWUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmFkZFJ1bGUgPSBmdW5jdGlvbiBhZGRSdWxlKG5hbWUsIGRlY2wsIG9wdGlvbnMpIHtcbiAgICB2YXIgcXVldWUgPSB0aGlzLnF1ZXVlOyAvLyBQbHVnaW5zIGNhbiBjcmVhdGUgcnVsZXMuXG4gICAgLy8gSW4gb3JkZXIgdG8gcHJlc2VydmUgdGhlIHJpZ2h0IG9yZGVyLCB3ZSBuZWVkIHRvIHF1ZXVlIGFsbCBgLmFkZFJ1bGVgIGNhbGxzLFxuICAgIC8vIHdoaWNoIGhhcHBlbiBhZnRlciB0aGUgZmlyc3QgYHJ1bGVzLmFkZCgpYCBjYWxsLlxuXG4gICAgaWYgKHRoaXMuYXR0YWNoZWQgJiYgIXF1ZXVlKSB0aGlzLnF1ZXVlID0gW107XG4gICAgdmFyIHJ1bGUgPSB0aGlzLnJ1bGVzLmFkZChuYW1lLCBkZWNsLCBvcHRpb25zKTtcbiAgICBpZiAoIXJ1bGUpIHJldHVybiBudWxsO1xuICAgIHRoaXMub3B0aW9ucy5qc3MucGx1Z2lucy5vblByb2Nlc3NSdWxlKHJ1bGUpO1xuXG4gICAgaWYgKHRoaXMuYXR0YWNoZWQpIHtcbiAgICAgIGlmICghdGhpcy5kZXBsb3llZCkgcmV0dXJuIHJ1bGU7IC8vIERvbid0IGluc2VydCBydWxlIGRpcmVjdGx5IGlmIHRoZXJlIGlzIG5vIHN0cmluZ2lmaWVkIHZlcnNpb24geWV0LlxuICAgICAgLy8gSXQgd2lsbCBiZSBpbnNlcnRlZCBhbGwgdG9nZXRoZXIgd2hlbiAuYXR0YWNoIGlzIGNhbGxlZC5cblxuICAgICAgaWYgKHF1ZXVlKSBxdWV1ZS5wdXNoKHJ1bGUpO2Vsc2Uge1xuICAgICAgICB0aGlzLmluc2VydFJ1bGUocnVsZSk7XG5cbiAgICAgICAgaWYgKHRoaXMucXVldWUpIHtcbiAgICAgICAgICB0aGlzLnF1ZXVlLmZvckVhY2godGhpcy5pbnNlcnRSdWxlLCB0aGlzKTtcbiAgICAgICAgICB0aGlzLnF1ZXVlID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcnVsZTtcbiAgICB9IC8vIFdlIGNhbid0IGFkZCBydWxlcyB0byBhIGRldGFjaGVkIHN0eWxlIG5vZGUuXG4gICAgLy8gV2Ugd2lsbCByZWRlcGxveSB0aGUgc2hlZXQgb25jZSB1c2VyIHdpbGwgYXR0YWNoIGl0LlxuXG5cbiAgICB0aGlzLmRlcGxveWVkID0gZmFsc2U7XG4gICAgcmV0dXJuIHJ1bGU7XG4gIH1cbiAgLyoqXG4gICAqIEluc2VydCBydWxlIGludG8gdGhlIFN0eWxlU2hlZXRcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaW5zZXJ0UnVsZSA9IGZ1bmN0aW9uIGluc2VydFJ1bGUocnVsZSkge1xuICAgIGlmICh0aGlzLnJlbmRlcmVyKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLmluc2VydFJ1bGUocnVsZSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYW5kIGFkZCBydWxlcy5cbiAgICogV2lsbCByZW5kZXIgYWxzbyBhZnRlciBTdHlsZSBTaGVldCB3YXMgcmVuZGVyZWQgdGhlIGZpcnN0IHRpbWUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmFkZFJ1bGVzID0gZnVuY3Rpb24gYWRkUnVsZXMoc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgdmFyIGFkZGVkID0gW107XG5cbiAgICBmb3IgKHZhciBuYW1lIGluIHN0eWxlcykge1xuICAgICAgdmFyIHJ1bGUgPSB0aGlzLmFkZFJ1bGUobmFtZSwgc3R5bGVzW25hbWVdLCBvcHRpb25zKTtcbiAgICAgIGlmIChydWxlKSBhZGRlZC5wdXNoKHJ1bGUpO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRlZDtcbiAgfVxuICAvKipcbiAgICogR2V0IGEgcnVsZSBieSBuYW1lLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5nZXRSdWxlID0gZnVuY3Rpb24gZ2V0UnVsZShuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMuZ2V0KG5hbWUpO1xuICB9XG4gIC8qKlxuICAgKiBEZWxldGUgYSBydWxlIGJ5IG5hbWUuXG4gICAqIFJldHVybnMgYHRydWVgOiBpZiBydWxlIGhhcyBiZWVuIGRlbGV0ZWQgZnJvbSB0aGUgRE9NLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kZWxldGVSdWxlID0gZnVuY3Rpb24gZGVsZXRlUnVsZShuYW1lKSB7XG4gICAgdmFyIHJ1bGUgPSB0eXBlb2YgbmFtZSA9PT0gJ29iamVjdCcgPyBuYW1lIDogdGhpcy5ydWxlcy5nZXQobmFtZSk7XG4gICAgaWYgKCFydWxlKSByZXR1cm4gZmFsc2U7XG4gICAgdGhpcy5ydWxlcy5yZW1vdmUocnVsZSk7XG5cbiAgICBpZiAodGhpcy5hdHRhY2hlZCAmJiBydWxlLnJlbmRlcmFibGUgJiYgdGhpcy5yZW5kZXJlcikge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZXIuZGVsZXRlUnVsZShydWxlLnJlbmRlcmFibGUpO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgaW5kZXggb2YgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZihydWxlKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMuaW5kZXhPZihydWxlKTtcbiAgfVxuICAvKipcbiAgICogRGVwbG95IHB1cmUgQ1NTIHN0cmluZyB0byBhIHJlbmRlcmFibGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRlcGxveSA9IGZ1bmN0aW9uIGRlcGxveSgpIHtcbiAgICBpZiAodGhpcy5yZW5kZXJlcikgdGhpcy5yZW5kZXJlci5kZXBsb3koKTtcbiAgICB0aGlzLmRlcGxveWVkID0gdHJ1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogVXBkYXRlIHRoZSBmdW5jdGlvbiB2YWx1ZXMgd2l0aCBhIG5ldyBkYXRhLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgdmFyIF90aGlzJHJ1bGVzO1xuXG4gICAgKF90aGlzJHJ1bGVzID0gdGhpcy5ydWxlcykudXBkYXRlLmFwcGx5KF90aGlzJHJ1bGVzLCBhcmd1bWVudHMpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIFVwZGF0ZXMgYSBzaW5nbGUgcnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udXBkYXRlT25lID0gZnVuY3Rpb24gdXBkYXRlT25lKHJ1bGUsIGRhdGEsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnJ1bGVzLnVwZGF0ZU9uZShydWxlLCBkYXRhLCBvcHRpb25zKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogQ29udmVydCBydWxlcyB0byBhIENTUyBzdHJpbmcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLnJ1bGVzLnRvU3RyaW5nKG9wdGlvbnMpO1xuICB9O1xuXG4gIHJldHVybiBTdHlsZVNoZWV0O1xufSgpO1xuXG52YXIgUGx1Z2luc1JlZ2lzdHJ5ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUGx1Z2luc1JlZ2lzdHJ5KCkge1xuICAgIHRoaXMucGx1Z2lucyA9IHtcbiAgICAgIGludGVybmFsOiBbXSxcbiAgICAgIGV4dGVybmFsOiBbXVxuICAgIH07XG4gICAgdGhpcy5yZWdpc3RyeSA9IHZvaWQgMDtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBQbHVnaW5zUmVnaXN0cnkucHJvdG90eXBlO1xuXG4gIC8qKlxuICAgKiBDYWxsIGBvbkNyZWF0ZVJ1bGVgIGhvb2tzIGFuZCByZXR1cm4gYW4gb2JqZWN0IGlmIHJldHVybmVkIGJ5IGEgaG9vay5cbiAgICovXG4gIF9wcm90by5vbkNyZWF0ZVJ1bGUgPSBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUobmFtZSwgZGVjbCwgb3B0aW9ucykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZWdpc3RyeS5vbkNyZWF0ZVJ1bGUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBydWxlID0gdGhpcy5yZWdpc3RyeS5vbkNyZWF0ZVJ1bGVbaV0obmFtZSwgZGVjbCwgb3B0aW9ucyk7XG4gICAgICBpZiAocnVsZSkgcmV0dXJuIHJ1bGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIENhbGwgYG9uUHJvY2Vzc1J1bGVgIGhvb2tzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5vblByb2Nlc3NSdWxlID0gZnVuY3Rpb24gb25Qcm9jZXNzUnVsZShydWxlKSB7XG4gICAgaWYgKHJ1bGUuaXNQcm9jZXNzZWQpIHJldHVybjtcbiAgICB2YXIgc2hlZXQgPSBydWxlLm9wdGlvbnMuc2hlZXQ7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVnaXN0cnkub25Qcm9jZXNzUnVsZS5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5yZWdpc3RyeS5vblByb2Nlc3NSdWxlW2ldKHJ1bGUsIHNoZWV0KTtcbiAgICB9XG5cbiAgICBpZiAocnVsZS5zdHlsZSkgdGhpcy5vblByb2Nlc3NTdHlsZShydWxlLnN0eWxlLCBydWxlLCBzaGVldCk7XG4gICAgcnVsZS5pc1Byb2Nlc3NlZCA9IHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIENhbGwgYG9uUHJvY2Vzc1N0eWxlYCBob29rcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ub25Qcm9jZXNzU3R5bGUgPSBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSwgc2hlZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVnaXN0cnkub25Qcm9jZXNzU3R5bGUubGVuZ3RoOyBpKyspIHtcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIHJ1bGUuc3R5bGUgPSB0aGlzLnJlZ2lzdHJ5Lm9uUHJvY2Vzc1N0eWxlW2ldKHJ1bGUuc3R5bGUsIHJ1bGUsIHNoZWV0KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENhbGwgYG9uUHJvY2Vzc1NoZWV0YCBob29rcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ub25Qcm9jZXNzU2hlZXQgPSBmdW5jdGlvbiBvblByb2Nlc3NTaGVldChzaGVldCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZWdpc3RyeS5vblByb2Nlc3NTaGVldC5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5yZWdpc3RyeS5vblByb2Nlc3NTaGVldFtpXShzaGVldCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDYWxsIGBvblVwZGF0ZWAgaG9va3MuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm9uVXBkYXRlID0gZnVuY3Rpb24gb25VcGRhdGUoZGF0YSwgcnVsZSwgc2hlZXQsIG9wdGlvbnMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVnaXN0cnkub25VcGRhdGUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMucmVnaXN0cnkub25VcGRhdGVbaV0oZGF0YSwgcnVsZSwgc2hlZXQsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ2FsbCBgb25DaGFuZ2VWYWx1ZWAgaG9va3MuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm9uQ2hhbmdlVmFsdWUgPSBmdW5jdGlvbiBvbkNoYW5nZVZhbHVlKHZhbHVlLCBwcm9wLCBydWxlKSB7XG4gICAgdmFyIHByb2Nlc3NlZFZhbHVlID0gdmFsdWU7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVnaXN0cnkub25DaGFuZ2VWYWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgcHJvY2Vzc2VkVmFsdWUgPSB0aGlzLnJlZ2lzdHJ5Lm9uQ2hhbmdlVmFsdWVbaV0ocHJvY2Vzc2VkVmFsdWUsIHByb3AsIHJ1bGUpO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9jZXNzZWRWYWx1ZTtcbiAgfVxuICAvKipcbiAgICogUmVnaXN0ZXIgYSBwbHVnaW4uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVzZSA9IGZ1bmN0aW9uIHVzZShuZXdQbHVnaW4sIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge1xuICAgICAgICBxdWV1ZTogJ2V4dGVybmFsJ1xuICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgcGx1Z2lucyA9IHRoaXMucGx1Z2luc1tvcHRpb25zLnF1ZXVlXTsgLy8gQXZvaWRzIGFwcGx5aW5nIHNhbWUgcGx1Z2luIHR3aWNlLCBhdCBsZWFzdCBiYXNlZCBvbiByZWYuXG5cbiAgICBpZiAocGx1Z2lucy5pbmRleE9mKG5ld1BsdWdpbikgIT09IC0xKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcGx1Z2lucy5wdXNoKG5ld1BsdWdpbik7XG4gICAgdGhpcy5yZWdpc3RyeSA9IFtdLmNvbmNhdCh0aGlzLnBsdWdpbnMuZXh0ZXJuYWwsIHRoaXMucGx1Z2lucy5pbnRlcm5hbCkucmVkdWNlKGZ1bmN0aW9uIChyZWdpc3RyeSwgcGx1Z2luKSB7XG4gICAgICBmb3IgKHZhciBuYW1lIGluIHBsdWdpbikge1xuICAgICAgICBpZiAobmFtZSBpbiByZWdpc3RyeSkge1xuICAgICAgICAgIHJlZ2lzdHJ5W25hbWVdLnB1c2gocGx1Z2luW25hbWVdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIFVua25vd24gaG9vayBcXFwiXCIgKyBuYW1lICsgXCJcXFwiLlwiKSA6IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVnaXN0cnk7XG4gICAgfSwge1xuICAgICAgb25DcmVhdGVSdWxlOiBbXSxcbiAgICAgIG9uUHJvY2Vzc1J1bGU6IFtdLFxuICAgICAgb25Qcm9jZXNzU3R5bGU6IFtdLFxuICAgICAgb25Qcm9jZXNzU2hlZXQ6IFtdLFxuICAgICAgb25DaGFuZ2VWYWx1ZTogW10sXG4gICAgICBvblVwZGF0ZTogW11cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gUGx1Z2luc1JlZ2lzdHJ5O1xufSgpO1xuXG4vKipcbiAqIFNoZWV0cyByZWdpc3RyeSB0byBhY2Nlc3MgdGhlbSBhbGwgYXQgb25lIHBsYWNlLlxuICovXG52YXIgU2hlZXRzUmVnaXN0cnkgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTaGVldHNSZWdpc3RyeSgpIHtcbiAgICB0aGlzLnJlZ2lzdHJ5ID0gW107XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU2hlZXRzUmVnaXN0cnkucHJvdG90eXBlO1xuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIFN0eWxlIFNoZWV0LlxuICAgKi9cbiAgX3Byb3RvLmFkZCA9IGZ1bmN0aW9uIGFkZChzaGVldCkge1xuICAgIHZhciByZWdpc3RyeSA9IHRoaXMucmVnaXN0cnk7XG4gICAgdmFyIGluZGV4ID0gc2hlZXQub3B0aW9ucy5pbmRleDtcbiAgICBpZiAocmVnaXN0cnkuaW5kZXhPZihzaGVldCkgIT09IC0xKSByZXR1cm47XG5cbiAgICBpZiAocmVnaXN0cnkubGVuZ3RoID09PSAwIHx8IGluZGV4ID49IHRoaXMuaW5kZXgpIHtcbiAgICAgIHJlZ2lzdHJ5LnB1c2goc2hlZXQpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gRmluZCBhIHBvc2l0aW9uLlxuXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZ2lzdHJ5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVnaXN0cnlbaV0ub3B0aW9ucy5pbmRleCA+IGluZGV4KSB7XG4gICAgICAgIHJlZ2lzdHJ5LnNwbGljZShpLCAwLCBzaGVldCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlc2V0IHRoZSByZWdpc3RyeS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICB0aGlzLnJlZ2lzdHJ5ID0gW107XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSBhIFN0eWxlIFNoZWV0LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoc2hlZXQpIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLnJlZ2lzdHJ5LmluZGV4T2Yoc2hlZXQpO1xuICAgIHRoaXMucmVnaXN0cnkuc3BsaWNlKGluZGV4LCAxKTtcbiAgfVxuICAvKipcbiAgICogQ29udmVydCBhbGwgYXR0YWNoZWQgc2hlZXRzIHRvIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhfdGVtcCkge1xuICAgIHZhciBfcmVmID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAsXG4gICAgICAgIGF0dGFjaGVkID0gX3JlZi5hdHRhY2hlZCxcbiAgICAgICAgb3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImF0dGFjaGVkXCJdKTtcblxuICAgIHZhciBjc3MgPSAnJztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZWdpc3RyeS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNoZWV0ID0gdGhpcy5yZWdpc3RyeVtpXTtcblxuICAgICAgaWYgKGF0dGFjaGVkICE9IG51bGwgJiYgc2hlZXQuYXR0YWNoZWQgIT09IGF0dGFjaGVkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoY3NzKSBjc3MgKz0gJ1xcbic7XG4gICAgICBjc3MgKz0gc2hlZXQudG9TdHJpbmcob3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNzcztcbiAgfTtcblxuICBfY3JlYXRlQ2xhc3MoU2hlZXRzUmVnaXN0cnksIFt7XG4gICAga2V5OiBcImluZGV4XCIsXG5cbiAgICAvKipcbiAgICAgKiBDdXJyZW50IGhpZ2hlc3QgaW5kZXggbnVtYmVyLlxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMucmVnaXN0cnkubGVuZ3RoID09PSAwID8gMCA6IHRoaXMucmVnaXN0cnlbdGhpcy5yZWdpc3RyeS5sZW5ndGggLSAxXS5vcHRpb25zLmluZGV4O1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTaGVldHNSZWdpc3RyeTtcbn0oKTtcblxuLyoqXG4gKiBUaGlzIGlzIGEgZ2xvYmFsIHNoZWV0cyByZWdpc3RyeS4gT25seSBEb21SZW5kZXJlciB3aWxsIGFkZCBzaGVldHMgdG8gaXQuXG4gKiBPbiB0aGUgc2VydmVyIG9uZSBzaG91bGQgdXNlIGFuIG93biBTaGVldHNSZWdpc3RyeSBpbnN0YW5jZSBhbmQgYWRkIHRoZVxuICogc2hlZXRzIHRvIGl0LCBiZWNhdXNlIHlvdSBuZWVkIHRvIG1ha2Ugc3VyZSB0byBjcmVhdGUgYSBuZXcgcmVnaXN0cnkgZm9yXG4gKiBlYWNoIHJlcXVlc3QgaW4gb3JkZXIgdG8gbm90IGxlYWsgc2hlZXRzIGFjcm9zcyByZXF1ZXN0cy5cbiAqL1xuXG52YXIgc2hlZXRzID0gbmV3IFNoZWV0c1JlZ2lzdHJ5KCk7XG5cbi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbFRoaXMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGggPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGYgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG52YXIgbnMgPSAnMmYxYWNjNmMzYTYwNmIwODJlNWVlZjVlNTQ0MTRmZmInO1xuaWYgKGdsb2JhbFRoaXNbbnNdID09IG51bGwpIGdsb2JhbFRoaXNbbnNdID0gMDsgLy8gQnVuZGxlIG1heSBjb250YWluIG11bHRpcGxlIEpTUyB2ZXJzaW9ucyBhdCB0aGUgc2FtZSB0aW1lLiBJbiBvcmRlciB0byBpZGVudGlmeVxuLy8gdGhlIGN1cnJlbnQgdmVyc2lvbiB3aXRoIGp1c3Qgb25lIHNob3J0IG51bWJlciBhbmQgdXNlIGl0IGZvciBjbGFzc2VzIGdlbmVyYXRpb25cbi8vIHdlIHVzZSBhIGNvdW50ZXIuIEFsc28gaXQgaXMgbW9yZSBhY2N1cmF0ZSwgYmVjYXVzZSB1c2VyIGNhbiBtYW51YWxseSByZWV2YWx1YXRlXG4vLyB0aGUgbW9kdWxlLlxuXG52YXIgbW9kdWxlSWQgPSBnbG9iYWxUaGlzW25zXSsrO1xuXG52YXIgbWF4UnVsZXMgPSAxZTEwO1xuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB3aGljaCBnZW5lcmF0ZXMgdW5pcXVlIGNsYXNzIG5hbWVzIGJhc2VkIG9uIGNvdW50ZXJzLlxuICogV2hlbiBuZXcgZ2VuZXJhdG9yIGZ1bmN0aW9uIGlzIGNyZWF0ZWQsIHJ1bGUgY291bnRlciBpcyByZXNldGVkLlxuICogV2UgbmVlZCB0byByZXNldCB0aGUgcnVsZSBjb3VudGVyIGZvciBTU1IgZm9yIGVhY2ggcmVxdWVzdC5cbiAqL1xudmFyIGNyZWF0ZUdlbmVyYXRlSWQgPSBmdW5jdGlvbiBjcmVhdGVHZW5lcmF0ZUlkKG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBydWxlQ291bnRlciA9IDA7XG4gIHJldHVybiBmdW5jdGlvbiAocnVsZSwgc2hlZXQpIHtcbiAgICBydWxlQ291bnRlciArPSAxO1xuXG4gICAgaWYgKHJ1bGVDb3VudGVyID4gbWF4UnVsZXMpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gWW91IG1pZ2h0IGhhdmUgYSBtZW1vcnkgbGVhay4gUnVsZSBjb3VudGVyIGlzIGF0IFwiICsgcnVsZUNvdW50ZXIgKyBcIi5cIikgOiB2b2lkIDA7XG4gICAgfVxuXG4gICAgdmFyIGpzc0lkID0gJyc7XG4gICAgdmFyIHByZWZpeCA9ICcnO1xuXG4gICAgaWYgKHNoZWV0KSB7XG4gICAgICBpZiAoc2hlZXQub3B0aW9ucy5jbGFzc05hbWVQcmVmaXgpIHtcbiAgICAgICAgcHJlZml4ID0gc2hlZXQub3B0aW9ucy5jbGFzc05hbWVQcmVmaXg7XG4gICAgICB9XG5cbiAgICAgIGlmIChzaGVldC5vcHRpb25zLmpzcy5pZCAhPSBudWxsKSB7XG4gICAgICAgIGpzc0lkID0gU3RyaW5nKHNoZWV0Lm9wdGlvbnMuanNzLmlkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5taW5pZnkpIHtcbiAgICAgIC8vIFVzaW5nIFwiY1wiIGJlY2F1c2UgYSBudW1iZXIgY2FuJ3QgYmUgdGhlIGZpcnN0IGNoYXIgaW4gYSBjbGFzcyBuYW1lLlxuICAgICAgcmV0dXJuIFwiXCIgKyAocHJlZml4IHx8ICdjJykgKyBtb2R1bGVJZCArIGpzc0lkICsgcnVsZUNvdW50ZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByZWZpeCArIHJ1bGUua2V5ICsgXCItXCIgKyBtb2R1bGVJZCArIChqc3NJZCA/IFwiLVwiICsganNzSWQgOiAnJykgKyBcIi1cIiArIHJ1bGVDb3VudGVyO1xuICB9O1xufTtcblxuLyoqXG4gKiBDYWNoZSB0aGUgdmFsdWUgZnJvbSB0aGUgZmlyc3QgdGltZSBhIGZ1bmN0aW9uIGlzIGNhbGxlZC5cbiAqL1xudmFyIG1lbW9pemUgPSBmdW5jdGlvbiBtZW1vaXplKGZuKSB7XG4gIHZhciB2YWx1ZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXZhbHVlKSB2YWx1ZSA9IGZuKCk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xufTtcbi8qKlxuICogR2V0IGEgc3R5bGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRQcm9wZXJ0eVZhbHVlKGNzc1J1bGUsIHByb3ApIHtcbiAgdHJ5IHtcbiAgICAvLyBTdXBwb3J0IENTU1RPTS5cbiAgICBpZiAoY3NzUnVsZS5hdHRyaWJ1dGVTdHlsZU1hcCkge1xuICAgICAgcmV0dXJuIGNzc1J1bGUuYXR0cmlidXRlU3R5bGVNYXAuZ2V0KHByb3ApO1xuICAgIH1cblxuICAgIHJldHVybiBjc3NSdWxlLnN0eWxlLmdldFByb3BlcnR5VmFsdWUocHJvcCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIElFIG1heSB0aHJvdyBpZiBwcm9wZXJ0eSBpcyB1bmtub3duLlxuICAgIHJldHVybiAnJztcbiAgfVxufVxuLyoqXG4gKiBTZXQgYSBzdHlsZSBwcm9wZXJ0eS5cbiAqL1xuXG5cbmZ1bmN0aW9uIHNldFByb3BlcnR5KGNzc1J1bGUsIHByb3AsIHZhbHVlKSB7XG4gIHRyeSB7XG4gICAgdmFyIGNzc1ZhbHVlID0gdmFsdWU7XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIGNzc1ZhbHVlID0gdG9Dc3NWYWx1ZSh2YWx1ZSwgdHJ1ZSk7XG5cbiAgICAgIGlmICh2YWx1ZVt2YWx1ZS5sZW5ndGggLSAxXSA9PT0gJyFpbXBvcnRhbnQnKSB7XG4gICAgICAgIGNzc1J1bGUuc3R5bGUuc2V0UHJvcGVydHkocHJvcCwgY3NzVmFsdWUsICdpbXBvcnRhbnQnKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSAvLyBTdXBwb3J0IENTU1RPTS5cblxuXG4gICAgaWYgKGNzc1J1bGUuYXR0cmlidXRlU3R5bGVNYXApIHtcbiAgICAgIGNzc1J1bGUuYXR0cmlidXRlU3R5bGVNYXAuc2V0KHByb3AsIGNzc1ZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3NzUnVsZS5zdHlsZS5zZXRQcm9wZXJ0eShwcm9wLCBjc3NWYWx1ZSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBJRSBtYXkgdGhyb3cgaWYgcHJvcGVydHkgaXMgdW5rbm93bi5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cbi8qKlxuICogUmVtb3ZlIGEgc3R5bGUgcHJvcGVydHkuXG4gKi9cblxuXG5mdW5jdGlvbiByZW1vdmVQcm9wZXJ0eShjc3NSdWxlLCBwcm9wKSB7XG4gIHRyeSB7XG4gICAgLy8gU3VwcG9ydCBDU1NUT00uXG4gICAgaWYgKGNzc1J1bGUuYXR0cmlidXRlU3R5bGVNYXApIHtcbiAgICAgIGNzc1J1bGUuYXR0cmlidXRlU3R5bGVNYXAuZGVsZXRlKHByb3ApO1xuICAgIH0gZWxzZSB7XG4gICAgICBjc3NSdWxlLnN0eWxlLnJlbW92ZVByb3BlcnR5KHByb3ApO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBET01FeGNlcHRpb24gXFxcIlwiICsgZXJyLm1lc3NhZ2UgKyBcIlxcXCIgd2FzIHRocm93bi4gVHJpZWQgdG8gcmVtb3ZlIHByb3BlcnR5IFxcXCJcIiArIHByb3AgKyBcIlxcXCIuXCIpIDogdm9pZCAwO1xuICB9XG59XG4vKipcbiAqIFNldCB0aGUgc2VsZWN0b3IuXG4gKi9cblxuXG5mdW5jdGlvbiBzZXRTZWxlY3Rvcihjc3NSdWxlLCBzZWxlY3RvclRleHQpIHtcbiAgY3NzUnVsZS5zZWxlY3RvclRleHQgPSBzZWxlY3RvclRleHQ7IC8vIFJldHVybiBmYWxzZSBpZiBzZXR0ZXIgd2FzIG5vdCBzdWNjZXNzZnVsLlxuICAvLyBDdXJyZW50bHkgd29ya3MgaW4gY2hyb21lIG9ubHkuXG5cbiAgcmV0dXJuIGNzc1J1bGUuc2VsZWN0b3JUZXh0ID09PSBzZWxlY3RvclRleHQ7XG59XG4vKipcbiAqIEdldHMgdGhlIGBoZWFkYCBlbGVtZW50IHVwb24gdGhlIGZpcnN0IGNhbGwgYW5kIGNhY2hlcyBpdC5cbiAqIFdlIGFzc3VtZSBpdCBjYW4ndCBiZSBudWxsLlxuICovXG5cblxudmFyIGdldEhlYWQgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWQnKTtcbn0pO1xuLyoqXG4gKiBGaW5kIGF0dGFjaGVkIHNoZWV0IHdpdGggYW4gaW5kZXggaGlnaGVyIHRoYW4gdGhlIHBhc3NlZCBvbmUuXG4gKi9cblxuZnVuY3Rpb24gZmluZEhpZ2hlclNoZWV0KHJlZ2lzdHJ5LCBvcHRpb25zKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVnaXN0cnkubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc2hlZXQgPSByZWdpc3RyeVtpXTtcblxuICAgIGlmIChzaGVldC5hdHRhY2hlZCAmJiBzaGVldC5vcHRpb25zLmluZGV4ID4gb3B0aW9ucy5pbmRleCAmJiBzaGVldC5vcHRpb25zLmluc2VydGlvblBvaW50ID09PSBvcHRpb25zLmluc2VydGlvblBvaW50KSB7XG4gICAgICByZXR1cm4gc2hlZXQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4vKipcbiAqIEZpbmQgYXR0YWNoZWQgc2hlZXQgd2l0aCB0aGUgaGlnaGVzdCBpbmRleC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGZpbmRIaWdoZXN0U2hlZXQocmVnaXN0cnksIG9wdGlvbnMpIHtcbiAgZm9yICh2YXIgaSA9IHJlZ2lzdHJ5Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHNoZWV0ID0gcmVnaXN0cnlbaV07XG5cbiAgICBpZiAoc2hlZXQuYXR0YWNoZWQgJiYgc2hlZXQub3B0aW9ucy5pbnNlcnRpb25Qb2ludCA9PT0gb3B0aW9ucy5pbnNlcnRpb25Qb2ludCkge1xuICAgICAgcmV0dXJuIHNoZWV0O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuLyoqXG4gKiBGaW5kIGEgY29tbWVudCB3aXRoIFwianNzXCIgaW5zaWRlLlxuICovXG5cblxuZnVuY3Rpb24gZmluZENvbW1lbnROb2RlKHRleHQpIHtcbiAgdmFyIGhlYWQgPSBnZXRIZWFkKCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBoZWFkLmNoaWxkTm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbm9kZSA9IGhlYWQuY2hpbGROb2Rlc1tpXTtcblxuICAgIGlmIChub2RlLm5vZGVUeXBlID09PSA4ICYmIG5vZGUubm9kZVZhbHVlLnRyaW0oKSA9PT0gdGV4dCkge1xuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogRmluZCBhIG5vZGUgYmVmb3JlIHdoaWNoIHdlIGNhbiBpbnNlcnQgdGhlIHNoZWV0LlxuICovXG5mdW5jdGlvbiBmaW5kUHJldk5vZGUob3B0aW9ucykge1xuICB2YXIgcmVnaXN0cnkgPSBzaGVldHMucmVnaXN0cnk7XG5cbiAgaWYgKHJlZ2lzdHJ5Lmxlbmd0aCA+IDApIHtcbiAgICAvLyBUcnkgdG8gaW5zZXJ0IGJlZm9yZSB0aGUgbmV4dCBoaWdoZXIgc2hlZXQuXG4gICAgdmFyIHNoZWV0ID0gZmluZEhpZ2hlclNoZWV0KHJlZ2lzdHJ5LCBvcHRpb25zKTtcblxuICAgIGlmIChzaGVldCAmJiBzaGVldC5yZW5kZXJlcikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGFyZW50OiBzaGVldC5yZW5kZXJlci5lbGVtZW50LnBhcmVudE5vZGUsXG4gICAgICAgIG5vZGU6IHNoZWV0LnJlbmRlcmVyLmVsZW1lbnRcbiAgICAgIH07XG4gICAgfSAvLyBPdGhlcndpc2UgaW5zZXJ0IGFmdGVyIHRoZSBsYXN0IGF0dGFjaGVkLlxuXG5cbiAgICBzaGVldCA9IGZpbmRIaWdoZXN0U2hlZXQocmVnaXN0cnksIG9wdGlvbnMpO1xuXG4gICAgaWYgKHNoZWV0ICYmIHNoZWV0LnJlbmRlcmVyKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXJlbnQ6IHNoZWV0LnJlbmRlcmVyLmVsZW1lbnQucGFyZW50Tm9kZSxcbiAgICAgICAgbm9kZTogc2hlZXQucmVuZGVyZXIuZWxlbWVudC5uZXh0U2libGluZ1xuICAgICAgfTtcbiAgICB9XG4gIH0gLy8gVHJ5IHRvIGZpbmQgYSBjb21tZW50IHBsYWNlaG9sZGVyIGlmIHJlZ2lzdHJ5IGlzIGVtcHR5LlxuXG5cbiAgdmFyIGluc2VydGlvblBvaW50ID0gb3B0aW9ucy5pbnNlcnRpb25Qb2ludDtcblxuICBpZiAoaW5zZXJ0aW9uUG9pbnQgJiYgdHlwZW9mIGluc2VydGlvblBvaW50ID09PSAnc3RyaW5nJykge1xuICAgIHZhciBjb21tZW50ID0gZmluZENvbW1lbnROb2RlKGluc2VydGlvblBvaW50KTtcblxuICAgIGlmIChjb21tZW50KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXJlbnQ6IGNvbW1lbnQucGFyZW50Tm9kZSxcbiAgICAgICAgbm9kZTogY29tbWVudC5uZXh0U2libGluZ1xuICAgICAgfTtcbiAgICB9IC8vIElmIHVzZXIgc3BlY2lmaWVzIGFuIGluc2VydGlvbiBwb2ludCBhbmQgaXQgY2FuJ3QgYmUgZm91bmQgaW4gdGhlIGRvY3VtZW50IC1cbiAgICAvLyBiYWQgc3BlY2lmaWNpdHkgaXNzdWVzIG1heSBhcHBlYXIuXG5cblxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gSW5zZXJ0aW9uIHBvaW50IFxcXCJcIiArIGluc2VydGlvblBvaW50ICsgXCJcXFwiIG5vdCBmb3VuZC5cIikgOiB2b2lkIDA7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG4vKipcbiAqIEluc2VydCBzdHlsZSBlbGVtZW50IGludG8gdGhlIERPTS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlKHN0eWxlLCBvcHRpb25zKSB7XG4gIHZhciBpbnNlcnRpb25Qb2ludCA9IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQ7XG4gIHZhciBuZXh0Tm9kZSA9IGZpbmRQcmV2Tm9kZShvcHRpb25zKTtcblxuICBpZiAobmV4dE5vZGUgIT09IGZhbHNlICYmIG5leHROb2RlLnBhcmVudCkge1xuICAgIG5leHROb2RlLnBhcmVudC5pbnNlcnRCZWZvcmUoc3R5bGUsIG5leHROb2RlLm5vZGUpO1xuICAgIHJldHVybjtcbiAgfSAvLyBXb3JrcyB3aXRoIGlmcmFtZXMgYW5kIGFueSBub2RlIHR5cGVzLlxuXG5cbiAgaWYgKGluc2VydGlvblBvaW50ICYmIHR5cGVvZiBpbnNlcnRpb25Qb2ludC5ub2RlVHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80MTMyODcyOC9mb3JjZS1jYXN0aW5nLWluLWZsb3dcbiAgICB2YXIgaW5zZXJ0aW9uUG9pbnRFbGVtZW50ID0gaW5zZXJ0aW9uUG9pbnQ7XG4gICAgdmFyIHBhcmVudE5vZGUgPSBpbnNlcnRpb25Qb2ludEVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICBpZiAocGFyZW50Tm9kZSkgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoc3R5bGUsIGluc2VydGlvblBvaW50RWxlbWVudC5uZXh0U2libGluZyk7ZWxzZSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnW0pTU10gSW5zZXJ0aW9uIHBvaW50IGlzIG5vdCBpbiB0aGUgRE9NLicpIDogdm9pZCAwO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGdldEhlYWQoKS5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG4vKipcbiAqIFJlYWQganNzIG5vbmNlIHNldHRpbmcgZnJvbSB0aGUgcGFnZSBpZiB0aGUgdXNlciBoYXMgc2V0IGl0LlxuICovXG5cblxudmFyIGdldE5vbmNlID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG4gIHZhciBub2RlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbWV0YVtwcm9wZXJ0eT1cImNzcC1ub25jZVwiXScpO1xuICByZXR1cm4gbm9kZSA/IG5vZGUuZ2V0QXR0cmlidXRlKCdjb250ZW50JykgOiBudWxsO1xufSk7XG5cbnZhciBfaW5zZXJ0UnVsZSA9IGZ1bmN0aW9uIGluc2VydFJ1bGUoY29udGFpbmVyLCBydWxlLCBpbmRleCkge1xuICB2YXIgbWF4SW5kZXggPSBjb250YWluZXIuY3NzUnVsZXMubGVuZ3RoOyAvLyBJbiBjYXNlIHByZXZpb3VzIGluc2VydGlvbiBmYWlscywgcGFzc2VkIGluZGV4IG1pZ2h0IGJlIHdyb25nXG5cbiAgaWYgKGluZGV4ID09PSB1bmRlZmluZWQgfHwgaW5kZXggPiBtYXhJbmRleCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIGluZGV4ID0gbWF4SW5kZXg7XG4gIH1cblxuICB0cnkge1xuICAgIGlmICgnaW5zZXJ0UnVsZScgaW4gY29udGFpbmVyKSB7XG4gICAgICB2YXIgYyA9IGNvbnRhaW5lcjtcbiAgICAgIGMuaW5zZXJ0UnVsZShydWxlLCBpbmRleCk7XG4gICAgfSAvLyBLZXlmcmFtZXMgcnVsZS5cbiAgICBlbHNlIGlmICgnYXBwZW5kUnVsZScgaW4gY29udGFpbmVyKSB7XG4gICAgICAgIHZhciBfYyA9IGNvbnRhaW5lcjtcblxuICAgICAgICBfYy5hcHBlbmRSdWxlKHJ1bGUpO1xuICAgICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIFwiICsgZXJyLm1lc3NhZ2UpIDogdm9pZCAwO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBjb250YWluZXIuY3NzUnVsZXNbaW5kZXhdO1xufTtcblxudmFyIGNyZWF0ZVN0eWxlID0gZnVuY3Rpb24gY3JlYXRlU3R5bGUoKSB7XG4gIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7IC8vIFdpdGhvdXQgaXQsIElFIHdpbGwgaGF2ZSBhIGJyb2tlbiBzb3VyY2Ugb3JkZXIgc3BlY2lmaWNpdHkgaWYgd2VcbiAgLy8gaW5zZXJ0IHJ1bGVzIGFmdGVyIHdlIGluc2VydCB0aGUgc3R5bGUgdGFnLlxuICAvLyBJdCBzZWVtcyB0byBraWNrLW9mZiB0aGUgc291cmNlIG9yZGVyIHNwZWNpZmljaXR5IGFsZ29yaXRobS5cblxuICBlbC50ZXh0Q29udGVudCA9ICdcXG4nO1xuICByZXR1cm4gZWw7XG59O1xuXG52YXIgRG9tUmVuZGVyZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICAvLyBIVE1MU3R5bGVFbGVtZW50IG5lZWRzIGZpeGluZyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMjY5NlxuICBmdW5jdGlvbiBEb21SZW5kZXJlcihzaGVldCkge1xuICAgIHRoaXMuZ2V0UHJvcGVydHlWYWx1ZSA9IGdldFByb3BlcnR5VmFsdWU7XG4gICAgdGhpcy5zZXRQcm9wZXJ0eSA9IHNldFByb3BlcnR5O1xuICAgIHRoaXMucmVtb3ZlUHJvcGVydHkgPSByZW1vdmVQcm9wZXJ0eTtcbiAgICB0aGlzLnNldFNlbGVjdG9yID0gc2V0U2VsZWN0b3I7XG4gICAgdGhpcy5lbGVtZW50ID0gdm9pZCAwO1xuICAgIHRoaXMuc2hlZXQgPSB2b2lkIDA7XG4gICAgdGhpcy5oYXNJbnNlcnRlZFJ1bGVzID0gZmFsc2U7XG4gICAgLy8gVGhlcmUgaXMgbm8gc2hlZXQgd2hlbiB0aGUgcmVuZGVyZXIgaXMgdXNlZCBmcm9tIGEgc3RhbmRhbG9uZSBTdHlsZVJ1bGUuXG4gICAgaWYgKHNoZWV0KSBzaGVldHMuYWRkKHNoZWV0KTtcbiAgICB0aGlzLnNoZWV0ID0gc2hlZXQ7XG5cbiAgICB2YXIgX3JlZiA9IHRoaXMuc2hlZXQgPyB0aGlzLnNoZWV0Lm9wdGlvbnMgOiB7fSxcbiAgICAgICAgbWVkaWEgPSBfcmVmLm1lZGlhLFxuICAgICAgICBtZXRhID0gX3JlZi5tZXRhLFxuICAgICAgICBlbGVtZW50ID0gX3JlZi5lbGVtZW50O1xuXG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudCB8fCBjcmVhdGVTdHlsZSgpO1xuICAgIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtanNzJywgJycpO1xuICAgIGlmIChtZWRpYSkgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSk7XG4gICAgaWYgKG1ldGEpIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtbWV0YScsIG1ldGEpO1xuICAgIHZhciBub25jZSA9IGdldE5vbmNlKCk7XG4gICAgaWYgKG5vbmNlKSB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdub25jZScsIG5vbmNlKTtcbiAgfVxuICAvKipcbiAgICogSW5zZXJ0IHN0eWxlIGVsZW1lbnQgaW50byByZW5kZXIgdHJlZS5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gRG9tUmVuZGVyZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5hdHRhY2ggPSBmdW5jdGlvbiBhdHRhY2goKSB7XG4gICAgLy8gSW4gdGhlIGNhc2UgdGhlIGVsZW1lbnQgbm9kZSBpcyBleHRlcm5hbCBhbmQgaXQgaXMgYWxyZWFkeSBpbiB0aGUgRE9NLlxuICAgIGlmICh0aGlzLmVsZW1lbnQucGFyZW50Tm9kZSB8fCAhdGhpcy5zaGVldCkgcmV0dXJuO1xuICAgIGluc2VydFN0eWxlKHRoaXMuZWxlbWVudCwgdGhpcy5zaGVldC5vcHRpb25zKTsgLy8gV2hlbiBydWxlcyBhcmUgaW5zZXJ0ZWQgdXNpbmcgYGluc2VydFJ1bGVgIEFQSSwgYWZ0ZXIgYHNoZWV0LmRldGFjaCgpLmF0dGFjaCgpYFxuICAgIC8vIG1vc3QgYnJvd3NlcnMgY3JlYXRlIGEgbmV3IENTU1N0eWxlU2hlZXQsIGV4Y2VwdCBvZiBhbGwgSUVzLlxuXG4gICAgdmFyIGRlcGxveWVkID0gQm9vbGVhbih0aGlzLnNoZWV0ICYmIHRoaXMuc2hlZXQuZGVwbG95ZWQpO1xuXG4gICAgaWYgKHRoaXMuaGFzSW5zZXJ0ZWRSdWxlcyAmJiBkZXBsb3llZCkge1xuICAgICAgdGhpcy5oYXNJbnNlcnRlZFJ1bGVzID0gZmFsc2U7XG4gICAgICB0aGlzLmRlcGxveSgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIHN0eWxlIGVsZW1lbnQgZnJvbSByZW5kZXIgdHJlZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGV0YWNoID0gZnVuY3Rpb24gZGV0YWNoKCkge1xuICAgIHZhciBwYXJlbnROb2RlID0gdGhpcy5lbGVtZW50LnBhcmVudE5vZGU7XG4gICAgaWYgKHBhcmVudE5vZGUpIHBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5lbGVtZW50KTtcbiAgfVxuICAvKipcbiAgICogSW5qZWN0IENTUyBzdHJpbmcgaW50byBlbGVtZW50LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kZXBsb3kgPSBmdW5jdGlvbiBkZXBsb3koKSB7XG4gICAgdmFyIHNoZWV0ID0gdGhpcy5zaGVldDtcbiAgICBpZiAoIXNoZWV0KSByZXR1cm47XG5cbiAgICBpZiAoc2hlZXQub3B0aW9ucy5saW5rKSB7XG4gICAgICB0aGlzLmluc2VydFJ1bGVzKHNoZWV0LnJ1bGVzKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmVsZW1lbnQudGV4dENvbnRlbnQgPSBcIlxcblwiICsgc2hlZXQudG9TdHJpbmcoKSArIFwiXFxuXCI7XG4gIH1cbiAgLyoqXG4gICAqIEluc2VydCBSdWxlTGlzdCBpbnRvIGFuIGVsZW1lbnQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluc2VydFJ1bGVzID0gZnVuY3Rpb24gaW5zZXJ0UnVsZXMocnVsZXMsIG5hdGl2ZVBhcmVudCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcnVsZXMuaW5kZXgubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuaW5zZXJ0UnVsZShydWxlcy5pbmRleFtpXSwgaSwgbmF0aXZlUGFyZW50KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEluc2VydCBhIHJ1bGUgaW50byBlbGVtZW50LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbnNlcnRSdWxlID0gZnVuY3Rpb24gaW5zZXJ0UnVsZShydWxlLCBpbmRleCwgbmF0aXZlUGFyZW50KSB7XG4gICAgaWYgKG5hdGl2ZVBhcmVudCA9PT0gdm9pZCAwKSB7XG4gICAgICBuYXRpdmVQYXJlbnQgPSB0aGlzLmVsZW1lbnQuc2hlZXQ7XG4gICAgfVxuXG4gICAgaWYgKHJ1bGUucnVsZXMpIHtcbiAgICAgIHZhciBwYXJlbnQgPSBydWxlO1xuICAgICAgdmFyIGxhdGVzdE5hdGl2ZVBhcmVudCA9IG5hdGl2ZVBhcmVudDtcblxuICAgICAgaWYgKHJ1bGUudHlwZSA9PT0gJ2NvbmRpdGlvbmFsJyB8fCBydWxlLnR5cGUgPT09ICdrZXlmcmFtZXMnKSB7XG4gICAgICAgIC8vIFdlIG5lZWQgdG8gcmVuZGVyIHRoZSBjb250YWluZXIgd2l0aG91dCBjaGlsZHJlbiBmaXJzdC5cbiAgICAgICAgbGF0ZXN0TmF0aXZlUGFyZW50ID0gX2luc2VydFJ1bGUobmF0aXZlUGFyZW50LCBwYXJlbnQudG9TdHJpbmcoe1xuICAgICAgICAgIGNoaWxkcmVuOiBmYWxzZVxuICAgICAgICB9KSwgaW5kZXgpO1xuXG4gICAgICAgIGlmIChsYXRlc3ROYXRpdmVQYXJlbnQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaW5zZXJ0UnVsZXMocGFyZW50LnJ1bGVzLCBsYXRlc3ROYXRpdmVQYXJlbnQpO1xuICAgICAgcmV0dXJuIGxhdGVzdE5hdGl2ZVBhcmVudDtcbiAgICB9IC8vIElFIGtlZXBzIHRoZSBDU1NTdHlsZVNoZWV0IGFmdGVyIHN0eWxlIG5vZGUgaGFzIGJlZW4gcmVhdHRhY2hlZCxcbiAgICAvLyBzbyB3ZSBuZWVkIHRvIGNoZWNrIGlmIHRoZSBgcmVuZGVyYWJsZWAgcmVmZXJlbmNlIHRoZSByaWdodCBzdHlsZSBzaGVldCBhbmQgbm90XG4gICAgLy8gcmVyZW5kZXIgdGhvc2UgcnVsZXMuXG5cblxuICAgIGlmIChydWxlLnJlbmRlcmFibGUgJiYgcnVsZS5yZW5kZXJhYmxlLnBhcmVudFN0eWxlU2hlZXQgPT09IHRoaXMuZWxlbWVudC5zaGVldCkge1xuICAgICAgcmV0dXJuIHJ1bGUucmVuZGVyYWJsZTtcbiAgICB9XG5cbiAgICB2YXIgcnVsZVN0ciA9IHJ1bGUudG9TdHJpbmcoKTtcbiAgICBpZiAoIXJ1bGVTdHIpIHJldHVybiBmYWxzZTtcblxuICAgIHZhciBuYXRpdmVSdWxlID0gX2luc2VydFJ1bGUobmF0aXZlUGFyZW50LCBydWxlU3RyLCBpbmRleCk7XG5cbiAgICBpZiAobmF0aXZlUnVsZSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLmhhc0luc2VydGVkUnVsZXMgPSB0cnVlO1xuICAgIHJ1bGUucmVuZGVyYWJsZSA9IG5hdGl2ZVJ1bGU7XG4gICAgcmV0dXJuIG5hdGl2ZVJ1bGU7XG4gIH1cbiAgLyoqXG4gICAqIERlbGV0ZSBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRlbGV0ZVJ1bGUgPSBmdW5jdGlvbiBkZWxldGVSdWxlKGNzc1J1bGUpIHtcbiAgICB2YXIgc2hlZXQgPSB0aGlzLmVsZW1lbnQuc2hlZXQ7XG4gICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleE9mKGNzc1J1bGUpO1xuICAgIGlmIChpbmRleCA9PT0gLTEpIHJldHVybiBmYWxzZTtcbiAgICBzaGVldC5kZWxldGVSdWxlKGluZGV4KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogR2V0IGluZGV4IG9mIGEgQ1NTIFJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mKGNzc1J1bGUpIHtcbiAgICB2YXIgY3NzUnVsZXMgPSB0aGlzLmVsZW1lbnQuc2hlZXQuY3NzUnVsZXM7XG5cbiAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgY3NzUnVsZXMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBpZiAoY3NzUnVsZSA9PT0gY3NzUnVsZXNbaW5kZXhdKSByZXR1cm4gaW5kZXg7XG4gICAgfVxuXG4gICAgcmV0dXJuIC0xO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhIG5ldyBDU1MgcnVsZSBhbmQgcmVwbGFjZSB0aGUgZXhpc3Rpbmcgb25lLlxuICAgKlxuICAgKiBPbmx5IHVzZWQgZm9yIHNvbWUgb2xkIGJyb3dzZXJzIGJlY2F1c2UgdGhleSBjYW4ndCBzZXQgYSBzZWxlY3Rvci5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVwbGFjZVJ1bGUgPSBmdW5jdGlvbiByZXBsYWNlUnVsZShjc3NSdWxlLCBydWxlKSB7XG4gICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleE9mKGNzc1J1bGUpO1xuICAgIGlmIChpbmRleCA9PT0gLTEpIHJldHVybiBmYWxzZTtcbiAgICB0aGlzLmVsZW1lbnQuc2hlZXQuZGVsZXRlUnVsZShpbmRleCk7XG4gICAgcmV0dXJuIHRoaXMuaW5zZXJ0UnVsZShydWxlLCBpbmRleCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhbGwgcnVsZXMgZWxlbWVudHMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmdldFJ1bGVzID0gZnVuY3Rpb24gZ2V0UnVsZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudC5zaGVldC5jc3NSdWxlcztcbiAgfTtcblxuICByZXR1cm4gRG9tUmVuZGVyZXI7XG59KCk7XG5cbnZhciBpbnN0YW5jZUNvdW50ZXIgPSAwO1xuXG52YXIgSnNzID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gSnNzKG9wdGlvbnMpIHtcbiAgICB0aGlzLmlkID0gaW5zdGFuY2VDb3VudGVyKys7XG4gICAgdGhpcy52ZXJzaW9uID0gXCIxMC4zLjBcIjtcbiAgICB0aGlzLnBsdWdpbnMgPSBuZXcgUGx1Z2luc1JlZ2lzdHJ5KCk7XG4gICAgdGhpcy5vcHRpb25zID0ge1xuICAgICAgaWQ6IHtcbiAgICAgICAgbWluaWZ5OiBmYWxzZVxuICAgICAgfSxcbiAgICAgIGNyZWF0ZUdlbmVyYXRlSWQ6IGNyZWF0ZUdlbmVyYXRlSWQsXG4gICAgICBSZW5kZXJlcjogaXNJbkJyb3dzZXIgPyBEb21SZW5kZXJlciA6IG51bGwsXG4gICAgICBwbHVnaW5zOiBbXVxuICAgIH07XG4gICAgdGhpcy5nZW5lcmF0ZUlkID0gY3JlYXRlR2VuZXJhdGVJZCh7XG4gICAgICBtaW5pZnk6IGZhbHNlXG4gICAgfSk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBsdWdpbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMucGx1Z2lucy51c2UocGx1Z2luc1tpXSwge1xuICAgICAgICBxdWV1ZTogJ2ludGVybmFsJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5zZXR1cChvcHRpb25zKTtcbiAgfVxuICAvKipcbiAgICogUHJlcGFyZXMgdmFyaW91cyBvcHRpb25zLCBhcHBsaWVzIHBsdWdpbnMuXG4gICAqIFNob3VsZCBub3QgYmUgdXNlZCB0d2ljZSBvbiB0aGUgc2FtZSBpbnN0YW5jZSwgYmVjYXVzZSB0aGVyZSBpcyBubyBwbHVnaW5zXG4gICAqIGRlZHVwbGljYXRpb24gbG9naWMuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IEpzcy5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnNldHVwID0gZnVuY3Rpb24gc2V0dXAob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5jcmVhdGVHZW5lcmF0ZUlkKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuY3JlYXRlR2VuZXJhdGVJZCA9IG9wdGlvbnMuY3JlYXRlR2VuZXJhdGVJZDtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5pZCkge1xuICAgICAgdGhpcy5vcHRpb25zLmlkID0gX2V4dGVuZHMoe30sIHRoaXMub3B0aW9ucy5pZCwgb3B0aW9ucy5pZCk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuY3JlYXRlR2VuZXJhdGVJZCB8fCBvcHRpb25zLmlkKSB7XG4gICAgICB0aGlzLmdlbmVyYXRlSWQgPSB0aGlzLm9wdGlvbnMuY3JlYXRlR2VuZXJhdGVJZCh0aGlzLm9wdGlvbnMuaWQpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmluc2VydGlvblBvaW50ICE9IG51bGwpIHRoaXMub3B0aW9ucy5pbnNlcnRpb25Qb2ludCA9IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQ7XG5cbiAgICBpZiAoJ1JlbmRlcmVyJyBpbiBvcHRpb25zKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuUmVuZGVyZXIgPSBvcHRpb25zLlJlbmRlcmVyO1xuICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1zcHJlYWRcblxuXG4gICAgaWYgKG9wdGlvbnMucGx1Z2lucykgdGhpcy51c2UuYXBwbHkodGhpcywgb3B0aW9ucy5wbHVnaW5zKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGEgU3R5bGUgU2hlZXQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNyZWF0ZVN0eWxlU2hlZXQgPSBmdW5jdGlvbiBjcmVhdGVTdHlsZVNoZWV0KHN0eWxlcywgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgICBpbmRleCA9IF9vcHRpb25zLmluZGV4O1xuXG4gICAgaWYgKHR5cGVvZiBpbmRleCAhPT0gJ251bWJlcicpIHtcbiAgICAgIGluZGV4ID0gc2hlZXRzLmluZGV4ID09PSAwID8gMCA6IHNoZWV0cy5pbmRleCArIDE7XG4gICAgfVxuXG4gICAgdmFyIHNoZWV0ID0gbmV3IFN0eWxlU2hlZXQoc3R5bGVzLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAganNzOiB0aGlzLFxuICAgICAgZ2VuZXJhdGVJZDogb3B0aW9ucy5nZW5lcmF0ZUlkIHx8IHRoaXMuZ2VuZXJhdGVJZCxcbiAgICAgIGluc2VydGlvblBvaW50OiB0aGlzLm9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQsXG4gICAgICBSZW5kZXJlcjogdGhpcy5vcHRpb25zLlJlbmRlcmVyLFxuICAgICAgaW5kZXg6IGluZGV4XG4gICAgfSkpO1xuICAgIHRoaXMucGx1Z2lucy5vblByb2Nlc3NTaGVldChzaGVldCk7XG4gICAgcmV0dXJuIHNoZWV0O1xuICB9XG4gIC8qKlxuICAgKiBEZXRhY2ggdGhlIFN0eWxlIFNoZWV0IGFuZCByZW1vdmUgaXQgZnJvbSB0aGUgcmVnaXN0cnkuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlbW92ZVN0eWxlU2hlZXQgPSBmdW5jdGlvbiByZW1vdmVTdHlsZVNoZWV0KHNoZWV0KSB7XG4gICAgc2hlZXQuZGV0YWNoKCk7XG4gICAgc2hlZXRzLnJlbW92ZShzaGVldCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhIHJ1bGUgd2l0aG91dCBhIFN0eWxlIFNoZWV0LlxuICAgKiBbRGVwcmVjYXRlZF0gd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNyZWF0ZVJ1bGUgPSBmdW5jdGlvbiBjcmVhdGVSdWxlJDEobmFtZSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICBpZiAoc3R5bGUgPT09IHZvaWQgMCkge1xuICAgICAgc3R5bGUgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgLy8gRW5hYmxlIHJ1bGUgd2l0aG91dCBuYW1lIGZvciBpbmxpbmUgc3R5bGVzLlxuICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVJ1bGUodW5kZWZpbmVkLCBuYW1lLCBzdHlsZSk7XG4gICAgfVxuXG4gICAgdmFyIHJ1bGVPcHRpb25zID0gX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBqc3M6IHRoaXMsXG4gICAgICBSZW5kZXJlcjogdGhpcy5vcHRpb25zLlJlbmRlcmVyXG4gICAgfSk7XG5cbiAgICBpZiAoIXJ1bGVPcHRpb25zLmdlbmVyYXRlSWQpIHJ1bGVPcHRpb25zLmdlbmVyYXRlSWQgPSB0aGlzLmdlbmVyYXRlSWQ7XG4gICAgaWYgKCFydWxlT3B0aW9ucy5jbGFzc2VzKSBydWxlT3B0aW9ucy5jbGFzc2VzID0ge307XG4gICAgaWYgKCFydWxlT3B0aW9ucy5rZXlmcmFtZXMpIHJ1bGVPcHRpb25zLmtleWZyYW1lcyA9IHt9O1xuXG4gICAgdmFyIHJ1bGUgPSBjcmVhdGVSdWxlKG5hbWUsIHN0eWxlLCBydWxlT3B0aW9ucyk7XG5cbiAgICBpZiAocnVsZSkgdGhpcy5wbHVnaW5zLm9uUHJvY2Vzc1J1bGUocnVsZSk7XG4gICAgcmV0dXJuIHJ1bGU7XG4gIH1cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIHBsdWdpbi4gUGFzc2VkIGZ1bmN0aW9uIHdpbGwgYmUgaW52b2tlZCB3aXRoIGEgcnVsZSBpbnN0YW5jZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udXNlID0gZnVuY3Rpb24gdXNlKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgcGx1Z2lucyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIHBsdWdpbnNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcGx1Z2lucy5mb3JFYWNoKGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICAgIF90aGlzLnBsdWdpbnMudXNlKHBsdWdpbik7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgcmV0dXJuIEpzcztcbn0oKTtcblxuLyoqXG4gKiBFeHRyYWN0cyBhIHN0eWxlcyBvYmplY3Qgd2l0aCBvbmx5IHByb3BzIHRoYXQgY29udGFpbiBmdW5jdGlvbiB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIGdldER5bmFtaWNTdHlsZXMoc3R5bGVzKSB7XG4gIHZhciB0byA9IG51bGw7XG5cbiAgZm9yICh2YXIga2V5IGluIHN0eWxlcykge1xuICAgIHZhciB2YWx1ZSA9IHN0eWxlc1trZXldO1xuICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG4gICAgaWYgKHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmICghdG8pIHRvID0ge307XG4gICAgICB0b1trZXldID0gdmFsdWU7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbCAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIHZhciBleHRyYWN0ZWQgPSBnZXREeW5hbWljU3R5bGVzKHZhbHVlKTtcblxuICAgICAgaWYgKGV4dHJhY3RlZCkge1xuICAgICAgICBpZiAoIXRvKSB0byA9IHt9O1xuICAgICAgICB0b1trZXldID0gZXh0cmFjdGVkO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0bztcbn1cblxuLyoqXG4gKiBTaGVldHNNYW5hZ2VyIGlzIGxpa2UgYSBXZWFrTWFwIHdoaWNoIGlzIGRlc2lnbmVkIHRvIGNvdW50IFN0eWxlU2hlZXRcbiAqIGluc3RhbmNlcyBhbmQgYXR0YWNoL2RldGFjaCBhdXRvbWF0aWNhbGx5LlxuICovXG52YXIgU2hlZXRzTWFuYWdlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNoZWV0c01hbmFnZXIoKSB7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICAgIHRoaXMuc2hlZXRzID0gbmV3IFdlYWtNYXAoKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTaGVldHNNYW5hZ2VyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZ2V0ID0gZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgIHZhciBlbnRyeSA9IHRoaXMuc2hlZXRzLmdldChrZXkpO1xuICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeS5zaGVldDtcbiAgfTtcblxuICBfcHJvdG8uYWRkID0gZnVuY3Rpb24gYWRkKGtleSwgc2hlZXQpIHtcbiAgICBpZiAodGhpcy5zaGVldHMuaGFzKGtleSkpIHJldHVybjtcbiAgICB0aGlzLmxlbmd0aCsrO1xuICAgIHRoaXMuc2hlZXRzLnNldChrZXksIHtcbiAgICAgIHNoZWV0OiBzaGVldCxcbiAgICAgIHJlZnM6IDBcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ubWFuYWdlID0gZnVuY3Rpb24gbWFuYWdlKGtleSkge1xuICAgIHZhciBlbnRyeSA9IHRoaXMuc2hlZXRzLmdldChrZXkpO1xuXG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICBpZiAoZW50cnkucmVmcyA9PT0gMCkge1xuICAgICAgICBlbnRyeS5zaGVldC5hdHRhY2goKTtcbiAgICAgIH1cblxuICAgICAgZW50cnkucmVmcysrO1xuICAgICAgcmV0dXJuIGVudHJ5LnNoZWV0O1xuICAgIH1cblxuICAgIHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gU2hlZXRzTWFuYWdlcjogY2FuJ3QgZmluZCBzaGVldCB0byBtYW5hZ2VcIik7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfTtcblxuICBfcHJvdG8udW5tYW5hZ2UgPSBmdW5jdGlvbiB1bm1hbmFnZShrZXkpIHtcbiAgICB2YXIgZW50cnkgPSB0aGlzLnNoZWV0cy5nZXQoa2V5KTtcblxuICAgIGlmIChlbnRyeSkge1xuICAgICAgaWYgKGVudHJ5LnJlZnMgPiAwKSB7XG4gICAgICAgIGVudHJ5LnJlZnMtLTtcbiAgICAgICAgaWYgKGVudHJ5LnJlZnMgPT09IDApIGVudHJ5LnNoZWV0LmRldGFjaCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB3YXJuaW5nKGZhbHNlLCBcIlNoZWV0c01hbmFnZXI6IGNhbid0IGZpbmQgc2hlZXQgdG8gdW5tYW5hZ2VcIik7XG4gICAgfVxuICB9O1xuXG4gIF9jcmVhdGVDbGFzcyhTaGVldHNNYW5hZ2VyLCBbe1xuICAgIGtleTogXCJzaXplXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5sZW5ndGg7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNoZWV0c01hbmFnZXI7XG59KCk7XG5cbi8qKlxuICogQSBiZXR0ZXIgYWJzdHJhY3Rpb24gb3ZlciBDU1MuXG4gKlxuICogQGNvcHlyaWdodCBPbGVnIElzb25lbiAoU2xvYm9kc2tvaSkgLyBJc29uZW4gMjAxNC1wcmVzZW50XG4gKiBAd2Vic2l0ZSBodHRwczovL2dpdGh1Yi5jb20vY3NzaW5qcy9qc3NcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbi8qKlxuICogRXhwb3J0IGEgY29uc3RhbnQgaW5kaWNhdGluZyBpZiB0aGlzIGJyb3dzZXIgaGFzIENTU1RPTSBzdXBwb3J0LlxuICogaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vd2ViL3VwZGF0ZXMvMjAxOC8wMy9jc3NvbVxuICovXG52YXIgaGFzQ1NTVE9NU3VwcG9ydCA9IHR5cGVvZiBDU1MgIT09ICd1bmRlZmluZWQnICYmIENTUyAmJiAnbnVtYmVyJyBpbiBDU1M7XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgSnNzLlxuICovXG5cbnZhciBjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUob3B0aW9ucykge1xuICByZXR1cm4gbmV3IEpzcyhvcHRpb25zKTtcbn07XG4vKipcbiAqIEEgZ2xvYmFsIEpzcyBpbnN0YW5jZS5cbiAqL1xuXG52YXIgaW5kZXggPSBjcmVhdGUoKTtcblxuZXhwb3J0IGRlZmF1bHQgaW5kZXg7XG5leHBvcnQgeyBSdWxlTGlzdCwgU2hlZXRzTWFuYWdlciwgU2hlZXRzUmVnaXN0cnksIGNyZWF0ZSwgY3JlYXRlR2VuZXJhdGVJZCwgY3JlYXRlUnVsZSwgZ2V0RHluYW1pY1N0eWxlcywgaGFzQ1NTVE9NU3VwcG9ydCwgc2hlZXRzLCB0b0Nzc1ZhbHVlIH07XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCB7IGdldERpc3BsYXlOYW1lIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lcmdlQ2xhc3NlcygpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgYmFzZUNsYXNzZXMgPSBvcHRpb25zLmJhc2VDbGFzc2VzLFxuICAgICAgbmV3Q2xhc3NlcyA9IG9wdGlvbnMubmV3Q2xhc3NlcyxcbiAgICAgIENvbXBvbmVudCA9IG9wdGlvbnMuQ29tcG9uZW50O1xuXG4gIGlmICghbmV3Q2xhc3Nlcykge1xuICAgIHJldHVybiBiYXNlQ2xhc3NlcztcbiAgfVxuXG4gIHZhciBuZXh0Q2xhc3NlcyA9IF9leHRlbmRzKHt9LCBiYXNlQ2xhc3Nlcyk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAodHlwZW9mIG5ld0NsYXNzZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiBUaGUgdmFsdWUgYFwiLmNvbmNhdChuZXdDbGFzc2VzLCBcImAgXCIpICsgXCJwcm92aWRlZCB0byB0aGUgY2xhc3NlcyBwcm9wIG9mIFwiLmNvbmNhdChnZXREaXNwbGF5TmFtZShDb21wb25lbnQpLCBcIiBpcyBpbmNvcnJlY3QuXCIpLCAnWW91IG1pZ2h0IHdhbnQgdG8gdXNlIHRoZSBjbGFzc05hbWUgcHJvcCBpbnN0ZWFkLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIHJldHVybiBiYXNlQ2xhc3NlcztcbiAgICB9XG4gIH1cblxuICBPYmplY3Qua2V5cyhuZXdDbGFzc2VzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFiYXNlQ2xhc3Nlc1trZXldICYmIG5ld0NsYXNzZXNba2V5XSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiBUaGUga2V5IGBcIi5jb25jYXQoa2V5LCBcImAgXCIpICsgXCJwcm92aWRlZCB0byB0aGUgY2xhc3NlcyBwcm9wIGlzIG5vdCBpbXBsZW1lbnRlZCBpbiBcIi5jb25jYXQoZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KSwgXCIuXCIpLCBcIllvdSBjYW4gb25seSBvdmVycmlkZSBvbmUgb2YgdGhlIGZvbGxvd2luZzogXCIuY29uY2F0KE9iamVjdC5rZXlzKGJhc2VDbGFzc2VzKS5qb2luKCcsJyksIFwiLlwiKV0uam9pbignXFxuJykpO1xuICAgICAgfVxuXG4gICAgICBpZiAobmV3Q2xhc3Nlc1trZXldICYmIHR5cGVvZiBuZXdDbGFzc2VzW2tleV0gIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW1wiTWF0ZXJpYWwtVUk6IFRoZSBrZXkgYFwiLmNvbmNhdChrZXksIFwiYCBcIikgKyBcInByb3ZpZGVkIHRvIHRoZSBjbGFzc2VzIHByb3AgaXMgbm90IHZhbGlkIGZvciBcIi5jb25jYXQoZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KSwgXCIuXCIpLCBcIllvdSBuZWVkIHRvIHByb3ZpZGUgYSBub24gZW1wdHkgc3RyaW5nIGluc3RlYWQgb2Y6IFwiLmNvbmNhdChuZXdDbGFzc2VzW2tleV0sIFwiLlwiKV0uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChuZXdDbGFzc2VzW2tleV0pIHtcbiAgICAgIG5leHRDbGFzc2VzW2tleV0gPSBcIlwiLmNvbmNhdChiYXNlQ2xhc3Nlc1trZXldLCBcIiBcIikuY29uY2F0KG5ld0NsYXNzZXNba2V5XSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG5leHRDbGFzc2VzO1xufSIsIi8vIFVzZWQgaHR0cHM6Ly9naXRodWIuY29tL3RoaW5rbG9vcC9tdWx0aS1rZXktY2FjaGUgYXMgaW5zcGlyYXRpb25cbnZhciBtdWx0aUtleVN0b3JlID0ge1xuICBzZXQ6IGZ1bmN0aW9uIHNldChjYWNoZSwga2V5MSwga2V5MiwgdmFsdWUpIHtcbiAgICB2YXIgc3ViQ2FjaGUgPSBjYWNoZS5nZXQoa2V5MSk7XG5cbiAgICBpZiAoIXN1YkNhY2hlKSB7XG4gICAgICBzdWJDYWNoZSA9IG5ldyBNYXAoKTtcbiAgICAgIGNhY2hlLnNldChrZXkxLCBzdWJDYWNoZSk7XG4gICAgfVxuXG4gICAgc3ViQ2FjaGUuc2V0KGtleTIsIHZhbHVlKTtcbiAgfSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoY2FjaGUsIGtleTEsIGtleTIpIHtcbiAgICB2YXIgc3ViQ2FjaGUgPSBjYWNoZS5nZXQoa2V5MSk7XG4gICAgcmV0dXJuIHN1YkNhY2hlID8gc3ViQ2FjaGUuZ2V0KGtleTIpIDogdW5kZWZpbmVkO1xuICB9LFxuICBkZWxldGU6IGZ1bmN0aW9uIF9kZWxldGUoY2FjaGUsIGtleTEsIGtleTIpIHtcbiAgICB2YXIgc3ViQ2FjaGUgPSBjYWNoZS5nZXQoa2V5MSk7XG4gICAgc3ViQ2FjaGUuZGVsZXRlKGtleTIpO1xuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgbXVsdGlLZXlTdG9yZTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xudmFyIFRoZW1lQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFRoZW1lQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdUaGVtZUNvbnRleHQnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBUaGVtZUNvbnRleHQ7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBUaGVtZUNvbnRleHQgZnJvbSAnLi9UaGVtZUNvbnRleHQnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlVGhlbWUoKSB7XG4gIHZhciB0aGVtZSA9IFJlYWN0LnVzZUNvbnRleHQoVGhlbWVDb250ZXh0KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZURlYnVnVmFsdWUodGhlbWUpO1xuICB9XG5cbiAgcmV0dXJuIHRoZW1lO1xufSIsInZhciBoYXNTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5mb3I7XG5leHBvcnQgZGVmYXVsdCBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdtdWkubmVzdGVkJykgOiAnX19USEVNRV9ORVNURURfXyc7IiwiaW1wb3J0IG5lc3RlZCBmcm9tICcuLi9UaGVtZVByb3ZpZGVyL25lc3RlZCc7XG4vKipcbiAqIFRoaXMgaXMgdGhlIGxpc3Qgb2YgdGhlIHN0eWxlIHJ1bGUgbmFtZSB3ZSB1c2UgYXMgZHJvcCBpbiByZXBsYWNlbWVudCBmb3IgdGhlIGJ1aWx0LWluXG4gKiBwc2V1ZG8gY2xhc3NlcyAoOmNoZWNrZWQsIDpkaXNhYmxlZCwgOmZvY3VzZWQsIGV0Yy4pLlxuICpcbiAqIFdoeSBkbyB0aGV5IGV4aXN0IGluIHRoZSBmaXJzdCBwbGFjZT9cbiAqIFRoZXNlIGNsYXNzZXMgYXJlIHVzZWQgYXQgYSBzcGVjaWZpY2l0eSBvZiAyLlxuICogSXQgYWxsb3dzIHRoZW0gdG8gb3ZlcnJpZGUgcHJldmlvdXNseSBkZWZpbmllZCBzdHlsZXMgYXMgd2VsbCBhc1xuICogYmVpbmcgdW50b3VjaGVkIGJ5IHNpbXBsZSB1c2VyIG92ZXJyaWRlcy5cbiAqL1xuXG52YXIgcHNldWRvQ2xhc3NlcyA9IFsnY2hlY2tlZCcsICdkaXNhYmxlZCcsICdlcnJvcicsICdmb2N1c2VkJywgJ2ZvY3VzVmlzaWJsZScsICdyZXF1aXJlZCcsICdleHBhbmRlZCcsICdzZWxlY3RlZCddOyAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gd2hpY2ggZ2VuZXJhdGVzIHVuaXF1ZSBjbGFzcyBuYW1lcyBiYXNlZCBvbiBjb3VudGVycy5cbi8vIFdoZW4gbmV3IGdlbmVyYXRvciBmdW5jdGlvbiBpcyBjcmVhdGVkLCBydWxlIGNvdW50ZXIgaXMgcmVzZXQuXG4vLyBXZSBuZWVkIHRvIHJlc2V0IHRoZSBydWxlIGNvdW50ZXIgZm9yIFNTUiBmb3IgZWFjaCByZXF1ZXN0LlxuLy9cbi8vIEl0J3MgaW5zcGlyZWQgYnlcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jc3NpbmpzL2pzcy9ibG9iLzRlNmEwNWRkM2Y3YjY1NzJmZGQzYWIyMTY4NjFkOWU0NDZjMjAzMzEvc3JjL3V0aWxzL2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lLmpzXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lKCkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHZhciBfb3B0aW9ucyRkaXNhYmxlR2xvYmEgPSBvcHRpb25zLmRpc2FibGVHbG9iYWwsXG4gICAgICBkaXNhYmxlR2xvYmFsID0gX29wdGlvbnMkZGlzYWJsZUdsb2JhID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJGRpc2FibGVHbG9iYSxcbiAgICAgIF9vcHRpb25zJHByb2R1Y3Rpb25QciA9IG9wdGlvbnMucHJvZHVjdGlvblByZWZpeCxcbiAgICAgIHByb2R1Y3Rpb25QcmVmaXggPSBfb3B0aW9ucyRwcm9kdWN0aW9uUHIgPT09IHZvaWQgMCA/ICdqc3MnIDogX29wdGlvbnMkcHJvZHVjdGlvblByLFxuICAgICAgX29wdGlvbnMkc2VlZCA9IG9wdGlvbnMuc2VlZCxcbiAgICAgIHNlZWQgPSBfb3B0aW9ucyRzZWVkID09PSB2b2lkIDAgPyAnJyA6IF9vcHRpb25zJHNlZWQ7XG4gIHZhciBzZWVkUHJlZml4ID0gc2VlZCA9PT0gJycgPyAnJyA6IFwiXCIuY29uY2F0KHNlZWQsIFwiLVwiKTtcbiAgdmFyIHJ1bGVDb3VudGVyID0gMDtcblxuICB2YXIgZ2V0TmV4dENvdW50ZXJJZCA9IGZ1bmN0aW9uIGdldE5leHRDb3VudGVySWQoKSB7XG4gICAgcnVsZUNvdW50ZXIgKz0gMTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAocnVsZUNvdW50ZXIgPj0gMWUxMCkge1xuICAgICAgICBjb25zb2xlLndhcm4oWydNYXRlcmlhbC1VSTogWW91IG1pZ2h0IGhhdmUgYSBtZW1vcnkgbGVhay4nLCAnVGhlIHJ1bGVDb3VudGVyIGlzIG5vdCBzdXBwb3NlZCB0byBncm93IHRoYXQgbXVjaC4nXS5qb2luKCcnKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJ1bGVDb3VudGVyO1xuICB9O1xuXG4gIHJldHVybiBmdW5jdGlvbiAocnVsZSwgc3R5bGVTaGVldCkge1xuICAgIHZhciBuYW1lID0gc3R5bGVTaGVldC5vcHRpb25zLm5hbWU7IC8vIElzIGEgZ2xvYmFsIHN0YXRpYyBNVUkgc3R5bGU/XG5cbiAgICBpZiAobmFtZSAmJiBuYW1lLmluZGV4T2YoJ011aScpID09PSAwICYmICFzdHlsZVNoZWV0Lm9wdGlvbnMubGluayAmJiAhZGlzYWJsZUdsb2JhbCkge1xuICAgICAgLy8gV2UgY2FuIHVzZSBhIHNob3J0aGFuZCBjbGFzcyBuYW1lLCB3ZSBuZXZlciB1c2UgdGhlIGtleXMgdG8gc3R5bGUgdGhlIGNvbXBvbmVudHMuXG4gICAgICBpZiAocHNldWRvQ2xhc3Nlcy5pbmRleE9mKHJ1bGUua2V5KSAhPT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIFwiTXVpLVwiLmNvbmNhdChydWxlLmtleSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmVmaXggPSBcIlwiLmNvbmNhdChzZWVkUHJlZml4KS5jb25jYXQobmFtZSwgXCItXCIpLmNvbmNhdChydWxlLmtleSk7XG5cbiAgICAgIGlmICghc3R5bGVTaGVldC5vcHRpb25zLnRoZW1lW25lc3RlZF0gfHwgc2VlZCAhPT0gJycpIHtcbiAgICAgICAgcmV0dXJuIHByZWZpeDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KHByZWZpeCwgXCItXCIpLmNvbmNhdChnZXROZXh0Q291bnRlcklkKCkpO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQoc2VlZFByZWZpeCkuY29uY2F0KHByb2R1Y3Rpb25QcmVmaXgpLmNvbmNhdChnZXROZXh0Q291bnRlcklkKCkpO1xuICAgIH1cblxuICAgIHZhciBzdWZmaXggPSBcIlwiLmNvbmNhdChydWxlLmtleSwgXCItXCIpLmNvbmNhdChnZXROZXh0Q291bnRlcklkKCkpOyAvLyBIZWxwIHdpdGggZGVidWdnYWJpbGl0eS5cblxuICAgIGlmIChzdHlsZVNoZWV0Lm9wdGlvbnMuY2xhc3NOYW1lUHJlZml4KSB7XG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQoc2VlZFByZWZpeCkuY29uY2F0KHN0eWxlU2hlZXQub3B0aW9ucy5jbGFzc05hbWVQcmVmaXgsIFwiLVwiKS5jb25jYXQoc3VmZml4KTtcbiAgICB9XG5cbiAgICByZXR1cm4gXCJcIi5jb25jYXQoc2VlZFByZWZpeCkuY29uY2F0KHN1ZmZpeCk7XG4gIH07XG59IiwiaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCB7IGNyZWF0ZVJ1bGUgfSBmcm9tICdqc3MnO1xuXG52YXIgbm93ID0gRGF0ZS5ub3coKTtcbnZhciBmblZhbHVlc05zID0gXCJmblZhbHVlc1wiICsgbm93O1xudmFyIGZuUnVsZU5zID0gXCJmblN0eWxlXCIgKyArK25vdztcbmZ1bmN0aW9uIGZ1bmN0aW9uUGx1Z2luKCkge1xuICByZXR1cm4ge1xuICAgIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKG5hbWUsIGRlY2wsIG9wdGlvbnMpIHtcbiAgICAgIGlmICh0eXBlb2YgZGVjbCAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIG51bGw7XG4gICAgICB2YXIgcnVsZSA9IGNyZWF0ZVJ1bGUobmFtZSwge30sIG9wdGlvbnMpO1xuICAgICAgcnVsZVtmblJ1bGVOc10gPSBkZWNsO1xuICAgICAgcmV0dXJuIHJ1bGU7XG4gICAgfSxcbiAgICBvblByb2Nlc3NTdHlsZTogZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUpIHtcbiAgICAgIC8vIFdlIG5lZWQgdG8gZXh0cmFjdCBmdW5jdGlvbiB2YWx1ZXMgZnJvbSB0aGUgZGVjbGFyYXRpb24sIHNvIHRoYXQgd2UgY2FuIGtlZXAgY29yZSB1bmF3YXJlIG9mIHRoZW0uXG4gICAgICAvLyBXZSBuZWVkIHRvIGRvIHRoYXQgb25seSBvbmNlLlxuICAgICAgLy8gV2UgZG9uJ3QgbmVlZCB0byBleHRyYWN0IGZ1bmN0aW9ucyBvbiBlYWNoIHN0eWxlIHVwZGF0ZSwgc2luY2UgdGhpcyBjYW4gaGFwcGVuIG9ubHkgb25jZS5cbiAgICAgIC8vIFdlIGRvbid0IHN1cHBvcnQgZnVuY3Rpb24gdmFsdWVzIGluc2lkZSBvZiBmdW5jdGlvbiBydWxlcy5cbiAgICAgIGlmIChmblZhbHVlc05zIGluIHJ1bGUgfHwgZm5SdWxlTnMgaW4gcnVsZSkgcmV0dXJuIHN0eWxlO1xuICAgICAgdmFyIGZuVmFsdWVzID0ge307XG5cbiAgICAgIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gc3R5bGVbcHJvcF07XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdmdW5jdGlvbicpIGNvbnRpbnVlO1xuICAgICAgICBkZWxldGUgc3R5bGVbcHJvcF07XG4gICAgICAgIGZuVmFsdWVzW3Byb3BdID0gdmFsdWU7XG4gICAgICB9IC8vICRGbG93Rml4TWVcblxuXG4gICAgICBydWxlW2ZuVmFsdWVzTnNdID0gZm5WYWx1ZXM7XG4gICAgICByZXR1cm4gc3R5bGU7XG4gICAgfSxcbiAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoZGF0YSwgcnVsZSwgc2hlZXQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBzdHlsZVJ1bGUgPSBydWxlO1xuICAgICAgdmFyIGZuUnVsZSA9IHN0eWxlUnVsZVtmblJ1bGVOc107IC8vIElmIHdlIGhhdmUgYSBzdHlsZSBmdW5jdGlvbiwgdGhlIGVudGlyZSBydWxlIGlzIGR5bmFtaWMgYW5kIHN0eWxlIG9iamVjdFxuICAgICAgLy8gd2lsbCBiZSByZXR1cm5lZCBmcm9tIHRoYXQgZnVuY3Rpb24uXG5cbiAgICAgIGlmIChmblJ1bGUpIHtcbiAgICAgICAgLy8gRW1wdHkgb2JqZWN0IHdpbGwgcmVtb3ZlIGFsbCBjdXJyZW50bHkgZGVmaW5lZCBwcm9wc1xuICAgICAgICAvLyBpbiBjYXNlIGZ1bmN0aW9uIHJ1bGUgcmV0dXJucyBhIGZhbHN5IHZhbHVlLlxuICAgICAgICBzdHlsZVJ1bGUuc3R5bGUgPSBmblJ1bGUoZGF0YSkgfHwge307XG5cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKSB7XG4gICAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZVJ1bGUuc3R5bGUpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3R5bGVSdWxlLnN0eWxlW3Byb3BdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdbSlNTXSBGdW5jdGlvbiB2YWx1ZXMgaW5zaWRlIGZ1bmN0aW9uIHJ1bGVzIGFyZSBub3Qgc3VwcG9ydGVkLicpIDogdm9pZCAwO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIGZuVmFsdWVzID0gc3R5bGVSdWxlW2ZuVmFsdWVzTnNdOyAvLyBJZiB3ZSBoYXZlIGEgZm4gdmFsdWVzIG1hcCwgaXQgaXMgYSBydWxlIHdpdGggZnVuY3Rpb24gdmFsdWVzLlxuXG4gICAgICBpZiAoZm5WYWx1ZXMpIHtcbiAgICAgICAgZm9yICh2YXIgX3Byb3AgaW4gZm5WYWx1ZXMpIHtcbiAgICAgICAgICBzdHlsZVJ1bGUucHJvcChfcHJvcCwgZm5WYWx1ZXNbX3Byb3BdKGRhdGEpLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb25QbHVnaW47XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgeyBSdWxlTGlzdCB9IGZyb20gJ2pzcyc7XG5cbnZhciBhdCA9ICdAZ2xvYmFsJztcbnZhciBhdFByZWZpeCA9ICdAZ2xvYmFsICc7XG5cbnZhciBHbG9iYWxDb250YWluZXJSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gR2xvYmFsQ29udGFpbmVyUnVsZShrZXksIHN0eWxlcywgb3B0aW9ucykge1xuICAgIHRoaXMudHlwZSA9ICdnbG9iYWwnO1xuICAgIHRoaXMuYXQgPSBhdDtcbiAgICB0aGlzLnJ1bGVzID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLnJ1bGVzID0gbmV3IFJ1bGVMaXN0KF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBwYXJlbnQ6IHRoaXNcbiAgICB9KSk7XG5cbiAgICBmb3IgKHZhciBzZWxlY3RvciBpbiBzdHlsZXMpIHtcbiAgICAgIHRoaXMucnVsZXMuYWRkKHNlbGVjdG9yLCBzdHlsZXNbc2VsZWN0b3JdKTtcbiAgICB9XG5cbiAgICB0aGlzLnJ1bGVzLnByb2Nlc3MoKTtcbiAgfVxuICAvKipcbiAgICogR2V0IGEgcnVsZS5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gR2xvYmFsQ29udGFpbmVyUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmdldFJ1bGUgPSBmdW5jdGlvbiBnZXRSdWxlKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5nZXQobmFtZSk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhbmQgcmVnaXN0ZXIgcnVsZSwgcnVuIHBsdWdpbnMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmFkZFJ1bGUgPSBmdW5jdGlvbiBhZGRSdWxlKG5hbWUsIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgdmFyIHJ1bGUgPSB0aGlzLnJ1bGVzLmFkZChuYW1lLCBzdHlsZSwgb3B0aW9ucyk7XG4gICAgdGhpcy5vcHRpb25zLmpzcy5wbHVnaW5zLm9uUHJvY2Vzc1J1bGUocnVsZSk7XG4gICAgcmV0dXJuIHJ1bGU7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBpbmRleCBvZiBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mKHJ1bGUpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5pbmRleE9mKHJ1bGUpO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLnJ1bGVzLnRvU3RyaW5nKCk7XG4gIH07XG5cbiAgcmV0dXJuIEdsb2JhbENvbnRhaW5lclJ1bGU7XG59KCk7XG5cbnZhciBHbG9iYWxQcmVmaXhlZFJ1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBHbG9iYWxQcmVmaXhlZFJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykge1xuICAgIHRoaXMudHlwZSA9ICdnbG9iYWwnO1xuICAgIHRoaXMuYXQgPSBhdDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5ydWxlID0gdm9pZCAwO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHZhciBzZWxlY3RvciA9IGtleS5zdWJzdHIoYXRQcmVmaXgubGVuZ3RoKTtcbiAgICB0aGlzLnJ1bGUgPSBvcHRpb25zLmpzcy5jcmVhdGVSdWxlKHNlbGVjdG9yLCBzdHlsZSwgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHBhcmVudDogdGhpc1xuICAgIH0pKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8yID0gR2xvYmFsUHJlZml4ZWRSdWxlLnByb3RvdHlwZTtcblxuICBfcHJvdG8yLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLnJ1bGUgPyB0aGlzLnJ1bGUudG9TdHJpbmcob3B0aW9ucykgOiAnJztcbiAgfTtcblxuICByZXR1cm4gR2xvYmFsUHJlZml4ZWRSdWxlO1xufSgpO1xuXG52YXIgc2VwYXJhdG9yUmVnRXhwID0gL1xccyosXFxzKi9nO1xuXG5mdW5jdGlvbiBhZGRTY29wZShzZWxlY3Rvciwgc2NvcGUpIHtcbiAgdmFyIHBhcnRzID0gc2VsZWN0b3Iuc3BsaXQoc2VwYXJhdG9yUmVnRXhwKTtcbiAgdmFyIHNjb3BlZCA9ICcnO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICBzY29wZWQgKz0gc2NvcGUgKyBcIiBcIiArIHBhcnRzW2ldLnRyaW0oKTtcbiAgICBpZiAocGFydHNbaSArIDFdKSBzY29wZWQgKz0gJywgJztcbiAgfVxuXG4gIHJldHVybiBzY29wZWQ7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZU5lc3RlZEdsb2JhbENvbnRhaW5lclJ1bGUocnVsZSkge1xuICB2YXIgb3B0aW9ucyA9IHJ1bGUub3B0aW9ucyxcbiAgICAgIHN0eWxlID0gcnVsZS5zdHlsZTtcbiAgdmFyIHJ1bGVzID0gc3R5bGUgPyBzdHlsZVthdF0gOiBudWxsO1xuICBpZiAoIXJ1bGVzKSByZXR1cm47XG5cbiAgZm9yICh2YXIgbmFtZSBpbiBydWxlcykge1xuICAgIG9wdGlvbnMuc2hlZXQuYWRkUnVsZShuYW1lLCBydWxlc1tuYW1lXSwgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHNlbGVjdG9yOiBhZGRTY29wZShuYW1lLCBydWxlLnNlbGVjdG9yKVxuICAgIH0pKTtcbiAgfVxuXG4gIGRlbGV0ZSBzdHlsZVthdF07XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVByZWZpeGVkR2xvYmFsUnVsZShydWxlKSB7XG4gIHZhciBvcHRpb25zID0gcnVsZS5vcHRpb25zLFxuICAgICAgc3R5bGUgPSBydWxlLnN0eWxlO1xuXG4gIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICBpZiAocHJvcFswXSAhPT0gJ0AnIHx8IHByb3Auc3Vic3RyKDAsIGF0Lmxlbmd0aCkgIT09IGF0KSBjb250aW51ZTtcbiAgICB2YXIgc2VsZWN0b3IgPSBhZGRTY29wZShwcm9wLnN1YnN0cihhdC5sZW5ndGgpLCBydWxlLnNlbGVjdG9yKTtcbiAgICBvcHRpb25zLnNoZWV0LmFkZFJ1bGUoc2VsZWN0b3IsIHN0eWxlW3Byb3BdLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgc2VsZWN0b3I6IHNlbGVjdG9yXG4gICAgfSkpO1xuICAgIGRlbGV0ZSBzdHlsZVtwcm9wXTtcbiAgfVxufVxuLyoqXG4gKiBDb252ZXJ0IG5lc3RlZCBydWxlcyB0byBzZXBhcmF0ZSwgcmVtb3ZlIHRoZW0gZnJvbSBvcmlnaW5hbCBzdHlsZXMuXG4gKlxuICogQHBhcmFtIHtSdWxlfSBydWxlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblxuZnVuY3Rpb24ganNzR2xvYmFsKCkge1xuICBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUobmFtZSwgc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgaWYgKCFuYW1lKSByZXR1cm4gbnVsbDtcblxuICAgIGlmIChuYW1lID09PSBhdCkge1xuICAgICAgcmV0dXJuIG5ldyBHbG9iYWxDb250YWluZXJSdWxlKG5hbWUsIHN0eWxlcywgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgaWYgKG5hbWVbMF0gPT09ICdAJyAmJiBuYW1lLnN1YnN0cigwLCBhdFByZWZpeC5sZW5ndGgpID09PSBhdFByZWZpeCkge1xuICAgICAgcmV0dXJuIG5ldyBHbG9iYWxQcmVmaXhlZFJ1bGUobmFtZSwgc3R5bGVzLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICB2YXIgcGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG5cbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBpZiAocGFyZW50LnR5cGUgPT09ICdnbG9iYWwnIHx8IHBhcmVudC5vcHRpb25zLnBhcmVudCAmJiBwYXJlbnQub3B0aW9ucy5wYXJlbnQudHlwZSA9PT0gJ2dsb2JhbCcpIHtcbiAgICAgICAgb3B0aW9ucy5zY29wZWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5zY29wZWQgPT09IGZhbHNlKSB7XG4gICAgICBvcHRpb25zLnNlbGVjdG9yID0gbmFtZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uUHJvY2Vzc1J1bGUocnVsZSkge1xuICAgIGlmIChydWxlLnR5cGUgIT09ICdzdHlsZScpIHJldHVybjtcbiAgICBoYW5kbGVOZXN0ZWRHbG9iYWxDb250YWluZXJSdWxlKHJ1bGUpO1xuICAgIGhhbmRsZVByZWZpeGVkR2xvYmFsUnVsZShydWxlKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgb25DcmVhdGVSdWxlOiBvbkNyZWF0ZVJ1bGUsXG4gICAgb25Qcm9jZXNzUnVsZTogb25Qcm9jZXNzUnVsZVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBqc3NHbG9iYWw7XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuXG52YXIgc2VwYXJhdG9yUmVnRXhwID0gL1xccyosXFxzKi9nO1xudmFyIHBhcmVudFJlZ0V4cCA9IC8mL2c7XG52YXIgcmVmUmVnRXhwID0gL1xcJChbXFx3LV0rKS9nO1xuLyoqXG4gKiBDb252ZXJ0IG5lc3RlZCBydWxlcyB0byBzZXBhcmF0ZSwgcmVtb3ZlIHRoZW0gZnJvbSBvcmlnaW5hbCBzdHlsZXMuXG4gKlxuICogQHBhcmFtIHtSdWxlfSBydWxlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGpzc05lc3RlZCgpIHtcbiAgLy8gR2V0IGEgZnVuY3Rpb24gdG8gYmUgdXNlZCBmb3IgJHJlZiByZXBsYWNlbWVudC5cbiAgZnVuY3Rpb24gZ2V0UmVwbGFjZVJlZihjb250YWluZXIsIHNoZWV0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChtYXRjaCwga2V5KSB7XG4gICAgICB2YXIgcnVsZSA9IGNvbnRhaW5lci5nZXRSdWxlKGtleSkgfHwgc2hlZXQgJiYgc2hlZXQuZ2V0UnVsZShrZXkpO1xuXG4gICAgICBpZiAocnVsZSkge1xuICAgICAgICBydWxlID0gcnVsZTtcbiAgICAgICAgcmV0dXJuIHJ1bGUuc2VsZWN0b3I7XG4gICAgICB9XG5cbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gQ291bGQgbm90IGZpbmQgdGhlIHJlZmVyZW5jZWQgcnVsZSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaW4gXFxcIlwiICsgKGNvbnRhaW5lci5vcHRpb25zLm1ldGEgfHwgY29udGFpbmVyLnRvU3RyaW5nKCkpICsgXCJcXFwiLlwiKSA6IHZvaWQgMDtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2VQYXJlbnRSZWZzKG5lc3RlZFByb3AsIHBhcmVudFByb3ApIHtcbiAgICB2YXIgcGFyZW50U2VsZWN0b3JzID0gcGFyZW50UHJvcC5zcGxpdChzZXBhcmF0b3JSZWdFeHApO1xuICAgIHZhciBuZXN0ZWRTZWxlY3RvcnMgPSBuZXN0ZWRQcm9wLnNwbGl0KHNlcGFyYXRvclJlZ0V4cCk7XG4gICAgdmFyIHJlc3VsdCA9ICcnO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJlbnRTZWxlY3RvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBwYXJlbnQgPSBwYXJlbnRTZWxlY3RvcnNbaV07XG5cbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbmVzdGVkU2VsZWN0b3JzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHZhciBuZXN0ZWQgPSBuZXN0ZWRTZWxlY3RvcnNbal07XG4gICAgICAgIGlmIChyZXN1bHQpIHJlc3VsdCArPSAnLCAnOyAvLyBSZXBsYWNlIGFsbCAmIGJ5IHRoZSBwYXJlbnQgb3IgcHJlZml4ICYgd2l0aCB0aGUgcGFyZW50LlxuXG4gICAgICAgIHJlc3VsdCArPSBuZXN0ZWQuaW5kZXhPZignJicpICE9PSAtMSA/IG5lc3RlZC5yZXBsYWNlKHBhcmVudFJlZ0V4cCwgcGFyZW50KSA6IHBhcmVudCArIFwiIFwiICsgbmVzdGVkO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRPcHRpb25zKHJ1bGUsIGNvbnRhaW5lciwgcHJldk9wdGlvbnMpIHtcbiAgICAvLyBPcHRpb25zIGhhcyBiZWVuIGFscmVhZHkgY3JlYXRlZCwgbm93IHdlIG9ubHkgaW5jcmVhc2UgaW5kZXguXG4gICAgaWYgKHByZXZPcHRpb25zKSByZXR1cm4gX2V4dGVuZHMoe30sIHByZXZPcHRpb25zLCB7XG4gICAgICBpbmRleDogcHJldk9wdGlvbnMuaW5kZXggKyAxXG4gICAgfSk7XG4gICAgdmFyIG5lc3RpbmdMZXZlbCA9IHJ1bGUub3B0aW9ucy5uZXN0aW5nTGV2ZWw7XG4gICAgbmVzdGluZ0xldmVsID0gbmVzdGluZ0xldmVsID09PSB1bmRlZmluZWQgPyAxIDogbmVzdGluZ0xldmVsICsgMTtcblxuICAgIHZhciBvcHRpb25zID0gX2V4dGVuZHMoe30sIHJ1bGUub3B0aW9ucywge1xuICAgICAgbmVzdGluZ0xldmVsOiBuZXN0aW5nTGV2ZWwsXG4gICAgICBpbmRleDogY29udGFpbmVyLmluZGV4T2YocnVsZSkgKyAxIC8vIFdlIGRvbid0IG5lZWQgdGhlIHBhcmVudCBuYW1lIHRvIGJlIHNldCBvcHRpb25zIGZvciBjaGxpZC5cblxuICAgIH0pO1xuXG4gICAgZGVsZXRlIG9wdGlvbnMubmFtZTtcbiAgICByZXR1cm4gb3B0aW9ucztcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlLCBzaGVldCkge1xuICAgIGlmIChydWxlLnR5cGUgIT09ICdzdHlsZScpIHJldHVybiBzdHlsZTtcbiAgICB2YXIgc3R5bGVSdWxlID0gcnVsZTtcbiAgICB2YXIgY29udGFpbmVyID0gc3R5bGVSdWxlLm9wdGlvbnMucGFyZW50O1xuICAgIHZhciBvcHRpb25zO1xuICAgIHZhciByZXBsYWNlUmVmO1xuXG4gICAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZSkge1xuICAgICAgdmFyIGlzTmVzdGVkID0gcHJvcC5pbmRleE9mKCcmJykgIT09IC0xO1xuICAgICAgdmFyIGlzTmVzdGVkQ29uZGl0aW9uYWwgPSBwcm9wWzBdID09PSAnQCc7XG4gICAgICBpZiAoIWlzTmVzdGVkICYmICFpc05lc3RlZENvbmRpdGlvbmFsKSBjb250aW51ZTtcbiAgICAgIG9wdGlvbnMgPSBnZXRPcHRpb25zKHN0eWxlUnVsZSwgY29udGFpbmVyLCBvcHRpb25zKTtcblxuICAgICAgaWYgKGlzTmVzdGVkKSB7XG4gICAgICAgIHZhciBzZWxlY3RvciA9IHJlcGxhY2VQYXJlbnRSZWZzKHByb3AsIHN0eWxlUnVsZS5zZWxlY3Rvcik7IC8vIExhemlseSBjcmVhdGUgdGhlIHJlZiByZXBsYWNlciBmdW5jdGlvbiBqdXN0IG9uY2UgZm9yXG4gICAgICAgIC8vIGFsbCBuZXN0ZWQgcnVsZXMgd2l0aGluIHRoZSBzaGVldC5cblxuICAgICAgICBpZiAoIXJlcGxhY2VSZWYpIHJlcGxhY2VSZWYgPSBnZXRSZXBsYWNlUmVmKGNvbnRhaW5lciwgc2hlZXQpOyAvLyBSZXBsYWNlIGFsbCAkcmVmcy5cblxuICAgICAgICBzZWxlY3RvciA9IHNlbGVjdG9yLnJlcGxhY2UocmVmUmVnRXhwLCByZXBsYWNlUmVmKTtcbiAgICAgICAgY29udGFpbmVyLmFkZFJ1bGUoc2VsZWN0b3IsIHN0eWxlW3Byb3BdLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgICAgIHNlbGVjdG9yOiBzZWxlY3RvclxuICAgICAgICB9KSk7XG4gICAgICB9IGVsc2UgaWYgKGlzTmVzdGVkQ29uZGl0aW9uYWwpIHtcbiAgICAgICAgLy8gUGxhY2UgY29uZGl0aW9uYWwgcmlnaHQgYWZ0ZXIgdGhlIHBhcmVudCBydWxlIHRvIGVuc3VyZSByaWdodCBvcmRlcmluZy5cbiAgICAgICAgY29udGFpbmVyLmFkZFJ1bGUocHJvcCwge30sIG9wdGlvbnMpIC8vIEZsb3cgZXhwZWN0cyBtb3JlIG9wdGlvbnMgYnV0IHRoZXkgYXJlbid0IHJlcXVpcmVkXG4gICAgICAgIC8vIEFuZCBmbG93IGRvZXNuJ3Qga25vdyB0aGlzIHdpbGwgYWx3YXlzIGJlIGEgU3R5bGVSdWxlIHdoaWNoIGhhcyB0aGUgYWRkUnVsZSBtZXRob2RcbiAgICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgICAuYWRkUnVsZShzdHlsZVJ1bGUua2V5LCBzdHlsZVtwcm9wXSwge1xuICAgICAgICAgIHNlbGVjdG9yOiBzdHlsZVJ1bGUuc2VsZWN0b3JcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGRlbGV0ZSBzdHlsZVtwcm9wXTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3R5bGU7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG9uUHJvY2Vzc1N0eWxlOiBvblByb2Nlc3NTdHlsZVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBqc3NOZXN0ZWQ7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby12YXIsIHByZWZlci10ZW1wbGF0ZSAqL1xudmFyIHVwcGVyY2FzZVBhdHRlcm4gPSAvW0EtWl0vZ1xudmFyIG1zUGF0dGVybiA9IC9ebXMtL1xudmFyIGNhY2hlID0ge31cblxuZnVuY3Rpb24gdG9IeXBoZW5Mb3dlcihtYXRjaCkge1xuICByZXR1cm4gJy0nICsgbWF0Y2gudG9Mb3dlckNhc2UoKVxufVxuXG5mdW5jdGlvbiBoeXBoZW5hdGVTdHlsZU5hbWUobmFtZSkge1xuICBpZiAoY2FjaGUuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICByZXR1cm4gY2FjaGVbbmFtZV1cbiAgfVxuXG4gIHZhciBoTmFtZSA9IG5hbWUucmVwbGFjZSh1cHBlcmNhc2VQYXR0ZXJuLCB0b0h5cGhlbkxvd2VyKVxuICByZXR1cm4gKGNhY2hlW25hbWVdID0gbXNQYXR0ZXJuLnRlc3QoaE5hbWUpID8gJy0nICsgaE5hbWUgOiBoTmFtZSlcbn1cblxuZXhwb3J0IGRlZmF1bHQgaHlwaGVuYXRlU3R5bGVOYW1lXG4iLCJpbXBvcnQgaHlwaGVuYXRlIGZyb20gJ2h5cGhlbmF0ZS1zdHlsZS1uYW1lJztcblxuLyoqXG4gKiBDb252ZXJ0IGNhbWVsIGNhc2VkIHByb3BlcnR5IG5hbWVzIHRvIGRhc2ggc2VwYXJhdGVkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBzdHlsZVxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5cbmZ1bmN0aW9uIGNvbnZlcnRDYXNlKHN0eWxlKSB7XG4gIHZhciBjb252ZXJ0ZWQgPSB7fTtcblxuICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgdmFyIGtleSA9IHByb3AuaW5kZXhPZignLS0nKSA9PT0gMCA/IHByb3AgOiBoeXBoZW5hdGUocHJvcCk7XG4gICAgY29udmVydGVkW2tleV0gPSBzdHlsZVtwcm9wXTtcbiAgfVxuXG4gIGlmIChzdHlsZS5mYWxsYmFja3MpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzdHlsZS5mYWxsYmFja3MpKSBjb252ZXJ0ZWQuZmFsbGJhY2tzID0gc3R5bGUuZmFsbGJhY2tzLm1hcChjb252ZXJ0Q2FzZSk7ZWxzZSBjb252ZXJ0ZWQuZmFsbGJhY2tzID0gY29udmVydENhc2Uoc3R5bGUuZmFsbGJhY2tzKTtcbiAgfVxuXG4gIHJldHVybiBjb252ZXJ0ZWQ7XG59XG4vKipcbiAqIEFsbG93IGNhbWVsIGNhc2VkIHByb3BlcnR5IG5hbWVzIGJ5IGNvbnZlcnRpbmcgdGhlbSBiYWNrIHRvIGRhc2hlcml6ZWQuXG4gKlxuICogQHBhcmFtIHtSdWxlfSBydWxlXG4gKi9cblxuXG5mdW5jdGlvbiBjYW1lbENhc2UoKSB7XG4gIGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc3R5bGUpKSB7XG4gICAgICAvLyBIYW5kbGUgcnVsZXMgbGlrZSBAZm9udC1mYWNlLCB3aGljaCBjYW4gaGF2ZSBtdWx0aXBsZSBzdHlsZXMgaW4gYW4gYXJyYXlcbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBzdHlsZS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgc3R5bGVbaW5kZXhdID0gY29udmVydENhc2Uoc3R5bGVbaW5kZXhdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0eWxlO1xuICAgIH1cblxuICAgIHJldHVybiBjb252ZXJ0Q2FzZShzdHlsZSk7XG4gIH1cblxuICBmdW5jdGlvbiBvbkNoYW5nZVZhbHVlKHZhbHVlLCBwcm9wLCBydWxlKSB7XG4gICAgaWYgKHByb3AuaW5kZXhPZignLS0nKSA9PT0gMCkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIHZhciBoeXBoZW5hdGVkUHJvcCA9IGh5cGhlbmF0ZShwcm9wKTsgLy8gVGhlcmUgd2FzIG5vIGNhbWVsIGNhc2UgaW4gcGxhY2VcblxuICAgIGlmIChwcm9wID09PSBoeXBoZW5hdGVkUHJvcCkgcmV0dXJuIHZhbHVlO1xuICAgIHJ1bGUucHJvcChoeXBoZW5hdGVkUHJvcCwgdmFsdWUpOyAvLyBDb3JlIHdpbGwgaWdub3JlIHRoYXQgcHJvcGVydHkgdmFsdWUgd2Ugc2V0IHRoZSBwcm9wZXIgb25lIGFib3ZlLlxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG9uUHJvY2Vzc1N0eWxlOiBvblByb2Nlc3NTdHlsZSxcbiAgICBvbkNoYW5nZVZhbHVlOiBvbkNoYW5nZVZhbHVlXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNhbWVsQ2FzZTtcbiIsImltcG9ydCB7IGhhc0NTU1RPTVN1cHBvcnQgfSBmcm9tICdqc3MnO1xuXG52YXIgcHggPSBoYXNDU1NUT01TdXBwb3J0ICYmIENTUyA/IENTUy5weCA6ICdweCc7XG52YXIgbXMgPSBoYXNDU1NUT01TdXBwb3J0ICYmIENTUyA/IENTUy5tcyA6ICdtcyc7XG52YXIgcGVyY2VudCA9IGhhc0NTU1RPTVN1cHBvcnQgJiYgQ1NTID8gQ1NTLnBlcmNlbnQgOiAnJSc7XG4vKipcbiAqIEdlbmVyYXRlZCBqc3MtcGx1Z2luLWRlZmF1bHQtdW5pdCBDU1MgcHJvcGVydHkgdW5pdHNcbiAqXG4gKiBAdHlwZSBvYmplY3RcbiAqL1xuXG52YXIgZGVmYXVsdFVuaXRzID0ge1xuICAvLyBBbmltYXRpb24gcHJvcGVydGllc1xuICAnYW5pbWF0aW9uLWRlbGF5JzogbXMsXG4gICdhbmltYXRpb24tZHVyYXRpb24nOiBtcyxcbiAgLy8gQmFja2dyb3VuZCBwcm9wZXJ0aWVzXG4gICdiYWNrZ3JvdW5kLXBvc2l0aW9uJzogcHgsXG4gICdiYWNrZ3JvdW5kLXBvc2l0aW9uLXgnOiBweCxcbiAgJ2JhY2tncm91bmQtcG9zaXRpb24teSc6IHB4LFxuICAnYmFja2dyb3VuZC1zaXplJzogcHgsXG4gIC8vIEJvcmRlciBQcm9wZXJ0aWVzXG4gIGJvcmRlcjogcHgsXG4gICdib3JkZXItYm90dG9tJzogcHgsXG4gICdib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzJzogcHgsXG4gICdib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1cyc6IHB4LFxuICAnYm9yZGVyLWJvdHRvbS13aWR0aCc6IHB4LFxuICAnYm9yZGVyLWxlZnQnOiBweCxcbiAgJ2JvcmRlci1sZWZ0LXdpZHRoJzogcHgsXG4gICdib3JkZXItcmFkaXVzJzogcHgsXG4gICdib3JkZXItcmlnaHQnOiBweCxcbiAgJ2JvcmRlci1yaWdodC13aWR0aCc6IHB4LFxuICAnYm9yZGVyLXRvcCc6IHB4LFxuICAnYm9yZGVyLXRvcC1sZWZ0LXJhZGl1cyc6IHB4LFxuICAnYm9yZGVyLXRvcC1yaWdodC1yYWRpdXMnOiBweCxcbiAgJ2JvcmRlci10b3Atd2lkdGgnOiBweCxcbiAgJ2JvcmRlci13aWR0aCc6IHB4LFxuICAvLyBNYXJnaW4gcHJvcGVydGllc1xuICBtYXJnaW46IHB4LFxuICAnbWFyZ2luLWJvdHRvbSc6IHB4LFxuICAnbWFyZ2luLWxlZnQnOiBweCxcbiAgJ21hcmdpbi1yaWdodCc6IHB4LFxuICAnbWFyZ2luLXRvcCc6IHB4LFxuICAvLyBQYWRkaW5nIHByb3BlcnRpZXNcbiAgcGFkZGluZzogcHgsXG4gICdwYWRkaW5nLWJvdHRvbSc6IHB4LFxuICAncGFkZGluZy1sZWZ0JzogcHgsXG4gICdwYWRkaW5nLXJpZ2h0JzogcHgsXG4gICdwYWRkaW5nLXRvcCc6IHB4LFxuICAvLyBNYXNrIHByb3BlcnRpZXNcbiAgJ21hc2stcG9zaXRpb24teCc6IHB4LFxuICAnbWFzay1wb3NpdGlvbi15JzogcHgsXG4gICdtYXNrLXNpemUnOiBweCxcbiAgLy8gV2lkdGggYW5kIGhlaWdodCBwcm9wZXJ0aWVzXG4gIGhlaWdodDogcHgsXG4gIHdpZHRoOiBweCxcbiAgJ21pbi1oZWlnaHQnOiBweCxcbiAgJ21heC1oZWlnaHQnOiBweCxcbiAgJ21pbi13aWR0aCc6IHB4LFxuICAnbWF4LXdpZHRoJzogcHgsXG4gIC8vIFBvc2l0aW9uIHByb3BlcnRpZXNcbiAgYm90dG9tOiBweCxcbiAgbGVmdDogcHgsXG4gIHRvcDogcHgsXG4gIHJpZ2h0OiBweCxcbiAgLy8gU2hhZG93IHByb3BlcnRpZXNcbiAgJ2JveC1zaGFkb3cnOiBweCxcbiAgJ3RleHQtc2hhZG93JzogcHgsXG4gIC8vIENvbHVtbiBwcm9wZXJ0aWVzXG4gICdjb2x1bW4tZ2FwJzogcHgsXG4gICdjb2x1bW4tcnVsZSc6IHB4LFxuICAnY29sdW1uLXJ1bGUtd2lkdGgnOiBweCxcbiAgJ2NvbHVtbi13aWR0aCc6IHB4LFxuICAvLyBGb250IGFuZCB0ZXh0IHByb3BlcnRpZXNcbiAgJ2ZvbnQtc2l6ZSc6IHB4LFxuICAnZm9udC1zaXplLWRlbHRhJzogcHgsXG4gICdsZXR0ZXItc3BhY2luZyc6IHB4LFxuICAndGV4dC1pbmRlbnQnOiBweCxcbiAgJ3RleHQtc3Ryb2tlJzogcHgsXG4gICd0ZXh0LXN0cm9rZS13aWR0aCc6IHB4LFxuICAnd29yZC1zcGFjaW5nJzogcHgsXG4gIC8vIE1vdGlvbiBwcm9wZXJ0aWVzXG4gIG1vdGlvbjogcHgsXG4gICdtb3Rpb24tb2Zmc2V0JzogcHgsXG4gIC8vIE91dGxpbmUgcHJvcGVydGllc1xuICBvdXRsaW5lOiBweCxcbiAgJ291dGxpbmUtb2Zmc2V0JzogcHgsXG4gICdvdXRsaW5lLXdpZHRoJzogcHgsXG4gIC8vIFBlcnNwZWN0aXZlIHByb3BlcnRpZXNcbiAgcGVyc3BlY3RpdmU6IHB4LFxuICAncGVyc3BlY3RpdmUtb3JpZ2luLXgnOiBwZXJjZW50LFxuICAncGVyc3BlY3RpdmUtb3JpZ2luLXknOiBwZXJjZW50LFxuICAvLyBUcmFuc2Zvcm0gcHJvcGVydGllc1xuICAndHJhbnNmb3JtLW9yaWdpbic6IHBlcmNlbnQsXG4gICd0cmFuc2Zvcm0tb3JpZ2luLXgnOiBwZXJjZW50LFxuICAndHJhbnNmb3JtLW9yaWdpbi15JzogcGVyY2VudCxcbiAgJ3RyYW5zZm9ybS1vcmlnaW4teic6IHBlcmNlbnQsXG4gIC8vIFRyYW5zaXRpb24gcHJvcGVydGllc1xuICAndHJhbnNpdGlvbi1kZWxheSc6IG1zLFxuICAndHJhbnNpdGlvbi1kdXJhdGlvbic6IG1zLFxuICAvLyBBbGlnbm1lbnQgcHJvcGVydGllc1xuICAndmVydGljYWwtYWxpZ24nOiBweCxcbiAgJ2ZsZXgtYmFzaXMnOiBweCxcbiAgLy8gU29tZSByYW5kb20gcHJvcGVydGllc1xuICAnc2hhcGUtbWFyZ2luJzogcHgsXG4gIHNpemU6IHB4LFxuICAvLyBHcmlkIHByb3BlcnRpZXNcbiAgZ3JpZDogcHgsXG4gICdncmlkLWdhcCc6IHB4LFxuICAnZ3JpZC1yb3ctZ2FwJzogcHgsXG4gICdncmlkLWNvbHVtbi1nYXAnOiBweCxcbiAgJ2dyaWQtdGVtcGxhdGUtcm93cyc6IHB4LFxuICAnZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zJzogcHgsXG4gICdncmlkLWF1dG8tcm93cyc6IHB4LFxuICAnZ3JpZC1hdXRvLWNvbHVtbnMnOiBweCxcbiAgLy8gTm90IGV4aXN0aW5nIHByb3BlcnRpZXMuXG4gIC8vIFVzZWQgdG8gYXZvaWQgaXNzdWVzIHdpdGgganNzLXBsdWdpbi1leHBhbmQgaW50ZWdyYXRpb24uXG4gICdib3gtc2hhZG93LXgnOiBweCxcbiAgJ2JveC1zaGFkb3cteSc6IHB4LFxuICAnYm94LXNoYWRvdy1ibHVyJzogcHgsXG4gICdib3gtc2hhZG93LXNwcmVhZCc6IHB4LFxuICAnZm9udC1saW5lLWhlaWdodCc6IHB4LFxuICAndGV4dC1zaGFkb3cteCc6IHB4LFxuICAndGV4dC1zaGFkb3cteSc6IHB4LFxuICAndGV4dC1zaGFkb3ctYmx1cic6IHB4XG59O1xuXG4vKipcbiAqIENsb25lcyB0aGUgb2JqZWN0IGFuZCBhZGRzIGEgY2FtZWwgY2FzZWQgcHJvcGVydHkgdmVyc2lvbi5cbiAqL1xuZnVuY3Rpb24gYWRkQ2FtZWxDYXNlZFZlcnNpb24ob2JqKSB7XG4gIHZhciByZWdFeHAgPSAvKC1bYS16XSkvZztcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2Uoc3RyKSB7XG4gICAgcmV0dXJuIHN0clsxXS50b1VwcGVyQ2FzZSgpO1xuICB9O1xuXG4gIHZhciBuZXdPYmogPSB7fTtcblxuICBmb3IgKHZhciBfa2V5IGluIG9iaikge1xuICAgIG5ld09ialtfa2V5XSA9IG9ialtfa2V5XTtcbiAgICBuZXdPYmpbX2tleS5yZXBsYWNlKHJlZ0V4cCwgcmVwbGFjZSldID0gb2JqW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIG5ld09iajtcbn1cblxudmFyIHVuaXRzID0gYWRkQ2FtZWxDYXNlZFZlcnNpb24oZGVmYXVsdFVuaXRzKTtcbi8qKlxuICogUmVjdXJzaXZlIGRlZXAgc3R5bGUgcGFzc2luZyBmdW5jdGlvblxuICovXG5cbmZ1bmN0aW9uIGl0ZXJhdGUocHJvcCwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgaWYgKCF2YWx1ZSkgcmV0dXJuIHZhbHVlO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhbHVlW2ldID0gaXRlcmF0ZShwcm9wLCB2YWx1ZVtpXSwgb3B0aW9ucyk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICBpZiAocHJvcCA9PT0gJ2ZhbGxiYWNrcycpIHtcbiAgICAgIGZvciAodmFyIGlubmVyUHJvcCBpbiB2YWx1ZSkge1xuICAgICAgICB2YWx1ZVtpbm5lclByb3BdID0gaXRlcmF0ZShpbm5lclByb3AsIHZhbHVlW2lubmVyUHJvcF0sIG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKHZhciBfaW5uZXJQcm9wIGluIHZhbHVlKSB7XG4gICAgICAgIHZhbHVlW19pbm5lclByb3BdID0gaXRlcmF0ZShwcm9wICsgXCItXCIgKyBfaW5uZXJQcm9wLCB2YWx1ZVtfaW5uZXJQcm9wXSwgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB2YXIgdW5pdCA9IG9wdGlvbnNbcHJvcF0gfHwgdW5pdHNbcHJvcF07XG5cbiAgICBpZiAodW5pdCkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB1bml0ID09PSAnZnVuY3Rpb24nID8gdW5pdCh2YWx1ZSkudG9TdHJpbmcoKSA6IFwiXCIgKyB2YWx1ZSArIHVuaXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCk7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59XG4vKipcbiAqIEFkZCB1bml0IHRvIG51bWVyaWMgdmFsdWVzLlxuICovXG5cblxuZnVuY3Rpb24gZGVmYXVsdFVuaXQob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIGNhbWVsQ2FzZWRPcHRpb25zID0gYWRkQ2FtZWxDYXNlZFZlcnNpb24ob3B0aW9ucyk7XG5cbiAgZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUpIHtcbiAgICBpZiAocnVsZS50eXBlICE9PSAnc3R5bGUnKSByZXR1cm4gc3R5bGU7XG5cbiAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgICBzdHlsZVtwcm9wXSA9IGl0ZXJhdGUocHJvcCwgc3R5bGVbcHJvcF0sIGNhbWVsQ2FzZWRPcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3R5bGU7XG4gIH1cblxuICBmdW5jdGlvbiBvbkNoYW5nZVZhbHVlKHZhbHVlLCBwcm9wKSB7XG4gICAgcmV0dXJuIGl0ZXJhdGUocHJvcCwgdmFsdWUsIGNhbWVsQ2FzZWRPcHRpb25zKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgb25Qcm9jZXNzU3R5bGU6IG9uUHJvY2Vzc1N0eWxlLFxuICAgIG9uQ2hhbmdlVmFsdWU6IG9uQ2hhbmdlVmFsdWVcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZGVmYXVsdFVuaXQ7XG4iLCJpbXBvcnQgaXNJbkJyb3dzZXIgZnJvbSAnaXMtaW4tYnJvd3Nlcic7XG5pbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5JztcblxuLy8gRXhwb3J0IGphdmFzY3JpcHQgc3R5bGUgYW5kIGNzcyBzdHlsZSB2ZW5kb3IgcHJlZml4ZXMuXG52YXIganMgPSAnJztcbnZhciBjc3MgPSAnJztcbnZhciB2ZW5kb3IgPSAnJztcbnZhciBicm93c2VyID0gJyc7XG52YXIgaXNUb3VjaCA9IGlzSW5Ccm93c2VyICYmICdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDsgLy8gV2Ugc2hvdWxkIG5vdCBkbyBhbnl0aGluZyBpZiByZXF1aXJlZCBzZXJ2ZXJzaWRlLlxuXG5pZiAoaXNJbkJyb3dzZXIpIHtcbiAgLy8gT3JkZXIgbWF0dGVycy4gV2UgbmVlZCB0byBjaGVjayBXZWJraXQgdGhlIGxhc3Qgb25lIGJlY2F1c2VcbiAgLy8gb3RoZXIgdmVuZG9ycyB1c2UgdG8gYWRkIFdlYmtpdCBwcmVmaXhlcyB0byBzb21lIHByb3BlcnRpZXNcbiAgdmFyIGpzQ3NzTWFwID0ge1xuICAgIE1vejogJy1tb3otJyxcbiAgICBtczogJy1tcy0nLFxuICAgIE86ICctby0nLFxuICAgIFdlYmtpdDogJy13ZWJraXQtJ1xuICB9O1xuXG4gIHZhciBfZG9jdW1lbnQkY3JlYXRlRWxlbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyksXG4gICAgICBzdHlsZSA9IF9kb2N1bWVudCRjcmVhdGVFbGVtZS5zdHlsZTtcblxuICB2YXIgdGVzdFByb3AgPSAnVHJhbnNmb3JtJztcblxuICBmb3IgKHZhciBrZXkgaW4ganNDc3NNYXApIHtcbiAgICBpZiAoa2V5ICsgdGVzdFByb3AgaW4gc3R5bGUpIHtcbiAgICAgIGpzID0ga2V5O1xuICAgICAgY3NzID0ganNDc3NNYXBba2V5XTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfSAvLyBDb3JyZWN0bHkgZGV0ZWN0IHRoZSBFZGdlIGJyb3dzZXIuXG5cblxuICBpZiAoanMgPT09ICdXZWJraXQnICYmICdtc0h5cGhlbnMnIGluIHN0eWxlKSB7XG4gICAganMgPSAnbXMnO1xuICAgIGNzcyA9IGpzQ3NzTWFwLm1zO1xuICAgIGJyb3dzZXIgPSAnZWRnZSc7XG4gIH0gLy8gQ29ycmVjdGx5IGRldGVjdCB0aGUgU2FmYXJpIGJyb3dzZXIuXG5cblxuICBpZiAoanMgPT09ICdXZWJraXQnICYmICctYXBwbGUtdHJhaWxpbmctd29yZCcgaW4gc3R5bGUpIHtcbiAgICB2ZW5kb3IgPSAnYXBwbGUnO1xuICB9XG59XG4vKipcbiAqIFZlbmRvciBwcmVmaXggc3RyaW5nIGZvciB0aGUgY3VycmVudCBicm93c2VyLlxuICpcbiAqIEB0eXBlIHt7anM6IFN0cmluZywgY3NzOiBTdHJpbmcsIHZlbmRvcjogU3RyaW5nLCBicm93c2VyOiBTdHJpbmd9fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5cbnZhciBwcmVmaXggPSB7XG4gIGpzOiBqcyxcbiAgY3NzOiBjc3MsXG4gIHZlbmRvcjogdmVuZG9yLFxuICBicm93c2VyOiBicm93c2VyLFxuICBpc1RvdWNoOiBpc1RvdWNoXG59O1xuXG4vKipcbiAqIFRlc3QgaWYgYSBrZXlmcmFtZSBhdC1ydWxlIHNob3VsZCBiZSBwcmVmaXhlZCBvciBub3RcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdmVuZG9yIHByZWZpeCBzdHJpbmcgZm9yIHRoZSBjdXJyZW50IGJyb3dzZXIuXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRlZEtleWZyYW1lcyhrZXkpIHtcbiAgLy8gS2V5ZnJhbWVzIGlzIGFscmVhZHkgcHJlZml4ZWQuIGUuZy4ga2V5ID0gJ0Atd2Via2l0LWtleWZyYW1lcyBhJ1xuICBpZiAoa2V5WzFdID09PSAnLScpIHJldHVybiBrZXk7IC8vIE5vIG5lZWQgdG8gcHJlZml4IElFL0VkZ2UuIE9sZGVyIGJyb3dzZXJzIHdpbGwgaWdub3JlIHVuc3VwcG9ydGVkIHJ1bGVzLlxuICAvLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9a2V5ZnJhbWVzXG5cbiAgaWYgKHByZWZpeC5qcyA9PT0gJ21zJykgcmV0dXJuIGtleTtcbiAgcmV0dXJuIFwiQFwiICsgcHJlZml4LmNzcyArIFwia2V5ZnJhbWVzXCIgKyBrZXkuc3Vic3RyKDEwKTtcbn1cblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPWFwcGVhcmFuY2VcblxudmFyIGFwcGVhcmVuY2UgPSB7XG4gIG5vUHJlZmlsbDogWydhcHBlYXJhbmNlJ10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKSB7XG4gICAgaWYgKHByb3AgIT09ICdhcHBlYXJhbmNlJykgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChwcmVmaXguanMgPT09ICdtcycpIHJldHVybiBcIi13ZWJraXQtXCIgKyBwcm9wO1xuICAgIHJldHVybiBwcmVmaXguY3NzICsgcHJvcDtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPWNvbG9yLWFkanVzdFxuXG52YXIgY29sb3JBZGp1c3QgPSB7XG4gIG5vUHJlZmlsbDogWydjb2xvci1hZGp1c3QnXSxcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3ApIHtcbiAgICBpZiAocHJvcCAhPT0gJ2NvbG9yLWFkanVzdCcpIHJldHVybiBmYWxzZTtcbiAgICBpZiAocHJlZml4LmpzID09PSAnV2Via2l0JykgcmV0dXJuIHByZWZpeC5jc3MgKyBcInByaW50LVwiICsgcHJvcDtcbiAgICByZXR1cm4gcHJvcDtcbiAgfVxufTtcblxudmFyIHJlZ0V4cCA9IC9bLVxcc10rKC4pPy9nO1xuLyoqXG4gKiBSZXBsYWNlcyB0aGUgbGV0dGVyIHdpdGggdGhlIGNhcGl0YWwgbGV0dGVyXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1hdGNoXG4gKiBAcGFyYW0ge1N0cmluZ30gY1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gdG9VcHBlcihtYXRjaCwgYykge1xuICByZXR1cm4gYyA/IGMudG9VcHBlckNhc2UoKSA6ICcnO1xufVxuLyoqXG4gKiBDb252ZXJ0IGRhc2ggc2VwYXJhdGVkIHN0cmluZ3MgdG8gY2FtZWwtY2FzZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuXG5mdW5jdGlvbiBjYW1lbGl6ZShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKHJlZ0V4cCwgdG9VcHBlcik7XG59XG5cbi8qKlxuICogQ29udmVydCBkYXNoIHNlcGFyYXRlZCBzdHJpbmdzIHRvIHBhc2NhbCBjYXNlZC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXNjYWxpemUoc3RyKSB7XG4gIHJldHVybiBjYW1lbGl6ZShcIi1cIiArIHN0cik7XG59XG5cbi8vIGJ1dCB3ZSBjYW4gdXNlIGEgbG9uZ2hhbmQgcHJvcGVydHkgaW5zdGVhZC5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1tYXNrXG5cbnZhciBtYXNrID0ge1xuICBub1ByZWZpbGw6IFsnbWFzayddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUpIHtcbiAgICBpZiAoIS9ebWFzay8udGVzdChwcm9wKSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ1dlYmtpdCcpIHtcbiAgICAgIHZhciBsb25naGFuZCA9ICdtYXNrLWltYWdlJztcblxuICAgICAgaWYgKGNhbWVsaXplKGxvbmdoYW5kKSBpbiBzdHlsZSkge1xuICAgICAgICByZXR1cm4gcHJvcDtcbiAgICAgIH1cblxuICAgICAgaWYgKHByZWZpeC5qcyArIHBhc2NhbGl6ZShsb25naGFuZCkgaW4gc3R5bGUpIHtcbiAgICAgICAgcmV0dXJuIHByZWZpeC5jc3MgKyBwcm9wO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBwcm9wO1xuICB9XG59O1xuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9dGV4dC1vcmllbnRhdGlvblxuXG52YXIgdGV4dE9yaWVudGF0aW9uID0ge1xuICBub1ByZWZpbGw6IFsndGV4dC1vcmllbnRhdGlvbiddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCkge1xuICAgIGlmIChwcm9wICE9PSAndGV4dC1vcmllbnRhdGlvbicpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChwcmVmaXgudmVuZG9yID09PSAnYXBwbGUnICYmICFwcmVmaXguaXNUb3VjaCkge1xuICAgICAgcmV0dXJuIHByZWZpeC5jc3MgKyBwcm9wO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9wO1xuICB9XG59O1xuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9dHJhbnNmb3JtXG5cbnZhciB0cmFuc2Zvcm0gPSB7XG4gIG5vUHJlZmlsbDogWyd0cmFuc2Zvcm0nXSxcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgaWYgKHByb3AgIT09ICd0cmFuc2Zvcm0nKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAob3B0aW9ucy50cmFuc2Zvcm0pIHtcbiAgICAgIHJldHVybiBwcm9wO1xuICAgIH1cblxuICAgIHJldHVybiBwcmVmaXguY3NzICsgcHJvcDtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPXRyYW5zaXRpb25cblxudmFyIHRyYW5zaXRpb24gPSB7XG4gIG5vUHJlZmlsbDogWyd0cmFuc2l0aW9uJ10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSwgb3B0aW9ucykge1xuICAgIGlmIChwcm9wICE9PSAndHJhbnNpdGlvbicpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChvcHRpb25zLnRyYW5zaXRpb24pIHtcbiAgICAgIHJldHVybiBwcm9wO1xuICAgIH1cblxuICAgIHJldHVybiBwcmVmaXguY3NzICsgcHJvcDtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPXdyaXRpbmctbW9kZVxuXG52YXIgd3JpdGluZ01vZGUgPSB7XG4gIG5vUHJlZmlsbDogWyd3cml0aW5nLW1vZGUnXSxcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3ApIHtcbiAgICBpZiAocHJvcCAhPT0gJ3dyaXRpbmctbW9kZScpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChwcmVmaXguanMgPT09ICdXZWJraXQnIHx8IHByZWZpeC5qcyA9PT0gJ21zJyAmJiBwcmVmaXguYnJvd3NlciAhPT0gJ2VkZ2UnKSB7XG4gICAgICByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD11c2VyLXNlbGVjdFxuXG52YXIgdXNlclNlbGVjdCA9IHtcbiAgbm9QcmVmaWxsOiBbJ3VzZXItc2VsZWN0J10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKSB7XG4gICAgaWYgKHByb3AgIT09ICd1c2VyLXNlbGVjdCcpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChwcmVmaXguanMgPT09ICdNb3onIHx8IHByZWZpeC5qcyA9PT0gJ21zJyB8fCBwcmVmaXgudmVuZG9yID09PSAnYXBwbGUnKSB7XG4gICAgICByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1tdWx0aWNvbHVtblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3Bvc3Rjc3MvYXV0b3ByZWZpeGVyL2lzc3Vlcy80OTFcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3N0Y3NzL2F1dG9wcmVmaXhlci9pc3N1ZXMvMTc3XG5cbnZhciBicmVha1Byb3BzT2xkID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUpIHtcbiAgICBpZiAoIS9eYnJlYWstLy50ZXN0KHByb3ApKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAocHJlZml4LmpzID09PSAnV2Via2l0Jykge1xuICAgICAgdmFyIGpzUHJvcCA9IFwiV2Via2l0Q29sdW1uXCIgKyBwYXNjYWxpemUocHJvcCk7XG4gICAgICByZXR1cm4ganNQcm9wIGluIHN0eWxlID8gcHJlZml4LmNzcyArIFwiY29sdW1uLVwiICsgcHJvcCA6IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChwcmVmaXguanMgPT09ICdNb3onKSB7XG4gICAgICB2YXIgX2pzUHJvcCA9IFwicGFnZVwiICsgcGFzY2FsaXplKHByb3ApO1xuXG4gICAgICByZXR1cm4gX2pzUHJvcCBpbiBzdHlsZSA/IFwicGFnZS1cIiArIHByb3AgOiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbi8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcG9zdGNzcy9hdXRvcHJlZml4ZXIvaXNzdWVzLzMyNC5cblxudmFyIGlubGluZUxvZ2ljYWxPbGQgPSB7XG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSkge1xuICAgIGlmICghL14oYm9yZGVyfG1hcmdpbnxwYWRkaW5nKS1pbmxpbmUvLnRlc3QocHJvcCkpIHJldHVybiBmYWxzZTtcbiAgICBpZiAocHJlZml4LmpzID09PSAnTW96JykgcmV0dXJuIHByb3A7XG4gICAgdmFyIG5ld1Byb3AgPSBwcm9wLnJlcGxhY2UoJy1pbmxpbmUnLCAnJyk7XG4gICAgcmV0dXJuIHByZWZpeC5qcyArIHBhc2NhbGl6ZShuZXdQcm9wKSBpbiBzdHlsZSA/IHByZWZpeC5jc3MgKyBuZXdQcm9wIDogZmFsc2U7XG4gIH1cbn07XG5cbi8vIENhbWVsaXphdGlvbiBpcyByZXF1aXJlZCBiZWNhdXNlIHdlIGNhbid0IHRlc3QgdXNpbmcuXG4vLyBDU1Mgc3ludGF4IGZvciBlLmcuIGluIEZGLlxuXG52YXIgdW5wcmVmaXhlZCA9IHtcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlKSB7XG4gICAgcmV0dXJuIGNhbWVsaXplKHByb3ApIGluIHN0eWxlID8gcHJvcCA6IGZhbHNlO1xuICB9XG59O1xuXG52YXIgcHJlZml4ZWQgPSB7XG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSkge1xuICAgIHZhciBwYXNjYWxpemVkID0gcGFzY2FsaXplKHByb3ApOyAvLyBSZXR1cm4gY3VzdG9tIENTUyB2YXJpYWJsZSB3aXRob3V0IHByZWZpeGluZy5cblxuICAgIGlmIChwcm9wWzBdID09PSAnLScpIHJldHVybiBwcm9wOyAvLyBSZXR1cm4gYWxyZWFkeSBwcmVmaXhlZCB2YWx1ZSB3aXRob3V0IHByZWZpeGluZy5cblxuICAgIGlmIChwcm9wWzBdID09PSAnLScgJiYgcHJvcFsxXSA9PT0gJy0nKSByZXR1cm4gcHJvcDtcbiAgICBpZiAocHJlZml4LmpzICsgcGFzY2FsaXplZCBpbiBzdHlsZSkgcmV0dXJuIHByZWZpeC5jc3MgKyBwcm9wOyAvLyBUcnkgd2Via2l0IGZhbGxiYWNrLlxuXG4gICAgaWYgKHByZWZpeC5qcyAhPT0gJ1dlYmtpdCcgJiYgXCJXZWJraXRcIiArIHBhc2NhbGl6ZWQgaW4gc3R5bGUpIHJldHVybiBcIi13ZWJraXQtXCIgKyBwcm9wO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPXNjcm9sbC1zbmFwXG5cbnZhciBzY3JvbGxTbmFwID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCkge1xuICAgIGlmIChwcm9wLnN1YnN0cmluZygwLCAxMSkgIT09ICdzY3JvbGwtc25hcCcpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChwcmVmaXguanMgPT09ICdtcycpIHtcbiAgICAgIHJldHVybiBcIlwiICsgcHJlZml4LmNzcyArIHByb3A7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1vdmVyc2Nyb2xsLWJlaGF2aW9yXG5cbnZhciBvdmVyc2Nyb2xsQmVoYXZpb3IgPSB7XG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKSB7XG4gICAgaWYgKHByb3AgIT09ICdvdmVyc2Nyb2xsLWJlaGF2aW9yJykgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ21zJykge1xuICAgICAgcmV0dXJuIHByZWZpeC5jc3MgKyBcInNjcm9sbC1jaGFpbmluZ1wiO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9wO1xuICB9XG59O1xuXG52YXIgcHJvcE1hcCA9IHtcbiAgJ2ZsZXgtZ3Jvdyc6ICdmbGV4LXBvc2l0aXZlJyxcbiAgJ2ZsZXgtc2hyaW5rJzogJ2ZsZXgtbmVnYXRpdmUnLFxuICAnZmxleC1iYXNpcyc6ICdmbGV4LXByZWZlcnJlZC1zaXplJyxcbiAgJ2p1c3RpZnktY29udGVudCc6ICdmbGV4LXBhY2snLFxuICBvcmRlcjogJ2ZsZXgtb3JkZXInLFxuICAnYWxpZ24taXRlbXMnOiAnZmxleC1hbGlnbicsXG4gICdhbGlnbi1jb250ZW50JzogJ2ZsZXgtbGluZS1wYWNrJyAvLyAnYWxpZ24tc2VsZicgaXMgaGFuZGxlZCBieSAnYWxpZ24tc2VsZicgcGx1Z2luLlxuXG59OyAvLyBTdXBwb3J0IG9sZCBmbGV4IHNwZWMgZnJvbSAyMDEyLlxuXG52YXIgZmxleDIwMTIgPSB7XG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSkge1xuICAgIHZhciBuZXdQcm9wID0gcHJvcE1hcFtwcm9wXTtcbiAgICBpZiAoIW5ld1Byb3ApIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gcHJlZml4LmpzICsgcGFzY2FsaXplKG5ld1Byb3ApIGluIHN0eWxlID8gcHJlZml4LmNzcyArIG5ld1Byb3AgOiBmYWxzZTtcbiAgfVxufTtcblxudmFyIHByb3BNYXAkMSA9IHtcbiAgZmxleDogJ2JveC1mbGV4JyxcbiAgJ2ZsZXgtZ3Jvdyc6ICdib3gtZmxleCcsXG4gICdmbGV4LWRpcmVjdGlvbic6IFsnYm94LW9yaWVudCcsICdib3gtZGlyZWN0aW9uJ10sXG4gIG9yZGVyOiAnYm94LW9yZGluYWwtZ3JvdXAnLFxuICAnYWxpZ24taXRlbXMnOiAnYm94LWFsaWduJyxcbiAgJ2ZsZXgtZmxvdyc6IFsnYm94LW9yaWVudCcsICdib3gtZGlyZWN0aW9uJ10sXG4gICdqdXN0aWZ5LWNvbnRlbnQnOiAnYm94LXBhY2snXG59O1xudmFyIHByb3BLZXlzID0gT2JqZWN0LmtleXMocHJvcE1hcCQxKTtcblxudmFyIHByZWZpeENzcyA9IGZ1bmN0aW9uIHByZWZpeENzcyhwKSB7XG4gIHJldHVybiBwcmVmaXguY3NzICsgcDtcbn07IC8vIFN1cHBvcnQgb2xkIGZsZXggc3BlYyBmcm9tIDIwMDkuXG5cblxudmFyIGZsZXgyMDA5ID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUsIF9yZWYpIHtcbiAgICB2YXIgbXVsdGlwbGUgPSBfcmVmLm11bHRpcGxlO1xuXG4gICAgaWYgKHByb3BLZXlzLmluZGV4T2YocHJvcCkgPiAtMSkge1xuICAgICAgdmFyIG5ld1Byb3AgPSBwcm9wTWFwJDFbcHJvcF07XG5cbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShuZXdQcm9wKSkge1xuICAgICAgICByZXR1cm4gcHJlZml4LmpzICsgcGFzY2FsaXplKG5ld1Byb3ApIGluIHN0eWxlID8gcHJlZml4LmNzcyArIG5ld1Byb3AgOiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFtdWx0aXBsZSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5ld1Byb3AubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKCEocHJlZml4LmpzICsgcGFzY2FsaXplKG5ld1Byb3BbMF0pIGluIHN0eWxlKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3UHJvcC5tYXAocHJlZml4Q3NzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbi8vIHBsdWdpbnMgPSBbXG4vLyAgIC4uLnBsdWdpbnMsXG4vLyAgICBicmVha1Byb3BzT2xkLFxuLy8gICAgaW5saW5lTG9naWNhbE9sZCxcbi8vICAgIHVucHJlZml4ZWQsXG4vLyAgICBwcmVmaXhlZCxcbi8vICAgIHNjcm9sbFNuYXAsXG4vLyAgICBmbGV4MjAxMixcbi8vICAgIGZsZXgyMDA5XG4vLyBdXG4vLyBQbHVnaW5zIHdpdGhvdXQgJ25vUHJlZmlsbCcgdmFsdWUsIGdvaW5nIGxhc3QuXG4vLyAnZmxleC0qJyBwbHVnaW5zIHNob3VsZCBiZSBhdCB0aGUgYm90dG9tLlxuLy8gJ2ZsZXgyMDA5JyBnb2luZyBhZnRlciAnZmxleDIwMTInLlxuLy8gJ3ByZWZpeGVkJyBnb2luZyBhZnRlciAndW5wcmVmaXhlZCdcblxudmFyIHBsdWdpbnMgPSBbYXBwZWFyZW5jZSwgY29sb3JBZGp1c3QsIG1hc2ssIHRleHRPcmllbnRhdGlvbiwgdHJhbnNmb3JtLCB0cmFuc2l0aW9uLCB3cml0aW5nTW9kZSwgdXNlclNlbGVjdCwgYnJlYWtQcm9wc09sZCwgaW5saW5lTG9naWNhbE9sZCwgdW5wcmVmaXhlZCwgcHJlZml4ZWQsIHNjcm9sbFNuYXAsIG92ZXJzY3JvbGxCZWhhdmlvciwgZmxleDIwMTIsIGZsZXgyMDA5XTtcbnZhciBwcm9wZXJ0eURldGVjdG9ycyA9IHBsdWdpbnMuZmlsdGVyKGZ1bmN0aW9uIChwKSB7XG4gIHJldHVybiBwLnN1cHBvcnRlZFByb3BlcnR5O1xufSkubWFwKGZ1bmN0aW9uIChwKSB7XG4gIHJldHVybiBwLnN1cHBvcnRlZFByb3BlcnR5O1xufSk7XG52YXIgbm9QcmVmaWxsID0gcGx1Z2lucy5maWx0ZXIoZnVuY3Rpb24gKHApIHtcbiAgcmV0dXJuIHAubm9QcmVmaWxsO1xufSkucmVkdWNlKGZ1bmN0aW9uIChhLCBwKSB7XG4gIGEucHVzaC5hcHBseShhLCBfdG9Db25zdW1hYmxlQXJyYXkocC5ub1ByZWZpbGwpKTtcbiAgcmV0dXJuIGE7XG59LCBbXSk7XG5cbnZhciBlbDtcbnZhciBjYWNoZSA9IHt9O1xuXG5pZiAoaXNJbkJyb3dzZXIpIHtcbiAgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7IC8vIFdlIHRlc3QgZXZlcnkgcHJvcGVydHkgb24gdmVuZG9yIHByZWZpeCByZXF1aXJlbWVudC5cbiAgLy8gT25jZSB0ZXN0ZWQsIHJlc3VsdCBpcyBjYWNoZWQuIEl0IGdpdmVzIHVzIHVwIHRvIDcwJSBwZXJmIGJvb3N0LlxuICAvLyBodHRwOi8vanNwZXJmLmNvbS9lbGVtZW50LXN0eWxlLW9iamVjdC1hY2Nlc3MtdnMtcGxhaW4tb2JqZWN0XG4gIC8vXG4gIC8vIFByZWZpbGwgY2FjaGUgd2l0aCBrbm93biBjc3MgcHJvcGVydGllcyB0byByZWR1Y2UgYW1vdW50IG9mXG4gIC8vIHByb3BlcnRpZXMgd2UgbmVlZCB0byBmZWF0dXJlIHRlc3QgYXQgcnVudGltZS5cbiAgLy8gaHR0cDovL2Rhdmlkd2Fsc2gubmFtZS92ZW5kb3ItcHJlZml4XG5cbiAgdmFyIGNvbXB1dGVkID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCAnJyk7XG5cbiAgZm9yICh2YXIga2V5JDEgaW4gY29tcHV0ZWQpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzXG4gICAgaWYgKCFpc05hTihrZXkkMSkpIGNhY2hlW2NvbXB1dGVkW2tleSQxXV0gPSBjb21wdXRlZFtrZXkkMV07XG4gIH0gLy8gUHJvcGVydGllcyB0aGF0IGNhbm5vdCBiZSBjb3JyZWN0bHkgZGV0ZWN0ZWQgdXNpbmcgdGhlXG4gIC8vIGNhY2hlIHByZWZpbGwgbWV0aG9kLlxuXG5cbiAgbm9QcmVmaWxsLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcbiAgICByZXR1cm4gZGVsZXRlIGNhY2hlW3hdO1xuICB9KTtcbn1cbi8qKlxuICogVGVzdCBpZiBhIHByb3BlcnR5IGlzIHN1cHBvcnRlZCwgcmV0dXJucyBzdXBwb3J0ZWQgcHJvcGVydHkgd2l0aCB2ZW5kb3JcbiAqIHByZWZpeCBpZiByZXF1aXJlZC4gUmV0dXJucyBgZmFsc2VgIGlmIG5vdCBzdXBwb3J0ZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHByb3AgZGFzaCBzZXBhcmF0ZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEByZXR1cm4ge1N0cmluZ3xCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5cbmZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIC8vIEZvciBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuXG4gIGlmICghZWwpIHJldHVybiBwcm9wOyAvLyBSZW1vdmUgY2FjaGUgZm9yIGJlbmNobWFyayB0ZXN0cyBvciByZXR1cm4gcHJvcGVydHkgZnJvbSB0aGUgY2FjaGUuXG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAnYmVuY2htYXJrJyAmJiBjYWNoZVtwcm9wXSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIGNhY2hlW3Byb3BdO1xuICB9IC8vIENoZWNrIGlmICd0cmFuc2l0aW9uJyBvciAndHJhbnNmb3JtJyBuYXRpdmVseSBzdXBwb3J0ZWQgaW4gYnJvd3Nlci5cblxuXG4gIGlmIChwcm9wID09PSAndHJhbnNpdGlvbicgfHwgcHJvcCA9PT0gJ3RyYW5zZm9ybScpIHtcbiAgICBvcHRpb25zW3Byb3BdID0gcHJvcCBpbiBlbC5zdHlsZTtcbiAgfSAvLyBGaW5kIGEgcGx1Z2luIGZvciBjdXJyZW50IHByZWZpeCBwcm9wZXJ0eS5cblxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcGVydHlEZXRlY3RvcnMubGVuZ3RoOyBpKyspIHtcbiAgICBjYWNoZVtwcm9wXSA9IHByb3BlcnR5RGV0ZWN0b3JzW2ldKHByb3AsIGVsLnN0eWxlLCBvcHRpb25zKTsgLy8gQnJlYWsgbG9vcCwgaWYgdmFsdWUgZm91bmQuXG5cbiAgICBpZiAoY2FjaGVbcHJvcF0pIGJyZWFrO1xuICB9IC8vIFJlc2V0IHN0eWxlcyBmb3IgY3VycmVudCBwcm9wZXJ0eS5cbiAgLy8gRmlyZWZveCBjYW4gZXZlbiB0aHJvdyBhbiBlcnJvciBmb3IgaW52YWxpZCBwcm9wZXJ0aWVzLCBlLmcuLCBcIjBcIi5cblxuXG4gIHRyeSB7XG4gICAgZWwuc3R5bGVbcHJvcF0gPSAnJztcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGNhY2hlW3Byb3BdO1xufVxuXG52YXIgY2FjaGUkMSA9IHt9O1xudmFyIHRyYW5zaXRpb25Qcm9wZXJ0aWVzID0ge1xuICB0cmFuc2l0aW9uOiAxLFxuICAndHJhbnNpdGlvbi1wcm9wZXJ0eSc6IDEsXG4gICctd2Via2l0LXRyYW5zaXRpb24nOiAxLFxuICAnLXdlYmtpdC10cmFuc2l0aW9uLXByb3BlcnR5JzogMVxufTtcbnZhciB0cmFuc1Byb3BzUmVnRXhwID0gLyheXFxzKltcXHctXSspfCwgKFxccypbXFx3LV0rKSg/IVteKCldKlxcKSkvZztcbnZhciBlbCQxO1xuLyoqXG4gKiBSZXR1cm5zIHByZWZpeGVkIHZhbHVlIHRyYW5zaXRpb24vdHJhbnNmb3JtIGlmIG5lZWRlZC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWF0Y2hcbiAqIEBwYXJhbSB7U3RyaW5nfSBwMVxuICogQHBhcmFtIHtTdHJpbmd9IHAyXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwcmVmaXhUcmFuc2l0aW9uQ2FsbGJhY2sobWF0Y2gsIHAxLCBwMikge1xuICBpZiAocDEgPT09ICd2YXInKSByZXR1cm4gJ3Zhcic7XG4gIGlmIChwMSA9PT0gJ2FsbCcpIHJldHVybiAnYWxsJztcbiAgaWYgKHAyID09PSAnYWxsJykgcmV0dXJuICcsIGFsbCc7XG4gIHZhciBwcmVmaXhlZFZhbHVlID0gcDEgPyBzdXBwb3J0ZWRQcm9wZXJ0eShwMSkgOiBcIiwgXCIgKyBzdXBwb3J0ZWRQcm9wZXJ0eShwMik7XG4gIGlmICghcHJlZml4ZWRWYWx1ZSkgcmV0dXJuIHAxIHx8IHAyO1xuICByZXR1cm4gcHJlZml4ZWRWYWx1ZTtcbn1cblxuaWYgKGlzSW5Ccm93c2VyKSBlbCQxID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuLyoqXG4gKiBSZXR1cm5zIHByZWZpeGVkIHZhbHVlIGlmIG5lZWRlZC4gUmV0dXJucyBgZmFsc2VgIGlmIHZhbHVlIGlzIG5vdCBzdXBwb3J0ZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gKiBAcGFyYW0ge1N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4ge1N0cmluZ3xCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0ZWRWYWx1ZShwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgLy8gRm9yIHNlcnZlci1zaWRlIHJlbmRlcmluZy5cbiAgdmFyIHByZWZpeGVkVmFsdWUgPSB2YWx1ZTtcbiAgaWYgKCFlbCQxIHx8IHByb3BlcnR5ID09PSAnY29udGVudCcpIHJldHVybiB2YWx1ZTsgLy8gSXQgaXMgYSBzdHJpbmcgb3IgYSBudW1iZXIgYXMgYSBzdHJpbmcgbGlrZSAnMScuXG4gIC8vIFdlIHdhbnQgb25seSBwcmVmaXhhYmxlIHZhbHVlcyBoZXJlLlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzXG5cbiAgaWYgKHR5cGVvZiBwcmVmaXhlZFZhbHVlICE9PSAnc3RyaW5nJyB8fCAhaXNOYU4ocGFyc2VJbnQocHJlZml4ZWRWYWx1ZSwgMTApKSkge1xuICAgIHJldHVybiBwcmVmaXhlZFZhbHVlO1xuICB9IC8vIENyZWF0ZSBjYWNoZSBrZXkgZm9yIGN1cnJlbnQgdmFsdWUuXG5cblxuICB2YXIgY2FjaGVLZXkgPSBwcm9wZXJ0eSArIHByZWZpeGVkVmFsdWU7IC8vIFJlbW92ZSBjYWNoZSBmb3IgYmVuY2htYXJrIHRlc3RzIG9yIHJldHVybiB2YWx1ZSBmcm9tIGNhY2hlLlxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ2JlbmNobWFyaycgJiYgY2FjaGUkMVtjYWNoZUtleV0gIT0gbnVsbCkge1xuICAgIHJldHVybiBjYWNoZSQxW2NhY2hlS2V5XTtcbiAgfSAvLyBJRSBjYW4gZXZlbiB0aHJvdyBhbiBlcnJvciBpbiBzb21lIGNhc2VzLCBmb3IgZS5nLiBzdHlsZS5jb250ZW50ID0gJ2JhcicuXG5cblxuICB0cnkge1xuICAgIC8vIFRlc3QgdmFsdWUgYXMgaXQgaXMuXG4gICAgZWwkMS5zdHlsZVtwcm9wZXJ0eV0gPSBwcmVmaXhlZFZhbHVlO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBSZXR1cm4gZmFsc2UgaWYgdmFsdWUgbm90IHN1cHBvcnRlZC5cbiAgICBjYWNoZSQxW2NhY2hlS2V5XSA9IGZhbHNlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSAvLyBJZiAndHJhbnNpdGlvbicgb3IgJ3RyYW5zaXRpb24tcHJvcGVydHknIHByb3BlcnR5LlxuXG5cbiAgaWYgKHRyYW5zaXRpb25Qcm9wZXJ0aWVzW3Byb3BlcnR5XSkge1xuICAgIHByZWZpeGVkVmFsdWUgPSBwcmVmaXhlZFZhbHVlLnJlcGxhY2UodHJhbnNQcm9wc1JlZ0V4cCwgcHJlZml4VHJhbnNpdGlvbkNhbGxiYWNrKTtcbiAgfSBlbHNlIGlmIChlbCQxLnN0eWxlW3Byb3BlcnR5XSA9PT0gJycpIHtcbiAgICAvLyBWYWx1ZSB3aXRoIGEgdmVuZG9yIHByZWZpeC5cbiAgICBwcmVmaXhlZFZhbHVlID0gcHJlZml4LmNzcyArIHByZWZpeGVkVmFsdWU7IC8vIEhhcmRjb2RlIHRlc3QgdG8gY29udmVydCBcImZsZXhcIiB0byBcIi1tcy1mbGV4Ym94XCIgZm9yIElFMTAuXG5cbiAgICBpZiAocHJlZml4ZWRWYWx1ZSA9PT0gJy1tcy1mbGV4JykgZWwkMS5zdHlsZVtwcm9wZXJ0eV0gPSAnLW1zLWZsZXhib3gnOyAvLyBUZXN0IHByZWZpeGVkIHZhbHVlLlxuXG4gICAgZWwkMS5zdHlsZVtwcm9wZXJ0eV0gPSBwcmVmaXhlZFZhbHVlOyAvLyBSZXR1cm4gZmFsc2UgaWYgdmFsdWUgbm90IHN1cHBvcnRlZC5cblxuICAgIGlmIChlbCQxLnN0eWxlW3Byb3BlcnR5XSA9PT0gJycpIHtcbiAgICAgIGNhY2hlJDFbY2FjaGVLZXldID0gZmFsc2U7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IC8vIFJlc2V0IHN0eWxlcyBmb3IgY3VycmVudCBwcm9wZXJ0eS5cblxuXG4gIGVsJDEuc3R5bGVbcHJvcGVydHldID0gJyc7IC8vIFdyaXRlIGN1cnJlbnQgdmFsdWUgdG8gY2FjaGUuXG5cbiAgY2FjaGUkMVtjYWNoZUtleV0gPSBwcmVmaXhlZFZhbHVlO1xuICByZXR1cm4gY2FjaGUkMVtjYWNoZUtleV07XG59XG5cbmV4cG9ydCB7IHByZWZpeCwgc3VwcG9ydGVkS2V5ZnJhbWVzLCBzdXBwb3J0ZWRQcm9wZXJ0eSwgc3VwcG9ydGVkVmFsdWUgfTtcbiIsImltcG9ydCB7IHN1cHBvcnRlZEtleWZyYW1lcywgc3VwcG9ydGVkVmFsdWUsIHN1cHBvcnRlZFByb3BlcnR5IH0gZnJvbSAnY3NzLXZlbmRvcic7XG5pbXBvcnQgeyB0b0Nzc1ZhbHVlIH0gZnJvbSAnanNzJztcblxuLyoqXG4gKiBBZGQgdmVuZG9yIHByZWZpeCB0byBhIHByb3BlcnR5IG5hbWUgd2hlbiBuZWVkZWQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBqc3NWZW5kb3JQcmVmaXhlcigpIHtcbiAgZnVuY3Rpb24gb25Qcm9jZXNzUnVsZShydWxlKSB7XG4gICAgaWYgKHJ1bGUudHlwZSA9PT0gJ2tleWZyYW1lcycpIHtcbiAgICAgIHZhciBhdFJ1bGUgPSBydWxlO1xuICAgICAgYXRSdWxlLmF0ID0gc3VwcG9ydGVkS2V5ZnJhbWVzKGF0UnVsZS5hdCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcHJlZml4U3R5bGUoc3R5bGUpIHtcbiAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgICB2YXIgdmFsdWUgPSBzdHlsZVtwcm9wXTtcblxuICAgICAgaWYgKHByb3AgPT09ICdmYWxsYmFja3MnICYmIEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHN0eWxlW3Byb3BdID0gdmFsdWUubWFwKHByZWZpeFN0eWxlKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBjaGFuZ2VQcm9wID0gZmFsc2U7XG4gICAgICB2YXIgc3VwcG9ydGVkUHJvcCA9IHN1cHBvcnRlZFByb3BlcnR5KHByb3ApO1xuICAgICAgaWYgKHN1cHBvcnRlZFByb3AgJiYgc3VwcG9ydGVkUHJvcCAhPT0gcHJvcCkgY2hhbmdlUHJvcCA9IHRydWU7XG4gICAgICB2YXIgY2hhbmdlVmFsdWUgPSBmYWxzZTtcbiAgICAgIHZhciBzdXBwb3J0ZWRWYWx1ZSQxID0gc3VwcG9ydGVkVmFsdWUoc3VwcG9ydGVkUHJvcCwgdG9Dc3NWYWx1ZSh2YWx1ZSkpO1xuICAgICAgaWYgKHN1cHBvcnRlZFZhbHVlJDEgJiYgc3VwcG9ydGVkVmFsdWUkMSAhPT0gdmFsdWUpIGNoYW5nZVZhbHVlID0gdHJ1ZTtcblxuICAgICAgaWYgKGNoYW5nZVByb3AgfHwgY2hhbmdlVmFsdWUpIHtcbiAgICAgICAgaWYgKGNoYW5nZVByb3ApIGRlbGV0ZSBzdHlsZVtwcm9wXTtcbiAgICAgICAgc3R5bGVbc3VwcG9ydGVkUHJvcCB8fCBwcm9wXSA9IHN1cHBvcnRlZFZhbHVlJDEgfHwgdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0eWxlO1xuICB9XG5cbiAgZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUpIHtcbiAgICBpZiAocnVsZS50eXBlICE9PSAnc3R5bGUnKSByZXR1cm4gc3R5bGU7XG4gICAgcmV0dXJuIHByZWZpeFN0eWxlKHN0eWxlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQ2hhbmdlVmFsdWUodmFsdWUsIHByb3ApIHtcbiAgICByZXR1cm4gc3VwcG9ydGVkVmFsdWUocHJvcCwgdG9Dc3NWYWx1ZSh2YWx1ZSkpIHx8IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBvblByb2Nlc3NSdWxlOiBvblByb2Nlc3NSdWxlLFxuICAgIG9uUHJvY2Vzc1N0eWxlOiBvblByb2Nlc3NTdHlsZSxcbiAgICBvbkNoYW5nZVZhbHVlOiBvbkNoYW5nZVZhbHVlXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGpzc1ZlbmRvclByZWZpeGVyO1xuIiwiLyoqXG4gKiBTb3J0IHByb3BzIGJ5IGxlbmd0aC5cbiAqL1xuZnVuY3Rpb24ganNzUHJvcHNTb3J0KCkge1xuICB2YXIgc29ydCA9IGZ1bmN0aW9uIHNvcnQocHJvcDAsIHByb3AxKSB7XG4gICAgaWYgKHByb3AwLmxlbmd0aCA9PT0gcHJvcDEubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gcHJvcDAgPiBwcm9wMSA/IDEgOiAtMTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcDAubGVuZ3RoIC0gcHJvcDEubGVuZ3RoO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgb25Qcm9jZXNzU3R5bGU6IGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlKSB7XG4gICAgICBpZiAocnVsZS50eXBlICE9PSAnc3R5bGUnKSByZXR1cm4gc3R5bGU7XG4gICAgICB2YXIgbmV3U3R5bGUgPSB7fTtcbiAgICAgIHZhciBwcm9wcyA9IE9iamVjdC5rZXlzKHN0eWxlKS5zb3J0KHNvcnQpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG5ld1N0eWxlW3Byb3BzW2ldXSA9IHN0eWxlW3Byb3BzW2ldXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ld1N0eWxlO1xuICAgIH1cbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQganNzUHJvcHNTb3J0O1xuIiwiaW1wb3J0IGZ1bmN0aW9ucyBmcm9tICdqc3MtcGx1Z2luLXJ1bGUtdmFsdWUtZnVuY3Rpb24nO1xuaW1wb3J0IGdsb2JhbCBmcm9tICdqc3MtcGx1Z2luLWdsb2JhbCc7XG5pbXBvcnQgbmVzdGVkIGZyb20gJ2pzcy1wbHVnaW4tbmVzdGVkJztcbmltcG9ydCBjYW1lbENhc2UgZnJvbSAnanNzLXBsdWdpbi1jYW1lbC1jYXNlJztcbmltcG9ydCBkZWZhdWx0VW5pdCBmcm9tICdqc3MtcGx1Z2luLWRlZmF1bHQtdW5pdCc7XG5pbXBvcnQgdmVuZG9yUHJlZml4ZXIgZnJvbSAnanNzLXBsdWdpbi12ZW5kb3ItcHJlZml4ZXInO1xuaW1wb3J0IHByb3BzU29ydCBmcm9tICdqc3MtcGx1Z2luLXByb3BzLXNvcnQnOyAvLyBTdWJzZXQgb2YganNzLXByZXNldC1kZWZhdWx0IHdpdGggb25seSB0aGUgcGx1Z2lucyB0aGUgTWF0ZXJpYWwtVUkgY29tcG9uZW50cyBhcmUgdXNpbmcuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGpzc1ByZXNldCgpIHtcbiAgcmV0dXJuIHtcbiAgICBwbHVnaW5zOiBbZnVuY3Rpb25zKCksIGdsb2JhbCgpLCBuZXN0ZWQoKSwgY2FtZWxDYXNlKCksIGRlZmF1bHRVbml0KCksIC8vIERpc2FibGUgdGhlIHZlbmRvciBwcmVmaXhlciBzZXJ2ZXItc2lkZSwgaXQgZG9lcyBub3RoaW5nLlxuICAgIC8vIFRoaXMgd2F5LCB3ZSBjYW4gZ2V0IGEgcGVyZm9ybWFuY2UgYm9vc3QuXG4gICAgLy8gSW4gdGhlIGRvY3VtZW50YXRpb24sIHdlIGFyZSB1c2luZyBgYXV0b3ByZWZpeGVyYCB0byBzb2x2ZSB0aGlzIHByb2JsZW0uXG4gICAgdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogdmVuZG9yUHJlZml4ZXIoKSwgcHJvcHNTb3J0KCldXG4gIH07XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBleGFjdFByb3AgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IGNyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lIGZyb20gJy4uL2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lJztcbmltcG9ydCB7IGNyZWF0ZSB9IGZyb20gJ2pzcyc7XG5pbXBvcnQganNzUHJlc2V0IGZyb20gJy4uL2pzc1ByZXNldCc7IC8vIERlZmF1bHQgSlNTIGluc3RhbmNlLlxuXG52YXIganNzID0gY3JlYXRlKGpzc1ByZXNldCgpKTsgLy8gVXNlIGEgc2luZ2xldG9uIG9yIHRoZSBwcm92aWRlZCBvbmUgYnkgdGhlIGNvbnRleHQuXG4vL1xuLy8gVGhlIGNvdW50ZXItYmFzZWQgYXBwcm9hY2ggZG9lc24ndCB0b2xlcmF0ZSBhbnkgbWlzdGFrZS5cbi8vIEl0J3MgbXVjaCBzYWZlciB0byB1c2UgdGhlIHNhbWUgY291bnRlciBldmVyeXdoZXJlLlxuXG52YXIgZ2VuZXJhdGVDbGFzc05hbWUgPSBjcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSgpOyAvLyBFeHBvcnRlZCBmb3IgdGVzdCBwdXJwb3Nlc1xuXG5leHBvcnQgdmFyIHNoZWV0c01hbmFnZXIgPSBuZXcgTWFwKCk7XG52YXIgZGVmYXVsdE9wdGlvbnMgPSB7XG4gIGRpc2FibGVHZW5lcmF0aW9uOiBmYWxzZSxcbiAgZ2VuZXJhdGVDbGFzc05hbWU6IGdlbmVyYXRlQ2xhc3NOYW1lLFxuICBqc3M6IGpzcyxcbiAgc2hlZXRzQ2FjaGU6IG51bGwsXG4gIHNoZWV0c01hbmFnZXI6IHNoZWV0c01hbmFnZXIsXG4gIHNoZWV0c1JlZ2lzdHJ5OiBudWxsXG59O1xuZXhwb3J0IHZhciBTdHlsZXNDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dChkZWZhdWx0T3B0aW9ucyk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFN0eWxlc0NvbnRleHQuZGlzcGxheU5hbWUgPSAnU3R5bGVzQ29udGV4dCc7XG59XG5cbnZhciBpbmplY3RGaXJzdE5vZGU7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTdHlsZXNQcm92aWRlcihwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIF9wcm9wcyRpbmplY3RGaXJzdCA9IHByb3BzLmluamVjdEZpcnN0LFxuICAgICAgaW5qZWN0Rmlyc3QgPSBfcHJvcHMkaW5qZWN0Rmlyc3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGluamVjdEZpcnN0LFxuICAgICAgX3Byb3BzJGRpc2FibGVHZW5lcmF0ID0gcHJvcHMuZGlzYWJsZUdlbmVyYXRpb24sXG4gICAgICBkaXNhYmxlR2VuZXJhdGlvbiA9IF9wcm9wcyRkaXNhYmxlR2VuZXJhdCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUdlbmVyYXQsXG4gICAgICBsb2NhbE9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiaW5qZWN0Rmlyc3RcIiwgXCJkaXNhYmxlR2VuZXJhdGlvblwiXSk7XG5cbiAgdmFyIG91dGVyT3B0aW9ucyA9IFJlYWN0LnVzZUNvbnRleHQoU3R5bGVzQ29udGV4dCk7XG5cbiAgdmFyIGNvbnRleHQgPSBfZXh0ZW5kcyhfZXh0ZW5kcyh7fSwgb3V0ZXJPcHRpb25zKSwge30sIHtcbiAgICBkaXNhYmxlR2VuZXJhdGlvbjogZGlzYWJsZUdlbmVyYXRpb25cbiAgfSwgbG9jYWxPcHRpb25zKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyAmJiAhY29udGV4dC5zaGVldHNNYW5hZ2VyKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNYXRlcmlhbC1VSTogWW91IG5lZWQgdG8gdXNlIHRoZSBTZXJ2ZXJTdHlsZVNoZWV0cyBBUEkgd2hlbiByZW5kZXJpbmcgb24gdGhlIHNlcnZlci4nKTtcbiAgICB9XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChjb250ZXh0Lmpzcy5vcHRpb25zLmluc2VydGlvblBvaW50ICYmIGluamVjdEZpcnN0KSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNYXRlcmlhbC1VSTogWW91IGNhbm5vdCB1c2UgYSBjdXN0b20gaW5zZXJ0aW9uUG9pbnQgYW5kIDxTdHlsZXNDb250ZXh0IGluamVjdEZpcnN0PiBhdCB0aGUgc2FtZSB0aW1lLicpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGluamVjdEZpcnN0ICYmIGxvY2FsT3B0aW9ucy5qc3MpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ01hdGVyaWFsLVVJOiBZb3UgY2Fubm90IHVzZSB0aGUganNzIGFuZCBpbmplY3RGaXJzdCBwcm9wcyBhdCB0aGUgc2FtZSB0aW1lLicpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29udGV4dC5qc3Mub3B0aW9ucy5pbnNlcnRpb25Qb2ludCAmJiBpbmplY3RGaXJzdCAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICghaW5qZWN0Rmlyc3ROb2RlKSB7XG4gICAgICB2YXIgaGVhZCA9IGRvY3VtZW50LmhlYWQ7XG4gICAgICBpbmplY3RGaXJzdE5vZGUgPSBkb2N1bWVudC5jcmVhdGVDb21tZW50KCdtdWktaW5qZWN0LWZpcnN0Jyk7XG4gICAgICBoZWFkLmluc2VydEJlZm9yZShpbmplY3RGaXJzdE5vZGUsIGhlYWQuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgY29udGV4dC5qc3MgPSBjcmVhdGUoe1xuICAgICAgcGx1Z2luczoganNzUHJlc2V0KCkucGx1Z2lucyxcbiAgICAgIGluc2VydGlvblBvaW50OiBpbmplY3RGaXJzdE5vZGVcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChTdHlsZXNDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNvbnRleHRcbiAgfSwgY2hpbGRyZW4pO1xufVxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU3R5bGVzUHJvdmlkZXIucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogWW91ciBjb21wb25lbnQgdHJlZS5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBZb3UgY2FuIGRpc2FibGUgdGhlIGdlbmVyYXRpb24gb2YgdGhlIHN0eWxlcyB3aXRoIHRoaXMgb3B0aW9uLlxuICAgKiBJdCBjYW4gYmUgdXNlZnVsIHdoZW4gdHJhdmVyc2luZyB0aGUgUmVhY3QgdHJlZSBvdXRzaWRlIG9mIHRoZSBIVE1MXG4gICAqIHJlbmRlcmluZyBzdGVwIG9uIHRoZSBzZXJ2ZXIuXG4gICAqIExldCdzIHNheSB5b3UgYXJlIHVzaW5nIHJlYWN0LWFwb2xsbyB0byBleHRyYWN0IGFsbFxuICAgKiB0aGUgcXVlcmllcyBtYWRlIGJ5IHRoZSBpbnRlcmZhY2Ugc2VydmVyLXNpZGUgLSB5b3UgY2FuIHNpZ25pZmljYW50bHkgc3BlZWQgdXAgdGhlIHRyYXZlcnNhbCB3aXRoIHRoaXMgcHJvcC5cbiAgICovXG4gIGRpc2FibGVHZW5lcmF0aW9uOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSlNTJ3MgY2xhc3MgbmFtZSBnZW5lcmF0b3IuXG4gICAqL1xuICBnZW5lcmF0ZUNsYXNzTmFtZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQsIHRoZSBzdHlsZXMgYXJlIGluamVjdGVkIGxhc3QgaW4gdGhlIDxoZWFkPiBlbGVtZW50IG9mIHRoZSBwYWdlLlxuICAgKiBBcyBhIHJlc3VsdCwgdGhleSBnYWluIG1vcmUgc3BlY2lmaWNpdHkgdGhhbiBhbnkgb3RoZXIgc3R5bGUgc2hlZXQuXG4gICAqIElmIHlvdSB3YW50IHRvIG92ZXJyaWRlIE1hdGVyaWFsLVVJJ3Mgc3R5bGVzLCBzZXQgdGhpcyBwcm9wLlxuICAgKi9cbiAgaW5qZWN0Rmlyc3Q6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBKU1MncyBpbnN0YW5jZS5cbiAgICovXG4gIGpzczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgc2VydmVyR2VuZXJhdGVDbGFzc05hbWU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqXG4gICAqIEJldGEgZmVhdHVyZS5cbiAgICpcbiAgICogQ2FjaGUgZm9yIHRoZSBzaGVldHMuXG4gICAqL1xuICBzaGVldHNDYWNoZTogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKlxuICAgKiBUaGUgc2hlZXRzTWFuYWdlciBpcyB1c2VkIHRvIGRlZHVwbGljYXRlIHN0eWxlIHNoZWV0IGluamVjdGlvbiBpbiB0aGUgcGFnZS5cbiAgICogSXQncyBkZWR1cGxpY2F0aW5nIHVzaW5nIHRoZSAodGhlbWUsIHN0eWxlcykgY291cGxlLlxuICAgKiBPbiB0aGUgc2VydmVyLCB5b3Ugc2hvdWxkIHByb3ZpZGUgYSBuZXcgaW5zdGFuY2UgZm9yIGVhY2ggcmVxdWVzdC5cbiAgICovXG4gIHNoZWV0c01hbmFnZXI6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICpcbiAgICogQ29sbGVjdCB0aGUgc2hlZXRzLlxuICAgKi9cbiAgc2hlZXRzUmVnaXN0cnk6IFByb3BUeXBlcy5vYmplY3Rcbn0gOiB2b2lkIDA7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFN0eWxlc1Byb3ZpZGVyLnByb3BUeXBlcyA9IGV4YWN0UHJvcChTdHlsZXNQcm92aWRlci5wcm9wVHlwZXMpIDogdm9pZCAwO1xufSIsIi8qIGVzbGludC1kaXNhYmxlIGltcG9ydC9wcmVmZXItZGVmYXVsdC1leHBvcnQgKi9cbi8vIEdsb2JhbCBpbmRleCBjb3VudGVyIHRvIHByZXNlcnZlIHNvdXJjZSBvcmRlci5cbi8vIFdlIGNyZWF0ZSB0aGUgc3R5bGUgc2hlZXQgZHVyaW5nIHRoZSBjcmVhdGlvbiBvZiB0aGUgY29tcG9uZW50LFxuLy8gY2hpbGRyZW4gYXJlIGhhbmRsZWQgYWZ0ZXIgdGhlIHBhcmVudHMsIHNvIHRoZSBvcmRlciBvZiBzdHlsZSBlbGVtZW50cyB3b3VsZCBiZSBwYXJlbnQtPmNoaWxkLlxuLy8gSXQgaXMgYSBwcm9ibGVtIHRob3VnaCB3aGVuIGEgcGFyZW50IHBhc3NlcyBhIGNsYXNzTmFtZVxuLy8gd2hpY2ggbmVlZHMgdG8gb3ZlcnJpZGUgYW55IGNoaWxkJ3Mgc3R5bGVzLlxuLy8gU3R5bGVTaGVldCBvZiB0aGUgY2hpbGQgaGFzIGEgaGlnaGVyIHNwZWNpZmljaXR5LCBiZWNhdXNlIG9mIHRoZSBzb3VyY2Ugb3JkZXIuXG4vLyBTbyBvdXIgc29sdXRpb24gaXMgdG8gcmVuZGVyIHNoZWV0cyB0aGVtIGluIHRoZSByZXZlcnNlIG9yZGVyIGNoaWxkLT5zaGVldCwgc29cbi8vIHRoYXQgcGFyZW50IGhhcyBhIGhpZ2hlciBzcGVjaWZpY2l0eS5cbnZhciBpbmRleENvdW50ZXIgPSAtMWU5O1xuZXhwb3J0IGZ1bmN0aW9uIGluY3JlbWVudCgpIHtcbiAgaW5kZXhDb3VudGVyICs9IDE7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoaW5kZXhDb3VudGVyID49IDApIHtcbiAgICAgIGNvbnNvbGUud2FybihbJ01hdGVyaWFsLVVJOiBZb3UgbWlnaHQgaGF2ZSBhIG1lbW9yeSBsZWFrLicsICdUaGUgaW5kZXhDb3VudGVyIGlzIG5vdCBzdXBwb3NlZCB0byBncm93IHRoYXQgbXVjaC4nXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGluZGV4Q291bnRlcjtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7XG5cbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7XG4gICAgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfdHlwZW9mKG9iaik7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG5leHBvcnQgZnVuY3Rpb24gaXNQbGFpbk9iamVjdChpdGVtKSB7XG4gIHJldHVybiBpdGVtICYmIF90eXBlb2YoaXRlbSkgPT09ICdvYmplY3QnICYmIGl0ZW0uY29uc3RydWN0b3IgPT09IE9iamVjdDtcbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlZXBtZXJnZSh0YXJnZXQsIHNvdXJjZSkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge1xuICAgIGNsb25lOiB0cnVlXG4gIH07XG4gIHZhciBvdXRwdXQgPSBvcHRpb25zLmNsb25lID8gX2V4dGVuZHMoe30sIHRhcmdldCkgOiB0YXJnZXQ7XG5cbiAgaWYgKGlzUGxhaW5PYmplY3QodGFyZ2V0KSAmJiBpc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICBPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgLy8gQXZvaWQgcHJvdG90eXBlIHBvbGx1dGlvblxuICAgICAgaWYgKGtleSA9PT0gJ19fcHJvdG9fXycpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNQbGFpbk9iamVjdChzb3VyY2Vba2V5XSkgJiYga2V5IGluIHRhcmdldCkge1xuICAgICAgICBvdXRwdXRba2V5XSA9IGRlZXBtZXJnZSh0YXJnZXRba2V5XSwgc291cmNlW2tleV0sIG9wdGlvbnMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0cHV0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBvdXRwdXQ7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG5pbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IG5vb3BUaGVtZSBmcm9tICcuL25vb3BUaGVtZSc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRTdHlsZXNDcmVhdG9yKHN0eWxlc09yQ3JlYXRvcikge1xuICB2YXIgdGhlbWluZ0VuYWJsZWQgPSB0eXBlb2Ygc3R5bGVzT3JDcmVhdG9yID09PSAnZnVuY3Rpb24nO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKF90eXBlb2Yoc3R5bGVzT3JDcmVhdG9yKSAhPT0gJ29iamVjdCcgJiYgIXRoZW1pbmdFbmFibGVkKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFsnTWF0ZXJpYWwtVUk6IFRoZSBgc3R5bGVzYCBhcmd1bWVudCBwcm92aWRlZCBpcyBpbnZhbGlkLicsICdZb3UgbmVlZCB0byBwcm92aWRlIGEgZnVuY3Rpb24gZ2VuZXJhdGluZyB0aGUgc3R5bGVzIG9yIGEgc3R5bGVzIG9iamVjdC4nXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSh0aGVtZSwgbmFtZSkge1xuICAgICAgdmFyIHN0eWxlcztcblxuICAgICAgdHJ5IHtcbiAgICAgICAgc3R5bGVzID0gdGhlbWluZ0VuYWJsZWQgPyBzdHlsZXNPckNyZWF0b3IodGhlbWUpIDogc3R5bGVzT3JDcmVhdG9yO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKHRoZW1pbmdFbmFibGVkID09PSB0cnVlICYmIHRoZW1lID09PSBub29wVGhlbWUpIHtcbiAgICAgICAgICAgIC8vIFRPRE86IHByZXBlbmQgZXJyb3IgbWVzc2FnZS9uYW1lIGluc3RlYWRcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoWydNYXRlcmlhbC1VSTogVGhlIGBzdHlsZXNgIGFyZ3VtZW50IHByb3ZpZGVkIGlzIGludmFsaWQuJywgJ1lvdSBhcmUgcHJvdmlkaW5nIGEgZnVuY3Rpb24gd2l0aG91dCBhIHRoZW1lIGluIHRoZSBjb250ZXh0LicsICdPbmUgb2YgdGhlIHBhcmVudCBlbGVtZW50cyBuZWVkcyB0byB1c2UgYSBUaGVtZVByb3ZpZGVyLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG5cbiAgICAgIGlmICghbmFtZSB8fCAhdGhlbWUub3ZlcnJpZGVzIHx8ICF0aGVtZS5vdmVycmlkZXNbbmFtZV0pIHtcbiAgICAgICAgcmV0dXJuIHN0eWxlcztcbiAgICAgIH1cblxuICAgICAgdmFyIG92ZXJyaWRlcyA9IHRoZW1lLm92ZXJyaWRlc1tuYW1lXTtcblxuICAgICAgdmFyIHN0eWxlc1dpdGhPdmVycmlkZXMgPSBfZXh0ZW5kcyh7fSwgc3R5bGVzKTtcblxuICAgICAgT2JqZWN0LmtleXMob3ZlcnJpZGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBpZiAoIXN0eWxlc1dpdGhPdmVycmlkZXNba2V5XSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFsnTWF0ZXJpYWwtVUk6IFlvdSBhcmUgdHJ5aW5nIHRvIG92ZXJyaWRlIGEgc3R5bGUgdGhhdCBkb2VzIG5vdCBleGlzdC4nLCBcIkZpeCB0aGUgYFwiLmNvbmNhdChrZXksIFwiYCBrZXkgb2YgYHRoZW1lLm92ZXJyaWRlcy5cIikuY29uY2F0KG5hbWUsIFwiYC5cIildLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzdHlsZXNXaXRoT3ZlcnJpZGVzW2tleV0gPSBkZWVwbWVyZ2Uoc3R5bGVzV2l0aE92ZXJyaWRlc1trZXldLCBvdmVycmlkZXNba2V5XSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBzdHlsZXNXaXRoT3ZlcnJpZGVzO1xuICAgIH0sXG4gICAgb3B0aW9uczoge31cbiAgfTtcbn0iLCIvLyBXZSB1c2UgdGhlIHNhbWUgZW1wdHkgb2JqZWN0IHRvIHJlZiBjb3VudCB0aGUgc3R5bGVzIHRoYXQgZG9uJ3QgbmVlZCBhIHRoZW1lIG9iamVjdC5cbnZhciBub29wVGhlbWUgPSB7fTtcbmV4cG9ydCBkZWZhdWx0IG5vb3BUaGVtZTsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZ2V0RHluYW1pY1N0eWxlcyB9IGZyb20gJ2pzcyc7XG5pbXBvcnQgbWVyZ2VDbGFzc2VzIGZyb20gJy4uL21lcmdlQ2xhc3Nlcyc7XG5pbXBvcnQgbXVsdGlLZXlTdG9yZSBmcm9tICcuL211bHRpS2V5U3RvcmUnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3VzZVRoZW1lJztcbmltcG9ydCB7IFN0eWxlc0NvbnRleHQgfSBmcm9tICcuLi9TdHlsZXNQcm92aWRlcic7XG5pbXBvcnQgeyBpbmNyZW1lbnQgfSBmcm9tICcuL2luZGV4Q291bnRlcic7XG5pbXBvcnQgZ2V0U3R5bGVzQ3JlYXRvciBmcm9tICcuLi9nZXRTdHlsZXNDcmVhdG9yJztcbmltcG9ydCBub29wVGhlbWUgZnJvbSAnLi4vZ2V0U3R5bGVzQ3JlYXRvci9ub29wVGhlbWUnO1xuXG5mdW5jdGlvbiBnZXRDbGFzc2VzKF9yZWYsIGNsYXNzZXMsIENvbXBvbmVudCkge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgc3R5bGVzT3B0aW9ucyA9IF9yZWYuc3R5bGVzT3B0aW9ucztcblxuICBpZiAoc3R5bGVzT3B0aW9ucy5kaXNhYmxlR2VuZXJhdGlvbikge1xuICAgIHJldHVybiBjbGFzc2VzIHx8IHt9O1xuICB9XG5cbiAgaWYgKCFzdGF0ZS5jYWNoZUNsYXNzZXMpIHtcbiAgICBzdGF0ZS5jYWNoZUNsYXNzZXMgPSB7XG4gICAgICAvLyBDYWNoZSBmb3IgdGhlIGZpbmFsaXplZCBjbGFzc2VzIHZhbHVlLlxuICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAvLyBDYWNoZSBmb3IgdGhlIGxhc3QgdXNlZCBjbGFzc2VzIHByb3AgcG9pbnRlci5cbiAgICAgIGxhc3RQcm9wOiBudWxsLFxuICAgICAgLy8gQ2FjaGUgZm9yIHRoZSBsYXN0IHVzZWQgcmVuZGVyZWQgY2xhc3NlcyBwb2ludGVyLlxuICAgICAgbGFzdEpTUzoge31cbiAgICB9O1xuICB9IC8vIFRyYWNrcyBpZiBlaXRoZXIgdGhlIHJlbmRlcmVkIGNsYXNzZXMgb3IgY2xhc3NlcyBwcm9wIGhhcyBjaGFuZ2VkLFxuICAvLyByZXF1aXJpbmcgdGhlIGdlbmVyYXRpb24gb2YgYSBuZXcgZmluYWxpemVkIGNsYXNzZXMgb2JqZWN0LlxuXG5cbiAgdmFyIGdlbmVyYXRlID0gZmFsc2U7XG5cbiAgaWYgKHN0YXRlLmNsYXNzZXMgIT09IHN0YXRlLmNhY2hlQ2xhc3Nlcy5sYXN0SlNTKSB7XG4gICAgc3RhdGUuY2FjaGVDbGFzc2VzLmxhc3RKU1MgPSBzdGF0ZS5jbGFzc2VzO1xuICAgIGdlbmVyYXRlID0gdHJ1ZTtcbiAgfVxuXG4gIGlmIChjbGFzc2VzICE9PSBzdGF0ZS5jYWNoZUNsYXNzZXMubGFzdFByb3ApIHtcbiAgICBzdGF0ZS5jYWNoZUNsYXNzZXMubGFzdFByb3AgPSBjbGFzc2VzO1xuICAgIGdlbmVyYXRlID0gdHJ1ZTtcbiAgfVxuXG4gIGlmIChnZW5lcmF0ZSkge1xuICAgIHN0YXRlLmNhY2hlQ2xhc3Nlcy52YWx1ZSA9IG1lcmdlQ2xhc3Nlcyh7XG4gICAgICBiYXNlQ2xhc3Nlczogc3RhdGUuY2FjaGVDbGFzc2VzLmxhc3RKU1MsXG4gICAgICBuZXdDbGFzc2VzOiBjbGFzc2VzLFxuICAgICAgQ29tcG9uZW50OiBDb21wb25lbnRcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBzdGF0ZS5jYWNoZUNsYXNzZXMudmFsdWU7XG59XG5cbmZ1bmN0aW9uIGF0dGFjaChfcmVmMiwgcHJvcHMpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjIuc3RhdGUsXG4gICAgICB0aGVtZSA9IF9yZWYyLnRoZW1lLFxuICAgICAgc3R5bGVzT3B0aW9ucyA9IF9yZWYyLnN0eWxlc09wdGlvbnMsXG4gICAgICBzdHlsZXNDcmVhdG9yID0gX3JlZjIuc3R5bGVzQ3JlYXRvcixcbiAgICAgIG5hbWUgPSBfcmVmMi5uYW1lO1xuXG4gIGlmIChzdHlsZXNPcHRpb25zLmRpc2FibGVHZW5lcmF0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHNoZWV0TWFuYWdlciA9IG11bHRpS2V5U3RvcmUuZ2V0KHN0eWxlc09wdGlvbnMuc2hlZXRzTWFuYWdlciwgc3R5bGVzQ3JlYXRvciwgdGhlbWUpO1xuXG4gIGlmICghc2hlZXRNYW5hZ2VyKSB7XG4gICAgc2hlZXRNYW5hZ2VyID0ge1xuICAgICAgcmVmczogMCxcbiAgICAgIHN0YXRpY1NoZWV0OiBudWxsLFxuICAgICAgZHluYW1pY1N0eWxlczogbnVsbFxuICAgIH07XG4gICAgbXVsdGlLZXlTdG9yZS5zZXQoc3R5bGVzT3B0aW9ucy5zaGVldHNNYW5hZ2VyLCBzdHlsZXNDcmVhdG9yLCB0aGVtZSwgc2hlZXRNYW5hZ2VyKTtcbiAgfVxuXG4gIHZhciBvcHRpb25zID0gX2V4dGVuZHMoX2V4dGVuZHMoX2V4dGVuZHMoe30sIHN0eWxlc0NyZWF0b3Iub3B0aW9ucyksIHN0eWxlc09wdGlvbnMpLCB7fSwge1xuICAgIHRoZW1lOiB0aGVtZSxcbiAgICBmbGlwOiB0eXBlb2Ygc3R5bGVzT3B0aW9ucy5mbGlwID09PSAnYm9vbGVhbicgPyBzdHlsZXNPcHRpb25zLmZsaXAgOiB0aGVtZS5kaXJlY3Rpb24gPT09ICdydGwnXG4gIH0pO1xuXG4gIG9wdGlvbnMuZ2VuZXJhdGVJZCA9IG9wdGlvbnMuc2VydmVyR2VuZXJhdGVDbGFzc05hbWUgfHwgb3B0aW9ucy5nZW5lcmF0ZUNsYXNzTmFtZTtcbiAgdmFyIHNoZWV0c1JlZ2lzdHJ5ID0gc3R5bGVzT3B0aW9ucy5zaGVldHNSZWdpc3RyeTtcblxuICBpZiAoc2hlZXRNYW5hZ2VyLnJlZnMgPT09IDApIHtcbiAgICB2YXIgc3RhdGljU2hlZXQ7XG5cbiAgICBpZiAoc3R5bGVzT3B0aW9ucy5zaGVldHNDYWNoZSkge1xuICAgICAgc3RhdGljU2hlZXQgPSBtdWx0aUtleVN0b3JlLmdldChzdHlsZXNPcHRpb25zLnNoZWV0c0NhY2hlLCBzdHlsZXNDcmVhdG9yLCB0aGVtZSk7XG4gICAgfVxuXG4gICAgdmFyIHN0eWxlcyA9IHN0eWxlc0NyZWF0b3IuY3JlYXRlKHRoZW1lLCBuYW1lKTtcblxuICAgIGlmICghc3RhdGljU2hlZXQpIHtcbiAgICAgIHN0YXRpY1NoZWV0ID0gc3R5bGVzT3B0aW9ucy5qc3MuY3JlYXRlU3R5bGVTaGVldChzdHlsZXMsIF9leHRlbmRzKHtcbiAgICAgICAgbGluazogZmFsc2VcbiAgICAgIH0sIG9wdGlvbnMpKTtcbiAgICAgIHN0YXRpY1NoZWV0LmF0dGFjaCgpO1xuXG4gICAgICBpZiAoc3R5bGVzT3B0aW9ucy5zaGVldHNDYWNoZSkge1xuICAgICAgICBtdWx0aUtleVN0b3JlLnNldChzdHlsZXNPcHRpb25zLnNoZWV0c0NhY2hlLCBzdHlsZXNDcmVhdG9yLCB0aGVtZSwgc3RhdGljU2hlZXQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzaGVldHNSZWdpc3RyeSkge1xuICAgICAgc2hlZXRzUmVnaXN0cnkuYWRkKHN0YXRpY1NoZWV0KTtcbiAgICB9XG5cbiAgICBzaGVldE1hbmFnZXIuc3RhdGljU2hlZXQgPSBzdGF0aWNTaGVldDtcbiAgICBzaGVldE1hbmFnZXIuZHluYW1pY1N0eWxlcyA9IGdldER5bmFtaWNTdHlsZXMoc3R5bGVzKTtcbiAgfVxuXG4gIGlmIChzaGVldE1hbmFnZXIuZHluYW1pY1N0eWxlcykge1xuICAgIHZhciBkeW5hbWljU2hlZXQgPSBzdHlsZXNPcHRpb25zLmpzcy5jcmVhdGVTdHlsZVNoZWV0KHNoZWV0TWFuYWdlci5keW5hbWljU3R5bGVzLCBfZXh0ZW5kcyh7XG4gICAgICBsaW5rOiB0cnVlXG4gICAgfSwgb3B0aW9ucykpO1xuICAgIGR5bmFtaWNTaGVldC51cGRhdGUocHJvcHMpO1xuICAgIGR5bmFtaWNTaGVldC5hdHRhY2goKTtcbiAgICBzdGF0ZS5keW5hbWljU2hlZXQgPSBkeW5hbWljU2hlZXQ7XG4gICAgc3RhdGUuY2xhc3NlcyA9IG1lcmdlQ2xhc3Nlcyh7XG4gICAgICBiYXNlQ2xhc3Nlczogc2hlZXRNYW5hZ2VyLnN0YXRpY1NoZWV0LmNsYXNzZXMsXG4gICAgICBuZXdDbGFzc2VzOiBkeW5hbWljU2hlZXQuY2xhc3Nlc1xuICAgIH0pO1xuXG4gICAgaWYgKHNoZWV0c1JlZ2lzdHJ5KSB7XG4gICAgICBzaGVldHNSZWdpc3RyeS5hZGQoZHluYW1pY1NoZWV0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc3RhdGUuY2xhc3NlcyA9IHNoZWV0TWFuYWdlci5zdGF0aWNTaGVldC5jbGFzc2VzO1xuICB9XG5cbiAgc2hlZXRNYW5hZ2VyLnJlZnMgKz0gMTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlKF9yZWYzLCBwcm9wcykge1xuICB2YXIgc3RhdGUgPSBfcmVmMy5zdGF0ZTtcblxuICBpZiAoc3RhdGUuZHluYW1pY1NoZWV0KSB7XG4gICAgc3RhdGUuZHluYW1pY1NoZWV0LnVwZGF0ZShwcm9wcyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGV0YWNoKF9yZWY0KSB7XG4gIHZhciBzdGF0ZSA9IF9yZWY0LnN0YXRlLFxuICAgICAgdGhlbWUgPSBfcmVmNC50aGVtZSxcbiAgICAgIHN0eWxlc09wdGlvbnMgPSBfcmVmNC5zdHlsZXNPcHRpb25zLFxuICAgICAgc3R5bGVzQ3JlYXRvciA9IF9yZWY0LnN0eWxlc0NyZWF0b3I7XG5cbiAgaWYgKHN0eWxlc09wdGlvbnMuZGlzYWJsZUdlbmVyYXRpb24pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgc2hlZXRNYW5hZ2VyID0gbXVsdGlLZXlTdG9yZS5nZXQoc3R5bGVzT3B0aW9ucy5zaGVldHNNYW5hZ2VyLCBzdHlsZXNDcmVhdG9yLCB0aGVtZSk7XG4gIHNoZWV0TWFuYWdlci5yZWZzIC09IDE7XG4gIHZhciBzaGVldHNSZWdpc3RyeSA9IHN0eWxlc09wdGlvbnMuc2hlZXRzUmVnaXN0cnk7XG5cbiAgaWYgKHNoZWV0TWFuYWdlci5yZWZzID09PSAwKSB7XG4gICAgbXVsdGlLZXlTdG9yZS5kZWxldGUoc3R5bGVzT3B0aW9ucy5zaGVldHNNYW5hZ2VyLCBzdHlsZXNDcmVhdG9yLCB0aGVtZSk7XG4gICAgc3R5bGVzT3B0aW9ucy5qc3MucmVtb3ZlU3R5bGVTaGVldChzaGVldE1hbmFnZXIuc3RhdGljU2hlZXQpO1xuXG4gICAgaWYgKHNoZWV0c1JlZ2lzdHJ5KSB7XG4gICAgICBzaGVldHNSZWdpc3RyeS5yZW1vdmUoc2hlZXRNYW5hZ2VyLnN0YXRpY1NoZWV0KTtcbiAgICB9XG4gIH1cblxuICBpZiAoc3RhdGUuZHluYW1pY1NoZWV0KSB7XG4gICAgc3R5bGVzT3B0aW9ucy5qc3MucmVtb3ZlU3R5bGVTaGVldChzdGF0ZS5keW5hbWljU2hlZXQpO1xuXG4gICAgaWYgKHNoZWV0c1JlZ2lzdHJ5KSB7XG4gICAgICBzaGVldHNSZWdpc3RyeS5yZW1vdmUoc3RhdGUuZHluYW1pY1NoZWV0KTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdXNlU3luY2hyb25vdXNFZmZlY3QoZnVuYywgdmFsdWVzKSB7XG4gIHZhciBrZXkgPSBSZWFjdC51c2VSZWYoW10pO1xuICB2YXIgb3V0cHV0OyAvLyBTdG9yZSBcImdlbmVyYXRpb25cIiBrZXkuIEp1c3QgcmV0dXJucyBhIG5ldyBvYmplY3QgZXZlcnkgdGltZVxuXG4gIHZhciBjdXJyZW50S2V5ID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9LCB2YWx1ZXMpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICAvLyBcInRoZSBmaXJzdCByZW5kZXJcIiwgb3IgXCJtZW1vIGRyb3BwZWQgdGhlIHZhbHVlXCJcblxuICBpZiAoa2V5LmN1cnJlbnQgIT09IGN1cnJlbnRLZXkpIHtcbiAgICBrZXkuY3VycmVudCA9IGN1cnJlbnRLZXk7XG4gICAgb3V0cHV0ID0gZnVuYygpO1xuICB9XG5cbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKG91dHB1dCkge1xuICAgICAgICBvdXRwdXQoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbY3VycmVudEtleV0gLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWFrZVN0eWxlcyhzdHlsZXNPckNyZWF0b3IpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gIHZhciBuYW1lID0gb3B0aW9ucy5uYW1lLFxuICAgICAgY2xhc3NOYW1lUHJlZml4T3B0aW9uID0gb3B0aW9ucy5jbGFzc05hbWVQcmVmaXgsXG4gICAgICBDb21wb25lbnQgPSBvcHRpb25zLkNvbXBvbmVudCxcbiAgICAgIF9vcHRpb25zJGRlZmF1bHRUaGVtZSA9IG9wdGlvbnMuZGVmYXVsdFRoZW1lLFxuICAgICAgZGVmYXVsdFRoZW1lID0gX29wdGlvbnMkZGVmYXVsdFRoZW1lID09PSB2b2lkIDAgPyBub29wVGhlbWUgOiBfb3B0aW9ucyRkZWZhdWx0VGhlbWUsXG4gICAgICBzdHlsZXNPcHRpb25zMiA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvcHRpb25zLCBbXCJuYW1lXCIsIFwiY2xhc3NOYW1lUHJlZml4XCIsIFwiQ29tcG9uZW50XCIsIFwiZGVmYXVsdFRoZW1lXCJdKTtcblxuICB2YXIgc3R5bGVzQ3JlYXRvciA9IGdldFN0eWxlc0NyZWF0b3Ioc3R5bGVzT3JDcmVhdG9yKTtcbiAgdmFyIGNsYXNzTmFtZVByZWZpeCA9IG5hbWUgfHwgY2xhc3NOYW1lUHJlZml4T3B0aW9uIHx8ICdtYWtlU3R5bGVzJztcbiAgc3R5bGVzQ3JlYXRvci5vcHRpb25zID0ge1xuICAgIGluZGV4OiBpbmNyZW1lbnQoKSxcbiAgICBuYW1lOiBuYW1lLFxuICAgIG1ldGE6IGNsYXNzTmFtZVByZWZpeCxcbiAgICBjbGFzc05hbWVQcmVmaXg6IGNsYXNzTmFtZVByZWZpeFxuICB9O1xuXG4gIHZhciB1c2VTdHlsZXMgPSBmdW5jdGlvbiB1c2VTdHlsZXMoKSB7XG4gICAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICB2YXIgdGhlbWUgPSB1c2VUaGVtZSgpIHx8IGRlZmF1bHRUaGVtZTtcblxuICAgIHZhciBzdHlsZXNPcHRpb25zID0gX2V4dGVuZHMoX2V4dGVuZHMoe30sIFJlYWN0LnVzZUNvbnRleHQoU3R5bGVzQ29udGV4dCkpLCBzdHlsZXNPcHRpb25zMik7XG5cbiAgICB2YXIgaW5zdGFuY2UgPSBSZWFjdC51c2VSZWYoKTtcbiAgICB2YXIgc2hvdWxkVXBkYXRlID0gUmVhY3QudXNlUmVmKCk7XG4gICAgdXNlU3luY2hyb25vdXNFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGN1cnJlbnQgPSB7XG4gICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgIHN0YXRlOiB7fSxcbiAgICAgICAgc3R5bGVzQ3JlYXRvcjogc3R5bGVzQ3JlYXRvcixcbiAgICAgICAgc3R5bGVzT3B0aW9uczogc3R5bGVzT3B0aW9ucyxcbiAgICAgICAgdGhlbWU6IHRoZW1lXG4gICAgICB9O1xuICAgICAgYXR0YWNoKGN1cnJlbnQsIHByb3BzKTtcbiAgICAgIHNob3VsZFVwZGF0ZS5jdXJyZW50ID0gZmFsc2U7XG4gICAgICBpbnN0YW5jZS5jdXJyZW50ID0gY3VycmVudDtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRldGFjaChjdXJyZW50KTtcbiAgICAgIH07XG4gICAgfSwgW3RoZW1lLCBzdHlsZXNDcmVhdG9yXSk7XG4gICAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzaG91bGRVcGRhdGUuY3VycmVudCkge1xuICAgICAgICB1cGRhdGUoaW5zdGFuY2UuY3VycmVudCwgcHJvcHMpO1xuICAgICAgfVxuXG4gICAgICBzaG91bGRVcGRhdGUuY3VycmVudCA9IHRydWU7XG4gICAgfSk7XG4gICAgdmFyIGNsYXNzZXMgPSBnZXRDbGFzc2VzKGluc3RhbmNlLmN1cnJlbnQsIHByb3BzLmNsYXNzZXMsIENvbXBvbmVudCk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgICBSZWFjdC51c2VEZWJ1Z1ZhbHVlKGNsYXNzZXMpO1xuICAgIH1cblxuICAgIHJldHVybiBjbGFzc2VzO1xuICB9O1xuXG4gIHJldHVybiB1c2VTdHlsZXM7XG59IiwiLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1zeW50YXggKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFRoZW1lUHJvcHMocGFyYW1zKSB7XG4gIHZhciB0aGVtZSA9IHBhcmFtcy50aGVtZSxcbiAgICAgIG5hbWUgPSBwYXJhbXMubmFtZSxcbiAgICAgIHByb3BzID0gcGFyYW1zLnByb3BzO1xuXG4gIGlmICghdGhlbWUgfHwgIXRoZW1lLnByb3BzIHx8ICF0aGVtZS5wcm9wc1tuYW1lXSkge1xuICAgIHJldHVybiBwcm9wcztcbiAgfSAvLyBSZXNvbHZlIGRlZmF1bHQgcHJvcHMsIGNvZGUgYm9ycm93IGZyb20gUmVhY3Qgc291cmNlLlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi8xNWE4ZjAzMTgzOGE1NTNlNDFjMGI2NmViMWJjZjFkYTg0NDgxMDRkL3BhY2thZ2VzL3JlYWN0L3NyYy9SZWFjdEVsZW1lbnQuanMjTDIyMVxuXG5cbiAgdmFyIGRlZmF1bHRQcm9wcyA9IHRoZW1lLnByb3BzW25hbWVdO1xuICB2YXIgcHJvcE5hbWU7XG5cbiAgZm9yIChwcm9wTmFtZSBpbiBkZWZhdWx0UHJvcHMpIHtcbiAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHByb3BzW3Byb3BOYW1lXSA9IGRlZmF1bHRQcm9wc1twcm9wTmFtZV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHByb3BzO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGhvaXN0Tm9uUmVhY3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcbmltcG9ydCB7IGNoYWluUHJvcFR5cGVzLCBnZXREaXNwbGF5TmFtZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgbWFrZVN0eWxlcyBmcm9tICcuLi9tYWtlU3R5bGVzJztcbmltcG9ydCBnZXRUaGVtZVByb3BzIGZyb20gJy4uL2dldFRoZW1lUHJvcHMnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3VzZVRoZW1lJzsgLy8gTGluayBhIHN0eWxlIHNoZWV0IHdpdGggYSBjb21wb25lbnQuXG4vLyBJdCBkb2VzIG5vdCBtb2RpZnkgdGhlIGNvbXBvbmVudCBwYXNzZWQgdG8gaXQ7XG4vLyBpbnN0ZWFkLCBpdCByZXR1cm5zIGEgbmV3IGNvbXBvbmVudCwgd2l0aCBhIGBjbGFzc2VzYCBwcm9wZXJ0eS5cblxudmFyIHdpdGhTdHlsZXMgPSBmdW5jdGlvbiB3aXRoU3R5bGVzKHN0eWxlc09yQ3JlYXRvcikge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gIHJldHVybiBmdW5jdGlvbiAoQ29tcG9uZW50KSB7XG4gICAgdmFyIGRlZmF1bHRUaGVtZSA9IG9wdGlvbnMuZGVmYXVsdFRoZW1lLFxuICAgICAgICBfb3B0aW9ucyR3aXRoVGhlbWUgPSBvcHRpb25zLndpdGhUaGVtZSxcbiAgICAgICAgd2l0aFRoZW1lID0gX29wdGlvbnMkd2l0aFRoZW1lID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJHdpdGhUaGVtZSxcbiAgICAgICAgbmFtZSA9IG9wdGlvbnMubmFtZSxcbiAgICAgICAgc3R5bGVzT3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvcHRpb25zLCBbXCJkZWZhdWx0VGhlbWVcIiwgXCJ3aXRoVGhlbWVcIiwgXCJuYW1lXCJdKTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoQ29tcG9uZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFsnWW91IGFyZSBjYWxsaW5nIHdpdGhTdHlsZXMoc3R5bGVzKShDb21wb25lbnQpIHdpdGggYW4gdW5kZWZpbmVkIGNvbXBvbmVudC4nLCAnWW91IG1heSBoYXZlIGZvcmdvdHRlbiB0byBpbXBvcnQgaXQuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBjbGFzc05hbWVQcmVmaXggPSBuYW1lO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICghbmFtZSkge1xuICAgICAgICAvLyBQcm92aWRlIGEgYmV0dGVyIERYIG91dHNpZGUgcHJvZHVjdGlvbi5cbiAgICAgICAgdmFyIGRpc3BsYXlOYW1lID0gZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KTtcblxuICAgICAgICBpZiAoZGlzcGxheU5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGNsYXNzTmFtZVByZWZpeCA9IGRpc3BsYXlOYW1lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHVzZVN0eWxlcyA9IG1ha2VTdHlsZXMoc3R5bGVzT3JDcmVhdG9yLCBfZXh0ZW5kcyh7XG4gICAgICBkZWZhdWx0VGhlbWU6IGRlZmF1bHRUaGVtZSxcbiAgICAgIENvbXBvbmVudDogQ29tcG9uZW50LFxuICAgICAgbmFtZTogbmFtZSB8fCBDb21wb25lbnQuZGlzcGxheU5hbWUsXG4gICAgICBjbGFzc05hbWVQcmVmaXg6IGNsYXNzTmFtZVByZWZpeFxuICAgIH0sIHN0eWxlc09wdGlvbnMpKTtcbiAgICB2YXIgV2l0aFN0eWxlcyA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gV2l0aFN0eWxlcyhwcm9wcywgcmVmKSB7XG4gICAgICB2YXIgY2xhc3Nlc1Byb3AgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgICAgIGlubmVyUmVmID0gcHJvcHMuaW5uZXJSZWYsXG4gICAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJpbm5lclJlZlwiXSk7IC8vIFRoZSB3cmFwcGVyIHJlY2VpdmVzIG9ubHkgdXNlciBzdXBwbGllZCBwcm9wcywgd2hpY2ggY291bGQgYmUgYSBzdWJzZXQgb2ZcbiAgICAgIC8vIHRoZSBhY3R1YWwgcHJvcHMgQ29tcG9uZW50IG1pZ2h0IHJlY2VpdmUgZHVlIHRvIG1lcmdpbmcgd2l0aCBkZWZhdWx0UHJvcHMuXG4gICAgICAvLyBTbyBjb3B5aW5nIGl0IGhlcmUgd291bGQgZ2l2ZSB1cyB0aGUgc2FtZSByZXN1bHQgaW4gdGhlIHdyYXBwZXIgYXMgd2VsbC5cblxuXG4gICAgICB2YXIgY2xhc3NlcyA9IHVzZVN0eWxlcyhfZXh0ZW5kcyhfZXh0ZW5kcyh7fSwgQ29tcG9uZW50LmRlZmF1bHRQcm9wcyksIHByb3BzKSk7XG4gICAgICB2YXIgdGhlbWU7XG4gICAgICB2YXIgbW9yZSA9IG90aGVyO1xuXG4gICAgICBpZiAodHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnIHx8IHdpdGhUaGVtZSkge1xuICAgICAgICAvLyBuYW1lIGFuZCB3aXRoVGhlbWUgYXJlIGludmFyaWFudCBpbiB0aGUgb3V0ZXIgc2NvcGVcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgICAgIHRoZW1lID0gdXNlVGhlbWUoKSB8fCBkZWZhdWx0VGhlbWU7XG5cbiAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICBtb3JlID0gZ2V0VGhlbWVQcm9wcyh7XG4gICAgICAgICAgICB0aGVtZTogdGhlbWUsXG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgcHJvcHM6IG90aGVyXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gLy8gUHJvdmlkZSB0aGUgdGhlbWUgdG8gdGhlIHdyYXBwZWQgY29tcG9uZW50LlxuICAgICAgICAvLyBTbyB3ZSBkb24ndCBoYXZlIHRvIHVzZSB0aGUgYHdpdGhUaGVtZSgpYCBIaWdoZXItb3JkZXIgQ29tcG9uZW50LlxuXG5cbiAgICAgICAgaWYgKHdpdGhUaGVtZSAmJiAhbW9yZS50aGVtZSkge1xuICAgICAgICAgIG1vcmUudGhlbWUgPSB0aGVtZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgICAgIHJlZjogaW5uZXJSZWYgfHwgcmVmLFxuICAgICAgICBjbGFzc2VzOiBjbGFzc2VzXG4gICAgICB9LCBtb3JlKSk7XG4gICAgfSk7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gV2l0aFN0eWxlcy5wcm9wVHlwZXMgPSB7XG4gICAgICAvKipcbiAgICAgICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICAgICAqL1xuICAgICAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2UgdGhhdCBwcm9wIHRvIHBhc3MgYSByZWYgdG8gdGhlIGRlY29yYXRlZCBjb21wb25lbnQuXG4gICAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAgICovXG4gICAgICBpbm5lclJlZjogY2hhaW5Qcm9wVHlwZXMoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSwgZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgIGlmIChwcm9wcy5pbm5lclJlZiA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDsgLy8gcmV0dXJuIG5ldyBFcnJvcihcbiAgICAgICAgLy8gICAnTWF0ZXJpYWwtVUk6IFRoZSBgaW5uZXJSZWZgIHByb3AgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHY1LiAnICtcbiAgICAgICAgLy8gICAgICdSZWZzIGFyZSBub3cgYXV0b21hdGljYWxseSBmb3J3YXJkZWQgdG8gdGhlIGlubmVyIGNvbXBvbmVudC4nLFxuICAgICAgICAvLyApO1xuICAgICAgfSlcbiAgICB9IDogdm9pZCAwO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIFdpdGhTdHlsZXMuZGlzcGxheU5hbWUgPSBcIldpdGhTdHlsZXMoXCIuY29uY2F0KGdldERpc3BsYXlOYW1lKENvbXBvbmVudCksIFwiKVwiKTtcbiAgICB9XG5cbiAgICBob2lzdE5vblJlYWN0U3RhdGljcyhXaXRoU3R5bGVzLCBDb21wb25lbnQpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8vIEV4cG9zZWQgZm9yIHRlc3QgcHVycG9zZXMuXG4gICAgICBXaXRoU3R5bGVzLk5ha2VkID0gQ29tcG9uZW50O1xuICAgICAgV2l0aFN0eWxlcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgIFdpdGhTdHlsZXMudXNlU3R5bGVzID0gdXNlU3R5bGVzO1xuICAgIH1cblxuICAgIHJldHVybiBXaXRoU3R5bGVzO1xuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlczsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG4vLyBTb3J0ZWQgQVNDIGJ5IHNpemUuIFRoYXQncyBpbXBvcnRhbnQuXG4vLyBJdCBjYW4ndCBiZSBjb25maWd1cmVkIGFzIGl0J3MgdXNlZCBzdGF0aWNhbGx5IGZvciBwcm9wVHlwZXMuXG5leHBvcnQgdmFyIGtleXMgPSBbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ107IC8vIEtlZXAgaW4gbWluZCB0aGF0IEBtZWRpYSBpcyBpbmNsdXNpdmUgYnkgdGhlIENTUyBzcGVjaWZpY2F0aW9uLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVCcmVha3BvaW50cyhicmVha3BvaW50cykge1xuICB2YXIgX2JyZWFrcG9pbnRzJHZhbHVlcyA9IGJyZWFrcG9pbnRzLnZhbHVlcyxcbiAgICAgIHZhbHVlcyA9IF9icmVha3BvaW50cyR2YWx1ZXMgPT09IHZvaWQgMCA/IHtcbiAgICB4czogMCxcbiAgICBzbTogNjAwLFxuICAgIG1kOiA5NjAsXG4gICAgbGc6IDEyODAsXG4gICAgeGw6IDE5MjBcbiAgfSA6IF9icmVha3BvaW50cyR2YWx1ZXMsXG4gICAgICBfYnJlYWtwb2ludHMkdW5pdCA9IGJyZWFrcG9pbnRzLnVuaXQsXG4gICAgICB1bml0ID0gX2JyZWFrcG9pbnRzJHVuaXQgPT09IHZvaWQgMCA/ICdweCcgOiBfYnJlYWtwb2ludHMkdW5pdCxcbiAgICAgIF9icmVha3BvaW50cyRzdGVwID0gYnJlYWtwb2ludHMuc3RlcCxcbiAgICAgIHN0ZXAgPSBfYnJlYWtwb2ludHMkc3RlcCA9PT0gdm9pZCAwID8gNSA6IF9icmVha3BvaW50cyRzdGVwLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoYnJlYWtwb2ludHMsIFtcInZhbHVlc1wiLCBcInVuaXRcIiwgXCJzdGVwXCJdKTtcblxuICBmdW5jdGlvbiB1cChrZXkpIHtcbiAgICB2YXIgdmFsdWUgPSB0eXBlb2YgdmFsdWVzW2tleV0gPT09ICdudW1iZXInID8gdmFsdWVzW2tleV0gOiBrZXk7XG4gICAgcmV0dXJuIFwiQG1lZGlhIChtaW4td2lkdGg6XCIuY29uY2F0KHZhbHVlKS5jb25jYXQodW5pdCwgXCIpXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZG93bihrZXkpIHtcbiAgICB2YXIgZW5kSW5kZXggPSBrZXlzLmluZGV4T2Yoa2V5KSArIDE7XG4gICAgdmFyIHVwcGVyYm91bmQgPSB2YWx1ZXNba2V5c1tlbmRJbmRleF1dO1xuXG4gICAgaWYgKGVuZEluZGV4ID09PSBrZXlzLmxlbmd0aCkge1xuICAgICAgLy8geGwgZG93biBhcHBsaWVzIHRvIGFsbCBzaXplc1xuICAgICAgcmV0dXJuIHVwKCd4cycpO1xuICAgIH1cblxuICAgIHZhciB2YWx1ZSA9IHR5cGVvZiB1cHBlcmJvdW5kID09PSAnbnVtYmVyJyAmJiBlbmRJbmRleCA+IDAgPyB1cHBlcmJvdW5kIDoga2V5O1xuICAgIHJldHVybiBcIkBtZWRpYSAobWF4LXdpZHRoOlwiLmNvbmNhdCh2YWx1ZSAtIHN0ZXAgLyAxMDApLmNvbmNhdCh1bml0LCBcIilcIik7XG4gIH1cblxuICBmdW5jdGlvbiBiZXR3ZWVuKHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgZW5kSW5kZXggPSBrZXlzLmluZGV4T2YoZW5kKTtcblxuICAgIGlmIChlbmRJbmRleCA9PT0ga2V5cy5sZW5ndGggLSAxKSB7XG4gICAgICByZXR1cm4gdXAoc3RhcnQpO1xuICAgIH1cblxuICAgIHJldHVybiBcIkBtZWRpYSAobWluLXdpZHRoOlwiLmNvbmNhdCh0eXBlb2YgdmFsdWVzW3N0YXJ0XSA9PT0gJ251bWJlcicgPyB2YWx1ZXNbc3RhcnRdIDogc3RhcnQpLmNvbmNhdCh1bml0LCBcIikgYW5kIFwiKSArIFwiKG1heC13aWR0aDpcIi5jb25jYXQoKGVuZEluZGV4ICE9PSAtMSAmJiB0eXBlb2YgdmFsdWVzW2tleXNbZW5kSW5kZXggKyAxXV0gPT09ICdudW1iZXInID8gdmFsdWVzW2tleXNbZW5kSW5kZXggKyAxXV0gOiBlbmQpIC0gc3RlcCAvIDEwMCkuY29uY2F0KHVuaXQsIFwiKVwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9ubHkoa2V5KSB7XG4gICAgcmV0dXJuIGJldHdlZW4oa2V5LCBrZXkpO1xuICB9XG5cbiAgZnVuY3Rpb24gd2lkdGgoa2V5KSB7XG4gICAgcmV0dXJuIHZhbHVlc1trZXldO1xuICB9XG5cbiAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICBrZXlzOiBrZXlzLFxuICAgIHZhbHVlczogdmFsdWVzLFxuICAgIHVwOiB1cCxcbiAgICBkb3duOiBkb3duLFxuICAgIGJldHdlZW46IGJldHdlZW4sXG4gICAgb25seTogb25seSxcbiAgICB3aWR0aDogd2lkdGhcbiAgfSwgb3RoZXIpO1xufSIsImltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZU1peGlucyhicmVha3BvaW50cywgc3BhY2luZywgbWl4aW5zKSB7XG4gIHZhciBfdG9vbGJhcjtcblxuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIGd1dHRlcnM6IGZ1bmN0aW9uIGd1dHRlcnMoKSB7XG4gICAgICB2YXIgc3R5bGVzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICAgIC8vIFRvIGRlcHJlY2F0ZSBpbiB2NC4xXG4gICAgICAvLyAgICAgICB3YXJuaW5nKFxuICAgICAgLy8gICAgICAgICBmYWxzZSxcbiAgICAgIC8vICAgICAgICAgW1xuICAgICAgLy8gICAgICAgICAgICdNYXRlcmlhbC1VSTogVGhlbWUubWl4aW5zLmd1dHRlcnMoKSBpcyBkZXByZWNhdGVkLicsXG4gICAgICAvLyAgICAgICAgICAgJ1lvdSBjYW4gdXNlIHRoZSBzb3VyY2Ugb2YgdGhlIG1peGluIGRpcmVjdGx5OicsXG4gICAgICAvLyAgICAgICAgICAgYFxuICAgICAgLy8gcGFkZGluZ0xlZnQ6IHRoZW1lLnNwYWNpbmcoMiksXG4gICAgICAvLyBwYWRkaW5nUmlnaHQ6IHRoZW1lLnNwYWNpbmcoMiksXG4gICAgICAvLyBbdGhlbWUuYnJlYWtwb2ludHMudXAoJ3NtJyldOiB7XG4gICAgICAvLyAgIHBhZGRpbmdMZWZ0OiB0aGVtZS5zcGFjaW5nKDMpLFxuICAgICAgLy8gICBwYWRkaW5nUmlnaHQ6IHRoZW1lLnNwYWNpbmcoMyksXG4gICAgICAvLyB9LFxuICAgICAgLy8gYCxcbiAgICAgIC8vICAgICAgICAgXS5qb2luKCdcXG4nKSxcbiAgICAgIC8vICAgICAgICk7XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAgICBwYWRkaW5nTGVmdDogc3BhY2luZygyKSxcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiBzcGFjaW5nKDIpXG4gICAgICB9LCBzdHlsZXMsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgYnJlYWtwb2ludHMudXAoJ3NtJyksIF9leHRlbmRzKHtcbiAgICAgICAgcGFkZGluZ0xlZnQ6IHNwYWNpbmcoMyksXG4gICAgICAgIHBhZGRpbmdSaWdodDogc3BhY2luZygzKVxuICAgICAgfSwgc3R5bGVzW2JyZWFrcG9pbnRzLnVwKCdzbScpXSkpKTtcbiAgICB9LFxuICAgIHRvb2xiYXI6IChfdG9vbGJhciA9IHtcbiAgICAgIG1pbkhlaWdodDogNTZcbiAgICB9LCBfZGVmaW5lUHJvcGVydHkoX3Rvb2xiYXIsIFwiXCIuY29uY2F0KGJyZWFrcG9pbnRzLnVwKCd4cycpLCBcIiBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpXCIpLCB7XG4gICAgICBtaW5IZWlnaHQ6IDQ4XG4gICAgfSksIF9kZWZpbmVQcm9wZXJ0eShfdG9vbGJhciwgYnJlYWtwb2ludHMudXAoJ3NtJyksIHtcbiAgICAgIG1pbkhlaWdodDogNjRcbiAgICB9KSwgX3Rvb2xiYXIpXG4gIH0sIG1peGlucyk7XG59IiwidmFyIGNvbW1vbiA9IHtcbiAgYmxhY2s6ICcjMDAwJyxcbiAgd2hpdGU6ICcjZmZmJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGNvbW1vbjsiLCJ2YXIgZ3JleSA9IHtcbiAgNTA6ICcjZmFmYWZhJyxcbiAgMTAwOiAnI2Y1ZjVmNScsXG4gIDIwMDogJyNlZWVlZWUnLFxuICAzMDA6ICcjZTBlMGUwJyxcbiAgNDAwOiAnI2JkYmRiZCcsXG4gIDUwMDogJyM5ZTllOWUnLFxuICA2MDA6ICcjNzU3NTc1JyxcbiAgNzAwOiAnIzYxNjE2MScsXG4gIDgwMDogJyM0MjQyNDInLFxuICA5MDA6ICcjMjEyMTIxJyxcbiAgQTEwMDogJyNkNWQ1ZDUnLFxuICBBMjAwOiAnI2FhYWFhYScsXG4gIEE0MDA6ICcjMzAzMDMwJyxcbiAgQTcwMDogJyM2MTYxNjEnXG59O1xuZXhwb3J0IGRlZmF1bHQgZ3JleTsiLCJ2YXIgaW5kaWdvID0ge1xuICA1MDogJyNlOGVhZjYnLFxuICAxMDA6ICcjYzVjYWU5JyxcbiAgMjAwOiAnIzlmYThkYScsXG4gIDMwMDogJyM3OTg2Y2InLFxuICA0MDA6ICcjNWM2YmMwJyxcbiAgNTAwOiAnIzNmNTFiNScsXG4gIDYwMDogJyMzOTQ5YWInLFxuICA3MDA6ICcjMzAzZjlmJyxcbiAgODAwOiAnIzI4MzU5MycsXG4gIDkwMDogJyMxYTIzN2UnLFxuICBBMTAwOiAnIzhjOWVmZicsXG4gIEEyMDA6ICcjNTM2ZGZlJyxcbiAgQTQwMDogJyMzZDVhZmUnLFxuICBBNzAwOiAnIzMwNGZmZSdcbn07XG5leHBvcnQgZGVmYXVsdCBpbmRpZ287IiwidmFyIHBpbmsgPSB7XG4gIDUwOiAnI2ZjZTRlYycsXG4gIDEwMDogJyNmOGJiZDAnLFxuICAyMDA6ICcjZjQ4ZmIxJyxcbiAgMzAwOiAnI2YwNjI5MicsXG4gIDQwMDogJyNlYzQwN2EnLFxuICA1MDA6ICcjZTkxZTYzJyxcbiAgNjAwOiAnI2Q4MWI2MCcsXG4gIDcwMDogJyNjMjE4NWInLFxuICA4MDA6ICcjYWQxNDU3JyxcbiAgOTAwOiAnIzg4MGU0ZicsXG4gIEExMDA6ICcjZmY4MGFiJyxcbiAgQTIwMDogJyNmZjQwODEnLFxuICBBNDAwOiAnI2Y1MDA1NycsXG4gIEE3MDA6ICcjYzUxMTYyJ1xufTtcbmV4cG9ydCBkZWZhdWx0IHBpbms7IiwidmFyIHJlZCA9IHtcbiAgNTA6ICcjZmZlYmVlJyxcbiAgMTAwOiAnI2ZmY2RkMicsXG4gIDIwMDogJyNlZjlhOWEnLFxuICAzMDA6ICcjZTU3MzczJyxcbiAgNDAwOiAnI2VmNTM1MCcsXG4gIDUwMDogJyNmNDQzMzYnLFxuICA2MDA6ICcjZTUzOTM1JyxcbiAgNzAwOiAnI2QzMmYyZicsXG4gIDgwMDogJyNjNjI4MjgnLFxuICA5MDA6ICcjYjcxYzFjJyxcbiAgQTEwMDogJyNmZjhhODAnLFxuICBBMjAwOiAnI2ZmNTI1MicsXG4gIEE0MDA6ICcjZmYxNzQ0JyxcbiAgQTcwMDogJyNkNTAwMDAnXG59O1xuZXhwb3J0IGRlZmF1bHQgcmVkOyIsInZhciBvcmFuZ2UgPSB7XG4gIDUwOiAnI2ZmZjNlMCcsXG4gIDEwMDogJyNmZmUwYjInLFxuICAyMDA6ICcjZmZjYzgwJyxcbiAgMzAwOiAnI2ZmYjc0ZCcsXG4gIDQwMDogJyNmZmE3MjYnLFxuICA1MDA6ICcjZmY5ODAwJyxcbiAgNjAwOiAnI2ZiOGMwMCcsXG4gIDcwMDogJyNmNTdjMDAnLFxuICA4MDA6ICcjZWY2YzAwJyxcbiAgOTAwOiAnI2U2NTEwMCcsXG4gIEExMDA6ICcjZmZkMTgwJyxcbiAgQTIwMDogJyNmZmFiNDAnLFxuICBBNDAwOiAnI2ZmOTEwMCcsXG4gIEE3MDA6ICcjZmY2ZDAwJ1xufTtcbmV4cG9ydCBkZWZhdWx0IG9yYW5nZTsiLCJ2YXIgYmx1ZSA9IHtcbiAgNTA6ICcjZTNmMmZkJyxcbiAgMTAwOiAnI2JiZGVmYicsXG4gIDIwMDogJyM5MGNhZjknLFxuICAzMDA6ICcjNjRiNWY2JyxcbiAgNDAwOiAnIzQyYTVmNScsXG4gIDUwMDogJyMyMTk2ZjMnLFxuICA2MDA6ICcjMWU4OGU1JyxcbiAgNzAwOiAnIzE5NzZkMicsXG4gIDgwMDogJyMxNTY1YzAnLFxuICA5MDA6ICcjMGQ0N2ExJyxcbiAgQTEwMDogJyM4MmIxZmYnLFxuICBBMjAwOiAnIzQ0OGFmZicsXG4gIEE0MDA6ICcjMjk3OWZmJyxcbiAgQTcwMDogJyMyOTYyZmYnXG59O1xuZXhwb3J0IGRlZmF1bHQgYmx1ZTsiLCJ2YXIgZ3JlZW4gPSB7XG4gIDUwOiAnI2U4ZjVlOScsXG4gIDEwMDogJyNjOGU2YzknLFxuICAyMDA6ICcjYTVkNmE3JyxcbiAgMzAwOiAnIzgxYzc4NCcsXG4gIDQwMDogJyM2NmJiNmEnLFxuICA1MDA6ICcjNGNhZjUwJyxcbiAgNjAwOiAnIzQzYTA0NycsXG4gIDcwMDogJyMzODhlM2MnLFxuICA4MDA6ICcjMmU3ZDMyJyxcbiAgOTAwOiAnIzFiNWUyMCcsXG4gIEExMDA6ICcjYjlmNmNhJyxcbiAgQTIwMDogJyM2OWYwYWUnLFxuICBBNDAwOiAnIzAwZTY3NicsXG4gIEE3MDA6ICcjMDBjODUzJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGdyZWVuOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCB7IGZvcm1hdE11aUVycm9yTWVzc2FnZSBhcyBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlIH0gZnJvbSBcIkBtYXRlcmlhbC11aS91dGlsc1wiO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCBjb21tb24gZnJvbSAnLi4vY29sb3JzL2NvbW1vbic7XG5pbXBvcnQgZ3JleSBmcm9tICcuLi9jb2xvcnMvZ3JleSc7XG5pbXBvcnQgaW5kaWdvIGZyb20gJy4uL2NvbG9ycy9pbmRpZ28nO1xuaW1wb3J0IHBpbmsgZnJvbSAnLi4vY29sb3JzL3BpbmsnO1xuaW1wb3J0IHJlZCBmcm9tICcuLi9jb2xvcnMvcmVkJztcbmltcG9ydCBvcmFuZ2UgZnJvbSAnLi4vY29sb3JzL29yYW5nZSc7XG5pbXBvcnQgYmx1ZSBmcm9tICcuLi9jb2xvcnMvYmx1ZSc7XG5pbXBvcnQgZ3JlZW4gZnJvbSAnLi4vY29sb3JzL2dyZWVuJztcbmltcG9ydCB7IGRhcmtlbiwgZ2V0Q29udHJhc3RSYXRpbywgbGlnaHRlbiB9IGZyb20gJy4vY29sb3JNYW5pcHVsYXRvcic7XG5leHBvcnQgdmFyIGxpZ2h0ID0ge1xuICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gc3R5bGUgdGhlIHRleHQuXG4gIHRleHQ6IHtcbiAgICAvLyBUaGUgbW9zdCBpbXBvcnRhbnQgdGV4dC5cbiAgICBwcmltYXJ5OiAncmdiYSgwLCAwLCAwLCAwLjg3KScsXG4gICAgLy8gU2Vjb25kYXJ5IHRleHQuXG4gICAgc2Vjb25kYXJ5OiAncmdiYSgwLCAwLCAwLCAwLjU0KScsXG4gICAgLy8gRGlzYWJsZWQgdGV4dCBoYXZlIGV2ZW4gbG93ZXIgdmlzdWFsIHByb21pbmVuY2UuXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDAsIDAsIDAsIDAuMzgpJyxcbiAgICAvLyBUZXh0IGhpbnRzLlxuICAgIGhpbnQ6ICdyZ2JhKDAsIDAsIDAsIDAuMzgpJ1xuICB9LFxuICAvLyBUaGUgY29sb3IgdXNlZCB0byBkaXZpZGUgZGlmZmVyZW50IGVsZW1lbnRzLlxuICBkaXZpZGVyOiAncmdiYSgwLCAwLCAwLCAwLjEyKScsXG4gIC8vIFRoZSBiYWNrZ3JvdW5kIGNvbG9ycyB1c2VkIHRvIHN0eWxlIHRoZSBzdXJmYWNlcy5cbiAgLy8gQ29uc2lzdGVuY3kgYmV0d2VlbiB0aGVzZSB2YWx1ZXMgaXMgaW1wb3J0YW50LlxuICBiYWNrZ3JvdW5kOiB7XG4gICAgcGFwZXI6IGNvbW1vbi53aGl0ZSxcbiAgICBkZWZhdWx0OiBncmV5WzUwXVxuICB9LFxuICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gc3R5bGUgdGhlIGFjdGlvbiBlbGVtZW50cy5cbiAgYWN0aW9uOiB7XG4gICAgLy8gVGhlIGNvbG9yIG9mIGFuIGFjdGl2ZSBhY3Rpb24gbGlrZSBhbiBpY29uIGJ1dHRvbi5cbiAgICBhY3RpdmU6ICdyZ2JhKDAsIDAsIDAsIDAuNTQpJyxcbiAgICAvLyBUaGUgY29sb3Igb2YgYW4gaG92ZXJlZCBhY3Rpb24uXG4gICAgaG92ZXI6ICdyZ2JhKDAsIDAsIDAsIDAuMDQpJyxcbiAgICBob3Zlck9wYWNpdHk6IDAuMDQsXG4gICAgLy8gVGhlIGNvbG9yIG9mIGEgc2VsZWN0ZWQgYWN0aW9uLlxuICAgIHNlbGVjdGVkOiAncmdiYSgwLCAwLCAwLCAwLjA4KScsXG4gICAgc2VsZWN0ZWRPcGFjaXR5OiAwLjA4LFxuICAgIC8vIFRoZSBjb2xvciBvZiBhIGRpc2FibGVkIGFjdGlvbi5cbiAgICBkaXNhYmxlZDogJ3JnYmEoMCwgMCwgMCwgMC4yNiknLFxuICAgIC8vIFRoZSBiYWNrZ3JvdW5kIGNvbG9yIG9mIGEgZGlzYWJsZWQgYWN0aW9uLlxuICAgIGRpc2FibGVkQmFja2dyb3VuZDogJ3JnYmEoMCwgMCwgMCwgMC4xMiknLFxuICAgIGRpc2FibGVkT3BhY2l0eTogMC4zOCxcbiAgICBmb2N1czogJ3JnYmEoMCwgMCwgMCwgMC4xMiknLFxuICAgIGZvY3VzT3BhY2l0eTogMC4xMixcbiAgICBhY3RpdmF0ZWRPcGFjaXR5OiAwLjEyXG4gIH1cbn07XG5leHBvcnQgdmFyIGRhcmsgPSB7XG4gIHRleHQ6IHtcbiAgICBwcmltYXJ5OiBjb21tb24ud2hpdGUsXG4gICAgc2Vjb25kYXJ5OiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjcpJyxcbiAgICBkaXNhYmxlZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC41KScsXG4gICAgaGludDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC41KScsXG4gICAgaWNvbjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC41KSdcbiAgfSxcbiAgZGl2aWRlcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMiknLFxuICBiYWNrZ3JvdW5kOiB7XG4gICAgcGFwZXI6IGdyZXlbODAwXSxcbiAgICBkZWZhdWx0OiAnIzMwMzAzMCdcbiAgfSxcbiAgYWN0aW9uOiB7XG4gICAgYWN0aXZlOiBjb21tb24ud2hpdGUsXG4gICAgaG92ZXI6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMDgpJyxcbiAgICBob3Zlck9wYWNpdHk6IDAuMDgsXG4gICAgc2VsZWN0ZWQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTYpJyxcbiAgICBzZWxlY3RlZE9wYWNpdHk6IDAuMTYsXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMyknLFxuICAgIGRpc2FibGVkQmFja2dyb3VuZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMiknLFxuICAgIGRpc2FibGVkT3BhY2l0eTogMC4zOCxcbiAgICBmb2N1czogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMiknLFxuICAgIGZvY3VzT3BhY2l0eTogMC4xMixcbiAgICBhY3RpdmF0ZWRPcGFjaXR5OiAwLjI0XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGFkZExpZ2h0T3JEYXJrKGludGVudCwgZGlyZWN0aW9uLCBzaGFkZSwgdG9uYWxPZmZzZXQpIHtcbiAgdmFyIHRvbmFsT2Zmc2V0TGlnaHQgPSB0b25hbE9mZnNldC5saWdodCB8fCB0b25hbE9mZnNldDtcbiAgdmFyIHRvbmFsT2Zmc2V0RGFyayA9IHRvbmFsT2Zmc2V0LmRhcmsgfHwgdG9uYWxPZmZzZXQgKiAxLjU7XG5cbiAgaWYgKCFpbnRlbnRbZGlyZWN0aW9uXSkge1xuICAgIGlmIChpbnRlbnQuaGFzT3duUHJvcGVydHkoc2hhZGUpKSB7XG4gICAgICBpbnRlbnRbZGlyZWN0aW9uXSA9IGludGVudFtzaGFkZV07XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdsaWdodCcpIHtcbiAgICAgIGludGVudC5saWdodCA9IGxpZ2h0ZW4oaW50ZW50Lm1haW4sIHRvbmFsT2Zmc2V0TGlnaHQpO1xuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAnZGFyaycpIHtcbiAgICAgIGludGVudC5kYXJrID0gZGFya2VuKGludGVudC5tYWluLCB0b25hbE9mZnNldERhcmspO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVQYWxldHRlKHBhbGV0dGUpIHtcbiAgdmFyIF9wYWxldHRlJHByaW1hcnkgPSBwYWxldHRlLnByaW1hcnksXG4gICAgICBwcmltYXJ5ID0gX3BhbGV0dGUkcHJpbWFyeSA9PT0gdm9pZCAwID8ge1xuICAgIGxpZ2h0OiBpbmRpZ29bMzAwXSxcbiAgICBtYWluOiBpbmRpZ29bNTAwXSxcbiAgICBkYXJrOiBpbmRpZ29bNzAwXVxuICB9IDogX3BhbGV0dGUkcHJpbWFyeSxcbiAgICAgIF9wYWxldHRlJHNlY29uZGFyeSA9IHBhbGV0dGUuc2Vjb25kYXJ5LFxuICAgICAgc2Vjb25kYXJ5ID0gX3BhbGV0dGUkc2Vjb25kYXJ5ID09PSB2b2lkIDAgPyB7XG4gICAgbGlnaHQ6IHBpbmsuQTIwMCxcbiAgICBtYWluOiBwaW5rLkE0MDAsXG4gICAgZGFyazogcGluay5BNzAwXG4gIH0gOiBfcGFsZXR0ZSRzZWNvbmRhcnksXG4gICAgICBfcGFsZXR0ZSRlcnJvciA9IHBhbGV0dGUuZXJyb3IsXG4gICAgICBlcnJvciA9IF9wYWxldHRlJGVycm9yID09PSB2b2lkIDAgPyB7XG4gICAgbGlnaHQ6IHJlZFszMDBdLFxuICAgIG1haW46IHJlZFs1MDBdLFxuICAgIGRhcms6IHJlZFs3MDBdXG4gIH0gOiBfcGFsZXR0ZSRlcnJvcixcbiAgICAgIF9wYWxldHRlJHdhcm5pbmcgPSBwYWxldHRlLndhcm5pbmcsXG4gICAgICB3YXJuaW5nID0gX3BhbGV0dGUkd2FybmluZyA9PT0gdm9pZCAwID8ge1xuICAgIGxpZ2h0OiBvcmFuZ2VbMzAwXSxcbiAgICBtYWluOiBvcmFuZ2VbNTAwXSxcbiAgICBkYXJrOiBvcmFuZ2VbNzAwXVxuICB9IDogX3BhbGV0dGUkd2FybmluZyxcbiAgICAgIF9wYWxldHRlJGluZm8gPSBwYWxldHRlLmluZm8sXG4gICAgICBpbmZvID0gX3BhbGV0dGUkaW5mbyA9PT0gdm9pZCAwID8ge1xuICAgIGxpZ2h0OiBibHVlWzMwMF0sXG4gICAgbWFpbjogYmx1ZVs1MDBdLFxuICAgIGRhcms6IGJsdWVbNzAwXVxuICB9IDogX3BhbGV0dGUkaW5mbyxcbiAgICAgIF9wYWxldHRlJHN1Y2Nlc3MgPSBwYWxldHRlLnN1Y2Nlc3MsXG4gICAgICBzdWNjZXNzID0gX3BhbGV0dGUkc3VjY2VzcyA9PT0gdm9pZCAwID8ge1xuICAgIGxpZ2h0OiBncmVlblszMDBdLFxuICAgIG1haW46IGdyZWVuWzUwMF0sXG4gICAgZGFyazogZ3JlZW5bNzAwXVxuICB9IDogX3BhbGV0dGUkc3VjY2VzcyxcbiAgICAgIF9wYWxldHRlJHR5cGUgPSBwYWxldHRlLnR5cGUsXG4gICAgICB0eXBlID0gX3BhbGV0dGUkdHlwZSA9PT0gdm9pZCAwID8gJ2xpZ2h0JyA6IF9wYWxldHRlJHR5cGUsXG4gICAgICBfcGFsZXR0ZSRjb250cmFzdFRocmUgPSBwYWxldHRlLmNvbnRyYXN0VGhyZXNob2xkLFxuICAgICAgY29udHJhc3RUaHJlc2hvbGQgPSBfcGFsZXR0ZSRjb250cmFzdFRocmUgPT09IHZvaWQgMCA/IDMgOiBfcGFsZXR0ZSRjb250cmFzdFRocmUsXG4gICAgICBfcGFsZXR0ZSR0b25hbE9mZnNldCA9IHBhbGV0dGUudG9uYWxPZmZzZXQsXG4gICAgICB0b25hbE9mZnNldCA9IF9wYWxldHRlJHRvbmFsT2Zmc2V0ID09PSB2b2lkIDAgPyAwLjIgOiBfcGFsZXR0ZSR0b25hbE9mZnNldCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHBhbGV0dGUsIFtcInByaW1hcnlcIiwgXCJzZWNvbmRhcnlcIiwgXCJlcnJvclwiLCBcIndhcm5pbmdcIiwgXCJpbmZvXCIsIFwic3VjY2Vzc1wiLCBcInR5cGVcIiwgXCJjb250cmFzdFRocmVzaG9sZFwiLCBcInRvbmFsT2Zmc2V0XCJdKTsgLy8gVXNlIHRoZSBzYW1lIGxvZ2ljIGFzXG4gIC8vIEJvb3RzdHJhcDogaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvMWQ2ZTM3MTBkZDQ0N2RlMWEyMDBmMjllOGZhNTIxZjhhMDkwOGY3MC9zY3NzL19mdW5jdGlvbnMuc2NzcyNMNTlcbiAgLy8gYW5kIG1hdGVyaWFsLWNvbXBvbmVudHMtd2ViIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRlcmlhbC1jb21wb25lbnRzL21hdGVyaWFsLWNvbXBvbmVudHMtd2ViL2Jsb2IvYWM0NmI4ODYzYzRkYWI5ZmMyMmM0YzY2MmRjNmJkMWI2NWRkNjUyZi9wYWNrYWdlcy9tZGMtdGhlbWUvX2Z1bmN0aW9ucy5zY3NzI0w1NFxuXG5cbiAgZnVuY3Rpb24gZ2V0Q29udHJhc3RUZXh0KGJhY2tncm91bmQpIHtcbiAgICB2YXIgY29udHJhc3RUZXh0ID0gZ2V0Q29udHJhc3RSYXRpbyhiYWNrZ3JvdW5kLCBkYXJrLnRleHQucHJpbWFyeSkgPj0gY29udHJhc3RUaHJlc2hvbGQgPyBkYXJrLnRleHQucHJpbWFyeSA6IGxpZ2h0LnRleHQucHJpbWFyeTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgY29udHJhc3QgPSBnZXRDb250cmFzdFJhdGlvKGJhY2tncm91bmQsIGNvbnRyYXN0VGV4dCk7XG5cbiAgICAgIGlmIChjb250cmFzdCA8IDMpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbXCJNYXRlcmlhbC1VSTogVGhlIGNvbnRyYXN0IHJhdGlvIG9mIFwiLmNvbmNhdChjb250cmFzdCwgXCI6MSBmb3IgXCIpLmNvbmNhdChjb250cmFzdFRleHQsIFwiIG9uIFwiKS5jb25jYXQoYmFja2dyb3VuZCksICdmYWxscyBiZWxvdyB0aGUgV0NBRyByZWNvbW1lbmRlZCBhYnNvbHV0ZSBtaW5pbXVtIGNvbnRyYXN0IHJhdGlvIG9mIDM6MS4nLCAnaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDgvUkVDLVdDQUcyMC0yMDA4MTIxMS8jdmlzdWFsLWF1ZGlvLWNvbnRyYXN0LWNvbnRyYXN0J10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjb250cmFzdFRleHQ7XG4gIH1cblxuICB2YXIgYXVnbWVudENvbG9yID0gZnVuY3Rpb24gYXVnbWVudENvbG9yKGNvbG9yKSB7XG4gICAgdmFyIG1haW5TaGFkZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogNTAwO1xuICAgIHZhciBsaWdodFNoYWRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAzMDA7XG4gICAgdmFyIGRhcmtTaGFkZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogNzAwO1xuICAgIGNvbG9yID0gX2V4dGVuZHMoe30sIGNvbG9yKTtcblxuICAgIGlmICghY29sb3IubWFpbiAmJiBjb2xvclttYWluU2hhZGVdKSB7XG4gICAgICBjb2xvci5tYWluID0gY29sb3JbbWFpblNoYWRlXTtcbiAgICB9XG5cbiAgICBpZiAoIWNvbG9yLm1haW4pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBcIk1hdGVyaWFsLVVJOiBUaGUgY29sb3IgcHJvdmlkZWQgdG8gYXVnbWVudENvbG9yKGNvbG9yKSBpcyBpbnZhbGlkLlxcblRoZSBjb2xvciBvYmplY3QgbmVlZHMgdG8gaGF2ZSBhIGBtYWluYCBwcm9wZXJ0eSBvciBhIGBcIi5jb25jYXQobWFpblNoYWRlLCBcImAgcHJvcGVydHkuXCIpIDogX2Zvcm1hdE11aUVycm9yTWVzc2FnZSg0LCBtYWluU2hhZGUpKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGNvbG9yLm1haW4gIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gXCJNYXRlcmlhbC1VSTogVGhlIGNvbG9yIHByb3ZpZGVkIHRvIGF1Z21lbnRDb2xvcihjb2xvcikgaXMgaW52YWxpZC5cXG5gY29sb3IubWFpbmAgc2hvdWxkIGJlIGEgc3RyaW5nLCBidXQgYFwiLmNvbmNhdChKU09OLnN0cmluZ2lmeShjb2xvci5tYWluKSwgXCJgIHdhcyBwcm92aWRlZCBpbnN0ZWFkLlxcblxcbkRpZCB5b3UgaW50ZW5kIHRvIHVzZSBvbmUgb2YgdGhlIGZvbGxvd2luZyBhcHByb2FjaGVzP1xcblxcbmltcG9ydCB7XFx4QTBncmVlbiB9IGZyb20gXFxcIkBtYXRlcmlhbC11aS9jb3JlL2NvbG9yc1xcXCI7XFxuXFxuY29uc3QgdGhlbWUxID0gY3JlYXRlTXVpVGhlbWUoeyBwYWxldHRlOiB7XFxuICBwcmltYXJ5OiBncmVlbixcXG59IH0pO1xcblxcbmNvbnN0IHRoZW1lMiA9IGNyZWF0ZU11aVRoZW1lKHsgcGFsZXR0ZToge1xcbiAgcHJpbWFyeTogeyBtYWluOiBncmVlbls1MDBdIH0sXFxufSB9KTtcIikgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDUsIEpTT04uc3RyaW5naWZ5KGNvbG9yLm1haW4pKSk7XG4gICAgfVxuXG4gICAgYWRkTGlnaHRPckRhcmsoY29sb3IsICdsaWdodCcsIGxpZ2h0U2hhZGUsIHRvbmFsT2Zmc2V0KTtcbiAgICBhZGRMaWdodE9yRGFyayhjb2xvciwgJ2RhcmsnLCBkYXJrU2hhZGUsIHRvbmFsT2Zmc2V0KTtcblxuICAgIGlmICghY29sb3IuY29udHJhc3RUZXh0KSB7XG4gICAgICBjb2xvci5jb250cmFzdFRleHQgPSBnZXRDb250cmFzdFRleHQoY29sb3IubWFpbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbG9yO1xuICB9O1xuXG4gIHZhciB0eXBlcyA9IHtcbiAgICBkYXJrOiBkYXJrLFxuICAgIGxpZ2h0OiBsaWdodFxuICB9O1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKCF0eXBlc1t0eXBlXSkge1xuICAgICAgY29uc29sZS5lcnJvcihcIk1hdGVyaWFsLVVJOiBUaGUgcGFsZXR0ZSB0eXBlIGBcIi5jb25jYXQodHlwZSwgXCJgIGlzIG5vdCBzdXBwb3J0ZWQuXCIpKTtcbiAgICB9XG4gIH1cblxuICB2YXIgcGFsZXR0ZU91dHB1dCA9IGRlZXBtZXJnZShfZXh0ZW5kcyh7XG4gICAgLy8gQSBjb2xsZWN0aW9uIG9mIGNvbW1vbiBjb2xvcnMuXG4gICAgY29tbW9uOiBjb21tb24sXG4gICAgLy8gVGhlIHBhbGV0dGUgdHlwZSwgY2FuIGJlIGxpZ2h0IG9yIGRhcmsuXG4gICAgdHlwZTogdHlwZSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IHByaW1hcnkgaW50ZXJmYWNlIGVsZW1lbnRzIGZvciBhIHVzZXIuXG4gICAgcHJpbWFyeTogYXVnbWVudENvbG9yKHByaW1hcnkpLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byByZXByZXNlbnQgc2Vjb25kYXJ5IGludGVyZmFjZSBlbGVtZW50cyBmb3IgYSB1c2VyLlxuICAgIHNlY29uZGFyeTogYXVnbWVudENvbG9yKHNlY29uZGFyeSwgJ0E0MDAnLCAnQTIwMCcsICdBNzAwJyksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHJlcHJlc2VudCBpbnRlcmZhY2UgZWxlbWVudHMgdGhhdCB0aGUgdXNlciBzaG91bGQgYmUgbWFkZSBhd2FyZSBvZi5cbiAgICBlcnJvcjogYXVnbWVudENvbG9yKGVycm9yKSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IHBvdGVudGlhbGx5IGRhbmdlcm91cyBhY3Rpb25zIG9yIGltcG9ydGFudCBtZXNzYWdlcy5cbiAgICB3YXJuaW5nOiBhdWdtZW50Q29sb3Iod2FybmluZyksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHByZXNlbnQgaW5mb3JtYXRpb24gdG8gdGhlIHVzZXIgdGhhdCBpcyBuZXV0cmFsIGFuZCBub3QgbmVjZXNzYXJpbHkgaW1wb3J0YW50LlxuICAgIGluZm86IGF1Z21lbnRDb2xvcihpbmZvKSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gaW5kaWNhdGUgdGhlIHN1Y2Nlc3NmdWwgY29tcGxldGlvbiBvZiBhbiBhY3Rpb24gdGhhdCB1c2VyIHRyaWdnZXJlZC5cbiAgICBzdWNjZXNzOiBhdWdtZW50Q29sb3Ioc3VjY2VzcyksXG4gICAgLy8gVGhlIGdyZXkgY29sb3JzLlxuICAgIGdyZXk6IGdyZXksXG4gICAgLy8gVXNlZCBieSBgZ2V0Q29udHJhc3RUZXh0KClgIHRvIG1heGltaXplIHRoZSBjb250cmFzdCBiZXR3ZWVuXG4gICAgLy8gdGhlIGJhY2tncm91bmQgYW5kIHRoZSB0ZXh0LlxuICAgIGNvbnRyYXN0VGhyZXNob2xkOiBjb250cmFzdFRocmVzaG9sZCxcbiAgICAvLyBUYWtlcyBhIGJhY2tncm91bmQgY29sb3IgYW5kIHJldHVybnMgdGhlIHRleHQgY29sb3IgdGhhdCBtYXhpbWl6ZXMgdGhlIGNvbnRyYXN0LlxuICAgIGdldENvbnRyYXN0VGV4dDogZ2V0Q29udHJhc3RUZXh0LFxuICAgIC8vIEdlbmVyYXRlIGEgcmljaCBjb2xvciBvYmplY3QuXG4gICAgYXVnbWVudENvbG9yOiBhdWdtZW50Q29sb3IsXG4gICAgLy8gVXNlZCBieSB0aGUgZnVuY3Rpb25zIGJlbG93IHRvIHNoaWZ0IGEgY29sb3IncyBsdW1pbmFuY2UgYnkgYXBwcm94aW1hdGVseVxuICAgIC8vIHR3byBpbmRleGVzIHdpdGhpbiBpdHMgdG9uYWwgcGFsZXR0ZS5cbiAgICAvLyBFLmcuLCBzaGlmdCBmcm9tIFJlZCA1MDAgdG8gUmVkIDMwMCBvciBSZWQgNzAwLlxuICAgIHRvbmFsT2Zmc2V0OiB0b25hbE9mZnNldFxuICB9LCB0eXBlc1t0eXBlXSksIG90aGVyKTtcbiAgcmV0dXJuIHBhbGV0dGVPdXRwdXQ7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcblxuZnVuY3Rpb24gcm91bmQodmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiAxZTUpIC8gMWU1O1xufVxuXG52YXIgY2FzZUFsbENhcHMgPSB7XG4gIHRleHRUcmFuc2Zvcm06ICd1cHBlcmNhc2UnXG59O1xudmFyIGRlZmF1bHRGb250RmFtaWx5ID0gJ1wiUm9ib3RvXCIsIFwiSGVsdmV0aWNhXCIsIFwiQXJpYWxcIiwgc2Fucy1zZXJpZic7XG4vKipcbiAqIEBzZWUgQGxpbmt7aHR0cHM6Ly9tYXRlcmlhbC5pby9kZXNpZ24vdHlwb2dyYXBoeS90aGUtdHlwZS1zeXN0ZW0uaHRtbH1cbiAqIEBzZWUgQGxpbmt7aHR0cHM6Ly9tYXRlcmlhbC5pby9kZXNpZ24vdHlwb2dyYXBoeS91bmRlcnN0YW5kaW5nLXR5cG9ncmFwaHkuaHRtbH1cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVUeXBvZ3JhcGh5KHBhbGV0dGUsIHR5cG9ncmFwaHkpIHtcbiAgdmFyIF9yZWYgPSB0eXBlb2YgdHlwb2dyYXBoeSA9PT0gJ2Z1bmN0aW9uJyA/IHR5cG9ncmFwaHkocGFsZXR0ZSkgOiB0eXBvZ3JhcGh5LFxuICAgICAgX3JlZiRmb250RmFtaWx5ID0gX3JlZi5mb250RmFtaWx5LFxuICAgICAgZm9udEZhbWlseSA9IF9yZWYkZm9udEZhbWlseSA9PT0gdm9pZCAwID8gZGVmYXVsdEZvbnRGYW1pbHkgOiBfcmVmJGZvbnRGYW1pbHksXG4gICAgICBfcmVmJGZvbnRTaXplID0gX3JlZi5mb250U2l6ZSxcbiAgICAgIGZvbnRTaXplID0gX3JlZiRmb250U2l6ZSA9PT0gdm9pZCAwID8gMTQgOiBfcmVmJGZvbnRTaXplLFxuICAgICAgX3JlZiRmb250V2VpZ2h0TGlnaHQgPSBfcmVmLmZvbnRXZWlnaHRMaWdodCxcbiAgICAgIGZvbnRXZWlnaHRMaWdodCA9IF9yZWYkZm9udFdlaWdodExpZ2h0ID09PSB2b2lkIDAgPyAzMDAgOiBfcmVmJGZvbnRXZWlnaHRMaWdodCxcbiAgICAgIF9yZWYkZm9udFdlaWdodFJlZ3VsYSA9IF9yZWYuZm9udFdlaWdodFJlZ3VsYXIsXG4gICAgICBmb250V2VpZ2h0UmVndWxhciA9IF9yZWYkZm9udFdlaWdodFJlZ3VsYSA9PT0gdm9pZCAwID8gNDAwIDogX3JlZiRmb250V2VpZ2h0UmVndWxhLFxuICAgICAgX3JlZiRmb250V2VpZ2h0TWVkaXVtID0gX3JlZi5mb250V2VpZ2h0TWVkaXVtLFxuICAgICAgZm9udFdlaWdodE1lZGl1bSA9IF9yZWYkZm9udFdlaWdodE1lZGl1bSA9PT0gdm9pZCAwID8gNTAwIDogX3JlZiRmb250V2VpZ2h0TWVkaXVtLFxuICAgICAgX3JlZiRmb250V2VpZ2h0Qm9sZCA9IF9yZWYuZm9udFdlaWdodEJvbGQsXG4gICAgICBmb250V2VpZ2h0Qm9sZCA9IF9yZWYkZm9udFdlaWdodEJvbGQgPT09IHZvaWQgMCA/IDcwMCA6IF9yZWYkZm9udFdlaWdodEJvbGQsXG4gICAgICBfcmVmJGh0bWxGb250U2l6ZSA9IF9yZWYuaHRtbEZvbnRTaXplLFxuICAgICAgaHRtbEZvbnRTaXplID0gX3JlZiRodG1sRm9udFNpemUgPT09IHZvaWQgMCA/IDE2IDogX3JlZiRodG1sRm9udFNpemUsXG4gICAgICBhbGxWYXJpYW50cyA9IF9yZWYuYWxsVmFyaWFudHMsXG4gICAgICBweFRvUmVtMiA9IF9yZWYucHhUb1JlbSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFtcImZvbnRGYW1pbHlcIiwgXCJmb250U2l6ZVwiLCBcImZvbnRXZWlnaHRMaWdodFwiLCBcImZvbnRXZWlnaHRSZWd1bGFyXCIsIFwiZm9udFdlaWdodE1lZGl1bVwiLCBcImZvbnRXZWlnaHRCb2xkXCIsIFwiaHRtbEZvbnRTaXplXCIsIFwiYWxsVmFyaWFudHNcIiwgXCJweFRvUmVtXCJdKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh0eXBlb2YgZm9udFNpemUgIT09ICdudW1iZXInKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNYXRlcmlhbC1VSTogYGZvbnRTaXplYCBpcyByZXF1aXJlZCB0byBiZSBhIG51bWJlci4nKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGh0bWxGb250U2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ01hdGVyaWFsLVVJOiBgaHRtbEZvbnRTaXplYCBpcyByZXF1aXJlZCB0byBiZSBhIG51bWJlci4nKTtcbiAgICB9XG4gIH1cblxuICB2YXIgY29lZiA9IGZvbnRTaXplIC8gMTQ7XG5cbiAgdmFyIHB4VG9SZW0gPSBweFRvUmVtMiB8fCBmdW5jdGlvbiAoc2l6ZSkge1xuICAgIHJldHVybiBcIlwiLmNvbmNhdChzaXplIC8gaHRtbEZvbnRTaXplICogY29lZiwgXCJyZW1cIik7XG4gIH07XG5cbiAgdmFyIGJ1aWxkVmFyaWFudCA9IGZ1bmN0aW9uIGJ1aWxkVmFyaWFudChmb250V2VpZ2h0LCBzaXplLCBsaW5lSGVpZ2h0LCBsZXR0ZXJTcGFjaW5nLCBjYXNpbmcpIHtcbiAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAgZm9udEZhbWlseTogZm9udEZhbWlseSxcbiAgICAgIGZvbnRXZWlnaHQ6IGZvbnRXZWlnaHQsXG4gICAgICBmb250U2l6ZTogcHhUb1JlbShzaXplKSxcbiAgICAgIC8vIFVuaXRsZXNzIGZvbGxvd2luZyBodHRwczovL21leWVyd2ViLmNvbS9lcmljL3Rob3VnaHRzLzIwMDYvMDIvMDgvdW5pdGxlc3MtbGluZS1oZWlnaHRzL1xuICAgICAgbGluZUhlaWdodDogbGluZUhlaWdodFxuICAgIH0sIGZvbnRGYW1pbHkgPT09IGRlZmF1bHRGb250RmFtaWx5ID8ge1xuICAgICAgbGV0dGVyU3BhY2luZzogXCJcIi5jb25jYXQocm91bmQobGV0dGVyU3BhY2luZyAvIHNpemUpLCBcImVtXCIpXG4gICAgfSA6IHt9LCBjYXNpbmcsIGFsbFZhcmlhbnRzKTtcbiAgfTtcblxuICB2YXIgdmFyaWFudHMgPSB7XG4gICAgaDE6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TGlnaHQsIDk2LCAxLjE2NywgLTEuNSksXG4gICAgaDI6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TGlnaHQsIDYwLCAxLjIsIC0wLjUpLFxuICAgIGgzOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDQ4LCAxLjE2NywgMCksXG4gICAgaDQ6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMzQsIDEuMjM1LCAwLjI1KSxcbiAgICBoNTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAyNCwgMS4zMzQsIDApLFxuICAgIGg2OiBidWlsZFZhcmlhbnQoZm9udFdlaWdodE1lZGl1bSwgMjAsIDEuNiwgMC4xNSksXG4gICAgc3VidGl0bGUxOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDE2LCAxLjc1LCAwLjE1KSxcbiAgICBzdWJ0aXRsZTI6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TWVkaXVtLCAxNCwgMS41NywgMC4xKSxcbiAgICBib2R5MTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxNiwgMS41LCAwLjE1KSxcbiAgICBib2R5MjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxNCwgMS40MywgMC4xNSksXG4gICAgYnV0dG9uOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodE1lZGl1bSwgMTQsIDEuNzUsIDAuNCwgY2FzZUFsbENhcHMpLFxuICAgIGNhcHRpb246IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTIsIDEuNjYsIDAuNCksXG4gICAgb3ZlcmxpbmU6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTIsIDIuNjYsIDEsIGNhc2VBbGxDYXBzKVxuICB9O1xuICByZXR1cm4gZGVlcG1lcmdlKF9leHRlbmRzKHtcbiAgICBodG1sRm9udFNpemU6IGh0bWxGb250U2l6ZSxcbiAgICBweFRvUmVtOiBweFRvUmVtLFxuICAgIHJvdW5kOiByb3VuZCxcbiAgICAvLyBUT0RPIHY1OiByZW1vdmVcbiAgICBmb250RmFtaWx5OiBmb250RmFtaWx5LFxuICAgIGZvbnRTaXplOiBmb250U2l6ZSxcbiAgICBmb250V2VpZ2h0TGlnaHQ6IGZvbnRXZWlnaHRMaWdodCxcbiAgICBmb250V2VpZ2h0UmVndWxhcjogZm9udFdlaWdodFJlZ3VsYXIsXG4gICAgZm9udFdlaWdodE1lZGl1bTogZm9udFdlaWdodE1lZGl1bSxcbiAgICBmb250V2VpZ2h0Qm9sZDogZm9udFdlaWdodEJvbGRcbiAgfSwgdmFyaWFudHMpLCBvdGhlciwge1xuICAgIGNsb25lOiBmYWxzZSAvLyBObyBuZWVkIHRvIGNsb25lIGRlZXBcblxuICB9KTtcbn0iLCJ2YXIgc2hhZG93S2V5VW1icmFPcGFjaXR5ID0gMC4yO1xudmFyIHNoYWRvd0tleVBlbnVtYnJhT3BhY2l0eSA9IDAuMTQ7XG52YXIgc2hhZG93QW1iaWVudFNoYWRvd09wYWNpdHkgPSAwLjEyO1xuXG5mdW5jdGlvbiBjcmVhdGVTaGFkb3coKSB7XG4gIHJldHVybiBbXCJcIi5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSAxID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzFdLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSAyID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzJdLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSAzID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzNdLCBcInB4IHJnYmEoMCwwLDAsXCIpLmNvbmNhdChzaGFkb3dLZXlVbWJyYU9wYWNpdHksIFwiKVwiKSwgXCJcIi5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSA0ID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzRdLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSA1ID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzVdLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSA2ID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzZdLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSA3ID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzddLCBcInB4IHJnYmEoMCwwLDAsXCIpLmNvbmNhdChzaGFkb3dLZXlQZW51bWJyYU9wYWNpdHksIFwiKVwiKSwgXCJcIi5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSA4ID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzhdLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSA5ID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzldLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSAxMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxMF0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDExID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzExXSwgXCJweCByZ2JhKDAsMCwwLFwiKS5jb25jYXQoc2hhZG93QW1iaWVudFNoYWRvd09wYWNpdHksIFwiKVwiKV0uam9pbignLCcpO1xufSAvLyBWYWx1ZXMgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbWF0ZXJpYWwtY29tcG9uZW50cy9tYXRlcmlhbC1jb21wb25lbnRzLXdlYi9ibG9iL2JlODc0N2Y5NDU3NDY2OWNiNWU3YWRkMWE3YzU0ZmE0MWE4OWNlYzcvcGFja2FnZXMvbWRjLWVsZXZhdGlvbi9fdmFyaWFibGVzLnNjc3NcblxuXG52YXIgc2hhZG93cyA9IFsnbm9uZScsIGNyZWF0ZVNoYWRvdygwLCAyLCAxLCAtMSwgMCwgMSwgMSwgMCwgMCwgMSwgMywgMCksIGNyZWF0ZVNoYWRvdygwLCAzLCAxLCAtMiwgMCwgMiwgMiwgMCwgMCwgMSwgNSwgMCksIGNyZWF0ZVNoYWRvdygwLCAzLCAzLCAtMiwgMCwgMywgNCwgMCwgMCwgMSwgOCwgMCksIGNyZWF0ZVNoYWRvdygwLCAyLCA0LCAtMSwgMCwgNCwgNSwgMCwgMCwgMSwgMTAsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgNSwgLTEsIDAsIDUsIDgsIDAsIDAsIDEsIDE0LCAwKSwgY3JlYXRlU2hhZG93KDAsIDMsIDUsIC0xLCAwLCA2LCAxMCwgMCwgMCwgMSwgMTgsIDApLCBjcmVhdGVTaGFkb3coMCwgNCwgNSwgLTIsIDAsIDcsIDEwLCAxLCAwLCAyLCAxNiwgMSksIGNyZWF0ZVNoYWRvdygwLCA1LCA1LCAtMywgMCwgOCwgMTAsIDEsIDAsIDMsIDE0LCAyKSwgY3JlYXRlU2hhZG93KDAsIDUsIDYsIC0zLCAwLCA5LCAxMiwgMSwgMCwgMywgMTYsIDIpLCBjcmVhdGVTaGFkb3coMCwgNiwgNiwgLTMsIDAsIDEwLCAxNCwgMSwgMCwgNCwgMTgsIDMpLCBjcmVhdGVTaGFkb3coMCwgNiwgNywgLTQsIDAsIDExLCAxNSwgMSwgMCwgNCwgMjAsIDMpLCBjcmVhdGVTaGFkb3coMCwgNywgOCwgLTQsIDAsIDEyLCAxNywgMiwgMCwgNSwgMjIsIDQpLCBjcmVhdGVTaGFkb3coMCwgNywgOCwgLTQsIDAsIDEzLCAxOSwgMiwgMCwgNSwgMjQsIDQpLCBjcmVhdGVTaGFkb3coMCwgNywgOSwgLTQsIDAsIDE0LCAyMSwgMiwgMCwgNSwgMjYsIDQpLCBjcmVhdGVTaGFkb3coMCwgOCwgOSwgLTUsIDAsIDE1LCAyMiwgMiwgMCwgNiwgMjgsIDUpLCBjcmVhdGVTaGFkb3coMCwgOCwgMTAsIC01LCAwLCAxNiwgMjQsIDIsIDAsIDYsIDMwLCA1KSwgY3JlYXRlU2hhZG93KDAsIDgsIDExLCAtNSwgMCwgMTcsIDI2LCAyLCAwLCA2LCAzMiwgNSksIGNyZWF0ZVNoYWRvdygwLCA5LCAxMSwgLTUsIDAsIDE4LCAyOCwgMiwgMCwgNywgMzQsIDYpLCBjcmVhdGVTaGFkb3coMCwgOSwgMTIsIC02LCAwLCAxOSwgMjksIDIsIDAsIDcsIDM2LCA2KSwgY3JlYXRlU2hhZG93KDAsIDEwLCAxMywgLTYsIDAsIDIwLCAzMSwgMywgMCwgOCwgMzgsIDcpLCBjcmVhdGVTaGFkb3coMCwgMTAsIDEzLCAtNiwgMCwgMjEsIDMzLCAzLCAwLCA4LCA0MCwgNyksIGNyZWF0ZVNoYWRvdygwLCAxMCwgMTQsIC02LCAwLCAyMiwgMzUsIDMsIDAsIDgsIDQyLCA3KSwgY3JlYXRlU2hhZG93KDAsIDExLCAxNCwgLTcsIDAsIDIzLCAzNiwgMywgMCwgOSwgNDQsIDgpLCBjcmVhdGVTaGFkb3coMCwgMTEsIDE1LCAtNywgMCwgMjQsIDM4LCAzLCAwLCA5LCA0NiwgOCldO1xuZXhwb3J0IGRlZmF1bHQgc2hhZG93czsiLCJ2YXIgc2hhcGUgPSB7XG4gIGJvcmRlclJhZGl1czogNFxufTtcbmV4cG9ydCBkZWZhdWx0IHNoYXBlOyIsImltcG9ydCBhcnJheVdpdGhIb2xlcyBmcm9tIFwiLi9hcnJheVdpdGhIb2xlc1wiO1xuaW1wb3J0IGl0ZXJhYmxlVG9BcnJheUxpbWl0IGZyb20gXCIuL2l0ZXJhYmxlVG9BcnJheUxpbWl0XCI7XG5pbXBvcnQgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkgZnJvbSBcIi4vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXlcIjtcbmltcG9ydCBub25JdGVyYWJsZVJlc3QgZnJvbSBcIi4vbm9uSXRlcmFibGVSZXN0XCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHtcbiAgcmV0dXJuIGFycmF5V2l0aEhvbGVzKGFycikgfHwgaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IG5vbkl0ZXJhYmxlUmVzdCgpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcInVuZGVmaW5lZFwiIHx8ICEoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSkgcmV0dXJuO1xuICB2YXIgX2FyciA9IFtdO1xuICB2YXIgX24gPSB0cnVlO1xuICB2YXIgX2QgPSBmYWxzZTtcbiAgdmFyIF9lID0gdW5kZWZpbmVkO1xuXG4gIHRyeSB7XG4gICAgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkge1xuICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTtcblxuICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2QgPSB0cnVlO1xuICAgIF9lID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZCkgdGhyb3cgX2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9hcnI7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn0iLCJpbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuXG5mdW5jdGlvbiBtZXJnZShhY2MsIGl0ZW0pIHtcbiAgaWYgKCFpdGVtKSB7XG4gICAgcmV0dXJuIGFjYztcbiAgfVxuXG4gIHJldHVybiBkZWVwbWVyZ2UoYWNjLCBpdGVtLCB7XG4gICAgY2xvbmU6IGZhbHNlIC8vIE5vIG5lZWQgdG8gY2xvbmUgZGVlcCwgaXQncyB3YXkgZmFzdGVyLlxuXG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtZXJnZTsiLCJpbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IG1lcmdlIGZyb20gJy4vbWVyZ2UnOyAvLyBUaGUgYnJlYWtwb2ludCAqKnN0YXJ0KiogYXQgdGhpcyB2YWx1ZS5cbi8vIEZvciBpbnN0YW5jZSB3aXRoIHRoZSBmaXJzdCBicmVha3BvaW50IHhzOiBbeHMsIHNtWy5cblxudmFyIHZhbHVlcyA9IHtcbiAgeHM6IDAsXG4gIHNtOiA2MDAsXG4gIG1kOiA5NjAsXG4gIGxnOiAxMjgwLFxuICB4bDogMTkyMFxufTtcbnZhciBkZWZhdWx0QnJlYWtwb2ludHMgPSB7XG4gIC8vIFNvcnRlZCBBU0MgYnkgc2l6ZS4gVGhhdCdzIGltcG9ydGFudC5cbiAgLy8gSXQgY2FuJ3QgYmUgY29uZmlndXJlZCBhcyBpdCdzIHVzZWQgc3RhdGljYWxseSBmb3IgcHJvcFR5cGVzLlxuICBrZXlzOiBbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ10sXG4gIHVwOiBmdW5jdGlvbiB1cChrZXkpIHtcbiAgICByZXR1cm4gXCJAbWVkaWEgKG1pbi13aWR0aDpcIi5jb25jYXQodmFsdWVzW2tleV0sIFwicHgpXCIpO1xuICB9XG59O1xuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wVmFsdWUsIHN0eWxlRnJvbVByb3BWYWx1ZSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICghcHJvcHMudGhlbWUpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ01hdGVyaWFsLVVJOiBZb3UgYXJlIGNhbGxpbmcgYSBzdHlsZSBmdW5jdGlvbiB3aXRob3V0IGEgdGhlbWUgdmFsdWUuJyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkge1xuICAgIHZhciB0aGVtZUJyZWFrcG9pbnRzID0gcHJvcHMudGhlbWUuYnJlYWtwb2ludHMgfHwgZGVmYXVsdEJyZWFrcG9pbnRzO1xuICAgIHJldHVybiBwcm9wVmFsdWUucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGl0ZW0sIGluZGV4KSB7XG4gICAgICBhY2NbdGhlbWVCcmVha3BvaW50cy51cCh0aGVtZUJyZWFrcG9pbnRzLmtleXNbaW5kZXhdKV0gPSBzdHlsZUZyb21Qcm9wVmFsdWUocHJvcFZhbHVlW2luZGV4XSk7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgfVxuXG4gIGlmIChfdHlwZW9mKHByb3BWYWx1ZSkgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIF90aGVtZUJyZWFrcG9pbnRzID0gcHJvcHMudGhlbWUuYnJlYWtwb2ludHMgfHwgZGVmYXVsdEJyZWFrcG9pbnRzO1xuXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHByb3BWYWx1ZSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGJyZWFrcG9pbnQpIHtcbiAgICAgIGFjY1tfdGhlbWVCcmVha3BvaW50cy51cChicmVha3BvaW50KV0gPSBzdHlsZUZyb21Qcm9wVmFsdWUocHJvcFZhbHVlW2JyZWFrcG9pbnRdKTtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICB9XG5cbiAgdmFyIG91dHB1dCA9IHN0eWxlRnJvbVByb3BWYWx1ZShwcm9wVmFsdWUpO1xuICByZXR1cm4gb3V0cHV0O1xufVxuXG5mdW5jdGlvbiBicmVha3BvaW50cyhzdHlsZUZ1bmN0aW9uKSB7XG4gIHZhciBuZXdTdHlsZUZ1bmN0aW9uID0gZnVuY3Rpb24gbmV3U3R5bGVGdW5jdGlvbihwcm9wcykge1xuICAgIHZhciBiYXNlID0gc3R5bGVGdW5jdGlvbihwcm9wcyk7XG4gICAgdmFyIHRoZW1lQnJlYWtwb2ludHMgPSBwcm9wcy50aGVtZS5icmVha3BvaW50cyB8fCBkZWZhdWx0QnJlYWtwb2ludHM7XG4gICAgdmFyIGV4dGVuZGVkID0gdGhlbWVCcmVha3BvaW50cy5rZXlzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBrZXkpIHtcbiAgICAgIGlmIChwcm9wc1trZXldKSB7XG4gICAgICAgIGFjYyA9IGFjYyB8fCB7fTtcbiAgICAgICAgYWNjW3RoZW1lQnJlYWtwb2ludHMudXAoa2V5KV0gPSBzdHlsZUZ1bmN0aW9uKF9leHRlbmRzKHtcbiAgICAgICAgICB0aGVtZTogcHJvcHMudGhlbWVcbiAgICAgICAgfSwgcHJvcHNba2V5XSkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIG51bGwpO1xuICAgIHJldHVybiBtZXJnZShiYXNlLCBleHRlbmRlZCk7XG4gIH07XG5cbiAgbmV3U3R5bGVGdW5jdGlvbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gX2V4dGVuZHMoX2V4dGVuZHMoe30sIHN0eWxlRnVuY3Rpb24ucHJvcFR5cGVzKSwge30sIHtcbiAgICB4czogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBzbTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBtZDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBsZzogUHJvcFR5cGVzLm9iamVjdCxcbiAgICB4bDogUHJvcFR5cGVzLm9iamVjdFxuICB9KSA6IHt9O1xuICBuZXdTdHlsZUZ1bmN0aW9uLmZpbHRlclByb3BzID0gWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCddLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoc3R5bGVGdW5jdGlvbi5maWx0ZXJQcm9wcykpO1xuICByZXR1cm4gbmV3U3R5bGVGdW5jdGlvbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYnJlYWtwb2ludHM7IiwiaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgcmVzcG9uc2l2ZVByb3BUeXBlIGZyb20gJy4vcmVzcG9uc2l2ZVByb3BUeXBlJztcbmltcG9ydCB7IGhhbmRsZUJyZWFrcG9pbnRzIH0gZnJvbSAnLi9icmVha3BvaW50cyc7XG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi9tZXJnZSc7XG5pbXBvcnQgbWVtb2l6ZSBmcm9tICcuL21lbW9pemUnO1xudmFyIHByb3BlcnRpZXMgPSB7XG4gIG06ICdtYXJnaW4nLFxuICBwOiAncGFkZGluZydcbn07XG52YXIgZGlyZWN0aW9ucyA9IHtcbiAgdDogJ1RvcCcsXG4gIHI6ICdSaWdodCcsXG4gIGI6ICdCb3R0b20nLFxuICBsOiAnTGVmdCcsXG4gIHg6IFsnTGVmdCcsICdSaWdodCddLFxuICB5OiBbJ1RvcCcsICdCb3R0b20nXVxufTtcbnZhciBhbGlhc2VzID0ge1xuICBtYXJnaW5YOiAnbXgnLFxuICBtYXJnaW5ZOiAnbXknLFxuICBwYWRkaW5nWDogJ3B4JyxcbiAgcGFkZGluZ1k6ICdweSdcbn07IC8vIG1lbW9pemUoKSBpbXBhY3Q6XG4vLyBGcm9tIDMwMCwwMDAgb3BzL3NlY1xuLy8gVG8gMzUwLDAwMCBvcHMvc2VjXG5cbnZhciBnZXRDc3NQcm9wZXJ0aWVzID0gbWVtb2l6ZShmdW5jdGlvbiAocHJvcCkge1xuICAvLyBJdCdzIG5vdCBhIHNob3J0aGFuZCBub3RhdGlvbi5cbiAgaWYgKHByb3AubGVuZ3RoID4gMikge1xuICAgIGlmIChhbGlhc2VzW3Byb3BdKSB7XG4gICAgICBwcm9wID0gYWxpYXNlc1twcm9wXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFtwcm9wXTtcbiAgICB9XG4gIH1cblxuICB2YXIgX3Byb3Akc3BsaXQgPSBwcm9wLnNwbGl0KCcnKSxcbiAgICAgIF9wcm9wJHNwbGl0MiA9IF9zbGljZWRUb0FycmF5KF9wcm9wJHNwbGl0LCAyKSxcbiAgICAgIGEgPSBfcHJvcCRzcGxpdDJbMF0sXG4gICAgICBiID0gX3Byb3Akc3BsaXQyWzFdO1xuXG4gIHZhciBwcm9wZXJ0eSA9IHByb3BlcnRpZXNbYV07XG4gIHZhciBkaXJlY3Rpb24gPSBkaXJlY3Rpb25zW2JdIHx8ICcnO1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShkaXJlY3Rpb24pID8gZGlyZWN0aW9uLm1hcChmdW5jdGlvbiAoZGlyKSB7XG4gICAgcmV0dXJuIHByb3BlcnR5ICsgZGlyO1xuICB9KSA6IFtwcm9wZXJ0eSArIGRpcmVjdGlvbl07XG59KTtcbnZhciBzcGFjaW5nS2V5cyA9IFsnbScsICdtdCcsICdtcicsICdtYicsICdtbCcsICdteCcsICdteScsICdwJywgJ3B0JywgJ3ByJywgJ3BiJywgJ3BsJywgJ3B4JywgJ3B5JywgJ21hcmdpbicsICdtYXJnaW5Ub3AnLCAnbWFyZ2luUmlnaHQnLCAnbWFyZ2luQm90dG9tJywgJ21hcmdpbkxlZnQnLCAnbWFyZ2luWCcsICdtYXJnaW5ZJywgJ3BhZGRpbmcnLCAncGFkZGluZ1RvcCcsICdwYWRkaW5nUmlnaHQnLCAncGFkZGluZ0JvdHRvbScsICdwYWRkaW5nTGVmdCcsICdwYWRkaW5nWCcsICdwYWRkaW5nWSddO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVVuYXJ5U3BhY2luZyh0aGVtZSkge1xuICB2YXIgdGhlbWVTcGFjaW5nID0gdGhlbWUuc3BhY2luZyB8fCA4O1xuXG4gIGlmICh0eXBlb2YgdGhlbWVTcGFjaW5nID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYWJzKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAodHlwZW9mIGFicyAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFwiTWF0ZXJpYWwtVUk6IEV4cGVjdGVkIHNwYWNpbmcgYXJndW1lbnQgdG8gYmUgYSBudW1iZXIsIGdvdCBcIi5jb25jYXQoYWJzLCBcIi5cIikpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGVtZVNwYWNpbmcgKiBhYnM7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KHRoZW1lU3BhY2luZykpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFicykge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKGFicyA+IHRoZW1lU3BhY2luZy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihbXCJNYXRlcmlhbC1VSTogVGhlIHZhbHVlIHByb3ZpZGVkIChcIi5jb25jYXQoYWJzLCBcIikgb3ZlcmZsb3dzLlwiKSwgXCJUaGUgc3VwcG9ydGVkIHZhbHVlcyBhcmU6IFwiLmNvbmNhdChKU09OLnN0cmluZ2lmeSh0aGVtZVNwYWNpbmcpLCBcIi5cIiksIFwiXCIuY29uY2F0KGFicywgXCIgPiBcIikuY29uY2F0KHRoZW1lU3BhY2luZy5sZW5ndGggLSAxLCBcIiwgeW91IG5lZWQgdG8gYWRkIHRoZSBtaXNzaW5nIHZhbHVlcy5cIildLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhlbWVTcGFjaW5nW2Fic107XG4gICAgfTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdGhlbWVTcGFjaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHRoZW1lU3BhY2luZztcbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihbXCJNYXRlcmlhbC1VSTogVGhlIGB0aGVtZS5zcGFjaW5nYCB2YWx1ZSAoXCIuY29uY2F0KHRoZW1lU3BhY2luZywgXCIpIGlzIGludmFsaWQuXCIpLCAnSXQgc2hvdWxkIGJlIGEgbnVtYmVyLCBhbiBhcnJheSBvciBhIGZ1bmN0aW9uLiddLmpvaW4oJ1xcbicpKTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0VmFsdWUodHJhbnNmb3JtZXIsIHByb3BWYWx1ZSkge1xuICBpZiAodHlwZW9mIHByb3BWYWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gcHJvcFZhbHVlO1xuICB9XG5cbiAgdmFyIGFicyA9IE1hdGguYWJzKHByb3BWYWx1ZSk7XG4gIHZhciB0cmFuc2Zvcm1lZCA9IHRyYW5zZm9ybWVyKGFicyk7XG5cbiAgaWYgKHByb3BWYWx1ZSA+PSAwKSB7XG4gICAgcmV0dXJuIHRyYW5zZm9ybWVkO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB0cmFuc2Zvcm1lZCA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gLXRyYW5zZm9ybWVkO1xuICB9XG5cbiAgcmV0dXJuIFwiLVwiLmNvbmNhdCh0cmFuc2Zvcm1lZCk7XG59XG5cbmZ1bmN0aW9uIGdldFN0eWxlRnJvbVByb3BWYWx1ZShjc3NQcm9wZXJ0aWVzLCB0cmFuc2Zvcm1lcikge1xuICByZXR1cm4gZnVuY3Rpb24gKHByb3BWYWx1ZSkge1xuICAgIHJldHVybiBjc3NQcm9wZXJ0aWVzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBjc3NQcm9wZXJ0eSkge1xuICAgICAgYWNjW2Nzc1Byb3BlcnR5XSA9IGdldFZhbHVlKHRyYW5zZm9ybWVyLCBwcm9wVmFsdWUpO1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHNwYWNpbmcocHJvcHMpIHtcbiAgdmFyIHRoZW1lID0gcHJvcHMudGhlbWU7XG4gIHZhciB0cmFuc2Zvcm1lciA9IGNyZWF0ZVVuYXJ5U3BhY2luZyh0aGVtZSk7XG4gIHJldHVybiBPYmplY3Qua2V5cyhwcm9wcykubWFwKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgLy8gVXNpbmcgYSBoYXNoIGNvbXB1dGF0aW9uIG92ZXIgYW4gYXJyYXkgaXRlcmF0aW9uIGNvdWxkIGJlIGZhc3RlciwgYnV0IHdpdGggb25seSAyOCBpdGVtcyxcbiAgICAvLyBpdCdzIGRvZXNuJ3Qgd29ydGggdGhlIGJ1bmRsZSBzaXplLlxuICAgIGlmIChzcGFjaW5nS2V5cy5pbmRleE9mKHByb3ApID09PSAtMSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGNzc1Byb3BlcnRpZXMgPSBnZXRDc3NQcm9wZXJ0aWVzKHByb3ApO1xuICAgIHZhciBzdHlsZUZyb21Qcm9wVmFsdWUgPSBnZXRTdHlsZUZyb21Qcm9wVmFsdWUoY3NzUHJvcGVydGllcywgdHJhbnNmb3JtZXIpO1xuICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wXTtcbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BWYWx1ZSwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfSkucmVkdWNlKG1lcmdlLCB7fSk7XG59XG5cbnNwYWNpbmcucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHNwYWNpbmdLZXlzLnJlZHVjZShmdW5jdGlvbiAob2JqLCBrZXkpIHtcbiAgb2JqW2tleV0gPSByZXNwb25zaXZlUHJvcFR5cGU7XG4gIHJldHVybiBvYmo7XG59LCB7fSkgOiB7fTtcbnNwYWNpbmcuZmlsdGVyUHJvcHMgPSBzcGFjaW5nS2V5cztcbmV4cG9ydCBkZWZhdWx0IHNwYWNpbmc7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVtb2l6ZShmbikge1xuICB2YXIgY2FjaGUgPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICBpZiAoY2FjaGVbYXJnXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjYWNoZVthcmddID0gZm4oYXJnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FjaGVbYXJnXTtcbiAgfTtcbn0iLCJpbXBvcnQgeyBjcmVhdGVVbmFyeVNwYWNpbmcgfSBmcm9tICdAbWF0ZXJpYWwtdWkvc3lzdGVtJztcbnZhciB3YXJuT25jZTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVNwYWNpbmcoKSB7XG4gIHZhciBzcGFjaW5nSW5wdXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDg7XG5cbiAgLy8gQWxyZWFkeSB0cmFuc2Zvcm1lZC5cbiAgaWYgKHNwYWNpbmdJbnB1dC5tdWkpIHtcbiAgICByZXR1cm4gc3BhY2luZ0lucHV0O1xuICB9IC8vIE1hdGVyaWFsIERlc2lnbiBsYXlvdXRzIGFyZSB2aXN1YWxseSBiYWxhbmNlZC4gTW9zdCBtZWFzdXJlbWVudHMgYWxpZ24gdG8gYW4gOGRwIGdyaWQgYXBwbGllZCwgd2hpY2ggYWxpZ25zIGJvdGggc3BhY2luZyBhbmQgdGhlIG92ZXJhbGwgbGF5b3V0LlxuICAvLyBTbWFsbGVyIGNvbXBvbmVudHMsIHN1Y2ggYXMgaWNvbnMgYW5kIHR5cGUsIGNhbiBhbGlnbiB0byBhIDRkcCBncmlkLlxuICAvLyBodHRwczovL21hdGVyaWFsLmlvL2Rlc2lnbi9sYXlvdXQvdW5kZXJzdGFuZGluZy1sYXlvdXQuaHRtbCN1c2FnZVxuXG5cbiAgdmFyIHRyYW5zZm9ybSA9IGNyZWF0ZVVuYXJ5U3BhY2luZyh7XG4gICAgc3BhY2luZzogc3BhY2luZ0lucHV0XG4gIH0pO1xuXG4gIHZhciBzcGFjaW5nID0gZnVuY3Rpb24gc3BhY2luZygpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICghKGFyZ3MubGVuZ3RoIDw9IDQpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJNYXRlcmlhbC1VSTogVG9vIG1hbnkgYXJndW1lbnRzIHByb3ZpZGVkLCBleHBlY3RlZCBiZXR3ZWVuIDAgYW5kIDQsIGdvdCBcIi5jb25jYXQoYXJncy5sZW5ndGgpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0cmFuc2Zvcm0oMSk7XG4gICAgfVxuXG4gICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSB7XG4gICAgICByZXR1cm4gdHJhbnNmb3JtKGFyZ3NbMF0pO1xuICAgIH1cblxuICAgIHJldHVybiBhcmdzLm1hcChmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgICAgIGlmICh0eXBlb2YgYXJndW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBhcmd1bWVudDtcbiAgICAgIH1cblxuICAgICAgdmFyIG91dHB1dCA9IHRyYW5zZm9ybShhcmd1bWVudCk7XG4gICAgICByZXR1cm4gdHlwZW9mIG91dHB1dCA9PT0gJ251bWJlcicgPyBcIlwiLmNvbmNhdChvdXRwdXQsIFwicHhcIikgOiBvdXRwdXQ7XG4gICAgfSkuam9pbignICcpO1xuICB9OyAvLyBCYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB0byByZW1vdmUgaW4gdjUuXG5cblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3BhY2luZywgJ3VuaXQnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoIXdhcm5PbmNlIHx8IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAndGVzdCcpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFsnTWF0ZXJpYWwtVUk6IHRoZW1lLnNwYWNpbmcudW5pdCB1c2FnZSBoYXMgYmVlbiBkZXByZWNhdGVkLicsICdJdCB3aWxsIGJlIHJlbW92ZWQgaW4gdjUuJywgJ1lvdSBjYW4gcmVwbGFjZSBgdGhlbWUuc3BhY2luZy51bml0ICogeWAgd2l0aCBgdGhlbWUuc3BhY2luZyh5KWAuJywgJycsICdZb3UgY2FuIHVzZSB0aGUgYGh0dHBzOi8vZ2l0aHViLmNvbS9tdWktb3JnL21hdGVyaWFsLXVpL3RyZWUvbWFzdGVyL3BhY2thZ2VzL21hdGVyaWFsLXVpLWNvZGVtb2QvUkVBRE1FLm1kI3RoZW1lLXNwYWNpbmctYXBpYCBtaWdyYXRpb24gaGVscGVyIHRvIG1ha2UgdGhlIHByb2Nlc3Mgc21vb3RoZXIuJ10uam9pbignXFxuJykpO1xuICAgICAgICB9XG5cbiAgICAgICAgd2Fybk9uY2UgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3BhY2luZ0lucHV0O1xuICAgIH1cbiAgfSk7XG4gIHNwYWNpbmcubXVpID0gdHJ1ZTtcbiAgcmV0dXJuIHNwYWNpbmc7XG59IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbi8vIEZvbGxvdyBodHRwczovL21hdGVyaWFsLmdvb2dsZS5jb20vbW90aW9uL2R1cmF0aW9uLWVhc2luZy5odG1sI2R1cmF0aW9uLWVhc2luZy1uYXR1cmFsLWVhc2luZy1jdXJ2ZXNcbi8vIHRvIGxlYXJuIHRoZSBjb250ZXh0IGluIHdoaWNoIGVhY2ggZWFzaW5nIHNob3VsZCBiZSB1c2VkLlxuZXhwb3J0IHZhciBlYXNpbmcgPSB7XG4gIC8vIFRoaXMgaXMgdGhlIG1vc3QgY29tbW9uIGVhc2luZyBjdXJ2ZS5cbiAgZWFzZUluT3V0OiAnY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKScsXG4gIC8vIE9iamVjdHMgZW50ZXIgdGhlIHNjcmVlbiBhdCBmdWxsIHZlbG9jaXR5IGZyb20gb2ZmLXNjcmVlbiBhbmRcbiAgLy8gc2xvd2x5IGRlY2VsZXJhdGUgdG8gYSByZXN0aW5nIHBvaW50LlxuICBlYXNlT3V0OiAnY3ViaWMtYmV6aWVyKDAuMCwgMCwgMC4yLCAxKScsXG4gIC8vIE9iamVjdHMgbGVhdmUgdGhlIHNjcmVlbiBhdCBmdWxsIHZlbG9jaXR5LiBUaGV5IGRvIG5vdCBkZWNlbGVyYXRlIHdoZW4gb2ZmLXNjcmVlbi5cbiAgZWFzZUluOiAnY3ViaWMtYmV6aWVyKDAuNCwgMCwgMSwgMSknLFxuICAvLyBUaGUgc2hhcnAgY3VydmUgaXMgdXNlZCBieSBvYmplY3RzIHRoYXQgbWF5IHJldHVybiB0byB0aGUgc2NyZWVuIGF0IGFueSB0aW1lLlxuICBzaGFycDogJ2N1YmljLWJlemllcigwLjQsIDAsIDAuNiwgMSknXG59OyAvLyBGb2xsb3cgaHR0cHM6Ly9tYXRlcmlhbC5pby9ndWlkZWxpbmVzL21vdGlvbi9kdXJhdGlvbi1lYXNpbmcuaHRtbCNkdXJhdGlvbi1lYXNpbmctY29tbW9uLWR1cmF0aW9uc1xuLy8gdG8gbGVhcm4gd2hlbiB1c2Ugd2hhdCB0aW1pbmdcblxuZXhwb3J0IHZhciBkdXJhdGlvbiA9IHtcbiAgc2hvcnRlc3Q6IDE1MCxcbiAgc2hvcnRlcjogMjAwLFxuICBzaG9ydDogMjUwLFxuICAvLyBtb3N0IGJhc2ljIHJlY29tbWVuZGVkIHRpbWluZ1xuICBzdGFuZGFyZDogMzAwLFxuICAvLyB0aGlzIGlzIHRvIGJlIHVzZWQgaW4gY29tcGxleCBhbmltYXRpb25zXG4gIGNvbXBsZXg6IDM3NSxcbiAgLy8gcmVjb21tZW5kZWQgd2hlbiBzb21ldGhpbmcgaXMgZW50ZXJpbmcgc2NyZWVuXG4gIGVudGVyaW5nU2NyZWVuOiAyMjUsXG4gIC8vIHJlY29tbWVuZGVkIHdoZW4gc29tZXRoaW5nIGlzIGxlYXZpbmcgc2NyZWVuXG4gIGxlYXZpbmdTY3JlZW46IDE5NVxufTtcblxuZnVuY3Rpb24gZm9ybWF0TXMobWlsbGlzZWNvbmRzKSB7XG4gIHJldHVybiBcIlwiLmNvbmNhdChNYXRoLnJvdW5kKG1pbGxpc2Vjb25kcyksIFwibXNcIik7XG59XG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfEFycmF5fSBwcm9wc1xuICogQHBhcmFtIHtvYmplY3R9IHBhcmFtXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFyYW0ucHJvcFxuICogQHBhcmFtIHtudW1iZXJ9IHBhcmFtLmR1cmF0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFyYW0uZWFzaW5nXG4gKiBAcGFyYW0ge251bWJlcn0gcGFyYW0uZGVsYXlcbiAqL1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZWFzaW5nOiBlYXNpbmcsXG4gIGR1cmF0aW9uOiBkdXJhdGlvbixcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBbJ2FsbCddO1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICAgIHZhciBfb3B0aW9ucyRkdXJhdGlvbiA9IG9wdGlvbnMuZHVyYXRpb24sXG4gICAgICAgIGR1cmF0aW9uT3B0aW9uID0gX29wdGlvbnMkZHVyYXRpb24gPT09IHZvaWQgMCA/IGR1cmF0aW9uLnN0YW5kYXJkIDogX29wdGlvbnMkZHVyYXRpb24sXG4gICAgICAgIF9vcHRpb25zJGVhc2luZyA9IG9wdGlvbnMuZWFzaW5nLFxuICAgICAgICBlYXNpbmdPcHRpb24gPSBfb3B0aW9ucyRlYXNpbmcgPT09IHZvaWQgMCA/IGVhc2luZy5lYXNlSW5PdXQgOiBfb3B0aW9ucyRlYXNpbmcsXG4gICAgICAgIF9vcHRpb25zJGRlbGF5ID0gb3B0aW9ucy5kZWxheSxcbiAgICAgICAgZGVsYXkgPSBfb3B0aW9ucyRkZWxheSA9PT0gdm9pZCAwID8gMCA6IF9vcHRpb25zJGRlbGF5LFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvcHRpb25zLCBbXCJkdXJhdGlvblwiLCBcImVhc2luZ1wiLCBcImRlbGF5XCJdKTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgaXNTdHJpbmcgPSBmdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJztcbiAgICAgIH07XG5cbiAgICAgIHZhciBpc051bWJlciA9IGZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAhaXNOYU4ocGFyc2VGbG9hdCh2YWx1ZSkpO1xuICAgICAgfTtcblxuICAgICAgaWYgKCFpc1N0cmluZyhwcm9wcykgJiYgIUFycmF5LmlzQXJyYXkocHJvcHMpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ01hdGVyaWFsLVVJOiBBcmd1bWVudCBcInByb3BzXCIgbXVzdCBiZSBhIHN0cmluZyBvciBBcnJheS4nKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc051bWJlcihkdXJhdGlvbk9wdGlvbikgJiYgIWlzU3RyaW5nKGR1cmF0aW9uT3B0aW9uKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiTWF0ZXJpYWwtVUk6IEFyZ3VtZW50IFxcXCJkdXJhdGlvblxcXCIgbXVzdCBiZSBhIG51bWJlciBvciBhIHN0cmluZyBidXQgZm91bmQgXCIuY29uY2F0KGR1cmF0aW9uT3B0aW9uLCBcIi5cIikpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzU3RyaW5nKGVhc2luZ09wdGlvbikpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignTWF0ZXJpYWwtVUk6IEFyZ3VtZW50IFwiZWFzaW5nXCIgbXVzdCBiZSBhIHN0cmluZy4nKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc051bWJlcihkZWxheSkgJiYgIWlzU3RyaW5nKGRlbGF5KSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdNYXRlcmlhbC1VSTogQXJndW1lbnQgXCJkZWxheVwiIG11c3QgYmUgYSBudW1iZXIgb3IgYSBzdHJpbmcuJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChPYmplY3Qua2V5cyhvdGhlcikubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJNYXRlcmlhbC1VSTogVW5yZWNvZ25pemVkIGFyZ3VtZW50KHMpIFtcIi5jb25jYXQoT2JqZWN0LmtleXMob3RoZXIpLmpvaW4oJywnKSwgXCJdLlwiKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIChBcnJheS5pc0FycmF5KHByb3BzKSA/IHByb3BzIDogW3Byb3BzXSkubWFwKGZ1bmN0aW9uIChhbmltYXRlZFByb3ApIHtcbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdChhbmltYXRlZFByb3AsIFwiIFwiKS5jb25jYXQodHlwZW9mIGR1cmF0aW9uT3B0aW9uID09PSAnc3RyaW5nJyA/IGR1cmF0aW9uT3B0aW9uIDogZm9ybWF0TXMoZHVyYXRpb25PcHRpb24pLCBcIiBcIikuY29uY2F0KGVhc2luZ09wdGlvbiwgXCIgXCIpLmNvbmNhdCh0eXBlb2YgZGVsYXkgPT09ICdzdHJpbmcnID8gZGVsYXkgOiBmb3JtYXRNcyhkZWxheSkpO1xuICAgIH0pLmpvaW4oJywnKTtcbiAgfSxcbiAgZ2V0QXV0b0hlaWdodER1cmF0aW9uOiBmdW5jdGlvbiBnZXRBdXRvSGVpZ2h0RHVyYXRpb24oaGVpZ2h0KSB7XG4gICAgaWYgKCFoZWlnaHQpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHZhciBjb25zdGFudCA9IGhlaWdodCAvIDM2OyAvLyBodHRwczovL3d3dy53b2xmcmFtYWxwaGEuY29tL2lucHV0Lz9pPSg0KyUyQisxNSsqKyh4KyUyRiszNispKyoqKzAuMjUrJTJCKyh4KyUyRiszNikrJTJGKzUpKyorMTBcblxuICAgIHJldHVybiBNYXRoLnJvdW5kKCg0ICsgMTUgKiBNYXRoLnBvdyhjb25zdGFudCwgMC4yNSkgKyBjb25zdGFudCAvIDUpICogMTApO1xuICB9XG59OyIsIi8vIFdlIG5lZWQgdG8gY2VudHJhbGl6ZSB0aGUgekluZGV4IGRlZmluaXRpb25zIGFzIHRoZXkgd29ya1xuLy8gbGlrZSBnbG9iYWwgdmFsdWVzIGluIHRoZSBicm93c2VyLlxudmFyIHpJbmRleCA9IHtcbiAgbW9iaWxlU3RlcHBlcjogMTAwMCxcbiAgc3BlZWREaWFsOiAxMDUwLFxuICBhcHBCYXI6IDExMDAsXG4gIGRyYXdlcjogMTIwMCxcbiAgbW9kYWw6IDEzMDAsXG4gIHNuYWNrYmFyOiAxNDAwLFxuICB0b29sdGlwOiAxNTAwXG59O1xuZXhwb3J0IGRlZmF1bHQgekluZGV4OyIsImltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCBjcmVhdGVCcmVha3BvaW50cyBmcm9tICcuL2NyZWF0ZUJyZWFrcG9pbnRzJztcbmltcG9ydCBjcmVhdGVNaXhpbnMgZnJvbSAnLi9jcmVhdGVNaXhpbnMnO1xuaW1wb3J0IGNyZWF0ZVBhbGV0dGUgZnJvbSAnLi9jcmVhdGVQYWxldHRlJztcbmltcG9ydCBjcmVhdGVUeXBvZ3JhcGh5IGZyb20gJy4vY3JlYXRlVHlwb2dyYXBoeSc7XG5pbXBvcnQgc2hhZG93cyBmcm9tICcuL3NoYWRvd3MnO1xuaW1wb3J0IHNoYXBlIGZyb20gJy4vc2hhcGUnO1xuaW1wb3J0IGNyZWF0ZVNwYWNpbmcgZnJvbSAnLi9jcmVhdGVTcGFjaW5nJztcbmltcG9ydCB0cmFuc2l0aW9ucyBmcm9tICcuL3RyYW5zaXRpb25zJztcbmltcG9ydCB6SW5kZXggZnJvbSAnLi96SW5kZXgnO1xuXG5mdW5jdGlvbiBjcmVhdGVNdWlUaGVtZSgpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gIHZhciBfb3B0aW9ucyRicmVha3BvaW50cyA9IG9wdGlvbnMuYnJlYWtwb2ludHMsXG4gICAgICBicmVha3BvaW50c0lucHV0ID0gX29wdGlvbnMkYnJlYWtwb2ludHMgPT09IHZvaWQgMCA/IHt9IDogX29wdGlvbnMkYnJlYWtwb2ludHMsXG4gICAgICBfb3B0aW9ucyRtaXhpbnMgPSBvcHRpb25zLm1peGlucyxcbiAgICAgIG1peGluc0lucHV0ID0gX29wdGlvbnMkbWl4aW5zID09PSB2b2lkIDAgPyB7fSA6IF9vcHRpb25zJG1peGlucyxcbiAgICAgIF9vcHRpb25zJHBhbGV0dGUgPSBvcHRpb25zLnBhbGV0dGUsXG4gICAgICBwYWxldHRlSW5wdXQgPSBfb3B0aW9ucyRwYWxldHRlID09PSB2b2lkIDAgPyB7fSA6IF9vcHRpb25zJHBhbGV0dGUsXG4gICAgICBzcGFjaW5nSW5wdXQgPSBvcHRpb25zLnNwYWNpbmcsXG4gICAgICBfb3B0aW9ucyR0eXBvZ3JhcGh5ID0gb3B0aW9ucy50eXBvZ3JhcGh5LFxuICAgICAgdHlwb2dyYXBoeUlucHV0ID0gX29wdGlvbnMkdHlwb2dyYXBoeSA9PT0gdm9pZCAwID8ge30gOiBfb3B0aW9ucyR0eXBvZ3JhcGh5LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob3B0aW9ucywgW1wiYnJlYWtwb2ludHNcIiwgXCJtaXhpbnNcIiwgXCJwYWxldHRlXCIsIFwic3BhY2luZ1wiLCBcInR5cG9ncmFwaHlcIl0pO1xuXG4gIHZhciBwYWxldHRlID0gY3JlYXRlUGFsZXR0ZShwYWxldHRlSW5wdXQpO1xuICB2YXIgYnJlYWtwb2ludHMgPSBjcmVhdGVCcmVha3BvaW50cyhicmVha3BvaW50c0lucHV0KTtcbiAgdmFyIHNwYWNpbmcgPSBjcmVhdGVTcGFjaW5nKHNwYWNpbmdJbnB1dCk7XG4gIHZhciBtdWlUaGVtZSA9IGRlZXBtZXJnZSh7XG4gICAgYnJlYWtwb2ludHM6IGJyZWFrcG9pbnRzLFxuICAgIGRpcmVjdGlvbjogJ2x0cicsXG4gICAgbWl4aW5zOiBjcmVhdGVNaXhpbnMoYnJlYWtwb2ludHMsIHNwYWNpbmcsIG1peGluc0lucHV0KSxcbiAgICBvdmVycmlkZXM6IHt9LFxuICAgIC8vIEluamVjdCBjdXN0b20gc3R5bGVzXG4gICAgcGFsZXR0ZTogcGFsZXR0ZSxcbiAgICBwcm9wczoge30sXG4gICAgLy8gUHJvdmlkZSBkZWZhdWx0IHByb3BzXG4gICAgc2hhZG93czogc2hhZG93cyxcbiAgICB0eXBvZ3JhcGh5OiBjcmVhdGVUeXBvZ3JhcGh5KHBhbGV0dGUsIHR5cG9ncmFwaHlJbnB1dCksXG4gICAgc3BhY2luZzogc3BhY2luZyxcbiAgICBzaGFwZTogc2hhcGUsXG4gICAgdHJhbnNpdGlvbnM6IHRyYW5zaXRpb25zLFxuICAgIHpJbmRleDogekluZGV4XG4gIH0sIG90aGVyKTtcblxuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBtdWlUaGVtZSA9IGFyZ3MucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGFyZ3VtZW50KSB7XG4gICAgcmV0dXJuIGRlZXBtZXJnZShhY2MsIGFyZ3VtZW50KTtcbiAgfSwgbXVpVGhlbWUpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFyIHBzZXVkb0NsYXNzZXMgPSBbJ2NoZWNrZWQnLCAnZGlzYWJsZWQnLCAnZXJyb3InLCAnZm9jdXNlZCcsICdmb2N1c1Zpc2libGUnLCAncmVxdWlyZWQnLCAnZXhwYW5kZWQnLCAnc2VsZWN0ZWQnXTtcblxuICAgIHZhciB0cmF2ZXJzZSA9IGZ1bmN0aW9uIHRyYXZlcnNlKG5vZGUsIHBhcmVudEtleSkge1xuICAgICAgdmFyIGRlcHRoID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAxO1xuICAgICAgdmFyIGtleTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGd1YXJkLWZvci1pbiwgbm8tcmVzdHJpY3RlZC1zeW50YXhcblxuICAgICAgZm9yIChrZXkgaW4gbm9kZSkge1xuICAgICAgICB2YXIgY2hpbGQgPSBub2RlW2tleV07XG5cbiAgICAgICAgaWYgKGRlcHRoID09PSAxKSB7XG4gICAgICAgICAgaWYgKGtleS5pbmRleE9mKCdNdWknKSA9PT0gMCAmJiBjaGlsZCkge1xuICAgICAgICAgICAgdHJhdmVyc2UoY2hpbGQsIGtleSwgZGVwdGggKyAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAocHNldWRvQ2xhc3Nlcy5pbmRleE9mKGtleSkgIT09IC0xICYmIE9iamVjdC5rZXlzKGNoaWxkKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoW1wiTWF0ZXJpYWwtVUk6IFRoZSBgXCIuY29uY2F0KHBhcmVudEtleSwgXCJgIGNvbXBvbmVudCBpbmNyZWFzZXMgXCIpICsgXCJ0aGUgQ1NTIHNwZWNpZmljaXR5IG9mIHRoZSBgXCIuY29uY2F0KGtleSwgXCJgIGludGVybmFsIHN0YXRlLlwiKSwgJ1lvdSBjYW4gbm90IG92ZXJyaWRlIGl0IGxpa2UgdGhpczogJywgSlNPTi5zdHJpbmdpZnkobm9kZSwgbnVsbCwgMiksICcnLCAnSW5zdGVhZCwgeW91IG5lZWQgdG8gdXNlIHRoZSAkcnVsZU5hbWUgc3ludGF4OicsIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgcm9vdDogX2RlZmluZVByb3BlcnR5KHt9LCBcIiYkXCIuY29uY2F0KGtleSksIGNoaWxkKVxuICAgICAgICAgICAgfSwgbnVsbCwgMiksICcnLCAnaHR0cHM6Ly9tYXRlcmlhbC11aS5jb20vci9wc2V1ZG8tY2xhc3Nlcy1ndWlkZSddLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgICB9IC8vIFJlbW92ZSB0aGUgc3R5bGUgdG8gcHJldmVudCBnbG9iYWwgY29uZmxpY3RzLlxuXG5cbiAgICAgICAgICBub2RlW2tleV0gPSB7fTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICB0cmF2ZXJzZShtdWlUaGVtZS5vdmVycmlkZXMpO1xuICB9XG5cbiAgcmV0dXJuIG11aVRoZW1lO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVNdWlUaGVtZTsiLCJpbXBvcnQgY3JlYXRlTXVpVGhlbWUgZnJvbSAnLi9jcmVhdGVNdWlUaGVtZSc7XG52YXIgZGVmYXVsdFRoZW1lID0gY3JlYXRlTXVpVGhlbWUoKTtcbmV4cG9ydCBkZWZhdWx0IGRlZmF1bHRUaGVtZTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCB7IHdpdGhTdHlsZXMgYXMgd2l0aFN0eWxlc1dpdGhvdXREZWZhdWx0IH0gZnJvbSAnQG1hdGVyaWFsLXVpL3N0eWxlcyc7XG5pbXBvcnQgZGVmYXVsdFRoZW1lIGZyb20gJy4vZGVmYXVsdFRoZW1lJztcblxuZnVuY3Rpb24gd2l0aFN0eWxlcyhzdHlsZXNPckNyZWF0b3IsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHdpdGhTdHlsZXNXaXRob3V0RGVmYXVsdChzdHlsZXNPckNyZWF0b3IsIF9leHRlbmRzKHtcbiAgICBkZWZhdWx0VGhlbWU6IGRlZmF1bHRUaGVtZVxuICB9LCBvcHRpb25zKSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXM7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG5cbi8qZ2xvYmFsIHRvU3RyaW5nOnRydWUqL1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5KHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0J1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsKSAmJiB2YWwuY29uc3RydWN0b3IgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbC5jb25zdHJ1Y3RvcilcbiAgICAmJiB0eXBlb2YgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlcih2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybURhdGEodmFsKSB7XG4gIHJldHVybiAodHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJykgJiYgKHZhbCBpbnN0YW5jZW9mIEZvcm1EYXRhKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAodmFsLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRmlsZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQmxvYih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQmxvYl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJlYW0odmFsKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVVJMU2VhcmNoUGFyYW1zKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsIGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zO1xufVxuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyovLCAnJykucmVwbGFjZSgvXFxzKiQvLCAnJyk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICogbmF0aXZlc2NyaXB0XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ05hdGl2ZVNjcmlwdCcgb3IgJ05TJ1xuICovXG5mdW5jdGlvbiBpc1N0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIChuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTmF0aXZlU2NyaXB0JyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTlMnKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gKFxuICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ1xuICApO1xufVxuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbikge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYXJyYXkgdmFsdWVzXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0eXBlb2YgcmVzdWx0W2tleV0gPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHJlc3VsdFtrZXldLCB2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRnVuY3Rpb24gZXF1YWwgdG8gbWVyZ2Ugd2l0aCB0aGUgZGlmZmVyZW5jZSBiZWluZyB0aGF0IG5vIHJlZmVyZW5jZVxuICogdG8gb3JpZ2luYWwgb2JqZWN0cyBpcyBrZXB0LlxuICpcbiAqIEBzZWUgbWVyZ2VcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIGRlZXBNZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0eXBlb2YgcmVzdWx0W2tleV0gPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXN1bHRba2V5XSA9IGRlZXBNZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXN1bHRba2V5XSA9IGRlZXBNZXJnZSh7fSwgdmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKGEsIGIsIHRoaXNBcmcpIHtcbiAgZm9yRWFjaChiLCBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0aGlzQXJnICYmIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNBcnJheTogaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcjogaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhOiBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldzogaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICBpc09iamVjdDogaXNPYmplY3QsXG4gIGlzVW5kZWZpbmVkOiBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlOiBpc0RhdGUsXG4gIGlzRmlsZTogaXNGaWxlLFxuICBpc0Jsb2I6IGlzQmxvYixcbiAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgaXNTdHJlYW06IGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtczogaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzU3RhbmRhcmRCcm93c2VyRW52OiBpc1N0YW5kYXJkQnJvd3NlckVudixcbiAgZm9yRWFjaDogZm9yRWFjaCxcbiAgbWVyZ2U6IG1lcmdlLFxuICBkZWVwTWVyZ2U6IGRlZXBNZXJnZSxcbiAgZXh0ZW5kOiBleHRlbmQsXG4gIHRyaW06IHRyaW1cbn07XG4iLCJmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTtcbiAgfTtcbiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZ2V0UHJvdG90eXBlT2Y7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpOyIsImltcG9ydCB7IGZvcm1hdE11aUVycm9yTWVzc2FnZSBhcyBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlIH0gZnJvbSBcIkBtYXRlcmlhbC11aS91dGlsc1wiO1xuLy8gSXQgc2hvdWxkIHRvIGJlIG5vdGVkIHRoYXQgdGhpcyBmdW5jdGlvbiBpc24ndCBlcXVpdmFsZW50IHRvIGB0ZXh0LXRyYW5zZm9ybTogY2FwaXRhbGl6ZWAuXG4vL1xuLy8gQSBzdHJpY3QgY2FwaXRhbGl6YXRpb24gc2hvdWxkIHVwcGVyY2FzZSB0aGUgZmlyc3QgbGV0dGVyIG9mIGVhY2ggd29yZCBhIHRoZSBzZW50ZW5jZS5cbi8vIFdlIG9ubHkgaGFuZGxlIHRoZSBmaXJzdCB3b3JkLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmcpIHtcbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFwiTWF0ZXJpYWwtVUk6IGNhcGl0YWxpemUoc3RyaW5nKSBleHBlY3RzIGEgc3RyaW5nIGFyZ3VtZW50LlwiIDogX2Zvcm1hdE11aUVycm9yTWVzc2FnZSg3KSk7XG4gIH1cblxuICByZXR1cm4gc3RyaW5nLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyaW5nLnNsaWNlKDEpO1xufSIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2NsYXNzQ2FsbENoZWNrOyIsImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfY3JlYXRlQ2xhc3M7IiwidmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZShcIi4vc2V0UHJvdG90eXBlT2ZcIik7XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgaWYgKHN1cGVyQ2xhc3MpIHNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW5oZXJpdHM7IiwidmFyIF90eXBlb2YgPSByZXF1aXJlKFwiLi4vaGVscGVycy90eXBlb2ZcIik7XG5cbnZhciBhc3NlcnRUaGlzSW5pdGlhbGl6ZWQgPSByZXF1aXJlKFwiLi9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIik7XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHtcbiAgICByZXR1cm4gY2FsbDtcbiAgfVxuXG4gIHJldHVybiBhc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm47IiwiaW1wb3J0IHsgZm9ybWF0TXVpRXJyb3JNZXNzYWdlIGFzIF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UgfSBmcm9tIFwiQG1hdGVyaWFsLXVpL3V0aWxzXCI7XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVzZS1iZWZvcmUtZGVmaW5lICovXG5cbi8qKlxuICogUmV0dXJucyBhIG51bWJlciB3aG9zZSB2YWx1ZSBpcyBsaW1pdGVkIHRvIHRoZSBnaXZlbiByYW5nZS5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIHZhbHVlIHRvIGJlIGNsYW1wZWRcbiAqIEBwYXJhbSB7bnVtYmVyfSBtaW4gVGhlIGxvd2VyIGJvdW5kYXJ5IG9mIHRoZSBvdXRwdXQgcmFuZ2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXggVGhlIHVwcGVyIGJvdW5kYXJ5IG9mIHRoZSBvdXRwdXQgcmFuZ2VcbiAqIEByZXR1cm5zIHtudW1iZXJ9IEEgbnVtYmVyIGluIHRoZSByYW5nZSBbbWluLCBtYXhdXG4gKi9cbmZ1bmN0aW9uIGNsYW1wKHZhbHVlKSB7XG4gIHZhciBtaW4gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG4gIHZhciBtYXggPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDE7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAodmFsdWUgPCBtaW4gfHwgdmFsdWUgPiBtYXgpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJNYXRlcmlhbC1VSTogVGhlIHZhbHVlIHByb3ZpZGVkIFwiLmNvbmNhdCh2YWx1ZSwgXCIgaXMgb3V0IG9mIHJhbmdlIFtcIikuY29uY2F0KG1pbiwgXCIsIFwiKS5jb25jYXQobWF4LCBcIl0uXCIpKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobWluLCB2YWx1ZSksIG1heCk7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3IgZnJvbSBDU1MgaGV4IGZvcm1hdCB0byBDU1MgcmdiIGZvcm1hdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBIZXggY29sb3IsIGkuZS4gI25ubiBvciAjbm5ubm5uXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyByZ2IgY29sb3Igc3RyaW5nXG4gKi9cblxuXG5leHBvcnQgZnVuY3Rpb24gaGV4VG9SZ2IoY29sb3IpIHtcbiAgY29sb3IgPSBjb2xvci5zdWJzdHIoMSk7XG4gIHZhciByZSA9IG5ldyBSZWdFeHAoXCIuezEsXCIuY29uY2F0KGNvbG9yLmxlbmd0aCA+PSA2ID8gMiA6IDEsIFwifVwiKSwgJ2cnKTtcbiAgdmFyIGNvbG9ycyA9IGNvbG9yLm1hdGNoKHJlKTtcblxuICBpZiAoY29sb3JzICYmIGNvbG9yc1swXS5sZW5ndGggPT09IDEpIHtcbiAgICBjb2xvcnMgPSBjb2xvcnMubWFwKGZ1bmN0aW9uIChuKSB7XG4gICAgICByZXR1cm4gbiArIG47XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gY29sb3JzID8gXCJyZ2JcIi5jb25jYXQoY29sb3JzLmxlbmd0aCA9PT0gNCA/ICdhJyA6ICcnLCBcIihcIikuY29uY2F0KGNvbG9ycy5tYXAoZnVuY3Rpb24gKG4sIGluZGV4KSB7XG4gICAgcmV0dXJuIGluZGV4IDwgMyA/IHBhcnNlSW50KG4sIDE2KSA6IE1hdGgucm91bmQocGFyc2VJbnQobiwgMTYpIC8gMjU1ICogMTAwMCkgLyAxMDAwO1xuICB9KS5qb2luKCcsICcpLCBcIilcIikgOiAnJztcbn1cblxuZnVuY3Rpb24gaW50VG9IZXgoaW50KSB7XG4gIHZhciBoZXggPSBpbnQudG9TdHJpbmcoMTYpO1xuICByZXR1cm4gaGV4Lmxlbmd0aCA9PT0gMSA/IFwiMFwiLmNvbmNhdChoZXgpIDogaGV4O1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIGZyb20gQ1NTIHJnYiBmb3JtYXQgdG8gQ1NTIGhleCBmb3JtYXQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gUkdCIGNvbG9yLCBpLmUuIHJnYihuLCBuLCBuKVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgcmdiIGNvbG9yIHN0cmluZywgaS5lLiAjbm5ubm5uXG4gKi9cblxuXG5leHBvcnQgZnVuY3Rpb24gcmdiVG9IZXgoY29sb3IpIHtcbiAgLy8gSWRlbXBvdGVudFxuICBpZiAoY29sb3IuaW5kZXhPZignIycpID09PSAwKSB7XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG5cbiAgdmFyIF9kZWNvbXBvc2VDb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKSxcbiAgICAgIHZhbHVlcyA9IF9kZWNvbXBvc2VDb2xvci52YWx1ZXM7XG5cbiAgcmV0dXJuIFwiI1wiLmNvbmNhdCh2YWx1ZXMubWFwKGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIGludFRvSGV4KG4pO1xuICB9KS5qb2luKCcnKSk7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3IgZnJvbSBoc2wgZm9ybWF0IHRvIHJnYiBmb3JtYXQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gSFNMIGNvbG9yIHZhbHVlc1xuICogQHJldHVybnMge3N0cmluZ30gcmdiIGNvbG9yIHZhbHVlc1xuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBoc2xUb1JnYihjb2xvcikge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgdmFyIF9jb2xvciA9IGNvbG9yLFxuICAgICAgdmFsdWVzID0gX2NvbG9yLnZhbHVlcztcbiAgdmFyIGggPSB2YWx1ZXNbMF07XG4gIHZhciBzID0gdmFsdWVzWzFdIC8gMTAwO1xuICB2YXIgbCA9IHZhbHVlc1syXSAvIDEwMDtcbiAgdmFyIGEgPSBzICogTWF0aC5taW4obCwgMSAtIGwpO1xuXG4gIHZhciBmID0gZnVuY3Rpb24gZihuKSB7XG4gICAgdmFyIGsgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IChuICsgaCAvIDMwKSAlIDEyO1xuICAgIHJldHVybiBsIC0gYSAqIE1hdGgubWF4KE1hdGgubWluKGsgLSAzLCA5IC0gaywgMSksIC0xKTtcbiAgfTtcblxuICB2YXIgdHlwZSA9ICdyZ2InO1xuICB2YXIgcmdiID0gW01hdGgucm91bmQoZigwKSAqIDI1NSksIE1hdGgucm91bmQoZig4KSAqIDI1NSksIE1hdGgucm91bmQoZig0KSAqIDI1NSldO1xuXG4gIGlmIChjb2xvci50eXBlID09PSAnaHNsYScpIHtcbiAgICB0eXBlICs9ICdhJztcbiAgICByZ2IucHVzaCh2YWx1ZXNbM10pO1xuICB9XG5cbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKHtcbiAgICB0eXBlOiB0eXBlLFxuICAgIHZhbHVlczogcmdiXG4gIH0pO1xufVxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB3aXRoIHRoZSB0eXBlIGFuZCB2YWx1ZXMgb2YgYSBjb2xvci5cbiAqXG4gKiBOb3RlOiBEb2VzIG5vdCBzdXBwb3J0IHJnYiAlIHZhbHVlcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcmV0dXJucyB7b2JqZWN0fSAtIEEgTVVJIGNvbG9yIG9iamVjdDoge3R5cGU6IHN0cmluZywgdmFsdWVzOiBudW1iZXJbXX1cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZGVjb21wb3NlQ29sb3IoY29sb3IpIHtcbiAgLy8gSWRlbXBvdGVudFxuICBpZiAoY29sb3IudHlwZSkge1xuICAgIHJldHVybiBjb2xvcjtcbiAgfVxuXG4gIGlmIChjb2xvci5jaGFyQXQoMCkgPT09ICcjJykge1xuICAgIHJldHVybiBkZWNvbXBvc2VDb2xvcihoZXhUb1JnYihjb2xvcikpO1xuICB9XG5cbiAgdmFyIG1hcmtlciA9IGNvbG9yLmluZGV4T2YoJygnKTtcbiAgdmFyIHR5cGUgPSBjb2xvci5zdWJzdHJpbmcoMCwgbWFya2VyKTtcblxuICBpZiAoWydyZ2InLCAncmdiYScsICdoc2wnLCAnaHNsYSddLmluZGV4T2YodHlwZSkgPT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFwiTWF0ZXJpYWwtVUk6IFVuc3VwcG9ydGVkIGBcIi5jb25jYXQoY29sb3IsIFwiYCBjb2xvci5cXG5XZSBzdXBwb3J0IHRoZSBmb2xsb3dpbmcgZm9ybWF0czogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKS5cIikgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDMsIGNvbG9yKSk7XG4gIH1cblxuICB2YXIgdmFsdWVzID0gY29sb3Iuc3Vic3RyaW5nKG1hcmtlciArIDEsIGNvbG9yLmxlbmd0aCAtIDEpLnNwbGl0KCcsJyk7XG4gIHZhbHVlcyA9IHZhbHVlcy5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsdWUpO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiB0eXBlLFxuICAgIHZhbHVlczogdmFsdWVzXG4gIH07XG59XG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3Igb2JqZWN0IHdpdGggdHlwZSBhbmQgdmFsdWVzIHRvIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb2xvciAtIERlY29tcG9zZWQgY29sb3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvci50eXBlIC0gT25lIG9mOiAncmdiJywgJ3JnYmEnLCAnaHNsJywgJ2hzbGEnXG4gKiBAcGFyYW0ge2FycmF5fSBjb2xvci52YWx1ZXMgLSBbbixuLG5dIG9yIFtuLG4sbixuXVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJlY29tcG9zZUNvbG9yKGNvbG9yKSB7XG4gIHZhciB0eXBlID0gY29sb3IudHlwZTtcbiAgdmFyIHZhbHVlcyA9IGNvbG9yLnZhbHVlcztcblxuICBpZiAodHlwZS5pbmRleE9mKCdyZ2InKSAhPT0gLTEpIHtcbiAgICAvLyBPbmx5IGNvbnZlcnQgdGhlIGZpcnN0IDMgdmFsdWVzIHRvIGludCAoaS5lLiBub3QgYWxwaGEpXG4gICAgdmFsdWVzID0gdmFsdWVzLm1hcChmdW5jdGlvbiAobiwgaSkge1xuICAgICAgcmV0dXJuIGkgPCAzID8gcGFyc2VJbnQobiwgMTApIDogbjtcbiAgICB9KTtcbiAgfSBlbHNlIGlmICh0eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSkge1xuICAgIHZhbHVlc1sxXSA9IFwiXCIuY29uY2F0KHZhbHVlc1sxXSwgXCIlXCIpO1xuICAgIHZhbHVlc1syXSA9IFwiXCIuY29uY2F0KHZhbHVlc1syXSwgXCIlXCIpO1xuICB9XG5cbiAgcmV0dXJuIFwiXCIuY29uY2F0KHR5cGUsIFwiKFwiKS5jb25jYXQodmFsdWVzLmpvaW4oJywgJyksIFwiKVwiKTtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgY29udHJhc3QgcmF0aW8gYmV0d2VlbiB0d28gY29sb3JzLlxuICpcbiAqIEZvcm11bGE6IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9XQ0FHMjAtVEVDSFMvRzE3Lmh0bWwjRzE3LXRlc3RzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGZvcmVncm91bmQgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFja2dyb3VuZCAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEByZXR1cm5zIHtudW1iZXJ9IEEgY29udHJhc3QgcmF0aW8gdmFsdWUgaW4gdGhlIHJhbmdlIDAgLSAyMS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29udHJhc3RSYXRpbyhmb3JlZ3JvdW5kLCBiYWNrZ3JvdW5kKSB7XG4gIHZhciBsdW1BID0gZ2V0THVtaW5hbmNlKGZvcmVncm91bmQpO1xuICB2YXIgbHVtQiA9IGdldEx1bWluYW5jZShiYWNrZ3JvdW5kKTtcbiAgcmV0dXJuIChNYXRoLm1heChsdW1BLCBsdW1CKSArIDAuMDUpIC8gKE1hdGgubWluKGx1bUEsIGx1bUIpICsgMC4wNSk7XG59XG4vKipcbiAqIFRoZSByZWxhdGl2ZSBicmlnaHRuZXNzIG9mIGFueSBwb2ludCBpbiBhIGNvbG9yIHNwYWNlLFxuICogbm9ybWFsaXplZCB0byAwIGZvciBkYXJrZXN0IGJsYWNrIGFuZCAxIGZvciBsaWdodGVzdCB3aGl0ZS5cbiAqXG4gKiBGb3JtdWxhOiBodHRwczovL3d3dy53My5vcmcvVFIvV0NBRzIwLVRFQ0hTL0cxNy5odG1sI0cxNy10ZXN0c1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSByZWxhdGl2ZSBicmlnaHRuZXNzIG9mIHRoZSBjb2xvciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0THVtaW5hbmNlKGNvbG9yKSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICB2YXIgcmdiID0gY29sb3IudHlwZSA9PT0gJ2hzbCcgPyBkZWNvbXBvc2VDb2xvcihoc2xUb1JnYihjb2xvcikpLnZhbHVlcyA6IGNvbG9yLnZhbHVlcztcbiAgcmdiID0gcmdiLm1hcChmdW5jdGlvbiAodmFsKSB7XG4gICAgdmFsIC89IDI1NTsgLy8gbm9ybWFsaXplZFxuXG4gICAgcmV0dXJuIHZhbCA8PSAwLjAzOTI4ID8gdmFsIC8gMTIuOTIgOiBNYXRoLnBvdygodmFsICsgMC4wNTUpIC8gMS4wNTUsIDIuNCk7XG4gIH0pOyAvLyBUcnVuY2F0ZSBhdCAzIGRpZ2l0c1xuXG4gIHJldHVybiBOdW1iZXIoKDAuMjEyNiAqIHJnYlswXSArIDAuNzE1MiAqIHJnYlsxXSArIDAuMDcyMiAqIHJnYlsyXSkudG9GaXhlZCgzKSk7XG59XG4vKipcbiAqIERhcmtlbiBvciBsaWdodGVuIGEgY29sb3IsIGRlcGVuZGluZyBvbiBpdHMgbHVtaW5hbmNlLlxuICogTGlnaHQgY29sb3JzIGFyZSBkYXJrZW5lZCwgZGFyayBjb2xvcnMgYXJlIGxpZ2h0ZW5lZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge251bWJlcn0gY29lZmZpY2llbnQ9MC4xNSAtIG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBlbXBoYXNpemUoY29sb3IpIHtcbiAgdmFyIGNvZWZmaWNpZW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwLjE1O1xuICByZXR1cm4gZ2V0THVtaW5hbmNlKGNvbG9yKSA+IDAuNSA/IGRhcmtlbihjb2xvciwgY29lZmZpY2llbnQpIDogbGlnaHRlbihjb2xvciwgY29lZmZpY2llbnQpO1xufVxuLyoqXG4gKiBTZXQgdGhlIGFic29sdXRlIHRyYW5zcGFyZW5jeSBvZiBhIGNvbG9yLlxuICogQW55IGV4aXN0aW5nIGFscGhhIHZhbHVlcyBhcmUgb3ZlcndyaXR0ZW4uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gdmFsdWUgdG8gc2V0IHRoZSBhbHBoYSBjaGFubmVsIHRvIGluIHRoZSByYW5nZSAwIC0xXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmYWRlKGNvbG9yLCB2YWx1ZSkge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgdmFsdWUgPSBjbGFtcCh2YWx1ZSk7XG5cbiAgaWYgKGNvbG9yLnR5cGUgPT09ICdyZ2InIHx8IGNvbG9yLnR5cGUgPT09ICdoc2wnKSB7XG4gICAgY29sb3IudHlwZSArPSAnYSc7XG4gIH1cblxuICBjb2xvci52YWx1ZXNbM10gPSB2YWx1ZTtcbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKGNvbG9yKTtcbn1cbi8qKlxuICogRGFya2VucyBhIGNvbG9yLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2VmZmljaWVudCAtIG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBkYXJrZW4oY29sb3IsIGNvZWZmaWNpZW50KSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICBjb2VmZmljaWVudCA9IGNsYW1wKGNvZWZmaWNpZW50KTtcblxuICBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdoc2wnKSAhPT0gLTEpIHtcbiAgICBjb2xvci52YWx1ZXNbMl0gKj0gMSAtIGNvZWZmaWNpZW50O1xuICB9IGVsc2UgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZigncmdiJykgIT09IC0xKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpICs9IDEpIHtcbiAgICAgIGNvbG9yLnZhbHVlc1tpXSAqPSAxIC0gY29lZmZpY2llbnQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKGNvbG9yKTtcbn1cbi8qKlxuICogTGlnaHRlbnMgYSBjb2xvci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge251bWJlcn0gY29lZmZpY2llbnQgLSBtdWx0aXBsaWVyIGluIHRoZSByYW5nZSAwIC0gMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbGlnaHRlbihjb2xvciwgY29lZmZpY2llbnQpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIGNvZWZmaWNpZW50ID0gY2xhbXAoY29lZmZpY2llbnQpO1xuXG4gIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSkge1xuICAgIGNvbG9yLnZhbHVlc1syXSArPSAoMTAwIC0gY29sb3IudmFsdWVzWzJdKSAqIGNvZWZmaWNpZW50O1xuICB9IGVsc2UgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZigncmdiJykgIT09IC0xKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpICs9IDEpIHtcbiAgICAgIGNvbG9yLnZhbHVlc1tpXSArPSAoMjU1IC0gY29sb3IudmFsdWVzW2ldKSAqIGNvZWZmaWNpZW50O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZWNvbXBvc2VDb2xvcihjb2xvcik7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59IiwiaW1wb3J0IGFycmF5V2l0aG91dEhvbGVzIGZyb20gXCIuL2FycmF5V2l0aG91dEhvbGVzXCI7XG5pbXBvcnQgaXRlcmFibGVUb0FycmF5IGZyb20gXCIuL2l0ZXJhYmxlVG9BcnJheVwiO1xuaW1wb3J0IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IGZyb20gXCIuL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5XCI7XG5pbXBvcnQgbm9uSXRlcmFibGVTcHJlYWQgZnJvbSBcIi4vbm9uSXRlcmFibGVTcHJlYWRcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHtcbiAgcmV0dXJuIGFycmF5V2l0aG91dEhvbGVzKGFycikgfHwgaXRlcmFibGVUb0FycmF5KGFycikgfHwgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBub25JdGVyYWJsZVNwcmVhZCgpO1xufSIsImltcG9ydCBhcnJheUxpa2VUb0FycmF5IGZyb20gXCIuL2FycmF5TGlrZVRvQXJyYXlcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkoYXJyKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn0iLCJmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHtcbiAgaWYgKHNlbGYgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBzZWxmO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQ7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgY29udGV4dFR5cGU6IHRydWUsXG4gIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgbWl4aW5zOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgbmFtZTogdHJ1ZSxcbiAgbGVuZ3RoOiB0cnVlLFxuICBwcm90b3R5cGU6IHRydWUsXG4gIGNhbGxlcjogdHJ1ZSxcbiAgY2FsbGVlOiB0cnVlLFxuICBhcmd1bWVudHM6IHRydWUsXG4gIGFyaXR5OiB0cnVlXG59O1xudmFyIEZPUldBUkRfUkVGX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIHJlbmRlcjogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlXG59O1xudmFyIE1FTU9fU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgY29tcGFyZTogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuTWVtb10gPSBNRU1PX1NUQVRJQ1M7XG5cbmZ1bmN0aW9uIGdldFN0YXRpY3MoY29tcG9uZW50KSB7XG4gIC8vIFJlYWN0IHYxNi4xMSBhbmQgYmVsb3dcbiAgaWYgKHJlYWN0SXMuaXNNZW1vKGNvbXBvbmVudCkpIHtcbiAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICB9IC8vIFJlYWN0IHYxNi4xMiBhbmQgYWJvdmVcblxuXG4gIHJldHVybiBUWVBFX1NUQVRJQ1NbY29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xufVxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IGdldFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50KTtcbiAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG5cbiAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJiAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge1xuICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHtcbiAgICBhcnIyW2ldID0gYXJyW2ldO1xuICB9XG5cbiAgcmV0dXJuIGFycjI7XG59IiwiZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICBcImRlZmF1bHRcIjogb2JqXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDsiLCJmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2V4dGVuZHM7IiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJpbXBvcnQgYXJyYXlMaWtlVG9BcnJheSBmcm9tIFwiLi9hcnJheUxpa2VUb0FycmF5XCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7XG4gIGlmICghbykgcmV0dXJuO1xuICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZVN2Z0ljb247XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX1N2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAbWF0ZXJpYWwtdWkvY29yZS9TdmdJY29uXCIpKTtcblxuZnVuY3Rpb24gY3JlYXRlU3ZnSWNvbihwYXRoLCBkaXNwbGF5TmFtZSkge1xuICB2YXIgQ29tcG9uZW50ID0gX3JlYWN0LmRlZmF1bHQubWVtbyhfcmVhY3QuZGVmYXVsdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChwcm9wcywgcmVmKSB7XG4gICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1N2Z0ljb24uZGVmYXVsdCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICByZWY6IHJlZlxuICAgIH0sIHByb3BzKSwgcGF0aCk7XG4gIH0pKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIENvbXBvbmVudC5kaXNwbGF5TmFtZSA9IFwiXCIuY29uY2F0KGRpc3BsYXlOYW1lLCBcIkljb25cIik7XG4gIH1cblxuICBDb21wb25lbnQubXVpTmFtZSA9IF9TdmdJY29uLmRlZmF1bHQubXVpTmFtZTtcbiAgcmV0dXJuIENvbXBvbmVudDtcbn0iLCJmdW5jdGlvbiBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsKHN0cmluZ3MsIHJhdykge1xuICBpZiAoIXJhdykge1xuICAgIHJhdyA9IHN0cmluZ3Muc2xpY2UoMCk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmZyZWV6ZShPYmplY3QuZGVmaW5lUHJvcGVydGllcyhzdHJpbmdzLCB7XG4gICAgcmF3OiB7XG4gICAgICB2YWx1ZTogT2JqZWN0LmZyZWV6ZShyYXcpXG4gICAgfVxuICB9KSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbDsiLCJpbXBvcnQgeyB0eXBlT2YsIGlzRWxlbWVudCwgaXNWYWxpZEVsZW1lbnRUeXBlIH0gZnJvbSAncmVhY3QtaXMnO1xuaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VDb250ZXh0LCB1c2VNZW1vLCB1c2VFZmZlY3QsIHVzZVJlZiwgY3JlYXRlRWxlbWVudCwgdXNlRGVidWdWYWx1ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzaGFsbG93ZXF1YWwgZnJvbSAnc2hhbGxvd2VxdWFsJztcbmltcG9ydCBTdHlsaXMgZnJvbSAnQGVtb3Rpb24vc3R5bGlzJztcbmltcG9ydCB1bml0bGVzcyBmcm9tICdAZW1vdGlvbi91bml0bGVzcyc7XG5pbXBvcnQgdmFsaWRBdHRyIGZyb20gJ0BlbW90aW9uL2lzLXByb3AtdmFsaWQnO1xuaW1wb3J0IGhvaXN0IGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbi8vIFxudmFyIGludGVybGVhdmUgPSAoZnVuY3Rpb24gKHN0cmluZ3MsIGludGVycG9sYXRpb25zKSB7XG4gIHZhciByZXN1bHQgPSBbc3RyaW5nc1swXV07XG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGludGVycG9sYXRpb25zLmxlbmd0aDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgcmVzdWx0LnB1c2goaW50ZXJwb2xhdGlvbnNbaV0sIHN0cmluZ3NbaSArIDFdKTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59KTtcblxuLy8gXG52YXIgaXNQbGFpbk9iamVjdCA9IChmdW5jdGlvbiAoeCkge1xuICByZXR1cm4geCAhPT0gbnVsbCAmJiB0eXBlb2YgeCA9PT0gJ29iamVjdCcgJiYgKHgudG9TdHJpbmcgPyB4LnRvU3RyaW5nKCkgOiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoeCkpID09PSAnW29iamVjdCBPYmplY3RdJyAmJiAhdHlwZU9mKHgpO1xufSk7XG5cbi8vIFxudmFyIEVNUFRZX0FSUkFZID0gT2JqZWN0LmZyZWV6ZShbXSk7XG52YXIgRU1QVFlfT0JKRUNUID0gT2JqZWN0LmZyZWV6ZSh7fSk7XG5cbi8vIFxuZnVuY3Rpb24gaXNGdW5jdGlvbih0ZXN0KSB7XG4gIHJldHVybiB0eXBlb2YgdGVzdCA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuLy8gXG5mdW5jdGlvbiBnZXRDb21wb25lbnROYW1lKHRhcmdldCkge1xuICByZXR1cm4gKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB0eXBlb2YgdGFyZ2V0ID09PSAnc3RyaW5nJyAmJiB0YXJnZXQgOiBmYWxzZSkgfHwgLy8gJEZsb3dGaXhNZVxuICB0YXJnZXQuZGlzcGxheU5hbWUgfHwgLy8gJEZsb3dGaXhNZVxuICB0YXJnZXQubmFtZSB8fCAnQ29tcG9uZW50Jztcbn1cblxuLy8gXG5mdW5jdGlvbiBpc1N0YXRlbGVzc0Z1bmN0aW9uKHRlc3QpIHtcbiAgcmV0dXJuIHR5cGVvZiB0ZXN0ID09PSAnZnVuY3Rpb24nICYmICEodGVzdC5wcm90b3R5cGUgJiYgdGVzdC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCk7XG59XG5cbi8vIFxuZnVuY3Rpb24gaXNTdHlsZWRDb21wb25lbnQodGFyZ2V0KSB7XG4gIHJldHVybiB0YXJnZXQgJiYgdHlwZW9mIHRhcmdldC5zdHlsZWRDb21wb25lbnRJZCA9PT0gJ3N0cmluZyc7XG59XG5cbi8vIFxudmFyIFNDX0FUVFIgPSB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgKHByb2Nlc3MuZW52LlJFQUNUX0FQUF9TQ19BVFRSIHx8IHByb2Nlc3MuZW52LlNDX0FUVFIpIHx8ICdkYXRhLXN0eWxlZCc7XG52YXIgU0NfQVRUUl9BQ1RJVkUgPSAnYWN0aXZlJztcbnZhciBTQ19BVFRSX1ZFUlNJT04gPSAnZGF0YS1zdHlsZWQtdmVyc2lvbic7XG52YXIgU0NfVkVSU0lPTiA9IFwiNS4xLjFcIjtcbnZhciBTUExJVFRFUiA9ICcvKiFzYyovXFxuJztcbnZhciBJU19CUk9XU0VSID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ0hUTUxFbGVtZW50JyBpbiB3aW5kb3c7XG52YXIgRElTQUJMRV9TUEVFRFkgPSB0eXBlb2YgU0NfRElTQUJMRV9TUEVFRFkgPT09ICdib29sZWFuJyAmJiBTQ19ESVNBQkxFX1NQRUVEWSB8fCB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgKHByb2Nlc3MuZW52LlJFQUNUX0FQUF9TQ19ESVNBQkxFX1NQRUVEWSB8fCBwcm9jZXNzLmVudi5TQ19ESVNBQkxFX1NQRUVEWSkgfHwgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJzsgLy8gU2hhcmVkIGVtcHR5IGV4ZWN1dGlvbiBjb250ZXh0IHdoZW4gZ2VuZXJhdGluZyBzdGF0aWMgc3R5bGVzXG5cbnZhciBTVEFUSUNfRVhFQ1VUSU9OX0NPTlRFWFQgPSB7fTtcblxuLy8gXG5cbi8qIGVzbGludC1kaXNhYmxlIGNhbWVsY2FzZSwgbm8tdW5kZWYgKi9cbnZhciBnZXROb25jZSA9IGZ1bmN0aW9uIGdldE5vbmNlKCkge1xuICByZXR1cm4gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSAndW5kZWZpbmVkJyA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbn07XG5cbnZhciBlcnJvck1hcCA9IHtcbiAgXCIxXCI6IFwiQ2Fubm90IGNyZWF0ZSBzdHlsZWQtY29tcG9uZW50IGZvciBjb21wb25lbnQ6ICVzLlxcblxcblwiLFxuICBcIjJcIjogXCJDYW4ndCBjb2xsZWN0IHN0eWxlcyBvbmNlIHlvdSd2ZSBjb25zdW1lZCBhIGBTZXJ2ZXJTdHlsZVNoZWV0YCdzIHN0eWxlcyEgYFNlcnZlclN0eWxlU2hlZXRgIGlzIGEgb25lIG9mZiBpbnN0YW5jZSBmb3IgZWFjaCBzZXJ2ZXItc2lkZSByZW5kZXIgY3ljbGUuXFxuXFxuLSBBcmUgeW91IHRyeWluZyB0byByZXVzZSBpdCBhY3Jvc3MgcmVuZGVycz9cXG4tIEFyZSB5b3UgYWNjaWRlbnRhbGx5IGNhbGxpbmcgY29sbGVjdFN0eWxlcyB0d2ljZT9cXG5cXG5cIixcbiAgXCIzXCI6IFwiU3RyZWFtaW5nIFNTUiBpcyBvbmx5IHN1cHBvcnRlZCBpbiBhIE5vZGUuanMgZW52aXJvbm1lbnQ7IFBsZWFzZSBkbyBub3QgdHJ5IHRvIGNhbGwgdGhpcyBtZXRob2QgaW4gdGhlIGJyb3dzZXIuXFxuXFxuXCIsXG4gIFwiNFwiOiBcIlRoZSBgU3R5bGVTaGVldE1hbmFnZXJgIGV4cGVjdHMgYSB2YWxpZCB0YXJnZXQgb3Igc2hlZXQgcHJvcCFcXG5cXG4tIERvZXMgdGhpcyBlcnJvciBvY2N1ciBvbiB0aGUgY2xpZW50IGFuZCBpcyB5b3VyIHRhcmdldCBmYWxzeT9cXG4tIERvZXMgdGhpcyBlcnJvciBvY2N1ciBvbiB0aGUgc2VydmVyIGFuZCBpcyB0aGUgc2hlZXQgZmFsc3k/XFxuXFxuXCIsXG4gIFwiNVwiOiBcIlRoZSBjbG9uZSBtZXRob2QgY2Fubm90IGJlIHVzZWQgb24gdGhlIGNsaWVudCFcXG5cXG4tIEFyZSB5b3UgcnVubmluZyBpbiBhIGNsaWVudC1saWtlIGVudmlyb25tZW50IG9uIHRoZSBzZXJ2ZXI/XFxuLSBBcmUgeW91IHRyeWluZyB0byBydW4gU1NSIG9uIHRoZSBjbGllbnQ/XFxuXFxuXCIsXG4gIFwiNlwiOiBcIlRyeWluZyB0byBpbnNlcnQgYSBuZXcgc3R5bGUgdGFnLCBidXQgdGhlIGdpdmVuIE5vZGUgaXMgdW5tb3VudGVkIVxcblxcbi0gQXJlIHlvdSB1c2luZyBhIGN1c3RvbSB0YXJnZXQgdGhhdCBpc24ndCBtb3VudGVkP1xcbi0gRG9lcyB5b3VyIGRvY3VtZW50IG5vdCBoYXZlIGEgdmFsaWQgaGVhZCBlbGVtZW50P1xcbi0gSGF2ZSB5b3UgYWNjaWRlbnRhbGx5IHJlbW92ZWQgYSBzdHlsZSB0YWcgbWFudWFsbHk/XFxuXFxuXCIsXG4gIFwiN1wiOiBcIlRoZW1lUHJvdmlkZXI6IFBsZWFzZSByZXR1cm4gYW4gb2JqZWN0IGZyb20geW91ciBcXFwidGhlbWVcXFwiIHByb3AgZnVuY3Rpb24sIGUuZy5cXG5cXG5gYGBqc1xcbnRoZW1lPXsoKSA9PiAoe30pfVxcbmBgYFxcblxcblwiLFxuICBcIjhcIjogXCJUaGVtZVByb3ZpZGVyOiBQbGVhc2UgbWFrZSB5b3VyIFxcXCJ0aGVtZVxcXCIgcHJvcCBhbiBvYmplY3QuXFxuXFxuXCIsXG4gIFwiOVwiOiBcIk1pc3NpbmcgZG9jdW1lbnQgYDxoZWFkPmBcXG5cXG5cIixcbiAgXCIxMFwiOiBcIkNhbm5vdCBmaW5kIGEgU3R5bGVTaGVldCBpbnN0YW5jZS4gVXN1YWxseSB0aGlzIGhhcHBlbnMgaWYgdGhlcmUgYXJlIG11bHRpcGxlIGNvcGllcyBvZiBzdHlsZWQtY29tcG9uZW50cyBsb2FkZWQgYXQgb25jZS4gQ2hlY2sgb3V0IHRoaXMgaXNzdWUgZm9yIGhvdyB0byB0cm91Ymxlc2hvb3QgYW5kIGZpeCB0aGUgY29tbW9uIGNhc2VzIHdoZXJlIHRoaXMgc2l0dWF0aW9uIGNhbiBoYXBwZW46IGh0dHBzOi8vZ2l0aHViLmNvbS9zdHlsZWQtY29tcG9uZW50cy9zdHlsZWQtY29tcG9uZW50cy9pc3N1ZXMvMTk0MSNpc3N1ZWNvbW1lbnQtNDE3ODYyMDIxXFxuXFxuXCIsXG4gIFwiMTFcIjogXCJfVGhpcyBlcnJvciB3YXMgcmVwbGFjZWQgd2l0aCBhIGRldi10aW1lIHdhcm5pbmcsIGl0IHdpbGwgYmUgZGVsZXRlZCBmb3IgdjQgZmluYWwuXyBbY3JlYXRlR2xvYmFsU3R5bGVdIHJlY2VpdmVkIGNoaWxkcmVuIHdoaWNoIHdpbGwgbm90IGJlIHJlbmRlcmVkLiBQbGVhc2UgdXNlIHRoZSBjb21wb25lbnQgd2l0aG91dCBwYXNzaW5nIGNoaWxkcmVuIGVsZW1lbnRzLlxcblxcblwiLFxuICBcIjEyXCI6IFwiSXQgc2VlbXMgeW91IGFyZSBpbnRlcnBvbGF0aW5nIGEga2V5ZnJhbWUgZGVjbGFyYXRpb24gKCVzKSBpbnRvIGFuIHVudGFnZ2VkIHN0cmluZy4gVGhpcyB3YXMgc3VwcG9ydGVkIGluIHN0eWxlZC1jb21wb25lbnRzIHYzLCBidXQgaXMgbm90IGxvbmdlciBzdXBwb3J0ZWQgaW4gdjQgYXMga2V5ZnJhbWVzIGFyZSBub3cgaW5qZWN0ZWQgb24tZGVtYW5kLiBQbGVhc2Ugd3JhcCB5b3VyIHN0cmluZyBpbiB0aGUgY3NzXFxcXGBcXFxcYCBoZWxwZXIgd2hpY2ggZW5zdXJlcyB0aGUgc3R5bGVzIGFyZSBpbmplY3RlZCBjb3JyZWN0bHkuIFNlZSBodHRwczovL3d3dy5zdHlsZWQtY29tcG9uZW50cy5jb20vZG9jcy9hcGkjY3NzXFxuXFxuXCIsXG4gIFwiMTNcIjogXCIlcyBpcyBub3QgYSBzdHlsZWQgY29tcG9uZW50IGFuZCBjYW5ub3QgYmUgcmVmZXJyZWQgdG8gdmlhIGNvbXBvbmVudCBzZWxlY3Rvci4gU2VlIGh0dHBzOi8vd3d3LnN0eWxlZC1jb21wb25lbnRzLmNvbS9kb2NzL2FkdmFuY2VkI3JlZmVycmluZy10by1vdGhlci1jb21wb25lbnRzIGZvciBtb3JlIGRldGFpbHMuXFxuXFxuXCIsXG4gIFwiMTRcIjogXCJUaGVtZVByb3ZpZGVyOiBcXFwidGhlbWVcXFwiIHByb3AgaXMgcmVxdWlyZWQuXFxuXFxuXCIsXG4gIFwiMTVcIjogXCJBIHN0eWxpcyBwbHVnaW4gaGFzIGJlZW4gc3VwcGxpZWQgdGhhdCBpcyBub3QgbmFtZWQuIFdlIG5lZWQgYSBuYW1lIGZvciBlYWNoIHBsdWdpbiB0byBiZSBhYmxlIHRvIHByZXZlbnQgc3R5bGluZyBjb2xsaXNpb25zIGJldHdlZW4gZGlmZmVyZW50IHN0eWxpcyBjb25maWd1cmF0aW9ucyB3aXRoaW4gdGhlIHNhbWUgYXBwLiBCZWZvcmUgeW91IHBhc3MgeW91ciBwbHVnaW4gdG8gYDxTdHlsZVNoZWV0TWFuYWdlciBzdHlsaXNQbHVnaW5zPXtbXX0+YCwgcGxlYXNlIG1ha2Ugc3VyZSBlYWNoIHBsdWdpbiBpcyB1bmlxdWVseS1uYW1lZCwgZS5nLlxcblxcbmBgYGpzXFxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGltcG9ydGVkUGx1Z2luLCAnbmFtZScsIHsgdmFsdWU6ICdzb21lLXVuaXF1ZS1uYW1lJyB9KTtcXG5gYGBcXG5cXG5cIixcbiAgXCIxNlwiOiBcIlJlYWNoZWQgdGhlIGxpbWl0IG9mIGhvdyBtYW55IHN0eWxlZCBjb21wb25lbnRzIG1heSBiZSBjcmVhdGVkIGF0IGdyb3VwICVzLlxcbllvdSBtYXkgb25seSBjcmVhdGUgdXAgdG8gMSwwNzMsNzQxLDgyNCBjb21wb25lbnRzLiBJZiB5b3UncmUgY3JlYXRpbmcgY29tcG9uZW50cyBkeW5hbWljYWxseSxcXG5hcyBmb3IgaW5zdGFuY2UgaW4geW91ciByZW5kZXIgbWV0aG9kIHRoZW4geW91IG1heSBiZSBydW5uaW5nIGludG8gdGhpcyBsaW1pdGF0aW9uLlxcblxcblwiLFxuICBcIjE3XCI6IFwiQ1NTU3R5bGVTaGVldCBjb3VsZCBub3QgYmUgZm91bmQgb24gSFRNTFN0eWxlRWxlbWVudC5cXG5IYXMgc3R5bGVkLWNvbXBvbmVudHMnIHN0eWxlIHRhZyBiZWVuIHVubW91bnRlZCBvciBhbHRlcmVkIGJ5IGFub3RoZXIgc2NyaXB0P1xcblwiXG59O1xuXG4vLyBcbnZhciBFUlJPUlMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gZXJyb3JNYXAgOiB7fTtcbi8qKlxuICogc3VwZXIgYmFzaWMgdmVyc2lvbiBvZiBzcHJpbnRmXG4gKi9cblxuZnVuY3Rpb24gZm9ybWF0KCkge1xuICB2YXIgYSA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXTtcbiAgdmFyIGIgPSBbXTtcblxuICBmb3IgKHZhciBjID0gMSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDsgYyA8IGxlbjsgYyArPSAxKSB7XG4gICAgYi5wdXNoKGMgPCAwIHx8IGFyZ3VtZW50cy5sZW5ndGggPD0gYyA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1tjXSk7XG4gIH1cblxuICBiLmZvckVhY2goZnVuY3Rpb24gKGQpIHtcbiAgICBhID0gYS5yZXBsYWNlKC8lW2Etel0vLCBkKTtcbiAgfSk7XG4gIHJldHVybiBhO1xufVxuLyoqXG4gKiBDcmVhdGUgYW4gZXJyb3IgZmlsZSBvdXQgb2YgZXJyb3JzLm1kIGZvciBkZXZlbG9wbWVudCBhbmQgYSBzaW1wbGUgd2ViIGxpbmsgdG8gdGhlIGZ1bGwgZXJyb3JzXG4gKiBpbiBwcm9kdWN0aW9uIG1vZGUuXG4gKi9cblxuXG5mdW5jdGlvbiB0aHJvd1N0eWxlZENvbXBvbmVudHNFcnJvcihjb2RlKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBpbnRlcnBvbGF0aW9ucyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgaW50ZXJwb2xhdGlvbnNbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBbiBlcnJvciBvY2N1cnJlZC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9zdHlsZWQtY29tcG9uZW50cy9zdHlsZWQtY29tcG9uZW50cy9ibG9iL21hc3Rlci9wYWNrYWdlcy9zdHlsZWQtY29tcG9uZW50cy9zcmMvdXRpbHMvZXJyb3JzLm1kI1wiICsgY29kZSArIFwiIGZvciBtb3JlIGluZm9ybWF0aW9uLlwiICsgKGludGVycG9sYXRpb25zLmxlbmd0aCA+IDAgPyBcIiBBZGRpdGlvbmFsIGFyZ3VtZW50czogXCIgKyBpbnRlcnBvbGF0aW9ucy5qb2luKCcsICcpIDogJycpKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0LmFwcGx5KHZvaWQgMCwgW0VSUk9SU1tjb2RlXV0uY29uY2F0KGludGVycG9sYXRpb25zKSkudHJpbSgpKTtcbiAgfVxufVxuXG4vLyBcbnZhciBFTEVNRU5UX1RZUEUgPSAxO1xuLyogTm9kZS5FTEVNRU5UX1RZUEUgKi9cblxuLyoqIEZpbmQgbGFzdCBzdHlsZSBlbGVtZW50IGlmIGFueSBpbnNpZGUgdGFyZ2V0ICovXG5cbnZhciBmaW5kTGFzdFN0eWxlVGFnID0gZnVuY3Rpb24gZmluZExhc3RTdHlsZVRhZyh0YXJnZXQpIHtcbiAgdmFyIGNoaWxkTm9kZXMgPSB0YXJnZXQuY2hpbGROb2RlcztcblxuICBmb3IgKHZhciBpID0gY2hpbGROb2Rlcy5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIGNoaWxkID0gY2hpbGROb2Rlc1tpXTtcblxuICAgIGlmIChjaGlsZCAmJiBjaGlsZC5ub2RlVHlwZSA9PT0gRUxFTUVOVF9UWVBFICYmIGNoaWxkLmhhc0F0dHJpYnV0ZShTQ19BVFRSKSkge1xuICAgICAgcmV0dXJuIGNoaWxkO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59O1xuLyoqIENyZWF0ZSBhIHN0eWxlIGVsZW1lbnQgaW5zaWRlIGB0YXJnZXRgIG9yIDxoZWFkPiBhZnRlciB0aGUgbGFzdCAqL1xuXG5cbnZhciBtYWtlU3R5bGVUYWcgPSBmdW5jdGlvbiBtYWtlU3R5bGVUYWcodGFyZ2V0KSB7XG4gIHZhciBoZWFkID0gZG9jdW1lbnQuaGVhZDtcbiAgdmFyIHBhcmVudCA9IHRhcmdldCB8fCBoZWFkO1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICB2YXIgcHJldlN0eWxlID0gZmluZExhc3RTdHlsZVRhZyhwYXJlbnQpO1xuICB2YXIgbmV4dFNpYmxpbmcgPSBwcmV2U3R5bGUgIT09IHVuZGVmaW5lZCA/IHByZXZTdHlsZS5uZXh0U2libGluZyA6IG51bGw7XG4gIHN0eWxlLnNldEF0dHJpYnV0ZShTQ19BVFRSLCBTQ19BVFRSX0FDVElWRSk7XG4gIHN0eWxlLnNldEF0dHJpYnV0ZShTQ19BVFRSX1ZFUlNJT04sIFNDX1ZFUlNJT04pO1xuICB2YXIgbm9uY2UgPSBnZXROb25jZSgpO1xuICBpZiAobm9uY2UpIHN0eWxlLnNldEF0dHJpYnV0ZSgnbm9uY2UnLCBub25jZSk7XG4gIHBhcmVudC5pbnNlcnRCZWZvcmUoc3R5bGUsIG5leHRTaWJsaW5nKTtcbiAgcmV0dXJuIHN0eWxlO1xufTtcbi8qKiBHZXQgdGhlIENTU1N0eWxlU2hlZXQgaW5zdGFuY2UgZm9yIGEgZ2l2ZW4gc3R5bGUgZWxlbWVudCAqL1xuXG52YXIgZ2V0U2hlZXQgPSBmdW5jdGlvbiBnZXRTaGVldCh0YWcpIHtcbiAgaWYgKHRhZy5zaGVldCkge1xuICAgIHJldHVybiB0YWcuc2hlZXQ7XG4gIH0gLy8gQXZvaWQgRmlyZWZveCBxdWlyayB3aGVyZSB0aGUgc3R5bGUgZWxlbWVudCBtaWdodCBub3QgaGF2ZSBhIHNoZWV0IHByb3BlcnR5XG5cblxuICB2YXIgX2RvY3VtZW50ID0gZG9jdW1lbnQsXG4gICAgICBzdHlsZVNoZWV0cyA9IF9kb2N1bWVudC5zdHlsZVNoZWV0cztcblxuICBmb3IgKHZhciBpID0gMCwgbCA9IHN0eWxlU2hlZXRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBzaGVldCA9IHN0eWxlU2hlZXRzW2ldO1xuXG4gICAgaWYgKHNoZWV0Lm93bmVyTm9kZSA9PT0gdGFnKSB7XG4gICAgICByZXR1cm4gc2hlZXQ7XG4gICAgfVxuICB9XG5cbiAgdGhyb3dTdHlsZWRDb21wb25lbnRzRXJyb3IoMTcpO1xuICByZXR1cm4gdW5kZWZpbmVkO1xufTtcblxuLy8gXG4vKiogQ3JlYXRlIGEgQ1NTU3R5bGVTaGVldC1saWtlIHRhZyBkZXBlbmRpbmcgb24gdGhlIGVudmlyb25tZW50ICovXG5cbnZhciBtYWtlVGFnID0gZnVuY3Rpb24gbWFrZVRhZyhfcmVmKSB7XG4gIHZhciBpc1NlcnZlciA9IF9yZWYuaXNTZXJ2ZXIsXG4gICAgICB1c2VDU1NPTUluamVjdGlvbiA9IF9yZWYudXNlQ1NTT01JbmplY3Rpb24sXG4gICAgICB0YXJnZXQgPSBfcmVmLnRhcmdldDtcblxuICBpZiAoaXNTZXJ2ZXIpIHtcbiAgICByZXR1cm4gbmV3IFZpcnR1YWxUYWcodGFyZ2V0KTtcbiAgfSBlbHNlIGlmICh1c2VDU1NPTUluamVjdGlvbikge1xuICAgIHJldHVybiBuZXcgQ1NTT01UYWcodGFyZ2V0KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IFRleHRUYWcodGFyZ2V0KTtcbiAgfVxufTtcbnZhciBDU1NPTVRhZyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIENTU09NVGFnKHRhcmdldCkge1xuICAgIHZhciBlbGVtZW50ID0gdGhpcy5lbGVtZW50ID0gbWFrZVN0eWxlVGFnKHRhcmdldCk7IC8vIEF2b2lkIEVkZ2UgYnVnIHdoZXJlIGVtcHR5IHN0eWxlIGVsZW1lbnRzIGRvbid0IGNyZWF0ZSBzaGVldHNcblxuICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpKTtcbiAgICB0aGlzLnNoZWV0ID0gZ2V0U2hlZXQoZWxlbWVudCk7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IENTU09NVGFnLnByb3RvdHlwZTtcblxuICBfcHJvdG8uaW5zZXJ0UnVsZSA9IGZ1bmN0aW9uIGluc2VydFJ1bGUoaW5kZXgsIHJ1bGUpIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5zaGVldC5pbnNlcnRSdWxlKHJ1bGUsIGluZGV4KTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChfZXJyb3IpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmRlbGV0ZVJ1bGUgPSBmdW5jdGlvbiBkZWxldGVSdWxlKGluZGV4KSB7XG4gICAgdGhpcy5zaGVldC5kZWxldGVSdWxlKGluZGV4KTtcbiAgICB0aGlzLmxlbmd0aC0tO1xuICB9O1xuXG4gIF9wcm90by5nZXRSdWxlID0gZnVuY3Rpb24gZ2V0UnVsZShpbmRleCkge1xuICAgIHZhciBydWxlID0gdGhpcy5zaGVldC5jc3NSdWxlc1tpbmRleF07IC8vIEF2b2lkIElFMTEgcXVpcmsgd2hlcmUgY3NzVGV4dCBpcyBpbmFjY2Vzc2libGUgb24gc29tZSBpbnZhbGlkIHJ1bGVzXG5cbiAgICBpZiAocnVsZSAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBydWxlLmNzc1RleHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gcnVsZS5jc3NUZXh0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBDU1NPTVRhZztcbn0oKTtcbi8qKiBBIFRhZyB0aGF0IGVtdWxhdGVzIHRoZSBDU1NTdHlsZVNoZWV0IEFQSSBidXQgdXNlcyB0ZXh0IG5vZGVzICovXG5cbnZhciBUZXh0VGFnID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gVGV4dFRhZyh0YXJnZXQpIHtcbiAgICB2YXIgZWxlbWVudCA9IHRoaXMuZWxlbWVudCA9IG1ha2VTdHlsZVRhZyh0YXJnZXQpO1xuICAgIHRoaXMubm9kZXMgPSBlbGVtZW50LmNoaWxkTm9kZXM7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICB9XG5cbiAgdmFyIF9wcm90bzIgPSBUZXh0VGFnLnByb3RvdHlwZTtcblxuICBfcHJvdG8yLmluc2VydFJ1bGUgPSBmdW5jdGlvbiBpbnNlcnRSdWxlKGluZGV4LCBydWxlKSB7XG4gICAgaWYgKGluZGV4IDw9IHRoaXMubGVuZ3RoICYmIGluZGV4ID49IDApIHtcbiAgICAgIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUocnVsZSk7XG4gICAgICB2YXIgcmVmTm9kZSA9IHRoaXMubm9kZXNbaW5kZXhdO1xuICAgICAgdGhpcy5lbGVtZW50Lmluc2VydEJlZm9yZShub2RlLCByZWZOb2RlIHx8IG51bGwpO1xuICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90bzIuZGVsZXRlUnVsZSA9IGZ1bmN0aW9uIGRlbGV0ZVJ1bGUoaW5kZXgpIHtcbiAgICB0aGlzLmVsZW1lbnQucmVtb3ZlQ2hpbGQodGhpcy5ub2Rlc1tpbmRleF0pO1xuICAgIHRoaXMubGVuZ3RoLS07XG4gIH07XG5cbiAgX3Byb3RvMi5nZXRSdWxlID0gZnVuY3Rpb24gZ2V0UnVsZShpbmRleCkge1xuICAgIGlmIChpbmRleCA8IHRoaXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5ub2Rlc1tpbmRleF0udGV4dENvbnRlbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFRleHRUYWc7XG59KCk7XG4vKiogQSBjb21wbGV0ZWx5IHZpcnR1YWwgKHNlcnZlci1zaWRlKSBUYWcgdGhhdCBkb2Vzbid0IG1hbmlwdWxhdGUgdGhlIERPTSAqL1xuXG52YXIgVmlydHVhbFRhZyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFZpcnR1YWxUYWcoX3RhcmdldCkge1xuICAgIHRoaXMucnVsZXMgPSBbXTtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gIH1cblxuICB2YXIgX3Byb3RvMyA9IFZpcnR1YWxUYWcucHJvdG90eXBlO1xuXG4gIF9wcm90bzMuaW5zZXJ0UnVsZSA9IGZ1bmN0aW9uIGluc2VydFJ1bGUoaW5kZXgsIHJ1bGUpIHtcbiAgICBpZiAoaW5kZXggPD0gdGhpcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMucnVsZXMuc3BsaWNlKGluZGV4LCAwLCBydWxlKTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8zLmRlbGV0ZVJ1bGUgPSBmdW5jdGlvbiBkZWxldGVSdWxlKGluZGV4KSB7XG4gICAgdGhpcy5ydWxlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIHRoaXMubGVuZ3RoLS07XG4gIH07XG5cbiAgX3Byb3RvMy5nZXRSdWxlID0gZnVuY3Rpb24gZ2V0UnVsZShpbmRleCkge1xuICAgIGlmIChpbmRleCA8IHRoaXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5ydWxlc1tpbmRleF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFZpcnR1YWxUYWc7XG59KCk7XG5cbi8vIFxuLyoqIENyZWF0ZSBhIEdyb3VwZWRUYWcgd2l0aCBhbiB1bmRlcmx5aW5nIFRhZyBpbXBsZW1lbnRhdGlvbiAqL1xuXG52YXIgbWFrZUdyb3VwZWRUYWcgPSBmdW5jdGlvbiBtYWtlR3JvdXBlZFRhZyh0YWcpIHtcbiAgcmV0dXJuIG5ldyBEZWZhdWx0R3JvdXBlZFRhZyh0YWcpO1xufTtcbnZhciBCQVNFX1NJWkUgPSAxIDw8IDk7XG5cbnZhciBEZWZhdWx0R3JvdXBlZFRhZyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIERlZmF1bHRHcm91cGVkVGFnKHRhZykge1xuICAgIHRoaXMuZ3JvdXBTaXplcyA9IG5ldyBVaW50MzJBcnJheShCQVNFX1NJWkUpO1xuICAgIHRoaXMubGVuZ3RoID0gQkFTRV9TSVpFO1xuICAgIHRoaXMudGFnID0gdGFnO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IERlZmF1bHRHcm91cGVkVGFnLnByb3RvdHlwZTtcblxuICBfcHJvdG8uaW5kZXhPZkdyb3VwID0gZnVuY3Rpb24gaW5kZXhPZkdyb3VwKGdyb3VwKSB7XG4gICAgdmFyIGluZGV4ID0gMDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXA7IGkrKykge1xuICAgICAgaW5kZXggKz0gdGhpcy5ncm91cFNpemVzW2ldO1xuICAgIH1cblxuICAgIHJldHVybiBpbmRleDtcbiAgfTtcblxuICBfcHJvdG8uaW5zZXJ0UnVsZXMgPSBmdW5jdGlvbiBpbnNlcnRSdWxlcyhncm91cCwgcnVsZXMpIHtcbiAgICBpZiAoZ3JvdXAgPj0gdGhpcy5ncm91cFNpemVzLmxlbmd0aCkge1xuICAgICAgdmFyIG9sZEJ1ZmZlciA9IHRoaXMuZ3JvdXBTaXplcztcbiAgICAgIHZhciBvbGRTaXplID0gb2xkQnVmZmVyLmxlbmd0aDtcbiAgICAgIHZhciBuZXdTaXplID0gb2xkU2l6ZTtcblxuICAgICAgd2hpbGUgKGdyb3VwID49IG5ld1NpemUpIHtcbiAgICAgICAgbmV3U2l6ZSA8PD0gMTtcblxuICAgICAgICBpZiAobmV3U2l6ZSA8IDApIHtcbiAgICAgICAgICB0aHJvd1N0eWxlZENvbXBvbmVudHNFcnJvcigxNiwgXCJcIiArIGdyb3VwKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmdyb3VwU2l6ZXMgPSBuZXcgVWludDMyQXJyYXkobmV3U2l6ZSk7XG4gICAgICB0aGlzLmdyb3VwU2l6ZXMuc2V0KG9sZEJ1ZmZlcik7XG4gICAgICB0aGlzLmxlbmd0aCA9IG5ld1NpemU7XG5cbiAgICAgIGZvciAodmFyIGkgPSBvbGRTaXplOyBpIDwgbmV3U2l6ZTsgaSsrKSB7XG4gICAgICAgIHRoaXMuZ3JvdXBTaXplc1tpXSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHJ1bGVJbmRleCA9IHRoaXMuaW5kZXhPZkdyb3VwKGdyb3VwICsgMSk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDAsIGwgPSBydWxlcy5sZW5ndGg7IF9pIDwgbDsgX2krKykge1xuICAgICAgaWYgKHRoaXMudGFnLmluc2VydFJ1bGUocnVsZUluZGV4LCBydWxlc1tfaV0pKSB7XG4gICAgICAgIHRoaXMuZ3JvdXBTaXplc1tncm91cF0rKztcbiAgICAgICAgcnVsZUluZGV4Kys7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5jbGVhckdyb3VwID0gZnVuY3Rpb24gY2xlYXJHcm91cChncm91cCkge1xuICAgIGlmIChncm91cCA8IHRoaXMubGVuZ3RoKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gdGhpcy5ncm91cFNpemVzW2dyb3VwXTtcbiAgICAgIHZhciBzdGFydEluZGV4ID0gdGhpcy5pbmRleE9mR3JvdXAoZ3JvdXApO1xuICAgICAgdmFyIGVuZEluZGV4ID0gc3RhcnRJbmRleCArIGxlbmd0aDtcbiAgICAgIHRoaXMuZ3JvdXBTaXplc1tncm91cF0gPSAwO1xuXG4gICAgICBmb3IgKHZhciBpID0gc3RhcnRJbmRleDsgaSA8IGVuZEluZGV4OyBpKyspIHtcbiAgICAgICAgdGhpcy50YWcuZGVsZXRlUnVsZShzdGFydEluZGV4KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmdldEdyb3VwID0gZnVuY3Rpb24gZ2V0R3JvdXAoZ3JvdXApIHtcbiAgICB2YXIgY3NzID0gJyc7XG5cbiAgICBpZiAoZ3JvdXAgPj0gdGhpcy5sZW5ndGggfHwgdGhpcy5ncm91cFNpemVzW2dyb3VwXSA9PT0gMCkge1xuICAgICAgcmV0dXJuIGNzcztcbiAgICB9XG5cbiAgICB2YXIgbGVuZ3RoID0gdGhpcy5ncm91cFNpemVzW2dyb3VwXTtcbiAgICB2YXIgc3RhcnRJbmRleCA9IHRoaXMuaW5kZXhPZkdyb3VwKGdyb3VwKTtcbiAgICB2YXIgZW5kSW5kZXggPSBzdGFydEluZGV4ICsgbGVuZ3RoO1xuXG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0SW5kZXg7IGkgPCBlbmRJbmRleDsgaSsrKSB7XG4gICAgICBjc3MgKz0gXCJcIiArIHRoaXMudGFnLmdldFJ1bGUoaSkgKyBTUExJVFRFUjtcbiAgICB9XG5cbiAgICByZXR1cm4gY3NzO1xuICB9O1xuXG4gIHJldHVybiBEZWZhdWx0R3JvdXBlZFRhZztcbn0oKTtcblxuLy8gXG52YXIgTUFYX1NNSSA9IDEgPDwgMzEgLSAxO1xudmFyIGdyb3VwSURSZWdpc3RlciA9IG5ldyBNYXAoKTtcbnZhciByZXZlcnNlUmVnaXN0ZXIgPSBuZXcgTWFwKCk7XG52YXIgbmV4dEZyZWVHcm91cCA9IDE7XG52YXIgZ2V0R3JvdXBGb3JJZCA9IGZ1bmN0aW9uIGdldEdyb3VwRm9ySWQoaWQpIHtcbiAgaWYgKGdyb3VwSURSZWdpc3Rlci5oYXMoaWQpKSB7XG4gICAgcmV0dXJuIGdyb3VwSURSZWdpc3Rlci5nZXQoaWQpO1xuICB9XG5cbiAgdmFyIGdyb3VwID0gbmV4dEZyZWVHcm91cCsrO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICgoZ3JvdXAgfCAwKSA8IDAgfHwgZ3JvdXAgPiBNQVhfU01JKSkge1xuICAgIHRocm93U3R5bGVkQ29tcG9uZW50c0Vycm9yKDE2LCBcIlwiICsgZ3JvdXApO1xuICB9XG5cbiAgZ3JvdXBJRFJlZ2lzdGVyLnNldChpZCwgZ3JvdXApO1xuICByZXZlcnNlUmVnaXN0ZXIuc2V0KGdyb3VwLCBpZCk7XG4gIHJldHVybiBncm91cDtcbn07XG52YXIgZ2V0SWRGb3JHcm91cCA9IGZ1bmN0aW9uIGdldElkRm9yR3JvdXAoZ3JvdXApIHtcbiAgcmV0dXJuIHJldmVyc2VSZWdpc3Rlci5nZXQoZ3JvdXApO1xufTtcbnZhciBzZXRHcm91cEZvcklkID0gZnVuY3Rpb24gc2V0R3JvdXBGb3JJZChpZCwgZ3JvdXApIHtcbiAgaWYgKGdyb3VwID49IG5leHRGcmVlR3JvdXApIHtcbiAgICBuZXh0RnJlZUdyb3VwID0gZ3JvdXAgKyAxO1xuICB9XG5cbiAgZ3JvdXBJRFJlZ2lzdGVyLnNldChpZCwgZ3JvdXApO1xuICByZXZlcnNlUmVnaXN0ZXIuc2V0KGdyb3VwLCBpZCk7XG59O1xuXG4vLyBcbnZhciBTRUxFQ1RPUiA9IFwic3R5bGVbXCIgKyBTQ19BVFRSICsgXCJdW1wiICsgU0NfQVRUUl9WRVJTSU9OICsgXCI9XFxcIlwiICsgU0NfVkVSU0lPTiArIFwiXFxcIl1cIjtcbnZhciBNQVJLRVJfUkUgPSBuZXcgUmVnRXhwKFwiXlwiICsgU0NfQVRUUiArIFwiXFxcXC5nKFxcXFxkKylcXFxcW2lkPVxcXCIoW1xcXFx3XFxcXGQtXSspXFxcIlxcXFxdLio/XFxcIihbXlxcXCJdKilcIik7XG52YXIgb3V0cHV0U2hlZXQgPSBmdW5jdGlvbiBvdXRwdXRTaGVldChzaGVldCkge1xuICB2YXIgdGFnID0gc2hlZXQuZ2V0VGFnKCk7XG4gIHZhciBsZW5ndGggPSB0YWcubGVuZ3RoO1xuICB2YXIgY3NzID0gJyc7XG5cbiAgZm9yICh2YXIgZ3JvdXAgPSAwOyBncm91cCA8IGxlbmd0aDsgZ3JvdXArKykge1xuICAgIHZhciBpZCA9IGdldElkRm9yR3JvdXAoZ3JvdXApO1xuICAgIGlmIChpZCA9PT0gdW5kZWZpbmVkKSBjb250aW51ZTtcbiAgICB2YXIgbmFtZXMgPSBzaGVldC5uYW1lcy5nZXQoaWQpO1xuICAgIHZhciBydWxlcyA9IHRhZy5nZXRHcm91cChncm91cCk7XG4gICAgaWYgKG5hbWVzID09PSB1bmRlZmluZWQgfHwgcnVsZXMubGVuZ3RoID09PSAwKSBjb250aW51ZTtcbiAgICB2YXIgc2VsZWN0b3IgPSBTQ19BVFRSICsgXCIuZ1wiICsgZ3JvdXAgKyBcIltpZD1cXFwiXCIgKyBpZCArIFwiXFxcIl1cIjtcbiAgICB2YXIgY29udGVudCA9ICcnO1xuXG4gICAgaWYgKG5hbWVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG5hbWVzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgaWYgKG5hbWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGNvbnRlbnQgKz0gbmFtZSArIFwiLFwiO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IC8vIE5PVEU6IEl0J3MgZWFzaWVyIHRvIGNvbGxlY3QgcnVsZXMgYW5kIGhhdmUgdGhlIG1hcmtlclxuICAgIC8vIGFmdGVyIHRoZSBhY3R1YWwgcnVsZXMgdG8gc2ltcGxpZnkgdGhlIHJlaHlkcmF0aW9uXG5cblxuICAgIGNzcyArPSBcIlwiICsgcnVsZXMgKyBzZWxlY3RvciArIFwie2NvbnRlbnQ6XFxcIlwiICsgY29udGVudCArIFwiXFxcIn1cIiArIFNQTElUVEVSO1xuICB9XG5cbiAgcmV0dXJuIGNzcztcbn07XG5cbnZhciByZWh5ZHJhdGVOYW1lc0Zyb21Db250ZW50ID0gZnVuY3Rpb24gcmVoeWRyYXRlTmFtZXNGcm9tQ29udGVudChzaGVldCwgaWQsIGNvbnRlbnQpIHtcbiAgdmFyIG5hbWVzID0gY29udGVudC5zcGxpdCgnLCcpO1xuICB2YXIgbmFtZTtcblxuICBmb3IgKHZhciBpID0gMCwgbCA9IG5hbWVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIGlmIChuYW1lID0gbmFtZXNbaV0pIHtcbiAgICAgIHNoZWV0LnJlZ2lzdGVyTmFtZShpZCwgbmFtZSk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgcmVoeWRyYXRlU2hlZXRGcm9tVGFnID0gZnVuY3Rpb24gcmVoeWRyYXRlU2hlZXRGcm9tVGFnKHNoZWV0LCBzdHlsZSkge1xuICB2YXIgcGFydHMgPSBzdHlsZS5pbm5lckhUTUwuc3BsaXQoU1BMSVRURVIpO1xuICB2YXIgcnVsZXMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMCwgbCA9IHBhcnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBwYXJ0ID0gcGFydHNbaV0udHJpbSgpO1xuICAgIGlmICghcGFydCkgY29udGludWU7XG4gICAgdmFyIG1hcmtlciA9IHBhcnQubWF0Y2goTUFSS0VSX1JFKTtcblxuICAgIGlmIChtYXJrZXIpIHtcbiAgICAgIHZhciBncm91cCA9IHBhcnNlSW50KG1hcmtlclsxXSwgMTApIHwgMDtcbiAgICAgIHZhciBpZCA9IG1hcmtlclsyXTtcblxuICAgICAgaWYgKGdyb3VwICE9PSAwKSB7XG4gICAgICAgIC8vIFJlaHlkcmF0ZSBjb21wb25lbnRJZCB0byBncm91cCBpbmRleCBtYXBwaW5nXG4gICAgICAgIHNldEdyb3VwRm9ySWQoaWQsIGdyb3VwKTsgLy8gUmVoeWRyYXRlIG5hbWVzIGFuZCBydWxlc1xuICAgICAgICAvLyBsb29rcyBsaWtlOiBkYXRhLXN0eWxlZC5nMTFbaWQ9XCJpZEFcIl17Y29udGVudDpcIm5hbWVBLFwifVxuXG4gICAgICAgIHJlaHlkcmF0ZU5hbWVzRnJvbUNvbnRlbnQoc2hlZXQsIGlkLCBtYXJrZXJbM10pO1xuICAgICAgICBzaGVldC5nZXRUYWcoKS5pbnNlcnRSdWxlcyhncm91cCwgcnVsZXMpO1xuICAgICAgfVxuXG4gICAgICBydWxlcy5sZW5ndGggPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBydWxlcy5wdXNoKHBhcnQpO1xuICAgIH1cbiAgfVxufTtcblxudmFyIHJlaHlkcmF0ZVNoZWV0ID0gZnVuY3Rpb24gcmVoeWRyYXRlU2hlZXQoc2hlZXQpIHtcbiAgdmFyIG5vZGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChTRUxFQ1RPUik7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBub2Rlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIgbm9kZSA9IG5vZGVzW2ldO1xuXG4gICAgaWYgKG5vZGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoU0NfQVRUUikgIT09IFNDX0FUVFJfQUNUSVZFKSB7XG4gICAgICByZWh5ZHJhdGVTaGVldEZyb21UYWcoc2hlZXQsIG5vZGUpO1xuXG4gICAgICBpZiAobm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICAgIG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbnZhciBTSE9VTERfUkVIWURSQVRFID0gSVNfQlJPV1NFUjtcbnZhciBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgaXNTZXJ2ZXI6ICFJU19CUk9XU0VSLFxuICB1c2VDU1NPTUluamVjdGlvbjogIURJU0FCTEVfU1BFRURZXG59O1xuLyoqIENvbnRhaW5zIHRoZSBtYWluIHN0eWxlc2hlZXQgbG9naWMgZm9yIHN0cmluZ2lmaWNhdGlvbiBhbmQgY2FjaGluZyAqL1xuXG52YXIgU3R5bGVTaGVldCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIC8qKiBSZWdpc3RlciBhIGdyb3VwIElEIHRvIGdpdmUgaXQgYW4gaW5kZXggKi9cbiAgU3R5bGVTaGVldC5yZWdpc3RlcklkID0gZnVuY3Rpb24gcmVnaXN0ZXJJZChpZCkge1xuICAgIHJldHVybiBnZXRHcm91cEZvcklkKGlkKTtcbiAgfTtcblxuICBmdW5jdGlvbiBTdHlsZVNoZWV0KG9wdGlvbnMsIGdsb2JhbFN0eWxlcywgbmFtZXMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0gZGVmYXVsdE9wdGlvbnM7XG4gICAgfVxuXG4gICAgaWYgKGdsb2JhbFN0eWxlcyA9PT0gdm9pZCAwKSB7XG4gICAgICBnbG9iYWxTdHlsZXMgPSB7fTtcbiAgICB9XG5cbiAgICB0aGlzLm9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgZGVmYXVsdE9wdGlvbnMsIHt9LCBvcHRpb25zKTtcbiAgICB0aGlzLmdzID0gZ2xvYmFsU3R5bGVzO1xuICAgIHRoaXMubmFtZXMgPSBuZXcgTWFwKG5hbWVzKTsgLy8gV2UgcmVoeWRyYXRlIG9ubHkgb25jZSBhbmQgdXNlIHRoZSBzaGVldCB0aGF0IGlzIGNyZWF0ZWQgZmlyc3RcblxuICAgIGlmICghdGhpcy5vcHRpb25zLmlzU2VydmVyICYmIElTX0JST1dTRVIgJiYgU0hPVUxEX1JFSFlEUkFURSkge1xuICAgICAgU0hPVUxEX1JFSFlEUkFURSA9IGZhbHNlO1xuICAgICAgcmVoeWRyYXRlU2hlZXQodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9wcm90byA9IFN0eWxlU2hlZXQucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZWNvbnN0cnVjdFdpdGhPcHRpb25zID0gZnVuY3Rpb24gcmVjb25zdHJ1Y3RXaXRoT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIG5ldyBTdHlsZVNoZWV0KF9leHRlbmRzKHt9LCB0aGlzLm9wdGlvbnMsIHt9LCBvcHRpb25zKSwgdGhpcy5ncywgdGhpcy5uYW1lcyk7XG4gIH07XG5cbiAgX3Byb3RvLmFsbG9jYXRlR1NJbnN0YW5jZSA9IGZ1bmN0aW9uIGFsbG9jYXRlR1NJbnN0YW5jZShpZCkge1xuICAgIHJldHVybiB0aGlzLmdzW2lkXSA9ICh0aGlzLmdzW2lkXSB8fCAwKSArIDE7XG4gIH1cbiAgLyoqIExhemlseSBpbml0aWFsaXNlcyBhIEdyb3VwZWRUYWcgZm9yIHdoZW4gaXQncyBhY3R1YWxseSBuZWVkZWQgKi9cbiAgO1xuXG4gIF9wcm90by5nZXRUYWcgPSBmdW5jdGlvbiBnZXRUYWcoKSB7XG4gICAgcmV0dXJuIHRoaXMudGFnIHx8ICh0aGlzLnRhZyA9IG1ha2VHcm91cGVkVGFnKG1ha2VUYWcodGhpcy5vcHRpb25zKSkpO1xuICB9XG4gIC8qKiBDaGVjayB3aGV0aGVyIGEgbmFtZSBpcyBrbm93biBmb3IgY2FjaGluZyAqL1xuICA7XG5cbiAgX3Byb3RvLmhhc05hbWVGb3JJZCA9IGZ1bmN0aW9uIGhhc05hbWVGb3JJZChpZCwgbmFtZSkge1xuICAgIHJldHVybiB0aGlzLm5hbWVzLmhhcyhpZCkgJiYgdGhpcy5uYW1lcy5nZXQoaWQpLmhhcyhuYW1lKTtcbiAgfVxuICAvKiogTWFyayBhIGdyb3VwJ3MgbmFtZSBhcyBrbm93biBmb3IgY2FjaGluZyAqL1xuICA7XG5cbiAgX3Byb3RvLnJlZ2lzdGVyTmFtZSA9IGZ1bmN0aW9uIHJlZ2lzdGVyTmFtZShpZCwgbmFtZSkge1xuICAgIGdldEdyb3VwRm9ySWQoaWQpO1xuXG4gICAgaWYgKCF0aGlzLm5hbWVzLmhhcyhpZCkpIHtcbiAgICAgIHZhciBncm91cE5hbWVzID0gbmV3IFNldCgpO1xuICAgICAgZ3JvdXBOYW1lcy5hZGQobmFtZSk7XG4gICAgICB0aGlzLm5hbWVzLnNldChpZCwgZ3JvdXBOYW1lcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubmFtZXMuZ2V0KGlkKS5hZGQobmFtZSk7XG4gICAgfVxuICB9XG4gIC8qKiBJbnNlcnQgbmV3IHJ1bGVzIHdoaWNoIGFsc28gbWFya3MgdGhlIG5hbWUgYXMga25vd24gKi9cbiAgO1xuXG4gIF9wcm90by5pbnNlcnRSdWxlcyA9IGZ1bmN0aW9uIGluc2VydFJ1bGVzKGlkLCBuYW1lLCBydWxlcykge1xuICAgIHRoaXMucmVnaXN0ZXJOYW1lKGlkLCBuYW1lKTtcbiAgICB0aGlzLmdldFRhZygpLmluc2VydFJ1bGVzKGdldEdyb3VwRm9ySWQoaWQpLCBydWxlcyk7XG4gIH1cbiAgLyoqIENsZWFycyBhbGwgY2FjaGVkIG5hbWVzIGZvciBhIGdpdmVuIGdyb3VwIElEICovXG4gIDtcblxuICBfcHJvdG8uY2xlYXJOYW1lcyA9IGZ1bmN0aW9uIGNsZWFyTmFtZXMoaWQpIHtcbiAgICBpZiAodGhpcy5uYW1lcy5oYXMoaWQpKSB7XG4gICAgICB0aGlzLm5hbWVzLmdldChpZCkuY2xlYXIoKTtcbiAgICB9XG4gIH1cbiAgLyoqIENsZWFycyBhbGwgcnVsZXMgZm9yIGEgZ2l2ZW4gZ3JvdXAgSUQgKi9cbiAgO1xuXG4gIF9wcm90by5jbGVhclJ1bGVzID0gZnVuY3Rpb24gY2xlYXJSdWxlcyhpZCkge1xuICAgIHRoaXMuZ2V0VGFnKCkuY2xlYXJHcm91cChnZXRHcm91cEZvcklkKGlkKSk7XG4gICAgdGhpcy5jbGVhck5hbWVzKGlkKTtcbiAgfVxuICAvKiogQ2xlYXJzIHRoZSBlbnRpcmUgdGFnIHdoaWNoIGRlbGV0ZXMgYWxsIHJ1bGVzIGJ1dCBub3QgaXRzIG5hbWVzICovXG4gIDtcblxuICBfcHJvdG8uY2xlYXJUYWcgPSBmdW5jdGlvbiBjbGVhclRhZygpIHtcbiAgICAvLyBOT1RFOiBUaGlzIGRvZXMgbm90IGNsZWFyIHRoZSBuYW1lcywgc2luY2UgaXQncyBvbmx5IHVzZWQgZHVyaW5nIFNTUlxuICAgIC8vIHNvIHRoYXQgd2UgY2FuIGNvbnRpbnVvdXNseSBvdXRwdXQgb25seSBuZXcgcnVsZXNcbiAgICB0aGlzLnRhZyA9IHVuZGVmaW5lZDtcbiAgfVxuICAvKiogT3V0cHV0cyB0aGUgY3VycmVudCBzaGVldCBhcyBhIENTUyBzdHJpbmcgd2l0aCBtYXJrZXJzIGZvciBTU1IgKi9cbiAgO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBvdXRwdXRTaGVldCh0aGlzKTtcbiAgfTtcblxuICByZXR1cm4gU3R5bGVTaGVldDtcbn0oKTtcblxuLy8gXG5cbi8qIGVzbGludC1kaXNhYmxlICovXG52YXIgU0VFRCA9IDUzODE7IC8vIFdoZW4gd2UgaGF2ZSBzZXBhcmF0ZSBzdHJpbmdzIGl0J3MgdXNlZnVsIHRvIHJ1biBhIHByb2dyZXNzaXZlXG4vLyB2ZXJzaW9uIG9mIGRqYjIgd2hlcmUgd2UgcHJldGVuZCB0aGF0IHdlJ3JlIHN0aWxsIGxvb3Bpbmcgb3ZlclxuLy8gdGhlIHNhbWUgc3RyaW5nXG5cbnZhciBwaGFzaCA9IGZ1bmN0aW9uIHBoYXNoKGgsIHgpIHtcbiAgdmFyIGkgPSB4Lmxlbmd0aDtcblxuICB3aGlsZSAoaSkge1xuICAgIGggPSBoICogMzMgXiB4LmNoYXJDb2RlQXQoLS1pKTtcbiAgfVxuXG4gIHJldHVybiBoO1xufTsgLy8gVGhpcyBpcyBhIGRqYjIgaGFzaGluZyBmdW5jdGlvblxuXG52YXIgaGFzaCA9IGZ1bmN0aW9uIGhhc2goeCkge1xuICByZXR1cm4gcGhhc2goU0VFRCwgeCk7XG59O1xuXG4vKipcbiAqIE1JVCBMaWNlbnNlXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE2IFN1bHRhbiBUYXJpbW9cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5IG9mXG4gKiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLFxuICogdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yXG4gKiBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG4gKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1NcbiAqIE9SIElNUExJRUQgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLFxuICogV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUlxuICogSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbiAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuZnVuY3Rpb24gaW5zZXJ0UnVsZVBsdWdpbiAoaW5zZXJ0UnVsZSkge1xuICB2YXIgZGVsaW1pdGVyID0gJy8qfCovJztcbiAgdmFyIG5lZWRsZSA9IGRlbGltaXRlciArIFwifVwiO1xuXG4gIGZ1bmN0aW9uIHRvU2hlZXQoYmxvY2spIHtcbiAgICBpZiAoYmxvY2spIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGluc2VydFJ1bGUoYmxvY2sgKyBcIn1cIik7XG4gICAgICB9IGNhdGNoIChlKSB7fVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBydWxlU2hlZXQoY29udGV4dCwgY29udGVudCwgc2VsZWN0b3JzLCBwYXJlbnRzLCBsaW5lLCBjb2x1bW4sIGxlbmd0aCwgbnMsIGRlcHRoLCBhdCkge1xuICAgIHN3aXRjaCAoY29udGV4dCkge1xuICAgICAgLy8gcHJvcGVydHlcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgLy8gQGltcG9ydFxuICAgICAgICBpZiAoZGVwdGggPT09IDAgJiYgY29udGVudC5jaGFyQ29kZUF0KDApID09PSA2NCkgcmV0dXJuIGluc2VydFJ1bGUoY29udGVudCArIFwiO1wiKSwgJyc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgLy8gc2VsZWN0b3JcblxuICAgICAgY2FzZSAyOlxuICAgICAgICBpZiAobnMgPT09IDApIHJldHVybiBjb250ZW50ICsgZGVsaW1pdGVyO1xuICAgICAgICBicmVhaztcbiAgICAgIC8vIGF0LXJ1bGVcblxuICAgICAgY2FzZSAzOlxuICAgICAgICBzd2l0Y2ggKG5zKSB7XG4gICAgICAgICAgLy8gQGZvbnQtZmFjZSwgQHBhZ2VcbiAgICAgICAgICBjYXNlIDEwMjpcbiAgICAgICAgICBjYXNlIDExMjpcbiAgICAgICAgICAgIHJldHVybiBpbnNlcnRSdWxlKHNlbGVjdG9yc1swXSArIGNvbnRlbnQpLCAnJztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gY29udGVudCArIChhdCA9PT0gMCA/IGRlbGltaXRlciA6ICcnKTtcbiAgICAgICAgfVxuXG4gICAgICBjYXNlIC0yOlxuICAgICAgICBjb250ZW50LnNwbGl0KG5lZWRsZSkuZm9yRWFjaCh0b1NoZWV0KTtcbiAgICB9XG4gIH07XG59XG5cbnZhciBDT01NRU5UX1JFR0VYID0gL15cXHMqXFwvXFwvLiokL2dtO1xuZnVuY3Rpb24gY3JlYXRlU3R5bGlzSW5zdGFuY2UoX3RlbXApIHtcbiAgdmFyIF9yZWYgPSBfdGVtcCA9PT0gdm9pZCAwID8gRU1QVFlfT0JKRUNUIDogX3RlbXAsXG4gICAgICBfcmVmJG9wdGlvbnMgPSBfcmVmLm9wdGlvbnMsXG4gICAgICBvcHRpb25zID0gX3JlZiRvcHRpb25zID09PSB2b2lkIDAgPyBFTVBUWV9PQkpFQ1QgOiBfcmVmJG9wdGlvbnMsXG4gICAgICBfcmVmJHBsdWdpbnMgPSBfcmVmLnBsdWdpbnMsXG4gICAgICBwbHVnaW5zID0gX3JlZiRwbHVnaW5zID09PSB2b2lkIDAgPyBFTVBUWV9BUlJBWSA6IF9yZWYkcGx1Z2lucztcblxuICB2YXIgc3R5bGlzID0gbmV3IFN0eWxpcyhvcHRpb25zKTsgLy8gV3JhcCBgaW5zZXJ0UnVsZVBsdWdpbiB0byBidWlsZCBhIGxpc3Qgb2YgcnVsZXMsXG4gIC8vIGFuZCB0aGVuIG1ha2Ugb3VyIG93biBwbHVnaW4gdG8gcmV0dXJuIHRoZSBydWxlcy4gVGhpc1xuICAvLyBtYWtlcyBpdCBlYXNpZXIgdG8gaG9vayBpbnRvIHRoZSBleGlzdGluZyBTU1IgYXJjaGl0ZWN0dXJlXG5cbiAgdmFyIHBhcnNpbmdSdWxlcyA9IFtdOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cblxuICB2YXIgcmV0dXJuUnVsZXNQbHVnaW4gPSBmdW5jdGlvbiByZXR1cm5SdWxlc1BsdWdpbihjb250ZXh0KSB7XG4gICAgaWYgKGNvbnRleHQgPT09IC0yKSB7XG4gICAgICB2YXIgcGFyc2VkUnVsZXMgPSBwYXJzaW5nUnVsZXM7XG4gICAgICBwYXJzaW5nUnVsZXMgPSBbXTtcbiAgICAgIHJldHVybiBwYXJzZWRSdWxlcztcbiAgICB9XG4gIH07XG5cbiAgdmFyIHBhcnNlUnVsZXNQbHVnaW4gPSBpbnNlcnRSdWxlUGx1Z2luKGZ1bmN0aW9uIChydWxlKSB7XG4gICAgcGFyc2luZ1J1bGVzLnB1c2gocnVsZSk7XG4gIH0pO1xuXG4gIHZhciBfY29tcG9uZW50SWQ7XG5cbiAgdmFyIF9zZWxlY3RvcjtcblxuICB2YXIgX3NlbGVjdG9yUmVnZXhwO1xuXG4gIHZhciBzZWxmUmVmZXJlbmNlUmVwbGFjZXIgPSBmdW5jdGlvbiBzZWxmUmVmZXJlbmNlUmVwbGFjZXIobWF0Y2gsIG9mZnNldCwgc3RyaW5nKSB7XG4gICAgaWYgKCAvLyB0aGUgZmlyc3Qgc2VsZi1yZWYgaXMgYWx3YXlzIHVudG91Y2hlZFxuICAgIG9mZnNldCA+IDAgJiYgLy8gdGhlcmUgc2hvdWxkIGJlIGF0IGxlYXN0IHR3byBzZWxmLXJlZnMgdG8gZG8gYSByZXBsYWNlbWVudCAoLmIgPiAuYilcbiAgICBzdHJpbmcuc2xpY2UoMCwgb2Zmc2V0KS5pbmRleE9mKF9zZWxlY3RvcikgIT09IC0xICYmIC8vIG5vIGNvbnNlY3V0aXZlIHNlbGYgcmVmcyAoLmIuYik7IHRoYXQgaXMgYSBwcmVjZWRlbmNlIGJvb3N0IGFuZCB0cmVhdGVkIGRpZmZlcmVudGx5XG4gICAgc3RyaW5nLnNsaWNlKG9mZnNldCAtIF9zZWxlY3Rvci5sZW5ndGgsIG9mZnNldCkgIT09IF9zZWxlY3Rvcikge1xuICAgICAgcmV0dXJuIFwiLlwiICsgX2NvbXBvbmVudElkO1xuICAgIH1cblxuICAgIHJldHVybiBtYXRjaDtcbiAgfTtcbiAgLyoqXG4gICAqIFdoZW4gd3JpdGluZyBhIHN0eWxlIGxpa2VcbiAgICpcbiAgICogJiArICYge1xuICAgKiAgIGNvbG9yOiByZWQ7XG4gICAqIH1cbiAgICpcbiAgICogVGhlIHNlY29uZCBhbXBlcnNhbmQgc2hvdWxkIGJlIGEgcmVmZXJlbmNlIHRvIHRoZSBzdGF0aWMgY29tcG9uZW50IGNsYXNzLiBzdHlsaXNcbiAgICogaGFzIG5vIGtub3dsZWRnZSBvZiBzdGF0aWMgY2xhc3Mgc28gd2UgaGF2ZSB0byBpbnRlbGxpZ2VudGx5IHJlcGxhY2UgdGhlIGJhc2Ugc2VsZWN0b3IuXG4gICAqXG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS90aHlzdWx0YW4vc3R5bGlzLmpzI3BsdWdpbnMgPC0gbW9yZSBpbmZvIGFib3V0IHRoZSBjb250ZXh0IHBoYXNlIHZhbHVlc1xuICAgKiBcIjJcIiBtZWFucyB0aGlzIHBsdWdpbiBpcyB0YWtpbmcgZWZmZWN0IGF0IHRoZSB2ZXJ5IGVuZCBhZnRlciBhbGwgb3RoZXIgcHJvY2Vzc2luZyBpcyBjb21wbGV0ZVxuICAgKi9cblxuXG4gIHZhciBzZWxmUmVmZXJlbmNlUmVwbGFjZW1lbnRQbHVnaW4gPSBmdW5jdGlvbiBzZWxmUmVmZXJlbmNlUmVwbGFjZW1lbnRQbHVnaW4oY29udGV4dCwgXywgc2VsZWN0b3JzKSB7XG4gICAgaWYgKGNvbnRleHQgPT09IDIgJiYgc2VsZWN0b3JzLmxlbmd0aCAmJiBzZWxlY3RvcnNbMF0ubGFzdEluZGV4T2YoX3NlbGVjdG9yKSA+IDApIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgc2VsZWN0b3JzWzBdID0gc2VsZWN0b3JzWzBdLnJlcGxhY2UoX3NlbGVjdG9yUmVnZXhwLCBzZWxmUmVmZXJlbmNlUmVwbGFjZXIpO1xuICAgIH1cbiAgfTtcblxuICBzdHlsaXMudXNlKFtdLmNvbmNhdChwbHVnaW5zLCBbc2VsZlJlZmVyZW5jZVJlcGxhY2VtZW50UGx1Z2luLCBwYXJzZVJ1bGVzUGx1Z2luLCByZXR1cm5SdWxlc1BsdWdpbl0pKTtcblxuICBmdW5jdGlvbiBzdHJpbmdpZnlSdWxlcyhjc3MsIHNlbGVjdG9yLCBwcmVmaXgsIGNvbXBvbmVudElkKSB7XG4gICAgaWYgKGNvbXBvbmVudElkID09PSB2b2lkIDApIHtcbiAgICAgIGNvbXBvbmVudElkID0gJyYnO1xuICAgIH1cblxuICAgIHZhciBmbGF0Q1NTID0gY3NzLnJlcGxhY2UoQ09NTUVOVF9SRUdFWCwgJycpO1xuICAgIHZhciBjc3NTdHIgPSBzZWxlY3RvciAmJiBwcmVmaXggPyBwcmVmaXggKyBcIiBcIiArIHNlbGVjdG9yICsgXCIgeyBcIiArIGZsYXRDU1MgKyBcIiB9XCIgOiBmbGF0Q1NTOyAvLyBzdHlsaXMgaGFzIG5vIGNvbmNlcHQgb2Ygc3RhdGUgdG8gYmUgcGFzc2VkIHRvIHBsdWdpbnNcbiAgICAvLyBidXQgc2luY2UgSlMgaXMgc2luZ2xlPXRocmVhZGVkLCB3ZSBjYW4gcmVseSBvbiB0aGF0IHRvIGVuc3VyZVxuICAgIC8vIHRoZXNlIHByb3BlcnRpZXMgc3RheSBpbiBzeW5jIHdpdGggdGhlIGN1cnJlbnQgc3R5bGlzIHJ1blxuXG4gICAgX2NvbXBvbmVudElkID0gY29tcG9uZW50SWQ7XG4gICAgX3NlbGVjdG9yID0gc2VsZWN0b3I7XG4gICAgX3NlbGVjdG9yUmVnZXhwID0gbmV3IFJlZ0V4cChcIlxcXFxcIiArIF9zZWxlY3RvciArIFwiXFxcXGJcIiwgJ2cnKTtcbiAgICByZXR1cm4gc3R5bGlzKHByZWZpeCB8fCAhc2VsZWN0b3IgPyAnJyA6IHNlbGVjdG9yLCBjc3NTdHIpO1xuICB9XG5cbiAgc3RyaW5naWZ5UnVsZXMuaGFzaCA9IHBsdWdpbnMubGVuZ3RoID8gcGx1Z2lucy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGx1Z2luKSB7XG4gICAgaWYgKCFwbHVnaW4ubmFtZSkge1xuICAgICAgdGhyb3dTdHlsZWRDb21wb25lbnRzRXJyb3IoMTUpO1xuICAgIH1cblxuICAgIHJldHVybiBwaGFzaChhY2MsIHBsdWdpbi5uYW1lKTtcbiAgfSwgU0VFRCkudG9TdHJpbmcoKSA6ICcnO1xuICByZXR1cm4gc3RyaW5naWZ5UnVsZXM7XG59XG5cbi8vIFxudmFyIFN0eWxlU2hlZXRDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCgpO1xudmFyIFN0eWxlU2hlZXRDb25zdW1lciA9IFN0eWxlU2hlZXRDb250ZXh0LkNvbnN1bWVyO1xudmFyIFN0eWxpc0NvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KCk7XG52YXIgU3R5bGlzQ29uc3VtZXIgPSBTdHlsaXNDb250ZXh0LkNvbnN1bWVyO1xudmFyIG1hc3RlclNoZWV0ID0gbmV3IFN0eWxlU2hlZXQoKTtcbnZhciBtYXN0ZXJTdHlsaXMgPSBjcmVhdGVTdHlsaXNJbnN0YW5jZSgpO1xuZnVuY3Rpb24gdXNlU3R5bGVTaGVldCgpIHtcbiAgcmV0dXJuIHVzZUNvbnRleHQoU3R5bGVTaGVldENvbnRleHQpIHx8IG1hc3RlclNoZWV0O1xufVxuZnVuY3Rpb24gdXNlU3R5bGlzKCkge1xuICByZXR1cm4gdXNlQ29udGV4dChTdHlsaXNDb250ZXh0KSB8fCBtYXN0ZXJTdHlsaXM7XG59XG5mdW5jdGlvbiBTdHlsZVNoZWV0TWFuYWdlcihwcm9wcykge1xuICB2YXIgX3VzZVN0YXRlID0gdXNlU3RhdGUocHJvcHMuc3R5bGlzUGx1Z2lucyksXG4gICAgICBwbHVnaW5zID0gX3VzZVN0YXRlWzBdLFxuICAgICAgc2V0UGx1Z2lucyA9IF91c2VTdGF0ZVsxXTtcblxuICB2YXIgY29udGV4dFN0eWxlU2hlZXQgPSB1c2VTdHlsZVNoZWV0KCk7XG4gIHZhciBzdHlsZVNoZWV0ID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNoZWV0ID0gY29udGV4dFN0eWxlU2hlZXQ7XG5cbiAgICBpZiAocHJvcHMuc2hlZXQpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICAgICAgc2hlZXQgPSBwcm9wcy5zaGVldDtcbiAgICB9IGVsc2UgaWYgKHByb3BzLnRhcmdldCkge1xuICAgICAgc2hlZXQgPSBzaGVldC5yZWNvbnN0cnVjdFdpdGhPcHRpb25zKHtcbiAgICAgICAgdGFyZ2V0OiBwcm9wcy50YXJnZXRcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChwcm9wcy5kaXNhYmxlQ1NTT01JbmplY3Rpb24pIHtcbiAgICAgIHNoZWV0ID0gc2hlZXQucmVjb25zdHJ1Y3RXaXRoT3B0aW9ucyh7XG4gICAgICAgIHVzZUNTU09NSW5qZWN0aW9uOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNoZWV0O1xuICB9LCBbcHJvcHMuZGlzYWJsZUNTU09NSW5qZWN0aW9uLCBwcm9wcy5zaGVldCwgcHJvcHMudGFyZ2V0XSk7XG4gIHZhciBzdHlsaXMgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY3JlYXRlU3R5bGlzSW5zdGFuY2Uoe1xuICAgICAgb3B0aW9uczoge1xuICAgICAgICBwcmVmaXg6ICFwcm9wcy5kaXNhYmxlVmVuZG9yUHJlZml4ZXNcbiAgICAgIH0sXG4gICAgICBwbHVnaW5zOiBwbHVnaW5zXG4gICAgfSk7XG4gIH0sIFtwcm9wcy5kaXNhYmxlVmVuZG9yUHJlZml4ZXMsIHBsdWdpbnNdKTtcbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXNoYWxsb3dlcXVhbChwbHVnaW5zLCBwcm9wcy5zdHlsaXNQbHVnaW5zKSkgc2V0UGx1Z2lucyhwcm9wcy5zdHlsaXNQbHVnaW5zKTtcbiAgfSwgW3Byb3BzLnN0eWxpc1BsdWdpbnNdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFN0eWxlU2hlZXRDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHN0eWxlU2hlZXRcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoU3R5bGlzQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBzdHlsaXNcbiAgfSwgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IFJlYWN0LkNoaWxkcmVuLm9ubHkocHJvcHMuY2hpbGRyZW4pIDogcHJvcHMuY2hpbGRyZW4pKTtcbn1cblxuLy8gXG5cbnZhciBLZXlmcmFtZXMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBLZXlmcmFtZXMobmFtZSwgc3RyaW5naWZ5QXJncykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLmluamVjdCA9IGZ1bmN0aW9uIChzdHlsZVNoZWV0KSB7XG4gICAgICBpZiAoIXN0eWxlU2hlZXQuaGFzTmFtZUZvcklkKF90aGlzLmlkLCBfdGhpcy5uYW1lKSkge1xuICAgICAgICBzdHlsZVNoZWV0Lmluc2VydFJ1bGVzKF90aGlzLmlkLCBfdGhpcy5uYW1lLCBtYXN0ZXJTdHlsaXMuYXBwbHkodm9pZCAwLCBfdGhpcy5zdHJpbmdpZnlBcmdzKSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhyb3dTdHlsZWRDb21wb25lbnRzRXJyb3IoMTIsIFN0cmluZyhfdGhpcy5uYW1lKSk7XG4gICAgfTtcblxuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5pZCA9IFwic2Mta2V5ZnJhbWVzLVwiICsgbmFtZTtcbiAgICB0aGlzLnN0cmluZ2lmeUFyZ3MgPSBzdHJpbmdpZnlBcmdzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEtleWZyYW1lcy5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmdldE5hbWUgPSBmdW5jdGlvbiBnZXROYW1lKCkge1xuICAgIHJldHVybiB0aGlzLm5hbWU7XG4gIH07XG5cbiAgcmV0dXJuIEtleWZyYW1lcztcbn0oKTtcblxuLy8gXG5cbi8qKlxuICogaW5saW5lZCB2ZXJzaW9uIG9mXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmJqcy9ibG9iL21hc3Rlci9wYWNrYWdlcy9mYmpzL3NyYy9jb3JlL2h5cGhlbmF0ZVN0eWxlTmFtZS5qc1xuICovXG52YXIgdXBwZXJjYXNlUGF0dGVybiA9IC8oW0EtWl0pL2c7XG52YXIgbXNQYXR0ZXJuID0gL15tcy0vO1xuLyoqXG4gKiBIeXBoZW5hdGVzIGEgY2FtZWxjYXNlZCBDU1MgcHJvcGVydHkgbmFtZSwgZm9yIGV4YW1wbGU6XG4gKlxuICogICA+IGh5cGhlbmF0ZVN0eWxlTmFtZSgnYmFja2dyb3VuZENvbG9yJylcbiAqICAgPCBcImJhY2tncm91bmQtY29sb3JcIlxuICogICA+IGh5cGhlbmF0ZVN0eWxlTmFtZSgnTW96VHJhbnNpdGlvbicpXG4gKiAgIDwgXCItbW96LXRyYW5zaXRpb25cIlxuICogICA+IGh5cGhlbmF0ZVN0eWxlTmFtZSgnbXNUcmFuc2l0aW9uJylcbiAqICAgPCBcIi1tcy10cmFuc2l0aW9uXCJcbiAqXG4gKiBBcyBNb2Rlcm5penIgc3VnZ2VzdHMgKGh0dHA6Ly9tb2Rlcm5penIuY29tL2RvY3MvI3ByZWZpeGVkKSwgYW4gYG1zYCBwcmVmaXhcbiAqIGlzIGNvbnZlcnRlZCB0byBgLW1zLWAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5cbmZ1bmN0aW9uIGh5cGhlbmF0ZVN0eWxlTmFtZShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKHVwcGVyY2FzZVBhdHRlcm4sICctJDEnKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UobXNQYXR0ZXJuLCAnLW1zLScpO1xufVxuXG4vLyBcblxuZnVuY3Rpb24gYWRkVW5pdElmTmVlZGVkKG5hbWUsIHZhbHVlKSB7XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbWlsYWphY2svZXNsaW50LXBsdWdpbi1mbG93dHlwZS1lcnJvcnMvaXNzdWVzLzEzM1xuICAvLyAkRmxvd0ZpeE1lXG4gIGlmICh2YWx1ZSA9PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nIHx8IHZhbHVlID09PSAnJykge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIHZhbHVlICE9PSAwICYmICEobmFtZSBpbiB1bml0bGVzcykpIHtcbiAgICByZXR1cm4gdmFsdWUgKyBcInB4XCI7IC8vIFByZXN1bWVzIGltcGxpY2l0ICdweCcgc3VmZml4IGZvciB1bml0bGVzcyBudW1iZXJzXG4gIH1cblxuICByZXR1cm4gU3RyaW5nKHZhbHVlKS50cmltKCk7XG59XG5cbi8vIFxuLyoqXG4gKiBJdCdzIGZhbHNpc2ggbm90IGZhbHN5IGJlY2F1c2UgMCBpcyBhbGxvd2VkLlxuICovXG5cbnZhciBpc0ZhbHNpc2ggPSBmdW5jdGlvbiBpc0ZhbHNpc2goY2h1bmspIHtcbiAgcmV0dXJuIGNodW5rID09PSB1bmRlZmluZWQgfHwgY2h1bmsgPT09IG51bGwgfHwgY2h1bmsgPT09IGZhbHNlIHx8IGNodW5rID09PSAnJztcbn07XG5cbnZhciBvYmpUb0Nzc0FycmF5ID0gZnVuY3Rpb24gb2JqVG9Dc3NBcnJheShvYmosIHByZXZLZXkpIHtcbiAgdmFyIHJ1bGVzID0gW107XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoIWlzRmFsc2lzaChvYmpba2V5XSkpIHtcbiAgICAgIGlmIChpc1BsYWluT2JqZWN0KG9ialtrZXldKSkge1xuICAgICAgICBydWxlcy5wdXNoLmFwcGx5KHJ1bGVzLCBvYmpUb0Nzc0FycmF5KG9ialtrZXldLCBrZXkpKTtcbiAgICAgICAgcmV0dXJuIHJ1bGVzO1xuICAgICAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uKG9ialtrZXldKSkge1xuICAgICAgICBydWxlcy5wdXNoKGh5cGhlbmF0ZVN0eWxlTmFtZShrZXkpICsgXCI6XCIsIG9ialtrZXldLCAnOycpO1xuICAgICAgICByZXR1cm4gcnVsZXM7XG4gICAgICB9XG5cbiAgICAgIHJ1bGVzLnB1c2goaHlwaGVuYXRlU3R5bGVOYW1lKGtleSkgKyBcIjogXCIgKyBhZGRVbml0SWZOZWVkZWQoa2V5LCBvYmpba2V5XSkgKyBcIjtcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJ1bGVzO1xuICB9KTtcbiAgcmV0dXJuIHByZXZLZXkgPyBbcHJldktleSArIFwiIHtcIl0uY29uY2F0KHJ1bGVzLCBbJ30nXSkgOiBydWxlcztcbn07XG5mdW5jdGlvbiBmbGF0dGVuKGNodW5rLCBleGVjdXRpb25Db250ZXh0LCBzdHlsZVNoZWV0KSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGNodW5rKSkge1xuICAgIHZhciBydWxlU2V0ID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gY2h1bmsubGVuZ3RoLCByZXN1bHQ7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgcmVzdWx0ID0gZmxhdHRlbihjaHVua1tpXSwgZXhlY3V0aW9uQ29udGV4dCwgc3R5bGVTaGVldCk7XG4gICAgICBpZiAocmVzdWx0ID09PSAnJykgY29udGludWU7ZWxzZSBpZiAoQXJyYXkuaXNBcnJheShyZXN1bHQpKSBydWxlU2V0LnB1c2guYXBwbHkocnVsZVNldCwgcmVzdWx0KTtlbHNlIHJ1bGVTZXQucHVzaChyZXN1bHQpO1xuICAgIH1cblxuICAgIHJldHVybiBydWxlU2V0O1xuICB9XG5cbiAgaWYgKGlzRmFsc2lzaChjaHVuaykpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbiAgLyogSGFuZGxlIG90aGVyIGNvbXBvbmVudHMgKi9cblxuXG4gIGlmIChpc1N0eWxlZENvbXBvbmVudChjaHVuaykpIHtcbiAgICByZXR1cm4gXCIuXCIgKyBjaHVuay5zdHlsZWRDb21wb25lbnRJZDtcbiAgfVxuICAvKiBFaXRoZXIgZXhlY3V0ZSBvciBkZWZlciB0aGUgZnVuY3Rpb24gKi9cblxuXG4gIGlmIChpc0Z1bmN0aW9uKGNodW5rKSkge1xuICAgIGlmIChpc1N0YXRlbGVzc0Z1bmN0aW9uKGNodW5rKSAmJiBleGVjdXRpb25Db250ZXh0KSB7XG4gICAgICB2YXIgX3Jlc3VsdCA9IGNodW5rKGV4ZWN1dGlvbkNvbnRleHQpO1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpc0VsZW1lbnQoX3Jlc3VsdCkpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS53YXJuKGdldENvbXBvbmVudE5hbWUoY2h1bmspICsgXCIgaXMgbm90IGEgc3R5bGVkIGNvbXBvbmVudCBhbmQgY2Fubm90IGJlIHJlZmVycmVkIHRvIHZpYSBjb21wb25lbnQgc2VsZWN0b3IuIFNlZSBodHRwczovL3d3dy5zdHlsZWQtY29tcG9uZW50cy5jb20vZG9jcy9hZHZhbmNlZCNyZWZlcnJpbmctdG8tb3RoZXItY29tcG9uZW50cyBmb3IgbW9yZSBkZXRhaWxzLlwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZsYXR0ZW4oX3Jlc3VsdCwgZXhlY3V0aW9uQ29udGV4dCwgc3R5bGVTaGVldCk7XG4gICAgfSBlbHNlIHJldHVybiBjaHVuaztcbiAgfVxuXG4gIGlmIChjaHVuayBpbnN0YW5jZW9mIEtleWZyYW1lcykge1xuICAgIGlmIChzdHlsZVNoZWV0KSB7XG4gICAgICBjaHVuay5pbmplY3Qoc3R5bGVTaGVldCk7XG4gICAgICByZXR1cm4gY2h1bmsuZ2V0TmFtZSgpO1xuICAgIH0gZWxzZSByZXR1cm4gY2h1bms7XG4gIH1cbiAgLyogSGFuZGxlIG9iamVjdHMgKi9cblxuXG4gIHJldHVybiBpc1BsYWluT2JqZWN0KGNodW5rKSA/IG9ialRvQ3NzQXJyYXkoY2h1bmspIDogY2h1bmsudG9TdHJpbmcoKTtcbn1cblxuLy8gXG5mdW5jdGlvbiBjc3Moc3R5bGVzKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBpbnRlcnBvbGF0aW9ucyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgaW50ZXJwb2xhdGlvbnNbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgaWYgKGlzRnVuY3Rpb24oc3R5bGVzKSB8fCBpc1BsYWluT2JqZWN0KHN0eWxlcykpIHtcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgcmV0dXJuIGZsYXR0ZW4oaW50ZXJsZWF2ZShFTVBUWV9BUlJBWSwgW3N0eWxlc10uY29uY2F0KGludGVycG9sYXRpb25zKSkpO1xuICB9XG5cbiAgaWYgKGludGVycG9sYXRpb25zLmxlbmd0aCA9PT0gMCAmJiBzdHlsZXMubGVuZ3RoID09PSAxICYmIHR5cGVvZiBzdHlsZXNbMF0gPT09IFwic3RyaW5nXCIpIHtcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgcmV0dXJuIHN0eWxlcztcbiAgfSAvLyAkRmxvd0ZpeE1lXG5cblxuICByZXR1cm4gZmxhdHRlbihpbnRlcmxlYXZlKHN0eWxlcywgaW50ZXJwb2xhdGlvbnMpKTtcbn1cblxuZnVuY3Rpb24gY29uc3RydWN0V2l0aE9wdGlvbnMoY29tcG9uZW50Q29uc3RydWN0b3IsIHRhZywgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IEVNUFRZX09CSkVDVDtcbiAgfVxuXG4gIGlmICghaXNWYWxpZEVsZW1lbnRUeXBlKHRhZykpIHtcbiAgICByZXR1cm4gdGhyb3dTdHlsZWRDb21wb25lbnRzRXJyb3IoMSwgU3RyaW5nKHRhZykpO1xuICB9XG4gIC8qIFRoaXMgaXMgY2FsbGFibGUgZGlyZWN0bHkgYXMgYSB0ZW1wbGF0ZSBmdW5jdGlvbiAqL1xuICAvLyAkRmxvd0ZpeE1lOiBOb3QgdHlwZWQgdG8gYXZvaWQgZGVzdHJ1Y3R1cmluZyBhcmd1bWVudHNcblxuXG4gIHZhciB0ZW1wbGF0ZUZ1bmN0aW9uID0gZnVuY3Rpb24gdGVtcGxhdGVGdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29tcG9uZW50Q29uc3RydWN0b3IodGFnLCBvcHRpb25zLCBjc3MuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpKTtcbiAgfTtcbiAgLyogSWYgY29uZmlnIG1ldGhvZHMgYXJlIGNhbGxlZCwgd3JhcCB1cCBhIG5ldyB0ZW1wbGF0ZSBmdW5jdGlvbiBhbmQgbWVyZ2Ugb3B0aW9ucyAqL1xuXG5cbiAgdGVtcGxhdGVGdW5jdGlvbi53aXRoQ29uZmlnID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICAgIHJldHVybiBjb25zdHJ1Y3RXaXRoT3B0aW9ucyhjb21wb25lbnRDb25zdHJ1Y3RvciwgdGFnLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge30sIGNvbmZpZykpO1xuICB9O1xuICAvKiBNb2RpZnkvaW5qZWN0IG5ldyBwcm9wcyBhdCBydW50aW1lICovXG5cblxuICB0ZW1wbGF0ZUZ1bmN0aW9uLmF0dHJzID0gZnVuY3Rpb24gKGF0dHJzKSB7XG4gICAgcmV0dXJuIGNvbnN0cnVjdFdpdGhPcHRpb25zKGNvbXBvbmVudENvbnN0cnVjdG9yLCB0YWcsIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBhdHRyczogQXJyYXkucHJvdG90eXBlLmNvbmNhdChvcHRpb25zLmF0dHJzLCBhdHRycykuZmlsdGVyKEJvb2xlYW4pXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiB0ZW1wbGF0ZUZ1bmN0aW9uO1xufVxuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuXG4vKipcbiAgbWl4aW4tZGVlcDsgaHR0cHM6Ly9naXRodWIuY29tL2pvbnNjaGxpbmtlcnQvbWl4aW4tZGVlcFxuICBJbmxpbmVkIHN1Y2ggdGhhdCBpdCB3aWxsIGJlIGNvbnNpc3RlbnRseSB0cmFuc3BpbGVkIHRvIGFuIElFLWNvbXBhdGlibGUgc3ludGF4LlxuXG4gIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuXG4gIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBKb24gU2NobGlua2VydC5cblxuICBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG4gIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG4gIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAgVEhFIFNPRlRXQVJFLlxuKi9cbnZhciBpc09iamVjdCA9IGZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgdmFsID09PSAnb2JqZWN0JyAmJiB2YWwgIT09IG51bGwgJiYgIUFycmF5LmlzQXJyYXkodmFsKTtcbn07XG5cbnZhciBpc1ZhbGlkS2V5ID0gZnVuY3Rpb24gaXNWYWxpZEtleShrZXkpIHtcbiAgcmV0dXJuIGtleSAhPT0gJ19fcHJvdG9fXycgJiYga2V5ICE9PSAnY29uc3RydWN0b3InICYmIGtleSAhPT0gJ3Byb3RvdHlwZSc7XG59O1xuXG5mdW5jdGlvbiBtaXhpbih0YXJnZXQsIHZhbCwga2V5KSB7XG4gIHZhciBvYmogPSB0YXJnZXRba2V5XTtcblxuICBpZiAoaXNPYmplY3QodmFsKSAmJiBpc09iamVjdChvYmopKSB7XG4gICAgbWl4aW5EZWVwKG9iaiwgdmFsKTtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXRba2V5XSA9IHZhbDtcbiAgfVxufVxuXG5mdW5jdGlvbiBtaXhpbkRlZXAodGFyZ2V0KSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCByZXN0ID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICByZXN0W19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIGZvciAodmFyIF9pID0gMCwgX3Jlc3QgPSByZXN0OyBfaSA8IF9yZXN0Lmxlbmd0aDsgX2krKykge1xuICAgIHZhciBvYmogPSBfcmVzdFtfaV07XG5cbiAgICBpZiAoaXNPYmplY3Qob2JqKSkge1xuICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgICBpZiAoaXNWYWxpZEtleShrZXkpKSB7XG4gICAgICAgICAgbWl4aW4odGFyZ2V0LCBvYmpba2V5XSwga2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbi8vIFxuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1iaXR3aXNlICovXG52YXIgQURfUkVQTEFDRVJfUiA9IC8oYSkoZCkvZ2k7XG4vKiBUaGlzIGlzIHRoZSBcImNhcGFjaXR5XCIgb2Ygb3VyIGFscGhhYmV0IGkuZS4gMngyNiBmb3IgYWxsIGxldHRlcnMgcGx1cyB0aGVpciBjYXBpdGFsaXNlZFxuICogY291bnRlcnBhcnRzICovXG5cbnZhciBjaGFyc0xlbmd0aCA9IDUyO1xuLyogc3RhcnQgYXQgNzUgZm9yICdhJyB1bnRpbCAneicgKDI1KSBhbmQgdGhlbiBzdGFydCBhdCA2NSBmb3IgY2FwaXRhbGlzZWQgbGV0dGVycyAqL1xuXG52YXIgZ2V0QWxwaGFiZXRpY0NoYXIgPSBmdW5jdGlvbiBnZXRBbHBoYWJldGljQ2hhcihjb2RlKSB7XG4gIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUgKyAoY29kZSA+IDI1ID8gMzkgOiA5NykpO1xufTtcbi8qIGlucHV0IGEgbnVtYmVyLCB1c3VhbGx5IGEgaGFzaCBhbmQgY29udmVydCBpdCB0byBiYXNlLTUyICovXG5cblxuZnVuY3Rpb24gZ2VuZXJhdGVBbHBoYWJldGljTmFtZShjb2RlKSB7XG4gIHZhciBuYW1lID0gJyc7XG4gIHZhciB4O1xuICAvKiBnZXQgYSBjaGFyIGFuZCBkaXZpZGUgYnkgYWxwaGFiZXQtbGVuZ3RoICovXG5cbiAgZm9yICh4ID0gTWF0aC5hYnMoY29kZSk7IHggPiBjaGFyc0xlbmd0aDsgeCA9IHggLyBjaGFyc0xlbmd0aCB8IDApIHtcbiAgICBuYW1lID0gZ2V0QWxwaGFiZXRpY0NoYXIoeCAlIGNoYXJzTGVuZ3RoKSArIG5hbWU7XG4gIH1cblxuICByZXR1cm4gKGdldEFscGhhYmV0aWNDaGFyKHggJSBjaGFyc0xlbmd0aCkgKyBuYW1lKS5yZXBsYWNlKEFEX1JFUExBQ0VSX1IsICckMS0kMicpO1xufVxuXG4vLyBcbmZ1bmN0aW9uIGlzU3RhdGljUnVsZXMocnVsZXMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBydWxlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHZhciBydWxlID0gcnVsZXNbaV07XG5cbiAgICBpZiAoaXNGdW5jdGlvbihydWxlKSAmJiAhaXNTdHlsZWRDb21wb25lbnQocnVsZSkpIHtcbiAgICAgIC8vIGZ1bmN0aW9ucyBhcmUgYWxsb3dlZCB0byBiZSBzdGF0aWMgaWYgdGhleSdyZSBqdXN0IGJlaW5nXG4gICAgICAvLyB1c2VkIHRvIGdldCB0aGUgY2xhc3NuYW1lIG9mIGEgbmVzdGVkIHN0eWxlZCBjb21wb25lbnRcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLy8gXG4vKlxuIENvbXBvbmVudFN0eWxlIGlzIGFsbCB0aGUgQ1NTLXNwZWNpZmljIHN0dWZmLCBub3RcbiB0aGUgUmVhY3Qtc3BlY2lmaWMgc3R1ZmYuXG4gKi9cblxudmFyIENvbXBvbmVudFN0eWxlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ29tcG9uZW50U3R5bGUocnVsZXMsIGNvbXBvbmVudElkKSB7XG4gICAgdGhpcy5ydWxlcyA9IHJ1bGVzO1xuICAgIHRoaXMuc3RhdGljUnVsZXNJZCA9ICcnO1xuICAgIHRoaXMuaXNTdGF0aWMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nICYmIGlzU3RhdGljUnVsZXMocnVsZXMpO1xuICAgIHRoaXMuY29tcG9uZW50SWQgPSBjb21wb25lbnRJZDtcbiAgICB0aGlzLmJhc2VIYXNoID0gaGFzaChjb21wb25lbnRJZCk7IC8vIE5PVEU6IFRoaXMgcmVnaXN0ZXJzIHRoZSBjb21wb25lbnRJZCwgd2hpY2ggZW5zdXJlcyBhIGNvbnNpc3RlbnQgb3JkZXJcbiAgICAvLyBmb3IgdGhpcyBjb21wb25lbnQncyBzdHlsZXMgY29tcGFyZWQgdG8gb3RoZXJzXG5cbiAgICBTdHlsZVNoZWV0LnJlZ2lzdGVySWQoY29tcG9uZW50SWQpO1xuICB9XG4gIC8qXG4gICAqIEZsYXR0ZW5zIGEgcnVsZSBzZXQgaW50byB2YWxpZCBDU1NcbiAgICogSGFzaGVzIGl0LCB3cmFwcyB0aGUgd2hvbGUgY2h1bmsgaW4gYSAuaGFzaDEyMzQge31cbiAgICogUmV0dXJucyB0aGUgaGFzaCB0byBiZSBpbmplY3RlZCBvbiByZW5kZXIoKVxuICAgKiAqL1xuXG5cbiAgdmFyIF9wcm90byA9IENvbXBvbmVudFN0eWxlLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXMgPSBmdW5jdGlvbiBnZW5lcmF0ZUFuZEluamVjdFN0eWxlcyhleGVjdXRpb25Db250ZXh0LCBzdHlsZVNoZWV0LCBzdHlsaXMpIHtcbiAgICB2YXIgY29tcG9uZW50SWQgPSB0aGlzLmNvbXBvbmVudElkOyAvLyBmb3JjZSBkeW5hbWljIGNsYXNzbmFtZXMgaWYgdXNlci1zdXBwbGllZCBzdHlsaXMgcGx1Z2lucyBhcmUgaW4gdXNlXG5cbiAgICBpZiAodGhpcy5pc1N0YXRpYyAmJiAhc3R5bGlzLmhhc2gpIHtcbiAgICAgIGlmICh0aGlzLnN0YXRpY1J1bGVzSWQgJiYgc3R5bGVTaGVldC5oYXNOYW1lRm9ySWQoY29tcG9uZW50SWQsIHRoaXMuc3RhdGljUnVsZXNJZCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGljUnVsZXNJZDtcbiAgICAgIH1cblxuICAgICAgdmFyIGNzc1N0YXRpYyA9IGZsYXR0ZW4odGhpcy5ydWxlcywgZXhlY3V0aW9uQ29udGV4dCwgc3R5bGVTaGVldCkuam9pbignJyk7XG4gICAgICB2YXIgbmFtZSA9IGdlbmVyYXRlQWxwaGFiZXRpY05hbWUocGhhc2godGhpcy5iYXNlSGFzaCwgY3NzU3RhdGljLmxlbmd0aCkgPj4+IDApO1xuXG4gICAgICBpZiAoIXN0eWxlU2hlZXQuaGFzTmFtZUZvcklkKGNvbXBvbmVudElkLCBuYW1lKSkge1xuICAgICAgICB2YXIgY3NzU3RhdGljRm9ybWF0dGVkID0gc3R5bGlzKGNzc1N0YXRpYywgXCIuXCIgKyBuYW1lLCB1bmRlZmluZWQsIGNvbXBvbmVudElkKTtcbiAgICAgICAgc3R5bGVTaGVldC5pbnNlcnRSdWxlcyhjb21wb25lbnRJZCwgbmFtZSwgY3NzU3RhdGljRm9ybWF0dGVkKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zdGF0aWNSdWxlc0lkID0gbmFtZTtcbiAgICAgIHJldHVybiBuYW1lO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbGVuZ3RoID0gdGhpcy5ydWxlcy5sZW5ndGg7XG4gICAgICB2YXIgZHluYW1pY0hhc2ggPSBwaGFzaCh0aGlzLmJhc2VIYXNoLCBzdHlsaXMuaGFzaCk7XG4gICAgICB2YXIgY3NzID0gJyc7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHBhcnRSdWxlID0gdGhpcy5ydWxlc1tpXTtcblxuICAgICAgICBpZiAodHlwZW9mIHBhcnRSdWxlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGNzcyArPSBwYXJ0UnVsZTtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgZHluYW1pY0hhc2ggPSBwaGFzaChkeW5hbWljSGFzaCwgcGFydFJ1bGUgKyBpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcGFydENodW5rID0gZmxhdHRlbihwYXJ0UnVsZSwgZXhlY3V0aW9uQ29udGV4dCwgc3R5bGVTaGVldCk7XG4gICAgICAgICAgdmFyIHBhcnRTdHJpbmcgPSBBcnJheS5pc0FycmF5KHBhcnRDaHVuaykgPyBwYXJ0Q2h1bmsuam9pbignJykgOiBwYXJ0Q2h1bms7XG4gICAgICAgICAgZHluYW1pY0hhc2ggPSBwaGFzaChkeW5hbWljSGFzaCwgcGFydFN0cmluZyArIGkpO1xuICAgICAgICAgIGNzcyArPSBwYXJ0U3RyaW5nO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBfbmFtZSA9IGdlbmVyYXRlQWxwaGFiZXRpY05hbWUoZHluYW1pY0hhc2ggPj4+IDApO1xuXG4gICAgICBpZiAoIXN0eWxlU2hlZXQuaGFzTmFtZUZvcklkKGNvbXBvbmVudElkLCBfbmFtZSkpIHtcbiAgICAgICAgdmFyIGNzc0Zvcm1hdHRlZCA9IHN0eWxpcyhjc3MsIFwiLlwiICsgX25hbWUsIHVuZGVmaW5lZCwgY29tcG9uZW50SWQpO1xuICAgICAgICBzdHlsZVNoZWV0Lmluc2VydFJ1bGVzKGNvbXBvbmVudElkLCBfbmFtZSwgY3NzRm9ybWF0dGVkKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9uYW1lO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gQ29tcG9uZW50U3R5bGU7XG59KCk7XG5cbi8vIFxudmFyIExJTUlUID0gMjAwO1xudmFyIGNyZWF0ZVdhcm5Ub29NYW55Q2xhc3NlcyA9IChmdW5jdGlvbiAoZGlzcGxheU5hbWUsIGNvbXBvbmVudElkKSB7XG4gIHZhciBnZW5lcmF0ZWRDbGFzc2VzID0ge307XG4gIHZhciB3YXJuaW5nU2VlbiA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xuICAgIGlmICghd2FybmluZ1NlZW4pIHtcbiAgICAgIGdlbmVyYXRlZENsYXNzZXNbY2xhc3NOYW1lXSA9IHRydWU7XG5cbiAgICAgIGlmIChPYmplY3Qua2V5cyhnZW5lcmF0ZWRDbGFzc2VzKS5sZW5ndGggPj0gTElNSVQpIHtcbiAgICAgICAgLy8gVW5hYmxlIHRvIGZpbmQgbGF0ZXN0UnVsZSBpbiB0ZXN0IGVudmlyb25tZW50LlxuXG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUsIHByZWZlci10ZW1wbGF0ZSAqL1xuICAgICAgICB2YXIgcGFyc2VkSWRTdHJpbmcgPSBjb21wb25lbnRJZCA/IFwiIHdpdGggdGhlIGlkIG9mIFxcXCJcIiArIGNvbXBvbmVudElkICsgXCJcXFwiXCIgOiAnJztcbiAgICAgICAgY29uc29sZS53YXJuKFwiT3ZlciBcIiArIExJTUlUICsgXCIgY2xhc3NlcyB3ZXJlIGdlbmVyYXRlZCBmb3IgY29tcG9uZW50IFwiICsgZGlzcGxheU5hbWUgKyBwYXJzZWRJZFN0cmluZyArIFwiLlxcblwiICsgJ0NvbnNpZGVyIHVzaW5nIHRoZSBhdHRycyBtZXRob2QsIHRvZ2V0aGVyIHdpdGggYSBzdHlsZSBvYmplY3QgZm9yIGZyZXF1ZW50bHkgY2hhbmdlZCBzdHlsZXMuXFxuJyArICdFeGFtcGxlOlxcbicgKyAnICBjb25zdCBDb21wb25lbnQgPSBzdHlsZWQuZGl2LmF0dHJzKHByb3BzID0+ICh7XFxuJyArICcgICAgc3R5bGU6IHtcXG4nICsgJyAgICAgIGJhY2tncm91bmQ6IHByb3BzLmJhY2tncm91bmQsXFxuJyArICcgICAgfSxcXG4nICsgJyAgfSkpYHdpZHRoOiAxMDAlO2BcXG5cXG4nICsgJyAgPENvbXBvbmVudCAvPicpO1xuICAgICAgICB3YXJuaW5nU2VlbiA9IHRydWU7XG4gICAgICAgIGdlbmVyYXRlZENsYXNzZXMgPSB7fTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59KTtcblxuLy8gXG52YXIgaW52YWxpZEhvb2tDYWxsUmUgPSAvaW52YWxpZCBob29rIGNhbGwvaTtcbnZhciBzZWVuID0gbmV3IFNldCgpO1xudmFyIGNoZWNrRHluYW1pY0NyZWF0aW9uID0gZnVuY3Rpb24gY2hlY2tEeW5hbWljQ3JlYXRpb24oZGlzcGxheU5hbWUsIGNvbXBvbmVudElkKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFyIHBhcnNlZElkU3RyaW5nID0gY29tcG9uZW50SWQgPyBcIiB3aXRoIHRoZSBpZCBvZiBcXFwiXCIgKyBjb21wb25lbnRJZCArIFwiXFxcIlwiIDogJyc7XG4gICAgdmFyIG1lc3NhZ2UgPSBcIlRoZSBjb21wb25lbnQgXCIgKyBkaXNwbGF5TmFtZSArIHBhcnNlZElkU3RyaW5nICsgXCIgaGFzIGJlZW4gY3JlYXRlZCBkeW5hbWljYWxseS5cXG5cIiArICdZb3UgbWF5IHNlZSB0aGlzIHdhcm5pbmcgYmVjYXVzZSB5b3VcXCd2ZSBjYWxsZWQgc3R5bGVkIGluc2lkZSBhbm90aGVyIGNvbXBvbmVudC5cXG4nICsgJ1RvIHJlc29sdmUgdGhpcyBvbmx5IGNyZWF0ZSBuZXcgU3R5bGVkQ29tcG9uZW50cyBvdXRzaWRlIG9mIGFueSByZW5kZXIgbWV0aG9kIGFuZCBmdW5jdGlvbiBjb21wb25lbnQuJztcblxuICAgIHRyeSB7XG4gICAgICAvLyBXZSBwdXJwb3NlZnVsbHkgY2FsbCBgdXNlUmVmYCBvdXRzaWRlIG9mIGEgY29tcG9uZW50IGFuZCBleHBlY3QgaXQgdG8gdGhyb3dcbiAgICAgIC8vIElmIGl0IGRvZXNuJ3QsIHRoZW4gd2UncmUgaW5zaWRlIGFub3RoZXIgY29tcG9uZW50LlxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgICB1c2VSZWYoKTtcblxuICAgICAgaWYgKCFzZWVuLmhhcyhtZXNzYWdlKSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICBjb25zb2xlLndhcm4obWVzc2FnZSk7XG4gICAgICAgIHNlZW4uYWRkKG1lc3NhZ2UpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBUaGUgZXJyb3IgaGVyZSBpcyBleHBlY3RlZCwgc2luY2Ugd2UncmUgZXhwZWN0aW5nIGFueXRoaW5nIHRoYXQgdXNlcyBgY2hlY2tEeW5hbWljQ3JlYXRpb25gIHRvXG4gICAgICAvLyBiZSBjYWxsZWQgb3V0c2lkZSBvZiBhIFJlYWN0IGNvbXBvbmVudC5cbiAgICAgIGlmIChpbnZhbGlkSG9va0NhbGxSZS50ZXN0KGVycm9yLm1lc3NhZ2UpKSB7XG4gICAgICAgIC8vIFRoaXMgc2hvdWxkbid0IGhhcHBlbiwgYnV0IHJlc2V0cyBgd2FybmluZ1NlZW5gIGlmIHdlIGhhZCB0aGlzIGVycm9yIGhhcHBlbiBpbnRlcm1pdHRlbnRseVxuICAgICAgICBzZWVuW1wiZGVsZXRlXCJdKG1lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLy8gXG52YXIgZGV0ZXJtaW5lVGhlbWUgPSAoZnVuY3Rpb24gKHByb3BzLCBwcm92aWRlZFRoZW1lLCBkZWZhdWx0UHJvcHMpIHtcbiAgaWYgKGRlZmF1bHRQcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgZGVmYXVsdFByb3BzID0gRU1QVFlfT0JKRUNUO1xuICB9XG5cbiAgcmV0dXJuIHByb3BzLnRoZW1lICE9PSBkZWZhdWx0UHJvcHMudGhlbWUgJiYgcHJvcHMudGhlbWUgfHwgcHJvdmlkZWRUaGVtZSB8fCBkZWZhdWx0UHJvcHMudGhlbWU7XG59KTtcblxuLy8gXG4vLyBTb3VyY2U6IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3NvbS0xLyNzZXJpYWxpemUtYW4taWRlbnRpZmllclxuLy8gQ29udHJvbCBjaGFyYWN0ZXJzIGFuZCBub24tbGV0dGVyIGZpcnN0IHN5bWJvbHMgYXJlIG5vdCBzdXBwb3J0ZWRcbnZhciBlc2NhcGVSZWdleCA9IC9bIVwiIyQlJicoKSorLC4vOjs8PT4/QFtcXFxcXFxdXmB7fH1+LV0rL2c7XG52YXIgZGFzaGVzQXRFbmRzID0gLyheLXwtJCkvZztcbi8qKlxuICogVE9ETzogRXhwbG9yZSB1c2luZyBDU1MuZXNjYXBlIHdoZW4gaXQgYmVjb21lcyBtb3JlIGF2YWlsYWJsZVxuICogaW4gZXZlcmdyZWVuIGJyb3dzZXJzLlxuICovXG5cbmZ1bmN0aW9uIGVzY2FwZShzdHIpIHtcbiAgcmV0dXJuIHN0ciAvLyBSZXBsYWNlIGFsbCBwb3NzaWJsZSBDU1Mgc2VsZWN0b3JzXG4gIC5yZXBsYWNlKGVzY2FwZVJlZ2V4LCAnLScpIC8vIFJlbW92ZSBleHRyYW5lb3VzIGh5cGhlbnMgYXQgdGhlIHN0YXJ0IGFuZCBlbmRcbiAgLnJlcGxhY2UoZGFzaGVzQXRFbmRzLCAnJyk7XG59XG5cbi8vIFxuZnVuY3Rpb24gaXNUYWcodGFyZ2V0KSB7XG4gIHJldHVybiB0eXBlb2YgdGFyZ2V0ID09PSAnc3RyaW5nJyAmJiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHRhcmdldC5jaGFyQXQoMCkgPT09IHRhcmdldC5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSA6IHRydWUpO1xufVxuXG4vLyBcbmZ1bmN0aW9uIGdlbmVyYXRlRGlzcGxheU5hbWUodGFyZ2V0KSB7XG4gIC8vICRGbG93Rml4TWVcbiAgcmV0dXJuIGlzVGFnKHRhcmdldCkgPyBcInN0eWxlZC5cIiArIHRhcmdldCA6IFwiU3R5bGVkKFwiICsgZ2V0Q29tcG9uZW50TmFtZSh0YXJnZXQpICsgXCIpXCI7XG59XG5cbi8vIFxudmFyIGdlbmVyYXRlQ29tcG9uZW50SWQgPSAoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gZ2VuZXJhdGVBbHBoYWJldGljTmFtZShoYXNoKHN0cikgPj4+IDApO1xufSk7XG5cbi8qKlxuICogQ29udmVuaWVuY2UgZnVuY3Rpb24gZm9yIGpvaW5pbmcgc3RyaW5ncyB0byBmb3JtIGNsYXNzTmFtZSBjaGFpbnNcbiAqL1xuZnVuY3Rpb24gam9pblN0cmluZ3MoYSwgYikge1xuICByZXR1cm4gYSAmJiBiID8gYSArIFwiIFwiICsgYiA6IGEgfHwgYjtcbn1cblxudmFyIFRoZW1lQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoKTtcbnZhciBUaGVtZUNvbnN1bWVyID0gVGhlbWVDb250ZXh0LkNvbnN1bWVyO1xuXG5mdW5jdGlvbiBtZXJnZVRoZW1lKHRoZW1lLCBvdXRlclRoZW1lKSB7XG4gIGlmICghdGhlbWUpIHtcbiAgICByZXR1cm4gdGhyb3dTdHlsZWRDb21wb25lbnRzRXJyb3IoMTQpO1xuICB9XG5cbiAgaWYgKGlzRnVuY3Rpb24odGhlbWUpKSB7XG4gICAgdmFyIG1lcmdlZFRoZW1lID0gdGhlbWUob3V0ZXJUaGVtZSk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAobWVyZ2VkVGhlbWUgPT09IG51bGwgfHwgQXJyYXkuaXNBcnJheShtZXJnZWRUaGVtZSkgfHwgdHlwZW9mIG1lcmdlZFRoZW1lICE9PSAnb2JqZWN0JykpIHtcbiAgICAgIHJldHVybiB0aHJvd1N0eWxlZENvbXBvbmVudHNFcnJvcig3KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVyZ2VkVGhlbWU7XG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheSh0aGVtZSkgfHwgdHlwZW9mIHRoZW1lICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiB0aHJvd1N0eWxlZENvbXBvbmVudHNFcnJvcig4KTtcbiAgfVxuXG4gIHJldHVybiBvdXRlclRoZW1lID8gX2V4dGVuZHMoe30sIG91dGVyVGhlbWUsIHt9LCB0aGVtZSkgOiB0aGVtZTtcbn1cbi8qKlxuICogUHJvdmlkZSBhIHRoZW1lIHRvIGFuIGVudGlyZSByZWFjdCBjb21wb25lbnQgdHJlZSB2aWEgY29udGV4dFxuICovXG5cblxuZnVuY3Rpb24gVGhlbWVQcm92aWRlcihwcm9wcykge1xuICB2YXIgb3V0ZXJUaGVtZSA9IHVzZUNvbnRleHQoVGhlbWVDb250ZXh0KTtcbiAgdmFyIHRoZW1lQ29udGV4dCA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBtZXJnZVRoZW1lKHByb3BzLnRoZW1lLCBvdXRlclRoZW1lKTtcbiAgfSwgW3Byb3BzLnRoZW1lLCBvdXRlclRoZW1lXSk7XG5cbiAgaWYgKCFwcm9wcy5jaGlsZHJlbikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRoZW1lQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiB0aGVtZUNvbnRleHRcbiAgfSwgcHJvcHMuY2hpbGRyZW4pO1xufVxuXG4vKiBnbG9iYWwgJENhbGwgKi9cblxudmFyIGlkZW50aWZpZXJzID0ge307XG4vKiBXZSBkZXBlbmQgb24gY29tcG9uZW50cyBoYXZpbmcgdW5pcXVlIElEcyAqL1xuXG5mdW5jdGlvbiBnZW5lcmF0ZUlkKGRpc3BsYXlOYW1lLCBwYXJlbnRDb21wb25lbnRJZCkge1xuICB2YXIgbmFtZSA9IHR5cGVvZiBkaXNwbGF5TmFtZSAhPT0gJ3N0cmluZycgPyAnc2MnIDogZXNjYXBlKGRpc3BsYXlOYW1lKTsgLy8gRW5zdXJlIHRoYXQgbm8gZGlzcGxheU5hbWUgY2FuIGxlYWQgdG8gZHVwbGljYXRlIGNvbXBvbmVudElkc1xuXG4gIGlkZW50aWZpZXJzW25hbWVdID0gKGlkZW50aWZpZXJzW25hbWVdIHx8IDApICsgMTtcbiAgdmFyIGNvbXBvbmVudElkID0gbmFtZSArIFwiLVwiICsgZ2VuZXJhdGVDb21wb25lbnRJZChuYW1lICsgaWRlbnRpZmllcnNbbmFtZV0pO1xuICByZXR1cm4gcGFyZW50Q29tcG9uZW50SWQgPyBwYXJlbnRDb21wb25lbnRJZCArIFwiLVwiICsgY29tcG9uZW50SWQgOiBjb21wb25lbnRJZDtcbn1cblxuZnVuY3Rpb24gdXNlUmVzb2x2ZWRBdHRycyh0aGVtZSwgcHJvcHMsIGF0dHJzKSB7XG4gIGlmICh0aGVtZSA9PT0gdm9pZCAwKSB7XG4gICAgdGhlbWUgPSBFTVBUWV9PQkpFQ1Q7XG4gIH1cblxuICAvLyBOT1RFOiBjYW4ndCBtZW1vaXplIHRoaXNcbiAgLy8gcmV0dXJucyBbY29udGV4dCwgcmVzb2x2ZWRBdHRyc11cbiAgLy8gd2hlcmUgcmVzb2x2ZWRBdHRycyBpcyBvbmx5IHRoZSB0aGluZ3MgaW5qZWN0ZWQgYnkgdGhlIGF0dHJzIHRoZW1zZWx2ZXNcbiAgdmFyIGNvbnRleHQgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICB0aGVtZTogdGhlbWVcbiAgfSk7XG5cbiAgdmFyIHJlc29sdmVkQXR0cnMgPSB7fTtcbiAgYXR0cnMuZm9yRWFjaChmdW5jdGlvbiAoYXR0ckRlZikge1xuICAgIHZhciByZXNvbHZlZEF0dHJEZWYgPSBhdHRyRGVmO1xuICAgIHZhciBrZXk7XG5cbiAgICBpZiAoaXNGdW5jdGlvbihyZXNvbHZlZEF0dHJEZWYpKSB7XG4gICAgICByZXNvbHZlZEF0dHJEZWYgPSByZXNvbHZlZEF0dHJEZWYoY29udGV4dCk7XG4gICAgfVxuICAgIC8qIGVzbGludC1kaXNhYmxlIGd1YXJkLWZvci1pbiAqL1xuXG5cbiAgICBmb3IgKGtleSBpbiByZXNvbHZlZEF0dHJEZWYpIHtcbiAgICAgIGNvbnRleHRba2V5XSA9IHJlc29sdmVkQXR0cnNba2V5XSA9IGtleSA9PT0gJ2NsYXNzTmFtZScgPyBqb2luU3RyaW5ncyhyZXNvbHZlZEF0dHJzW2tleV0sIHJlc29sdmVkQXR0ckRlZltrZXldKSA6IHJlc29sdmVkQXR0ckRlZltrZXldO1xuICAgIH1cbiAgICAvKiBlc2xpbnQtZW5hYmxlIGd1YXJkLWZvci1pbiAqL1xuXG4gIH0pO1xuICByZXR1cm4gW2NvbnRleHQsIHJlc29sdmVkQXR0cnNdO1xufVxuXG5mdW5jdGlvbiB1c2VJbmplY3RlZFN0eWxlKGNvbXBvbmVudFN0eWxlLCBoYXNBdHRycywgcmVzb2x2ZWRBdHRycywgd2FyblRvb01hbnlDbGFzc2VzKSB7XG4gIHZhciBzdHlsZVNoZWV0ID0gdXNlU3R5bGVTaGVldCgpO1xuICB2YXIgc3R5bGlzID0gdXNlU3R5bGlzKCk7IC8vIHN0YXRpY2FsbHkgc3R5bGVkLWNvbXBvbmVudHMgZG9uJ3QgbmVlZCB0byBidWlsZCBhbiBleGVjdXRpb24gY29udGV4dCBvYmplY3QsXG4gIC8vIGFuZCBzaG91bGRuJ3QgYmUgaW5jcmVhc2luZyB0aGUgbnVtYmVyIG9mIGNsYXNzIG5hbWVzXG5cbiAgdmFyIGlzU3RhdGljID0gY29tcG9uZW50U3R5bGUuaXNTdGF0aWMgJiYgIWhhc0F0dHJzO1xuICB2YXIgY2xhc3NOYW1lID0gaXNTdGF0aWMgPyBjb21wb25lbnRTdHlsZS5nZW5lcmF0ZUFuZEluamVjdFN0eWxlcyhFTVBUWV9PQkpFQ1QsIHN0eWxlU2hlZXQsIHN0eWxpcykgOiBjb21wb25lbnRTdHlsZS5nZW5lcmF0ZUFuZEluamVjdFN0eWxlcyhyZXNvbHZlZEF0dHJzLCBzdHlsZVNoZWV0LCBzdHlsaXMpO1xuICB1c2VEZWJ1Z1ZhbHVlKGNsYXNzTmFtZSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWlzU3RhdGljICYmIHdhcm5Ub29NYW55Q2xhc3Nlcykge1xuICAgIHdhcm5Ub29NYW55Q2xhc3NlcyhjbGFzc05hbWUpO1xuICB9XG5cbiAgcmV0dXJuIGNsYXNzTmFtZTtcbn1cblxuZnVuY3Rpb24gdXNlU3R5bGVkQ29tcG9uZW50SW1wbChmb3J3YXJkZWRDb21wb25lbnQsIHByb3BzLCBmb3J3YXJkZWRSZWYpIHtcbiAgdmFyIGNvbXBvbmVudEF0dHJzID0gZm9yd2FyZGVkQ29tcG9uZW50LmF0dHJzLFxuICAgICAgY29tcG9uZW50U3R5bGUgPSBmb3J3YXJkZWRDb21wb25lbnQuY29tcG9uZW50U3R5bGUsXG4gICAgICBkZWZhdWx0UHJvcHMgPSBmb3J3YXJkZWRDb21wb25lbnQuZGVmYXVsdFByb3BzLFxuICAgICAgZm9sZGVkQ29tcG9uZW50SWRzID0gZm9yd2FyZGVkQ29tcG9uZW50LmZvbGRlZENvbXBvbmVudElkcyxcbiAgICAgIHNob3VsZEZvcndhcmRQcm9wID0gZm9yd2FyZGVkQ29tcG9uZW50LnNob3VsZEZvcndhcmRQcm9wLFxuICAgICAgc3R5bGVkQ29tcG9uZW50SWQgPSBmb3J3YXJkZWRDb21wb25lbnQuc3R5bGVkQ29tcG9uZW50SWQsXG4gICAgICB0YXJnZXQgPSBmb3J3YXJkZWRDb21wb25lbnQudGFyZ2V0O1xuICB1c2VEZWJ1Z1ZhbHVlKHN0eWxlZENvbXBvbmVudElkKTsgLy8gTk9URTogdGhlIG5vbi1ob29rcyB2ZXJzaW9uIG9ubHkgc3Vic2NyaWJlcyB0byB0aGlzIHdoZW4gIWNvbXBvbmVudFN0eWxlLmlzU3RhdGljLFxuICAvLyBidXQgdGhhdCdkIGJlIGFnYWluc3QgdGhlIHJ1bGVzLW9mLWhvb2tzLiBXZSBjb3VsZCBiZSBuYXVnaHR5IGFuZCBkbyBpdCBhbnl3YXkgYXMgaXRcbiAgLy8gc2hvdWxkIGJlIGFuIGltbXV0YWJsZSB2YWx1ZSwgYnV0IGJlaGF2ZSBmb3Igbm93LlxuXG4gIHZhciB0aGVtZSA9IGRldGVybWluZVRoZW1lKHByb3BzLCB1c2VDb250ZXh0KFRoZW1lQ29udGV4dCksIGRlZmF1bHRQcm9wcyk7XG5cbiAgdmFyIF91c2VSZXNvbHZlZEF0dHJzID0gdXNlUmVzb2x2ZWRBdHRycyh0aGVtZSB8fCBFTVBUWV9PQkpFQ1QsIHByb3BzLCBjb21wb25lbnRBdHRycyksXG4gICAgICBjb250ZXh0ID0gX3VzZVJlc29sdmVkQXR0cnNbMF0sXG4gICAgICBhdHRycyA9IF91c2VSZXNvbHZlZEF0dHJzWzFdO1xuXG4gIHZhciBnZW5lcmF0ZWRDbGFzc05hbWUgPSB1c2VJbmplY3RlZFN0eWxlKGNvbXBvbmVudFN0eWxlLCBjb21wb25lbnRBdHRycy5sZW5ndGggPiAwLCBjb250ZXh0LCBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gZm9yd2FyZGVkQ29tcG9uZW50Lndhcm5Ub29NYW55Q2xhc3NlcyA6IHVuZGVmaW5lZCk7XG4gIHZhciByZWZUb0ZvcndhcmQgPSBmb3J3YXJkZWRSZWY7XG4gIHZhciBlbGVtZW50VG9CZUNyZWF0ZWQgPSBhdHRycy4kYXMgfHwgcHJvcHMuJGFzIHx8IGF0dHJzLmFzIHx8IHByb3BzLmFzIHx8IHRhcmdldDtcbiAgdmFyIGlzVGFyZ2V0VGFnID0gaXNUYWcoZWxlbWVudFRvQmVDcmVhdGVkKTtcbiAgdmFyIGNvbXB1dGVkUHJvcHMgPSBhdHRycyAhPT0gcHJvcHMgPyBfZXh0ZW5kcyh7fSwgcHJvcHMsIHt9LCBhdHRycykgOiBwcm9wcztcbiAgdmFyIHByb3BGaWx0ZXJGbiA9IHNob3VsZEZvcndhcmRQcm9wIHx8IGlzVGFyZ2V0VGFnICYmIHZhbGlkQXR0cjtcbiAgdmFyIHByb3BzRm9yRWxlbWVudCA9IHt9OyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ3VhcmQtZm9yLWluXG5cbiAgZm9yICh2YXIga2V5IGluIGNvbXB1dGVkUHJvcHMpIHtcbiAgICBpZiAoa2V5WzBdID09PSAnJCcgfHwga2V5ID09PSAnYXMnKSBjb250aW51ZTtlbHNlIGlmIChrZXkgPT09ICdmb3J3YXJkZWRBcycpIHtcbiAgICAgIHByb3BzRm9yRWxlbWVudC5hcyA9IGNvbXB1dGVkUHJvcHNba2V5XTtcbiAgICB9IGVsc2UgaWYgKCFwcm9wRmlsdGVyRm4gfHwgcHJvcEZpbHRlckZuKGtleSwgdmFsaWRBdHRyKSkge1xuICAgICAgLy8gRG9uJ3QgcGFzcyB0aHJvdWdoIG5vbiBIVE1MIHRhZ3MgdGhyb3VnaCB0byBIVE1MIGVsZW1lbnRzXG4gICAgICBwcm9wc0ZvckVsZW1lbnRba2V5XSA9IGNvbXB1dGVkUHJvcHNba2V5XTtcbiAgICB9XG4gIH1cblxuICBpZiAocHJvcHMuc3R5bGUgJiYgYXR0cnMuc3R5bGUgIT09IHByb3BzLnN0eWxlKSB7XG4gICAgcHJvcHNGb3JFbGVtZW50LnN0eWxlID0gX2V4dGVuZHMoe30sIHByb3BzLnN0eWxlLCB7fSwgYXR0cnMuc3R5bGUpO1xuICB9XG5cbiAgcHJvcHNGb3JFbGVtZW50LmNsYXNzTmFtZSA9IEFycmF5LnByb3RvdHlwZS5jb25jYXQoZm9sZGVkQ29tcG9uZW50SWRzLCBzdHlsZWRDb21wb25lbnRJZCwgZ2VuZXJhdGVkQ2xhc3NOYW1lICE9PSBzdHlsZWRDb21wb25lbnRJZCA/IGdlbmVyYXRlZENsYXNzTmFtZSA6IG51bGwsIHByb3BzLmNsYXNzTmFtZSwgYXR0cnMuY2xhc3NOYW1lKS5maWx0ZXIoQm9vbGVhbikuam9pbignICcpO1xuICBwcm9wc0ZvckVsZW1lbnQucmVmID0gcmVmVG9Gb3J3YXJkO1xuICByZXR1cm4gY3JlYXRlRWxlbWVudChlbGVtZW50VG9CZUNyZWF0ZWQsIHByb3BzRm9yRWxlbWVudCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlZENvbXBvbmVudCh0YXJnZXQsIG9wdGlvbnMsIHJ1bGVzKSB7XG4gIHZhciBpc1RhcmdldFN0eWxlZENvbXAgPSBpc1N0eWxlZENvbXBvbmVudCh0YXJnZXQpO1xuICB2YXIgaXNDb21wb3NpdGVDb21wb25lbnQgPSAhaXNUYWcodGFyZ2V0KTtcbiAgdmFyIF9vcHRpb25zJGRpc3BsYXlOYW1lID0gb3B0aW9ucy5kaXNwbGF5TmFtZSxcbiAgICAgIGRpc3BsYXlOYW1lID0gX29wdGlvbnMkZGlzcGxheU5hbWUgPT09IHZvaWQgMCA/IGdlbmVyYXRlRGlzcGxheU5hbWUodGFyZ2V0KSA6IF9vcHRpb25zJGRpc3BsYXlOYW1lLFxuICAgICAgX29wdGlvbnMkY29tcG9uZW50SWQgPSBvcHRpb25zLmNvbXBvbmVudElkLFxuICAgICAgY29tcG9uZW50SWQgPSBfb3B0aW9ucyRjb21wb25lbnRJZCA9PT0gdm9pZCAwID8gZ2VuZXJhdGVJZChvcHRpb25zLmRpc3BsYXlOYW1lLCBvcHRpb25zLnBhcmVudENvbXBvbmVudElkKSA6IF9vcHRpb25zJGNvbXBvbmVudElkLFxuICAgICAgX29wdGlvbnMkYXR0cnMgPSBvcHRpb25zLmF0dHJzLFxuICAgICAgYXR0cnMgPSBfb3B0aW9ucyRhdHRycyA9PT0gdm9pZCAwID8gRU1QVFlfQVJSQVkgOiBfb3B0aW9ucyRhdHRycztcbiAgdmFyIHN0eWxlZENvbXBvbmVudElkID0gb3B0aW9ucy5kaXNwbGF5TmFtZSAmJiBvcHRpb25zLmNvbXBvbmVudElkID8gZXNjYXBlKG9wdGlvbnMuZGlzcGxheU5hbWUpICsgXCItXCIgKyBvcHRpb25zLmNvbXBvbmVudElkIDogb3B0aW9ucy5jb21wb25lbnRJZCB8fCBjb21wb25lbnRJZDsgLy8gZm9sZCB0aGUgdW5kZXJseWluZyBTdHlsZWRDb21wb25lbnQgYXR0cnMgdXAgKGltcGxpY2l0IGV4dGVuZClcblxuICB2YXIgZmluYWxBdHRycyA9IC8vICRGbG93Rml4TWVcbiAgaXNUYXJnZXRTdHlsZWRDb21wICYmIHRhcmdldC5hdHRycyA/IEFycmF5LnByb3RvdHlwZS5jb25jYXQodGFyZ2V0LmF0dHJzLCBhdHRycykuZmlsdGVyKEJvb2xlYW4pIDogYXR0cnM7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuXG4gIHZhciBzaG91bGRGb3J3YXJkUHJvcCA9IG9wdGlvbnMuc2hvdWxkRm9yd2FyZFByb3A7IC8vICRGbG93Rml4TWVcblxuICBpZiAoaXNUYXJnZXRTdHlsZWRDb21wICYmIHRhcmdldC5zaG91bGRGb3J3YXJkUHJvcCkge1xuICAgIGlmIChzaG91bGRGb3J3YXJkUHJvcCkge1xuICAgICAgLy8gY29tcG9zZSBuZXN0ZWQgc2hvdWxkRm9yd2FyZFByb3AgY2FsbHNcbiAgICAgIHNob3VsZEZvcndhcmRQcm9wID0gZnVuY3Rpb24gc2hvdWxkRm9yd2FyZFByb3AocHJvcCwgZmlsdGVyRm4pIHtcbiAgICAgICAgcmV0dXJuICgvLyAkRmxvd0ZpeE1lXG4gICAgICAgICAgdGFyZ2V0LnNob3VsZEZvcndhcmRQcm9wKHByb3AsIGZpbHRlckZuKSAmJiBvcHRpb25zLnNob3VsZEZvcndhcmRQcm9wKHByb3AsIGZpbHRlckZuKVxuICAgICAgICApO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICBzaG91bGRGb3J3YXJkUHJvcCA9IHRhcmdldC5zaG91bGRGb3J3YXJkUHJvcDtcbiAgICB9XG4gIH1cblxuICB2YXIgY29tcG9uZW50U3R5bGUgPSBuZXcgQ29tcG9uZW50U3R5bGUoaXNUYXJnZXRTdHlsZWRDb21wID8gLy8gZm9sZCB0aGUgdW5kZXJseWluZyBTdHlsZWRDb21wb25lbnQgcnVsZXMgdXAgKGltcGxpY2l0IGV4dGVuZClcbiAgLy8gJEZsb3dGaXhNZVxuICB0YXJnZXQuY29tcG9uZW50U3R5bGUucnVsZXMuY29uY2F0KHJ1bGVzKSA6IHJ1bGVzLCBzdHlsZWRDb21wb25lbnRJZCk7XG4gIC8qKlxuICAgKiBmb3J3YXJkUmVmIGNyZWF0ZXMgYSBuZXcgaW50ZXJpbSBjb21wb25lbnQsIHdoaWNoIHdlJ2xsIHRha2UgYWR2YW50YWdlIG9mXG4gICAqIGluc3RlYWQgb2YgZXh0ZW5kaW5nIFBhcmVudENvbXBvbmVudCB0byBjcmVhdGUgX2Fub3RoZXJfIGludGVyaW0gY2xhc3NcbiAgICovXG5cbiAgdmFyIFdyYXBwZWRTdHlsZWRDb21wb25lbnQ7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuXG4gIHZhciBmb3J3YXJkUmVmID0gZnVuY3Rpb24gZm9yd2FyZFJlZihwcm9wcywgcmVmKSB7XG4gICAgcmV0dXJuIHVzZVN0eWxlZENvbXBvbmVudEltcGwoV3JhcHBlZFN0eWxlZENvbXBvbmVudCwgcHJvcHMsIHJlZik7XG4gIH07XG5cbiAgZm9yd2FyZFJlZi5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lOyAvLyAkRmxvd0ZpeE1lIHRoaXMgaXMgYSBmb3JjZWQgY2FzdCB0byBtZXJnZSBpdCBTdHlsZWRDb21wb25lbnRXcmFwcGVyUHJvcGVydGllc1xuXG4gIFdyYXBwZWRTdHlsZWRDb21wb25lbnQgPSBSZWFjdC5mb3J3YXJkUmVmKGZvcndhcmRSZWYpO1xuICBXcmFwcGVkU3R5bGVkQ29tcG9uZW50LmF0dHJzID0gZmluYWxBdHRycztcbiAgV3JhcHBlZFN0eWxlZENvbXBvbmVudC5jb21wb25lbnRTdHlsZSA9IGNvbXBvbmVudFN0eWxlO1xuICBXcmFwcGVkU3R5bGVkQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gIFdyYXBwZWRTdHlsZWRDb21wb25lbnQuc2hvdWxkRm9yd2FyZFByb3AgPSBzaG91bGRGb3J3YXJkUHJvcDsgLy8gdGhpcyBzdGF0aWMgaXMgdXNlZCB0byBwcmVzZXJ2ZSB0aGUgY2FzY2FkZSBvZiBzdGF0aWMgY2xhc3NlcyBmb3IgY29tcG9uZW50IHNlbGVjdG9yXG4gIC8vIHB1cnBvc2VzOyB0aGlzIGlzIGVzcGVjaWFsbHkgaW1wb3J0YW50IHdpdGggdXNhZ2Ugb2YgdGhlIGNzcyBwcm9wXG5cbiAgV3JhcHBlZFN0eWxlZENvbXBvbmVudC5mb2xkZWRDb21wb25lbnRJZHMgPSBpc1RhcmdldFN0eWxlZENvbXAgPyAvLyAkRmxvd0ZpeE1lXG4gIEFycmF5LnByb3RvdHlwZS5jb25jYXQodGFyZ2V0LmZvbGRlZENvbXBvbmVudElkcywgdGFyZ2V0LnN0eWxlZENvbXBvbmVudElkKSA6IEVNUFRZX0FSUkFZO1xuICBXcmFwcGVkU3R5bGVkQ29tcG9uZW50LnN0eWxlZENvbXBvbmVudElkID0gc3R5bGVkQ29tcG9uZW50SWQ7IC8vIGZvbGQgdGhlIHVuZGVybHlpbmcgU3R5bGVkQ29tcG9uZW50IHRhcmdldCB1cCBzaW5jZSB3ZSBmb2xkZWQgdGhlIHN0eWxlc1xuXG4gIFdyYXBwZWRTdHlsZWRDb21wb25lbnQudGFyZ2V0ID0gaXNUYXJnZXRTdHlsZWRDb21wID8gLy8gJEZsb3dGaXhNZVxuICB0YXJnZXQudGFyZ2V0IDogdGFyZ2V0OyAvLyAkRmxvd0ZpeE1lXG5cbiAgV3JhcHBlZFN0eWxlZENvbXBvbmVudC53aXRoQ29tcG9uZW50ID0gZnVuY3Rpb24gd2l0aENvbXBvbmVudCh0YWcpIHtcbiAgICB2YXIgcHJldmlvdXNDb21wb25lbnRJZCA9IG9wdGlvbnMuY29tcG9uZW50SWQsXG4gICAgICAgIG9wdGlvbnNUb0NvcHkgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShvcHRpb25zLCBbXCJjb21wb25lbnRJZFwiXSk7XG5cbiAgICB2YXIgbmV3Q29tcG9uZW50SWQgPSBwcmV2aW91c0NvbXBvbmVudElkICYmIHByZXZpb3VzQ29tcG9uZW50SWQgKyBcIi1cIiArIChpc1RhZyh0YWcpID8gdGFnIDogZXNjYXBlKGdldENvbXBvbmVudE5hbWUodGFnKSkpO1xuXG4gICAgdmFyIG5ld09wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgb3B0aW9uc1RvQ29weSwge1xuICAgICAgYXR0cnM6IGZpbmFsQXR0cnMsXG4gICAgICBjb21wb25lbnRJZDogbmV3Q29tcG9uZW50SWRcbiAgICB9KTtcblxuICAgIHJldHVybiBjcmVhdGVTdHlsZWRDb21wb25lbnQodGFnLCBuZXdPcHRpb25zLCBydWxlcyk7XG4gIH07IC8vICRGbG93Rml4TWVcblxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcmFwcGVkU3R5bGVkQ29tcG9uZW50LCAnZGVmYXVsdFByb3BzJywge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2ZvbGRlZERlZmF1bHRQcm9wcztcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KG9iaikge1xuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgdGhpcy5fZm9sZGVkRGVmYXVsdFByb3BzID0gaXNUYXJnZXRTdHlsZWRDb21wID8gbWl4aW5EZWVwKHt9LCB0YXJnZXQuZGVmYXVsdFByb3BzLCBvYmopIDogb2JqO1xuICAgIH1cbiAgfSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjaGVja0R5bmFtaWNDcmVhdGlvbihkaXNwbGF5TmFtZSwgc3R5bGVkQ29tcG9uZW50SWQpO1xuICAgIFdyYXBwZWRTdHlsZWRDb21wb25lbnQud2FyblRvb01hbnlDbGFzc2VzID0gY3JlYXRlV2FyblRvb01hbnlDbGFzc2VzKGRpc3BsYXlOYW1lLCBzdHlsZWRDb21wb25lbnRJZCk7XG4gIH0gLy8gJEZsb3dGaXhNZVxuXG5cbiAgV3JhcHBlZFN0eWxlZENvbXBvbmVudC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gXCIuXCIgKyBXcmFwcGVkU3R5bGVkQ29tcG9uZW50LnN0eWxlZENvbXBvbmVudElkO1xuICB9O1xuXG4gIGlmIChpc0NvbXBvc2l0ZUNvbXBvbmVudCkge1xuICAgIGhvaXN0KFdyYXBwZWRTdHlsZWRDb21wb25lbnQsIHRhcmdldCwge1xuICAgICAgLy8gYWxsIFNDLXNwZWNpZmljIHRoaW5ncyBzaG91bGQgbm90IGJlIGhvaXN0ZWRcbiAgICAgIGF0dHJzOiB0cnVlLFxuICAgICAgY29tcG9uZW50U3R5bGU6IHRydWUsXG4gICAgICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgICAgIGZvbGRlZENvbXBvbmVudElkczogdHJ1ZSxcbiAgICAgIHNob3VsZEZvcndhcmRQcm9wOiB0cnVlLFxuICAgICAgc2VsZjogdHJ1ZSxcbiAgICAgIHN0eWxlZENvbXBvbmVudElkOiB0cnVlLFxuICAgICAgdGFyZ2V0OiB0cnVlLFxuICAgICAgd2l0aENvbXBvbmVudDogdHJ1ZVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIFdyYXBwZWRTdHlsZWRDb21wb25lbnQ7XG59XG5cbi8vIFxuLy8gVGhhbmtzIHRvIFJlYWN0RE9NRmFjdG9yaWVzIGZvciB0aGlzIGhhbmR5IGxpc3QhXG52YXIgZG9tRWxlbWVudHMgPSBbJ2EnLCAnYWJicicsICdhZGRyZXNzJywgJ2FyZWEnLCAnYXJ0aWNsZScsICdhc2lkZScsICdhdWRpbycsICdiJywgJ2Jhc2UnLCAnYmRpJywgJ2JkbycsICdiaWcnLCAnYmxvY2txdW90ZScsICdib2R5JywgJ2JyJywgJ2J1dHRvbicsICdjYW52YXMnLCAnY2FwdGlvbicsICdjaXRlJywgJ2NvZGUnLCAnY29sJywgJ2NvbGdyb3VwJywgJ2RhdGEnLCAnZGF0YWxpc3QnLCAnZGQnLCAnZGVsJywgJ2RldGFpbHMnLCAnZGZuJywgJ2RpYWxvZycsICdkaXYnLCAnZGwnLCAnZHQnLCAnZW0nLCAnZW1iZWQnLCAnZmllbGRzZXQnLCAnZmlnY2FwdGlvbicsICdmaWd1cmUnLCAnZm9vdGVyJywgJ2Zvcm0nLCAnaDEnLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnLCAnaDYnLCAnaGVhZCcsICdoZWFkZXInLCAnaGdyb3VwJywgJ2hyJywgJ2h0bWwnLCAnaScsICdpZnJhbWUnLCAnaW1nJywgJ2lucHV0JywgJ2lucycsICdrYmQnLCAna2V5Z2VuJywgJ2xhYmVsJywgJ2xlZ2VuZCcsICdsaScsICdsaW5rJywgJ21haW4nLCAnbWFwJywgJ21hcmsnLCAnbWFycXVlZScsICdtZW51JywgJ21lbnVpdGVtJywgJ21ldGEnLCAnbWV0ZXInLCAnbmF2JywgJ25vc2NyaXB0JywgJ29iamVjdCcsICdvbCcsICdvcHRncm91cCcsICdvcHRpb24nLCAnb3V0cHV0JywgJ3AnLCAncGFyYW0nLCAncGljdHVyZScsICdwcmUnLCAncHJvZ3Jlc3MnLCAncScsICdycCcsICdydCcsICdydWJ5JywgJ3MnLCAnc2FtcCcsICdzY3JpcHQnLCAnc2VjdGlvbicsICdzZWxlY3QnLCAnc21hbGwnLCAnc291cmNlJywgJ3NwYW4nLCAnc3Ryb25nJywgJ3N0eWxlJywgJ3N1YicsICdzdW1tYXJ5JywgJ3N1cCcsICd0YWJsZScsICd0Ym9keScsICd0ZCcsICd0ZXh0YXJlYScsICd0Zm9vdCcsICd0aCcsICd0aGVhZCcsICd0aW1lJywgJ3RpdGxlJywgJ3RyJywgJ3RyYWNrJywgJ3UnLCAndWwnLCAndmFyJywgJ3ZpZGVvJywgJ3dicicsIC8vIFNWR1xuJ2NpcmNsZScsICdjbGlwUGF0aCcsICdkZWZzJywgJ2VsbGlwc2UnLCAnZm9yZWlnbk9iamVjdCcsICdnJywgJ2ltYWdlJywgJ2xpbmUnLCAnbGluZWFyR3JhZGllbnQnLCAnbWFya2VyJywgJ21hc2snLCAncGF0aCcsICdwYXR0ZXJuJywgJ3BvbHlnb24nLCAncG9seWxpbmUnLCAncmFkaWFsR3JhZGllbnQnLCAncmVjdCcsICdzdG9wJywgJ3N2ZycsICd0ZXh0JywgJ3RzcGFuJ107XG5cbi8vIFxuXG52YXIgc3R5bGVkID0gZnVuY3Rpb24gc3R5bGVkKHRhZykge1xuICByZXR1cm4gY29uc3RydWN0V2l0aE9wdGlvbnMoY3JlYXRlU3R5bGVkQ29tcG9uZW50LCB0YWcpO1xufTsgLy8gU2hvcnRoYW5kcyBmb3IgYWxsIHZhbGlkIEhUTUwgRWxlbWVudHNcblxuXG5kb21FbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChkb21FbGVtZW50KSB7XG4gIHN0eWxlZFtkb21FbGVtZW50XSA9IHN0eWxlZChkb21FbGVtZW50KTtcbn0pO1xuXG4vLyBcblxudmFyIEdsb2JhbFN0eWxlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gR2xvYmFsU3R5bGUocnVsZXMsIGNvbXBvbmVudElkKSB7XG4gICAgdGhpcy5ydWxlcyA9IHJ1bGVzO1xuICAgIHRoaXMuY29tcG9uZW50SWQgPSBjb21wb25lbnRJZDtcbiAgICB0aGlzLmlzU3RhdGljID0gaXNTdGF0aWNSdWxlcyhydWxlcyk7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gR2xvYmFsU3R5bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5jcmVhdGVTdHlsZXMgPSBmdW5jdGlvbiBjcmVhdGVTdHlsZXMoaW5zdGFuY2UsIGV4ZWN1dGlvbkNvbnRleHQsIHN0eWxlU2hlZXQsIHN0eWxpcykge1xuICAgIHZhciBmbGF0Q1NTID0gZmxhdHRlbih0aGlzLnJ1bGVzLCBleGVjdXRpb25Db250ZXh0LCBzdHlsZVNoZWV0KTtcbiAgICB2YXIgY3NzID0gc3R5bGlzKGZsYXRDU1Muam9pbignJyksICcnKTtcbiAgICB2YXIgaWQgPSB0aGlzLmNvbXBvbmVudElkICsgaW5zdGFuY2U7IC8vIE5PVEU6IFdlIHVzZSB0aGUgaWQgYXMgYSBuYW1lIGFzIHdlbGwsIHNpbmNlIHRoZXNlIHJ1bGVzIG5ldmVyIGNoYW5nZVxuXG4gICAgc3R5bGVTaGVldC5pbnNlcnRSdWxlcyhpZCwgaWQsIGNzcyk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbW92ZVN0eWxlcyA9IGZ1bmN0aW9uIHJlbW92ZVN0eWxlcyhpbnN0YW5jZSwgc3R5bGVTaGVldCkge1xuICAgIHN0eWxlU2hlZXQuY2xlYXJSdWxlcyh0aGlzLmNvbXBvbmVudElkICsgaW5zdGFuY2UpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXJTdHlsZXMgPSBmdW5jdGlvbiByZW5kZXJTdHlsZXMoaW5zdGFuY2UsIGV4ZWN1dGlvbkNvbnRleHQsIHN0eWxlU2hlZXQsIHN0eWxpcykge1xuICAgIFN0eWxlU2hlZXQucmVnaXN0ZXJJZCh0aGlzLmNvbXBvbmVudElkICsgaW5zdGFuY2UpOyAvLyBOT1RFOiBSZW1vdmUgb2xkIHN0eWxlcywgdGhlbiBpbmplY3QgdGhlIG5ldyBvbmVzXG5cbiAgICB0aGlzLnJlbW92ZVN0eWxlcyhpbnN0YW5jZSwgc3R5bGVTaGVldCk7XG4gICAgdGhpcy5jcmVhdGVTdHlsZXMoaW5zdGFuY2UsIGV4ZWN1dGlvbkNvbnRleHQsIHN0eWxlU2hlZXQsIHN0eWxpcyk7XG4gIH07XG5cbiAgcmV0dXJuIEdsb2JhbFN0eWxlO1xufSgpO1xuXG5mdW5jdGlvbiBjcmVhdGVHbG9iYWxTdHlsZShzdHJpbmdzKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBpbnRlcnBvbGF0aW9ucyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgaW50ZXJwb2xhdGlvbnNbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIHJ1bGVzID0gY3NzLmFwcGx5KHZvaWQgMCwgW3N0cmluZ3NdLmNvbmNhdChpbnRlcnBvbGF0aW9ucykpO1xuICB2YXIgc3R5bGVkQ29tcG9uZW50SWQgPSBcInNjLWdsb2JhbC1cIiArIGdlbmVyYXRlQ29tcG9uZW50SWQoSlNPTi5zdHJpbmdpZnkocnVsZXMpKTtcbiAgdmFyIGdsb2JhbFN0eWxlID0gbmV3IEdsb2JhbFN0eWxlKHJ1bGVzLCBzdHlsZWRDb21wb25lbnRJZCk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjaGVja0R5bmFtaWNDcmVhdGlvbihzdHlsZWRDb21wb25lbnRJZCk7XG4gIH1cblxuICBmdW5jdGlvbiBHbG9iYWxTdHlsZUNvbXBvbmVudChwcm9wcykge1xuICAgIHZhciBzdHlsZVNoZWV0ID0gdXNlU3R5bGVTaGVldCgpO1xuICAgIHZhciBzdHlsaXMgPSB1c2VTdHlsaXMoKTtcbiAgICB2YXIgdGhlbWUgPSB1c2VDb250ZXh0KFRoZW1lQ29udGV4dCk7XG4gICAgdmFyIGluc3RhbmNlUmVmID0gdXNlUmVmKG51bGwpO1xuXG4gICAgaWYgKGluc3RhbmNlUmVmLmN1cnJlbnQgPT09IG51bGwpIHtcbiAgICAgIGluc3RhbmNlUmVmLmN1cnJlbnQgPSBzdHlsZVNoZWV0LmFsbG9jYXRlR1NJbnN0YW5jZShzdHlsZWRDb21wb25lbnRJZCk7XG4gICAgfVxuXG4gICAgdmFyIGluc3RhbmNlID0gaW5zdGFuY2VSZWYuY3VycmVudDtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIFJlYWN0LkNoaWxkcmVuLmNvdW50KHByb3BzLmNoaWxkcmVuKSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcIlRoZSBnbG9iYWwgc3R5bGUgY29tcG9uZW50IFwiICsgc3R5bGVkQ29tcG9uZW50SWQgKyBcIiB3YXMgZ2l2ZW4gY2hpbGQgSlNYLiBjcmVhdGVHbG9iYWxTdHlsZSBkb2VzIG5vdCByZW5kZXIgY2hpbGRyZW4uXCIpO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHJ1bGVzLnNvbWUoZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgcnVsZSA9PT0gJ3N0cmluZycgJiYgcnVsZS5pbmRleE9mKCdAaW1wb3J0JykgIT09IC0xO1xuICAgIH0pKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJQbGVhc2UgZG8gbm90IHVzZSBAaW1wb3J0IENTUyBzeW50YXggaW4gY3JlYXRlR2xvYmFsU3R5bGUgYXQgdGhpcyB0aW1lLCBhcyB0aGUgQ1NTT00gQVBJcyB3ZSB1c2UgaW4gcHJvZHVjdGlvbiBkbyBub3QgaGFuZGxlIGl0IHdlbGwuIEluc3RlYWQsIHdlIHJlY29tbWVuZCB1c2luZyBhIGxpYnJhcnkgc3VjaCBhcyByZWFjdC1oZWxtZXQgdG8gaW5qZWN0IGEgdHlwaWNhbCA8bGluaz4gbWV0YSB0YWcgdG8gdGhlIHN0eWxlc2hlZXQsIG9yIHNpbXBseSBlbWJlZGRpbmcgaXQgbWFudWFsbHkgaW4geW91ciBpbmRleC5odG1sIDxoZWFkPiBzZWN0aW9uIGZvciBhIHNpbXBsZXIgYXBwLlwiKTtcbiAgICB9XG5cbiAgICBpZiAoZ2xvYmFsU3R5bGUuaXNTdGF0aWMpIHtcbiAgICAgIGdsb2JhbFN0eWxlLnJlbmRlclN0eWxlcyhpbnN0YW5jZSwgU1RBVElDX0VYRUNVVElPTl9DT05URVhULCBzdHlsZVNoZWV0LCBzdHlsaXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY29udGV4dCA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICB0aGVtZTogZGV0ZXJtaW5lVGhlbWUocHJvcHMsIHRoZW1lLCBHbG9iYWxTdHlsZUNvbXBvbmVudC5kZWZhdWx0UHJvcHMpXG4gICAgICB9KTtcblxuICAgICAgZ2xvYmFsU3R5bGUucmVuZGVyU3R5bGVzKGluc3RhbmNlLCBjb250ZXh0LCBzdHlsZVNoZWV0LCBzdHlsaXMpO1xuICAgIH1cblxuICAgIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZ2xvYmFsU3R5bGUucmVtb3ZlU3R5bGVzKGluc3RhbmNlLCBzdHlsZVNoZWV0KTtcbiAgICAgIH07XG4gICAgfSwgRU1QVFlfQVJSQVkpO1xuICAgIHJldHVybiBudWxsO1xuICB9IC8vICRGbG93Rml4TWVcblxuXG4gIHJldHVybiBSZWFjdC5tZW1vKEdsb2JhbFN0eWxlQ29tcG9uZW50KTtcbn1cblxuLy8gXG5mdW5jdGlvbiBrZXlmcmFtZXMoc3RyaW5ncykge1xuICAvKiBXYXJuaW5nIGlmIHlvdSd2ZSB1c2VkIGtleWZyYW1lcyBvbiBSZWFjdCBOYXRpdmUgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUud2FybignYGtleWZyYW1lc2AgY2Fubm90IGJlIHVzZWQgb24gUmVhY3ROYXRpdmUsIG9ubHkgb24gdGhlIHdlYi4gVG8gZG8gYW5pbWF0aW9uIGluIFJlYWN0TmF0aXZlIHBsZWFzZSB1c2UgQW5pbWF0ZWQuJyk7XG4gIH1cblxuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgaW50ZXJwb2xhdGlvbnMgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGludGVycG9sYXRpb25zW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHZhciBydWxlcyA9IGNzcy5hcHBseSh2b2lkIDAsIFtzdHJpbmdzXS5jb25jYXQoaW50ZXJwb2xhdGlvbnMpKS5qb2luKCcnKTtcbiAgdmFyIG5hbWUgPSBnZW5lcmF0ZUNvbXBvbmVudElkKHJ1bGVzKTtcbiAgcmV0dXJuIG5ldyBLZXlmcmFtZXMobmFtZSwgW3J1bGVzLCBuYW1lLCAnQGtleWZyYW1lcyddKTtcbn1cblxudmFyIFNlcnZlclN0eWxlU2hlZXQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTZXJ2ZXJTdHlsZVNoZWV0KCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLl9lbWl0U2hlZXRDU1MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY3NzID0gX3RoaXMuaW5zdGFuY2UudG9TdHJpbmcoKTtcblxuICAgICAgdmFyIG5vbmNlID0gZ2V0Tm9uY2UoKTtcbiAgICAgIHZhciBhdHRycyA9IFtub25jZSAmJiBcIm5vbmNlPVxcXCJcIiArIG5vbmNlICsgXCJcXFwiXCIsIFNDX0FUVFIgKyBcIj1cXFwidHJ1ZVxcXCJcIiwgU0NfQVRUUl9WRVJTSU9OICsgXCI9XFxcIlwiICsgU0NfVkVSU0lPTiArIFwiXFxcIlwiXTtcbiAgICAgIHZhciBodG1sQXR0ciA9IGF0dHJzLmZpbHRlcihCb29sZWFuKS5qb2luKCcgJyk7XG4gICAgICByZXR1cm4gXCI8c3R5bGUgXCIgKyBodG1sQXR0ciArIFwiPlwiICsgY3NzICsgXCI8L3N0eWxlPlwiO1xuICAgIH07XG5cbiAgICB0aGlzLmdldFN0eWxlVGFncyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5zZWFsZWQpIHtcbiAgICAgICAgcmV0dXJuIHRocm93U3R5bGVkQ29tcG9uZW50c0Vycm9yKDIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3RoaXMuX2VtaXRTaGVldENTUygpO1xuICAgIH07XG5cbiAgICB0aGlzLmdldFN0eWxlRWxlbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfcHJvcHM7XG5cbiAgICAgIGlmIChfdGhpcy5zZWFsZWQpIHtcbiAgICAgICAgcmV0dXJuIHRocm93U3R5bGVkQ29tcG9uZW50c0Vycm9yKDIpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJvcHMgPSAoX3Byb3BzID0ge30sIF9wcm9wc1tTQ19BVFRSXSA9ICcnLCBfcHJvcHNbU0NfQVRUUl9WRVJTSU9OXSA9IFNDX1ZFUlNJT04sIF9wcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCA9IHtcbiAgICAgICAgX19odG1sOiBfdGhpcy5pbnN0YW5jZS50b1N0cmluZygpXG4gICAgICB9LCBfcHJvcHMpO1xuICAgICAgdmFyIG5vbmNlID0gZ2V0Tm9uY2UoKTtcblxuICAgICAgaWYgKG5vbmNlKSB7XG4gICAgICAgIHByb3BzLm5vbmNlID0gbm9uY2U7XG4gICAgICB9IC8vIHY0IHJldHVybmVkIGFuIGFycmF5IGZvciB0aGlzIGZuLCBzbyB3ZSdsbCBkbyB0aGUgc2FtZSBmb3IgdjUgZm9yIGJhY2t3YXJkIGNvbXBhdFxuXG5cbiAgICAgIHJldHVybiBbLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAga2V5OiBcInNjLTAtMFwiXG4gICAgICB9KSldO1xuICAgIH07XG5cbiAgICB0aGlzLnNlYWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5zZWFsZWQgPSB0cnVlO1xuICAgIH07XG5cbiAgICB0aGlzLmluc3RhbmNlID0gbmV3IFN0eWxlU2hlZXQoe1xuICAgICAgaXNTZXJ2ZXI6IHRydWVcbiAgICB9KTtcbiAgICB0aGlzLnNlYWxlZCA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFNlcnZlclN0eWxlU2hlZXQucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb2xsZWN0U3R5bGVzID0gZnVuY3Rpb24gY29sbGVjdFN0eWxlcyhjaGlsZHJlbikge1xuICAgIGlmICh0aGlzLnNlYWxlZCkge1xuICAgICAgcmV0dXJuIHRocm93U3R5bGVkQ29tcG9uZW50c0Vycm9yKDIpO1xuICAgIH1cblxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChTdHlsZVNoZWV0TWFuYWdlciwge1xuICAgICAgc2hlZXQ6IHRoaXMuaW5zdGFuY2VcbiAgICB9LCBjaGlsZHJlbik7XG4gIH07XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIF9wcm90by5pbnRlcmxlYXZlV2l0aE5vZGVTdHJlYW0gPSBmdW5jdGlvbiBpbnRlcmxlYXZlV2l0aE5vZGVTdHJlYW0oaW5wdXQpIHtcbiAgICB7XG4gICAgICByZXR1cm4gdGhyb3dTdHlsZWRDb21wb25lbnRzRXJyb3IoMyk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBTZXJ2ZXJTdHlsZVNoZWV0O1xufSgpO1xuXG4vLyBleHBvcnQgZGVmYXVsdCA8Q29uZmlnOiB7IHRoZW1lPzogYW55IH0sIEluc3RhbmNlPihcbi8vICBDb21wb25lbnQ6IEFic3RyYWN0Q29tcG9uZW50PENvbmZpZywgSW5zdGFuY2U+XG4vLyApOiBBYnN0cmFjdENvbXBvbmVudDwkRGlmZjxDb25maWcsIHsgdGhlbWU/OiBhbnkgfT4gJiB7IHRoZW1lPzogYW55IH0sIEluc3RhbmNlPlxuLy9cbi8vIGJ1dCB0aGUgb2xkIGJ1aWxkIHN5c3RlbSB0b29saW5nIGRvZXNuJ3Qgc3VwcG9ydCB0aGUgc3ludGF4XG5cbnZhciB3aXRoVGhlbWUgPSAoZnVuY3Rpb24gKENvbXBvbmVudCkge1xuICAvLyAkRmxvd0ZpeE1lIFRoaXMgc2hvdWxkIGJlIFJlYWN0LmZvcndhcmRSZWY8Q29uZmlnLCBJbnN0YW5jZT5cbiAgdmFyIFdpdGhUaGVtZSA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKHByb3BzLCByZWYpIHtcbiAgICB2YXIgdGhlbWUgPSB1c2VDb250ZXh0KFRoZW1lQ29udGV4dCk7IC8vICRGbG93Rml4TWUgZGVmYXVsdFByb3BzIGlzbid0IGRlY2xhcmVkIHNvIGl0IGNhbiBiZSBpbmZlcnJhYmxlXG5cbiAgICB2YXIgZGVmYXVsdFByb3BzID0gQ29tcG9uZW50LmRlZmF1bHRQcm9wcztcbiAgICB2YXIgdGhlbWVQcm9wID0gZGV0ZXJtaW5lVGhlbWUocHJvcHMsIHRoZW1lLCBkZWZhdWx0UHJvcHMpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdGhlbWVQcm9wID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXCJbd2l0aFRoZW1lXSBZb3UgYXJlIG5vdCB1c2luZyBhIFRoZW1lUHJvdmlkZXIgbm9yIHBhc3NpbmcgYSB0aGVtZSBwcm9wIG9yIGEgdGhlbWUgaW4gZGVmYXVsdFByb3BzIGluIGNvbXBvbmVudCBjbGFzcyBcXFwiXCIgKyBnZXRDb21wb25lbnROYW1lKENvbXBvbmVudCkgKyBcIlxcXCJcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICB0aGVtZTogdGhlbWVQcm9wLFxuICAgICAgcmVmOiByZWZcbiAgICB9KSk7XG4gIH0pO1xuICBob2lzdChXaXRoVGhlbWUsIENvbXBvbmVudCk7XG4gIFdpdGhUaGVtZS5kaXNwbGF5TmFtZSA9IFwiV2l0aFRoZW1lKFwiICsgZ2V0Q29tcG9uZW50TmFtZShDb21wb25lbnQpICsgXCIpXCI7XG4gIHJldHVybiBXaXRoVGhlbWU7XG59KTtcblxuLy8gXG5cbnZhciB1c2VUaGVtZSA9IGZ1bmN0aW9uIHVzZVRoZW1lKCkge1xuICByZXR1cm4gdXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xufTtcblxuLy8gXG52YXIgX19QUklWQVRFX18gPSB7XG4gIFN0eWxlU2hlZXQ6IFN0eWxlU2hlZXQsXG4gIG1hc3RlclNoZWV0OiBtYXN0ZXJTaGVldFxufTtcblxuLy8gXG4vKiBEZWZpbmUgYnVuZGxlIHZlcnNpb24gZm9yIGV4cG9ydCAqL1xuXG52YXIgdmVyc2lvbiA9IFwiNS4xLjFcIjtcbi8qIFdhcm5pbmcgaWYgeW91J3ZlIGltcG9ydGVkIHRoaXMgZmlsZSBvbiBSZWFjdCBOYXRpdmUgKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgY29uc29sZS53YXJuKFwiSXQgbG9va3MgbGlrZSB5b3UndmUgaW1wb3J0ZWQgJ3N0eWxlZC1jb21wb25lbnRzJyBvbiBSZWFjdCBOYXRpdmUuXFxuXCIgKyBcIlBlcmhhcHMgeW91J3JlIGxvb2tpbmcgdG8gaW1wb3J0ICdzdHlsZWQtY29tcG9uZW50cy9uYXRpdmUnP1xcblwiICsgJ1JlYWQgbW9yZSBhYm91dCB0aGlzIGF0IGh0dHBzOi8vd3d3LnN0eWxlZC1jb21wb25lbnRzLmNvbS9kb2NzL2Jhc2ljcyNyZWFjdC1uYXRpdmUnKTtcbn1cbi8qIFdhcm5pbmcgaWYgdGhlcmUgYXJlIHNldmVyYWwgaW5zdGFuY2VzIG9mIHN0eWxlZC1jb21wb25lbnRzICovXG5cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICB3aW5kb3dbJ19fc3R5bGVkLWNvbXBvbmVudHMtaW5pdF9fJ10gPSB3aW5kb3dbJ19fc3R5bGVkLWNvbXBvbmVudHMtaW5pdF9fJ10gfHwgMDtcblxuICBpZiAod2luZG93WydfX3N0eWxlZC1jb21wb25lbnRzLWluaXRfXyddID09PSAxKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLndhcm4oXCJJdCBsb29rcyBsaWtlIHRoZXJlIGFyZSBzZXZlcmFsIGluc3RhbmNlcyBvZiAnc3R5bGVkLWNvbXBvbmVudHMnIGluaXRpYWxpemVkIGluIHRoaXMgYXBwbGljYXRpb24uIFwiICsgJ1RoaXMgbWF5IGNhdXNlIGR5bmFtaWMgc3R5bGVzIG5vdCByZW5kZXJpbmcgcHJvcGVybHksIGVycm9ycyBoYXBwZW5pbmcgZHVyaW5nIHJlaHlkcmF0aW9uIHByb2Nlc3MsICcgKyAnbWlzc2luZyB0aGVtZSBwcm9wLCBhbmQgbWFrZXMgeW91ciBhcHBsaWNhdGlvbiBiaWdnZXIgd2l0aG91dCBhIGdvb2QgcmVhc29uLlxcblxcbicgKyAnU2VlIGh0dHBzOi8vcy1jLnNoLzJCQVh6ZWQgZm9yIG1vcmUgaW5mby4nKTtcbiAgfVxuXG4gIHdpbmRvd1snX19zdHlsZWQtY29tcG9uZW50cy1pbml0X18nXSArPSAxO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdHlsZWQ7XG5leHBvcnQgeyBTZXJ2ZXJTdHlsZVNoZWV0LCBTdHlsZVNoZWV0Q29uc3VtZXIsIFN0eWxlU2hlZXRDb250ZXh0LCBTdHlsZVNoZWV0TWFuYWdlciwgVGhlbWVDb25zdW1lciwgVGhlbWVDb250ZXh0LCBUaGVtZVByb3ZpZGVyLCBfX1BSSVZBVEVfXywgY3JlYXRlR2xvYmFsU3R5bGUsIGNzcywgaXNTdHlsZWRDb21wb25lbnQsIGtleWZyYW1lcywgdXNlVGhlbWUsIHZlcnNpb24sIHdpdGhUaGVtZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3R5bGVkLWNvbXBvbmVudHMuYnJvd3Nlci5lc20uanMubWFwXG4iLCJmdW5jdGlvbiBtZW1vaXplKGZuKSB7XG4gIHZhciBjYWNoZSA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgIGlmIChjYWNoZVthcmddID09PSB1bmRlZmluZWQpIGNhY2hlW2FyZ10gPSBmbihhcmcpO1xuICAgIHJldHVybiBjYWNoZVthcmddO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBtZW1vaXplO1xuIiwiaW1wb3J0IG1lbW9pemUgZnJvbSAnQGVtb3Rpb24vbWVtb2l6ZSc7XG5cbnZhciByZWFjdFByb3BzUmVnZXggPSAvXigoY2hpbGRyZW58ZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUx8a2V5fHJlZnxhdXRvRm9jdXN8ZGVmYXVsdFZhbHVlfGRlZmF1bHRDaGVja2VkfGlubmVySFRNTHxzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmd8c3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nfHZhbHVlTGlua3xhY2NlcHR8YWNjZXB0Q2hhcnNldHxhY2Nlc3NLZXl8YWN0aW9ufGFsbG93fGFsbG93VXNlck1lZGlhfGFsbG93UGF5bWVudFJlcXVlc3R8YWxsb3dGdWxsU2NyZWVufGFsbG93VHJhbnNwYXJlbmN5fGFsdHxhc3luY3xhdXRvQ29tcGxldGV8YXV0b1BsYXl8Y2FwdHVyZXxjZWxsUGFkZGluZ3xjZWxsU3BhY2luZ3xjaGFsbGVuZ2V8Y2hhclNldHxjaGVja2VkfGNpdGV8Y2xhc3NJRHxjbGFzc05hbWV8Y29sc3xjb2xTcGFufGNvbnRlbnR8Y29udGVudEVkaXRhYmxlfGNvbnRleHRNZW51fGNvbnRyb2xzfGNvbnRyb2xzTGlzdHxjb29yZHN8Y3Jvc3NPcmlnaW58ZGF0YXxkYXRlVGltZXxkZWNvZGluZ3xkZWZhdWx0fGRlZmVyfGRpcnxkaXNhYmxlZHxkaXNhYmxlUGljdHVyZUluUGljdHVyZXxkb3dubG9hZHxkcmFnZ2FibGV8ZW5jVHlwZXxmb3JtfGZvcm1BY3Rpb258Zm9ybUVuY1R5cGV8Zm9ybU1ldGhvZHxmb3JtTm9WYWxpZGF0ZXxmb3JtVGFyZ2V0fGZyYW1lQm9yZGVyfGhlYWRlcnN8aGVpZ2h0fGhpZGRlbnxoaWdofGhyZWZ8aHJlZkxhbmd8aHRtbEZvcnxodHRwRXF1aXZ8aWR8aW5wdXRNb2RlfGludGVncml0eXxpc3xrZXlQYXJhbXN8a2V5VHlwZXxraW5kfGxhYmVsfGxhbmd8bGlzdHxsb2FkaW5nfGxvb3B8bG93fG1hcmdpbkhlaWdodHxtYXJnaW5XaWR0aHxtYXh8bWF4TGVuZ3RofG1lZGlhfG1lZGlhR3JvdXB8bWV0aG9kfG1pbnxtaW5MZW5ndGh8bXVsdGlwbGV8bXV0ZWR8bmFtZXxub25jZXxub1ZhbGlkYXRlfG9wZW58b3B0aW11bXxwYXR0ZXJufHBsYWNlaG9sZGVyfHBsYXlzSW5saW5lfHBvc3RlcnxwcmVsb2FkfHByb2ZpbGV8cmFkaW9Hcm91cHxyZWFkT25seXxyZWZlcnJlclBvbGljeXxyZWx8cmVxdWlyZWR8cmV2ZXJzZWR8cm9sZXxyb3dzfHJvd1NwYW58c2FuZGJveHxzY29wZXxzY29wZWR8c2Nyb2xsaW5nfHNlYW1sZXNzfHNlbGVjdGVkfHNoYXBlfHNpemV8c2l6ZXN8c2xvdHxzcGFufHNwZWxsQ2hlY2t8c3JjfHNyY0RvY3xzcmNMYW5nfHNyY1NldHxzdGFydHxzdGVwfHN0eWxlfHN1bW1hcnl8dGFiSW5kZXh8dGFyZ2V0fHRpdGxlfHR5cGV8dXNlTWFwfHZhbHVlfHdpZHRofHdtb2RlfHdyYXB8YWJvdXR8ZGF0YXR5cGV8aW5saXN0fHByZWZpeHxwcm9wZXJ0eXxyZXNvdXJjZXx0eXBlb2Z8dm9jYWJ8YXV0b0NhcGl0YWxpemV8YXV0b0NvcnJlY3R8YXV0b1NhdmV8Y29sb3J8aW5lcnR8aXRlbVByb3B8aXRlbVNjb3BlfGl0ZW1UeXBlfGl0ZW1JRHxpdGVtUmVmfG9ufHJlc3VsdHN8c2VjdXJpdHl8dW5zZWxlY3RhYmxlfGFjY2VudEhlaWdodHxhY2N1bXVsYXRlfGFkZGl0aXZlfGFsaWdubWVudEJhc2VsaW5lfGFsbG93UmVvcmRlcnxhbHBoYWJldGljfGFtcGxpdHVkZXxhcmFiaWNGb3JtfGFzY2VudHxhdHRyaWJ1dGVOYW1lfGF0dHJpYnV0ZVR5cGV8YXV0b1JldmVyc2V8YXppbXV0aHxiYXNlRnJlcXVlbmN5fGJhc2VsaW5lU2hpZnR8YmFzZVByb2ZpbGV8YmJveHxiZWdpbnxiaWFzfGJ5fGNhbGNNb2RlfGNhcEhlaWdodHxjbGlwfGNsaXBQYXRoVW5pdHN8Y2xpcFBhdGh8Y2xpcFJ1bGV8Y29sb3JJbnRlcnBvbGF0aW9ufGNvbG9ySW50ZXJwb2xhdGlvbkZpbHRlcnN8Y29sb3JQcm9maWxlfGNvbG9yUmVuZGVyaW5nfGNvbnRlbnRTY3JpcHRUeXBlfGNvbnRlbnRTdHlsZVR5cGV8Y3Vyc29yfGN4fGN5fGR8ZGVjZWxlcmF0ZXxkZXNjZW50fGRpZmZ1c2VDb25zdGFudHxkaXJlY3Rpb258ZGlzcGxheXxkaXZpc29yfGRvbWluYW50QmFzZWxpbmV8ZHVyfGR4fGR5fGVkZ2VNb2RlfGVsZXZhdGlvbnxlbmFibGVCYWNrZ3JvdW5kfGVuZHxleHBvbmVudHxleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkfGZpbGx8ZmlsbE9wYWNpdHl8ZmlsbFJ1bGV8ZmlsdGVyfGZpbHRlclJlc3xmaWx0ZXJVbml0c3xmbG9vZENvbG9yfGZsb29kT3BhY2l0eXxmb2N1c2FibGV8Zm9udEZhbWlseXxmb250U2l6ZXxmb250U2l6ZUFkanVzdHxmb250U3RyZXRjaHxmb250U3R5bGV8Zm9udFZhcmlhbnR8Zm9udFdlaWdodHxmb3JtYXR8ZnJvbXxmcnxmeHxmeXxnMXxnMnxnbHlwaE5hbWV8Z2x5cGhPcmllbnRhdGlvbkhvcml6b250YWx8Z2x5cGhPcmllbnRhdGlvblZlcnRpY2FsfGdseXBoUmVmfGdyYWRpZW50VHJhbnNmb3JtfGdyYWRpZW50VW5pdHN8aGFuZ2luZ3xob3JpekFkdlh8aG9yaXpPcmlnaW5YfGlkZW9ncmFwaGljfGltYWdlUmVuZGVyaW5nfGlufGluMnxpbnRlcmNlcHR8a3xrMXxrMnxrM3xrNHxrZXJuZWxNYXRyaXh8a2VybmVsVW5pdExlbmd0aHxrZXJuaW5nfGtleVBvaW50c3xrZXlTcGxpbmVzfGtleVRpbWVzfGxlbmd0aEFkanVzdHxsZXR0ZXJTcGFjaW5nfGxpZ2h0aW5nQ29sb3J8bGltaXRpbmdDb25lQW5nbGV8bG9jYWx8bWFya2VyRW5kfG1hcmtlck1pZHxtYXJrZXJTdGFydHxtYXJrZXJIZWlnaHR8bWFya2VyVW5pdHN8bWFya2VyV2lkdGh8bWFza3xtYXNrQ29udGVudFVuaXRzfG1hc2tVbml0c3xtYXRoZW1hdGljYWx8bW9kZXxudW1PY3RhdmVzfG9mZnNldHxvcGFjaXR5fG9wZXJhdG9yfG9yZGVyfG9yaWVudHxvcmllbnRhdGlvbnxvcmlnaW58b3ZlcmZsb3d8b3ZlcmxpbmVQb3NpdGlvbnxvdmVybGluZVRoaWNrbmVzc3xwYW5vc2UxfHBhaW50T3JkZXJ8cGF0aExlbmd0aHxwYXR0ZXJuQ29udGVudFVuaXRzfHBhdHRlcm5UcmFuc2Zvcm18cGF0dGVyblVuaXRzfHBvaW50ZXJFdmVudHN8cG9pbnRzfHBvaW50c0F0WHxwb2ludHNBdFl8cG9pbnRzQXRafHByZXNlcnZlQWxwaGF8cHJlc2VydmVBc3BlY3RSYXRpb3xwcmltaXRpdmVVbml0c3xyfHJhZGl1c3xyZWZYfHJlZll8cmVuZGVyaW5nSW50ZW50fHJlcGVhdENvdW50fHJlcGVhdER1cnxyZXF1aXJlZEV4dGVuc2lvbnN8cmVxdWlyZWRGZWF0dXJlc3xyZXN0YXJ0fHJlc3VsdHxyb3RhdGV8cnh8cnl8c2NhbGV8c2VlZHxzaGFwZVJlbmRlcmluZ3xzbG9wZXxzcGFjaW5nfHNwZWN1bGFyQ29uc3RhbnR8c3BlY3VsYXJFeHBvbmVudHxzcGVlZHxzcHJlYWRNZXRob2R8c3RhcnRPZmZzZXR8c3RkRGV2aWF0aW9ufHN0ZW1ofHN0ZW12fHN0aXRjaFRpbGVzfHN0b3BDb2xvcnxzdG9wT3BhY2l0eXxzdHJpa2V0aHJvdWdoUG9zaXRpb258c3RyaWtldGhyb3VnaFRoaWNrbmVzc3xzdHJpbmd8c3Ryb2tlfHN0cm9rZURhc2hhcnJheXxzdHJva2VEYXNob2Zmc2V0fHN0cm9rZUxpbmVjYXB8c3Ryb2tlTGluZWpvaW58c3Ryb2tlTWl0ZXJsaW1pdHxzdHJva2VPcGFjaXR5fHN0cm9rZVdpZHRofHN1cmZhY2VTY2FsZXxzeXN0ZW1MYW5ndWFnZXx0YWJsZVZhbHVlc3x0YXJnZXRYfHRhcmdldFl8dGV4dEFuY2hvcnx0ZXh0RGVjb3JhdGlvbnx0ZXh0UmVuZGVyaW5nfHRleHRMZW5ndGh8dG98dHJhbnNmb3JtfHUxfHUyfHVuZGVybGluZVBvc2l0aW9ufHVuZGVybGluZVRoaWNrbmVzc3x1bmljb2RlfHVuaWNvZGVCaWRpfHVuaWNvZGVSYW5nZXx1bml0c1BlckVtfHZBbHBoYWJldGljfHZIYW5naW5nfHZJZGVvZ3JhcGhpY3x2TWF0aGVtYXRpY2FsfHZhbHVlc3x2ZWN0b3JFZmZlY3R8dmVyc2lvbnx2ZXJ0QWR2WXx2ZXJ0T3JpZ2luWHx2ZXJ0T3JpZ2luWXx2aWV3Qm94fHZpZXdUYXJnZXR8dmlzaWJpbGl0eXx3aWR0aHN8d29yZFNwYWNpbmd8d3JpdGluZ01vZGV8eHx4SGVpZ2h0fHgxfHgyfHhDaGFubmVsU2VsZWN0b3J8eGxpbmtBY3R1YXRlfHhsaW5rQXJjcm9sZXx4bGlua0hyZWZ8eGxpbmtSb2xlfHhsaW5rU2hvd3x4bGlua1RpdGxlfHhsaW5rVHlwZXx4bWxCYXNlfHhtbG5zfHhtbG5zWGxpbmt8eG1sTGFuZ3x4bWxTcGFjZXx5fHkxfHkyfHlDaGFubmVsU2VsZWN0b3J8enx6b29tQW5kUGFufGZvcnxjbGFzc3xhdXRvZm9jdXMpfCgoW0RkXVtBYV1bVHRdW0FhXXxbQWFdW1JyXVtJaV1bQWFdfHgpLS4qKSkkLzsgLy8gaHR0cHM6Ly9lc2JlbmNoLmNvbS9iZW5jaC81YmZlZTY4YTRjZDdlNjAwOWVmNjFkMjNcblxudmFyIGluZGV4ID0gbWVtb2l6ZShmdW5jdGlvbiAocHJvcCkge1xuICByZXR1cm4gcmVhY3RQcm9wc1JlZ2V4LnRlc3QocHJvcCkgfHwgcHJvcC5jaGFyQ29kZUF0KDApID09PSAxMTFcbiAgLyogbyAqL1xuICAmJiBwcm9wLmNoYXJDb2RlQXQoMSkgPT09IDExMFxuICAvKiBuICovXG4gICYmIHByb3AuY2hhckNvZGVBdCgyKSA8IDkxO1xufVxuLyogWisxICovXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBpbmRleDtcbiIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTQwL2dpLCAnQCcpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBwYXJhbXNTZXJpYWxpemVyKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplZFBhcmFtcztcbiAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zU2VyaWFsaXplcihwYXJhbXMpO1xuICB9IGVsc2UgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcnRzID0gW107XG5cbiAgICB1dGlscy5mb3JFYWNoKHBhcmFtcywgZnVuY3Rpb24gc2VyaWFsaXplKHZhbCwga2V5KSB7XG4gICAgICBpZiAodmFsID09PSBudWxsIHx8IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHV0aWxzLmlzQXJyYXkodmFsKSkge1xuICAgICAgICBrZXkgPSBrZXkgKyAnW10nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gW3ZhbF07XG4gICAgICB9XG5cbiAgICAgIHV0aWxzLmZvckVhY2godmFsLCBmdW5jdGlvbiBwYXJzZVZhbHVlKHYpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzRGF0ZSh2KSkge1xuICAgICAgICAgIHYgPSB2LnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QodikpIHtcbiAgICAgICAgICB2ID0gSlNPTi5zdHJpbmdpZnkodik7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJ0cy5qb2luKCcmJyk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIHZhciBoYXNobWFya0luZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgICBpZiAoaGFzaG1hcmtJbmRleCAhPT0gLTEpIHtcbiAgICAgIHVybCA9IHVybC5zbGljZSgwLCBoYXNobWFya0luZGV4KTtcbiAgICB9XG5cbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgbm9ybWFsaXplSGVhZGVyTmFtZSA9IHJlcXVpcmUoJy4vaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lJyk7XG5cbnZhciBERUZBVUxUX0NPTlRFTlRfVFlQRSA9IHtcbiAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG59O1xuXG5mdW5jdGlvbiBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgdmFsdWUpIHtcbiAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzKSAmJiB1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzWydDb250ZW50LVR5cGUnXSkpIHtcbiAgICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRBZGFwdGVyKCkge1xuICB2YXIgYWRhcHRlcjtcbiAgaWYgKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3IgYnJvd3NlcnMgdXNlIFhIUiBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMveGhyJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nKSB7XG4gICAgLy8gRm9yIG5vZGUgdXNlIEhUVFAgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL2h0dHAnKTtcbiAgfVxuICByZXR1cm4gYWRhcHRlcjtcbn1cblxudmFyIGRlZmF1bHRzID0ge1xuICBhZGFwdGVyOiBnZXREZWZhdWx0QWRhcHRlcigpLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdBY2NlcHQnKTtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdDb250ZW50LVR5cGUnKTtcbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNBcnJheUJ1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzU3RyZWFtKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0ZpbGUoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQmxvYihkYXRhKVxuICAgICkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyVmlldyhkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc09iamVjdChkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIHRyYW5zZm9ybVJlc3BvbnNlOiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UoZGF0YSkge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkgeyAvKiBJZ25vcmUgKi8gfVxuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfVxufTtcblxuZGVmYXVsdHMuaGVhZGVycyA9IHtcbiAgY29tbW9uOiB7XG4gICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0gdXRpbHMubWVyZ2UoREVGQVVMVF9DT05URU5UX1RZUEUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHM7XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgc2V0dGxlID0gcmVxdWlyZSgnLi8uLi9jb3JlL3NldHRsZScpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgYnVpbGRGdWxsUGF0aCA9IHJlcXVpcmUoJy4uL2NvcmUvYnVpbGRGdWxsUGF0aCcpO1xudmFyIHBhcnNlSGVhZGVycyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9wYXJzZUhlYWRlcnMnKTtcbnZhciBpc1VSTFNhbWVPcmlnaW4gPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luJyk7XG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL2NyZWF0ZUVycm9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geGhyQWRhcHRlcihjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICB2YXIgcmVxdWVzdEhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKHJlcXVlc3REYXRhKSkge1xuICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH1cblxuICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkIHx8ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICB2YXIgZnVsbFBhdGggPSBidWlsZEZ1bGxQYXRoKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChmdWxsUGF0aCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLCB0cnVlKTtcblxuICAgIC8vIFNldCB0aGUgcmVxdWVzdCB0aW1lb3V0IGluIE1TXG4gICAgcmVxdWVzdC50aW1lb3V0ID0gY29uZmlnLnRpbWVvdXQ7XG5cbiAgICAvLyBMaXN0ZW4gZm9yIHJlYWR5IHN0YXRlXG4gICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0IHx8IHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSByZXF1ZXN0IGVycm9yZWQgb3V0IGFuZCB3ZSBkaWRuJ3QgZ2V0IGEgcmVzcG9uc2UsIHRoaXMgd2lsbCBiZVxuICAgICAgLy8gaGFuZGxlZCBieSBvbmVycm9yIGluc3RlYWRcbiAgICAgIC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG4gICAgICAvLyB3aWxsIHJldHVybiBzdGF0dXMgYXMgMCBldmVuIHRob3VnaCBpdCdzIGEgc3VjY2Vzc2Z1bCByZXF1ZXN0XG4gICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDAgJiYgIShyZXF1ZXN0LnJlc3BvbnNlVVJMICYmIHJlcXVlc3QucmVzcG9uc2VVUkwuaW5kZXhPZignZmlsZTonKSA9PT0gMCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuICAgICAgdmFyIHJlc3BvbnNlSGVhZGVycyA9ICdnZXRBbGxSZXNwb25zZUhlYWRlcnMnIGluIHJlcXVlc3QgPyBwYXJzZUhlYWRlcnMocmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkgOiBudWxsO1xuICAgICAgdmFyIHJlc3BvbnNlRGF0YSA9ICFjb25maWcucmVzcG9uc2VUeXBlIHx8IGNvbmZpZy5yZXNwb25zZVR5cGUgPT09ICd0ZXh0JyA/IHJlcXVlc3QucmVzcG9uc2VUZXh0IDogcmVxdWVzdC5yZXNwb25zZTtcbiAgICAgIHZhciByZXNwb25zZSA9IHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBicm93c2VyIHJlcXVlc3QgY2FuY2VsbGF0aW9uIChhcyBvcHBvc2VkIHRvIGEgbWFudWFsIGNhbmNlbGxhdGlvbilcbiAgICByZXF1ZXN0Lm9uYWJvcnQgPSBmdW5jdGlvbiBoYW5kbGVBYm9ydCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignUmVxdWVzdCBhYm9ydGVkJywgY29uZmlnLCAnRUNPTk5BQk9SVEVEJywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGxvdyBsZXZlbCBuZXR3b3JrIGVycm9yc1xuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKCkge1xuICAgICAgLy8gUmVhbCBlcnJvcnMgYXJlIGhpZGRlbiBmcm9tIHVzIGJ5IHRoZSBicm93c2VyXG4gICAgICAvLyBvbmVycm9yIHNob3VsZCBvbmx5IGZpcmUgaWYgaXQncyBhIG5ldHdvcmsgZXJyb3JcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignTmV0d29yayBFcnJvcicsIGNvbmZpZywgbnVsbCwgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIHRpbWVvdXRcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG4gICAgICB2YXIgdGltZW91dEVycm9yTWVzc2FnZSA9ICd0aW1lb3V0IG9mICcgKyBjb25maWcudGltZW91dCArICdtcyBleGNlZWRlZCc7XG4gICAgICBpZiAoY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSA9IGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlO1xuICAgICAgfVxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKHRpbWVvdXRFcnJvck1lc3NhZ2UsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAgIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG4gICAgaWYgKHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpIHtcbiAgICAgIHZhciBjb29raWVzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2Nvb2tpZXMnKTtcblxuICAgICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgICB2YXIgeHNyZlZhbHVlID0gKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMgfHwgaXNVUkxTYW1lT3JpZ2luKGZ1bGxQYXRoKSkgJiYgY29uZmlnLnhzcmZDb29raWVOYW1lID9cbiAgICAgICAgY29va2llcy5yZWFkKGNvbmZpZy54c3JmQ29va2llTmFtZSkgOlxuICAgICAgICB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnNbY29uZmlnLnhzcmZIZWFkZXJOYW1lXSA9IHhzcmZWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycywgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3REYXRhID09PSAndW5kZWZpbmVkJyAmJiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBoZWFkZXIgdG8gdGhlIHJlcXVlc3RcbiAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcud2l0aENyZWRlbnRpYWxzKSkge1xuICAgICAgcmVxdWVzdC53aXRoQ3JlZGVudGlhbHMgPSAhIWNvbmZpZy53aXRoQ3JlZGVudGlhbHM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIEV4cGVjdGVkIERPTUV4Y2VwdGlvbiB0aHJvd24gYnkgYnJvd3NlcnMgbm90IGNvbXBhdGlibGUgWE1MSHR0cFJlcXVlc3QgTGV2ZWwgMi5cbiAgICAgICAgLy8gQnV0LCB0aGlzIGNhbiBiZSBzdXBwcmVzc2VkIGZvciAnanNvbicgdHlwZSBhcyBpdCBjYW4gYmUgcGFyc2VkIGJ5IGRlZmF1bHQgJ3RyYW5zZm9ybVJlc3BvbnNlJyBmdW5jdGlvbi5cbiAgICAgICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgcHJvZ3Jlc3MgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25Eb3dubG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgLy8gTm90IGFsbCBicm93c2VycyBzdXBwb3J0IHVwbG9hZCBldmVudHNcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nICYmIHJlcXVlc3QudXBsb2FkKSB7XG4gICAgICByZXF1ZXN0LnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgICAvLyBIYW5kbGUgY2FuY2VsbGF0aW9uXG4gICAgICBjb25maWcuY2FuY2VsVG9rZW4ucHJvbWlzZS50aGVuKGZ1bmN0aW9uIG9uQ2FuY2VsZWQoY2FuY2VsKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgcmVqZWN0KGNhbmNlbCk7XG4gICAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAocmVxdWVzdERhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVxdWVzdERhdGEgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEpO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuL2VuaGFuY2VFcnJvcicpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVFcnJvcihtZXNzYWdlLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG4vKipcbiAqIENvbmZpZy1zcGVjaWZpYyBtZXJnZS1mdW5jdGlvbiB3aGljaCBjcmVhdGVzIGEgbmV3IGNvbmZpZy1vYmplY3RcbiAqIGJ5IG1lcmdpbmcgdHdvIGNvbmZpZ3VyYXRpb24gb2JqZWN0cyB0b2dldGhlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMVxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzJcbiAqIEByZXR1cm5zIHtPYmplY3R9IE5ldyBvYmplY3QgcmVzdWx0aW5nIGZyb20gbWVyZ2luZyBjb25maWcyIHRvIGNvbmZpZzFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBtZXJnZUNvbmZpZyhjb25maWcxLCBjb25maWcyKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBjb25maWcyID0gY29uZmlnMiB8fCB7fTtcbiAgdmFyIGNvbmZpZyA9IHt9O1xuXG4gIHZhciB2YWx1ZUZyb21Db25maWcyS2V5cyA9IFsndXJsJywgJ21ldGhvZCcsICdwYXJhbXMnLCAnZGF0YSddO1xuICB2YXIgbWVyZ2VEZWVwUHJvcGVydGllc0tleXMgPSBbJ2hlYWRlcnMnLCAnYXV0aCcsICdwcm94eSddO1xuICB2YXIgZGVmYXVsdFRvQ29uZmlnMktleXMgPSBbXG4gICAgJ2Jhc2VVUkwnLCAndXJsJywgJ3RyYW5zZm9ybVJlcXVlc3QnLCAndHJhbnNmb3JtUmVzcG9uc2UnLCAncGFyYW1zU2VyaWFsaXplcicsXG4gICAgJ3RpbWVvdXQnLCAnd2l0aENyZWRlbnRpYWxzJywgJ2FkYXB0ZXInLCAncmVzcG9uc2VUeXBlJywgJ3hzcmZDb29raWVOYW1lJyxcbiAgICAneHNyZkhlYWRlck5hbWUnLCAnb25VcGxvYWRQcm9ncmVzcycsICdvbkRvd25sb2FkUHJvZ3Jlc3MnLFxuICAgICdtYXhDb250ZW50TGVuZ3RoJywgJ3ZhbGlkYXRlU3RhdHVzJywgJ21heFJlZGlyZWN0cycsICdodHRwQWdlbnQnLFxuICAgICdodHRwc0FnZW50JywgJ2NhbmNlbFRva2VuJywgJ3NvY2tldFBhdGgnXG4gIF07XG5cbiAgdXRpbHMuZm9yRWFjaCh2YWx1ZUZyb21Db25maWcyS2V5cywgZnVuY3Rpb24gdmFsdWVGcm9tQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKHR5cGVvZiBjb25maWcyW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMltwcm9wXTtcbiAgICB9XG4gIH0pO1xuXG4gIHV0aWxzLmZvckVhY2gobWVyZ2VEZWVwUHJvcGVydGllc0tleXMsIGZ1bmN0aW9uIG1lcmdlRGVlcFByb3BlcnRpZXMocHJvcCkge1xuICAgIGlmICh1dGlscy5pc09iamVjdChjb25maWcyW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gdXRpbHMuZGVlcE1lcmdlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbmZpZzJbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcyW3Byb3BdO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IHV0aWxzLmRlZXBNZXJnZShjb25maWcxW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcxW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMVtwcm9wXTtcbiAgICB9XG4gIH0pO1xuXG4gIHV0aWxzLmZvckVhY2goZGVmYXVsdFRvQ29uZmlnMktleXMsIGZ1bmN0aW9uIGRlZmF1bHRUb0NvbmZpZzIocHJvcCkge1xuICAgIGlmICh0eXBlb2YgY29uZmlnMltwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzJbcHJvcF07XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29uZmlnMVtwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzFbcHJvcF07XG4gICAgfVxuICB9KTtcblxuICB2YXIgYXhpb3NLZXlzID0gdmFsdWVGcm9tQ29uZmlnMktleXNcbiAgICAuY29uY2F0KG1lcmdlRGVlcFByb3BlcnRpZXNLZXlzKVxuICAgIC5jb25jYXQoZGVmYXVsdFRvQ29uZmlnMktleXMpO1xuXG4gIHZhciBvdGhlcktleXMgPSBPYmplY3RcbiAgICAua2V5cyhjb25maWcyKVxuICAgIC5maWx0ZXIoZnVuY3Rpb24gZmlsdGVyQXhpb3NLZXlzKGtleSkge1xuICAgICAgcmV0dXJuIGF4aW9zS2V5cy5pbmRleE9mKGtleSkgPT09IC0xO1xuICAgIH0pO1xuXG4gIHV0aWxzLmZvckVhY2gob3RoZXJLZXlzLCBmdW5jdGlvbiBvdGhlcktleXNEZWZhdWx0VG9Db25maWcyKHByb3ApIHtcbiAgICBpZiAodHlwZW9mIGNvbmZpZzJbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcyW3Byb3BdO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbmZpZzFbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcxW3Byb3BdO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGNvbmZpZztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQSBgQ2FuY2VsYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbChtZXNzYWdlKSB7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG59XG5cbkNhbmNlbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdDYW5jZWwnICsgKHRoaXMubWVzc2FnZSA/ICc6ICcgKyB0aGlzLm1lc3NhZ2UgOiAnJyk7XG59O1xuXG5DYW5jZWwucHJvdG90eXBlLl9fQ0FOQ0VMX18gPSB0cnVlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbDtcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9vbWl0ID0gcmVxdWlyZSgnLi91dGlscy9vbWl0Jyk7XG5cbnZhciBfb21pdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vbWl0KTtcblxudmFyIF9zaGFsbG93RXF1YWwgPSByZXF1aXJlKCcuL3V0aWxzL3NoYWxsb3dFcXVhbCcpO1xuXG52YXIgX3NoYWxsb3dFcXVhbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaGFsbG93RXF1YWwpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8vIHV0aWxzXG5cblxudmFyIG1haW5TdHlsZSA9IHtcbiAgd2lkdGg6ICcxMDAlJyxcbiAgaGVpZ2h0OiAnMTAwJScsXG4gIGxlZnQ6IDAsXG4gIHRvcDogMCxcbiAgbWFyZ2luOiAwLFxuICBwYWRkaW5nOiAwLFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJ1xufTtcblxudmFyIHN0eWxlID0ge1xuICB3aWR0aDogMCxcbiAgaGVpZ2h0OiAwLFxuICBsZWZ0OiAwLFxuICB0b3A6IDAsXG4gIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgcG9zaXRpb246ICdhYnNvbHV0ZSdcbn07XG5cbnZhciBHb29nbGVNYXBNYXJrZXJzID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKEdvb2dsZU1hcE1hcmtlcnMsIF9Db21wb25lbnQpO1xuXG4gIC8qIGVzbGludC1kaXNhYmxlIHJlYWN0L2ZvcmJpZC1wcm9wLXR5cGVzICovXG4gIGZ1bmN0aW9uIEdvb2dsZU1hcE1hcmtlcnMocHJvcHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgR29vZ2xlTWFwTWFya2Vycyk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgIF90aGlzLl9nZXRTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNoaWxkcmVuOiBfdGhpcy5wcm9wcy5kaXNwYXRjaGVyLmdldENoaWxkcmVuKCksXG4gICAgICAgIHVwZGF0ZUNvdW50ZXI6IF90aGlzLnByb3BzLmRpc3BhdGNoZXIuZ2V0VXBkYXRlQ291bnRlcigpXG4gICAgICB9O1xuICAgIH07XG5cbiAgICBfdGhpcy5fb25DaGFuZ2VIYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFfdGhpcy5kaW1lbnNpb25zQ2FjaGVfKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZXZDaGlsZENvdW50ID0gKF90aGlzLnN0YXRlLmNoaWxkcmVuIHx8IFtdKS5sZW5ndGg7XG4gICAgICB2YXIgc3RhdGUgPSBfdGhpcy5fZ2V0U3RhdGUoKTtcblxuICAgICAgX3RoaXMuc2V0U3RhdGUoc3RhdGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIChzdGF0ZS5jaGlsZHJlbiB8fCBbXSkubGVuZ3RoICE9PSBwcmV2Q2hpbGRDb3VudCAmJiBfdGhpcy5fb25Nb3VzZUNoYW5nZUhhbmRsZXIoKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5fb25DaGlsZENsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLm9uQ2hpbGRDbGljaykge1xuICAgICAgICBpZiAoX3RoaXMuaG92ZXJDaGlsZFByb3BzXykge1xuICAgICAgICAgIHZhciBob3ZlcktleSA9IF90aGlzLmhvdmVyS2V5XztcbiAgICAgICAgICB2YXIgY2hpbGRQcm9wcyA9IF90aGlzLmhvdmVyQ2hpbGRQcm9wc187XG4gICAgICAgICAgLy8gY2xpY2sgd29ya3Mgb25seSBvbiBob3ZlcmVkIGl0ZW1cbiAgICAgICAgICBfdGhpcy5wcm9wcy5vbkNoaWxkQ2xpY2soaG92ZXJLZXksIGNoaWxkUHJvcHMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLl9vbkNoaWxkTW91c2VEb3duID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLm9uQ2hpbGRNb3VzZURvd24pIHtcbiAgICAgICAgaWYgKF90aGlzLmhvdmVyQ2hpbGRQcm9wc18pIHtcbiAgICAgICAgICB2YXIgaG92ZXJLZXkgPSBfdGhpcy5ob3ZlcktleV87XG4gICAgICAgICAgdmFyIGNoaWxkUHJvcHMgPSBfdGhpcy5ob3ZlckNoaWxkUHJvcHNfO1xuICAgICAgICAgIC8vIHdvcmtzIG9ubHkgb24gaG92ZXJlZCBpdGVtXG4gICAgICAgICAgX3RoaXMucHJvcHMub25DaGlsZE1vdXNlRG93bihob3ZlcktleSwgY2hpbGRQcm9wcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuX29uQ2hpbGRNb3VzZUVudGVyID0gZnVuY3Rpb24gKGhvdmVyS2V5LCBjaGlsZFByb3BzKSB7XG4gICAgICBpZiAoIV90aGlzLmRpbWVuc2lvbnNDYWNoZV8pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25DaGlsZE1vdXNlRW50ZXIpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25DaGlsZE1vdXNlRW50ZXIoaG92ZXJLZXksIGNoaWxkUHJvcHMpO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5ob3ZlckNoaWxkUHJvcHNfID0gY2hpbGRQcm9wcztcbiAgICAgIF90aGlzLmhvdmVyS2V5XyA9IGhvdmVyS2V5O1xuICAgICAgX3RoaXMuc2V0U3RhdGUoeyBob3ZlcktleTogaG92ZXJLZXkgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLl9vbkNoaWxkTW91c2VMZWF2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghX3RoaXMuZGltZW5zaW9uc0NhY2hlXykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBob3ZlcktleSA9IF90aGlzLmhvdmVyS2V5XztcbiAgICAgIHZhciBjaGlsZFByb3BzID0gX3RoaXMuaG92ZXJDaGlsZFByb3BzXztcblxuICAgICAgaWYgKGhvdmVyS2V5ICE9PSB1bmRlZmluZWQgJiYgaG92ZXJLZXkgIT09IG51bGwpIHtcbiAgICAgICAgaWYgKF90aGlzLnByb3BzLm9uQ2hpbGRNb3VzZUxlYXZlKSB7XG4gICAgICAgICAgX3RoaXMucHJvcHMub25DaGlsZE1vdXNlTGVhdmUoaG92ZXJLZXksIGNoaWxkUHJvcHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMuaG92ZXJLZXlfID0gbnVsbDtcbiAgICAgICAgX3RoaXMuaG92ZXJDaGlsZFByb3BzXyA9IG51bGw7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHsgaG92ZXJLZXk6IG51bGwgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLl9vbk1vdXNlQWxsb3cgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgX3RoaXMuX29uQ2hpbGRNb3VzZUxlYXZlKCk7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLmFsbG93TW91c2VfID0gdmFsdWU7XG4gICAgfTtcblxuICAgIF90aGlzLl9vbk1vdXNlQ2hhbmdlSGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5hbGxvd01vdXNlXykge1xuICAgICAgICBfdGhpcy5fb25Nb3VzZUNoYW5nZUhhbmRsZXJSYWYoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuX29uTW91c2VDaGFuZ2VIYW5kbGVyUmFmID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFfdGhpcy5kaW1lbnNpb25zQ2FjaGVfKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIG1wID0gX3RoaXMucHJvcHMuZGlzcGF0Y2hlci5nZXRNb3VzZVBvc2l0aW9uKCk7XG5cbiAgICAgIGlmIChtcCkge1xuICAgICAgICB2YXIgZGlzdGFuY2VzID0gW107XG4gICAgICAgIHZhciBob3ZlckRpc3RhbmNlID0gX3RoaXMucHJvcHMuZ2V0SG92ZXJEaXN0YW5jZSgpO1xuXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5DaGlsZHJlbi5mb3JFYWNoKF90aGlzLnN0YXRlLmNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQsIGNoaWxkSW5kZXgpIHtcbiAgICAgICAgICBpZiAoIWNoaWxkKSByZXR1cm47XG4gICAgICAgICAgLy8gbGF5ZXJzXG4gICAgICAgICAgaWYgKGNoaWxkLnByb3BzLmxhdExuZyA9PT0gdW5kZWZpbmVkICYmIGNoaWxkLnByb3BzLmxhdCA9PT0gdW5kZWZpbmVkICYmIGNoaWxkLnByb3BzLmxuZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGNoaWxkS2V5ID0gY2hpbGQua2V5ICE9PSB1bmRlZmluZWQgJiYgY2hpbGQua2V5ICE9PSBudWxsID8gY2hpbGQua2V5IDogY2hpbGRJbmRleDtcbiAgICAgICAgICB2YXIgZGlzdCA9IF90aGlzLnByb3BzLmRpc3RhbmNlVG9Nb3VzZShfdGhpcy5kaW1lbnNpb25zQ2FjaGVfW2NoaWxkS2V5XSwgbXAsIGNoaWxkLnByb3BzKTtcbiAgICAgICAgICBpZiAoZGlzdCA8IGhvdmVyRGlzdGFuY2UpIHtcbiAgICAgICAgICAgIGRpc3RhbmNlcy5wdXNoKHtcbiAgICAgICAgICAgICAga2V5OiBjaGlsZEtleSxcbiAgICAgICAgICAgICAgZGlzdDogZGlzdCxcbiAgICAgICAgICAgICAgcHJvcHM6IGNoaWxkLnByb3BzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChkaXN0YW5jZXMubGVuZ3RoKSB7XG4gICAgICAgICAgZGlzdGFuY2VzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBhLmRpc3QgLSBiLmRpc3Q7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdmFyIGhvdmVyS2V5ID0gZGlzdGFuY2VzWzBdLmtleTtcbiAgICAgICAgICB2YXIgY2hpbGRQcm9wcyA9IGRpc3RhbmNlc1swXS5wcm9wcztcblxuICAgICAgICAgIGlmIChfdGhpcy5ob3ZlcktleV8gIT09IGhvdmVyS2V5KSB7XG4gICAgICAgICAgICBfdGhpcy5fb25DaGlsZE1vdXNlTGVhdmUoKTtcblxuICAgICAgICAgICAgX3RoaXMuX29uQ2hpbGRNb3VzZUVudGVyKGhvdmVyS2V5LCBjaGlsZFByb3BzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMuX29uQ2hpbGRNb3VzZUxlYXZlKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLl9vbkNoaWxkTW91c2VMZWF2ZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5fZ2V0RGltZW5zaW9ucyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHZhciBjaGlsZEtleSA9IGtleTtcbiAgICAgIHJldHVybiBfdGhpcy5kaW1lbnNpb25zQ2FjaGVfW2NoaWxkS2V5XTtcbiAgICB9O1xuXG4gICAgX3RoaXMucHJvcHMuZGlzcGF0Y2hlci5vbigna09OX0NIQU5HRScsIF90aGlzLl9vbkNoYW5nZUhhbmRsZXIpO1xuICAgIF90aGlzLnByb3BzLmRpc3BhdGNoZXIub24oJ2tPTl9NT1VTRV9QT1NJVElPTl9DSEFOR0UnLCBfdGhpcy5fb25Nb3VzZUNoYW5nZUhhbmRsZXIpO1xuICAgIF90aGlzLnByb3BzLmRpc3BhdGNoZXIub24oJ2tPTl9DTElDSycsIF90aGlzLl9vbkNoaWxkQ2xpY2spO1xuICAgIF90aGlzLnByb3BzLmRpc3BhdGNoZXIub24oJ2tPTl9NRE9XTicsIF90aGlzLl9vbkNoaWxkTW91c2VEb3duKTtcblxuICAgIF90aGlzLmRpbWVuc2lvbnNDYWNoZV8gPSB7fTtcbiAgICBfdGhpcy5ob3ZlcktleV8gPSBudWxsO1xuICAgIF90aGlzLmhvdmVyQ2hpbGRQcm9wc18gPSBudWxsO1xuICAgIF90aGlzLmFsbG93TW91c2VfID0gdHJ1ZTtcblxuICAgIF90aGlzLnN0YXRlID0gX2V4dGVuZHMoe30sIF90aGlzLl9nZXRTdGF0ZSgpLCB7IGhvdmVyS2V5OiBudWxsIH0pO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIHJlYWN0L2ZvcmJpZC1wcm9wLXR5cGVzICovXG5cbiAgR29vZ2xlTWFwTWFya2Vycy5wcm90b3R5cGUuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuZXhwZXJpbWVudGFsID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gISgwLCBfc2hhbGxvd0VxdWFsMi5kZWZhdWx0KSh0aGlzLnByb3BzLCBuZXh0UHJvcHMpIHx8ICEoMCwgX3NoYWxsb3dFcXVhbDIuZGVmYXVsdCkoKDAsIF9vbWl0Mi5kZWZhdWx0KSh0aGlzLnN0YXRlLCBbJ2hvdmVyS2V5J10pLCAoMCwgX29taXQyLmRlZmF1bHQpKG5leHRTdGF0ZSwgWydob3ZlcktleSddKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuICEoMCwgX3NoYWxsb3dFcXVhbDIuZGVmYXVsdCkodGhpcy5wcm9wcywgbmV4dFByb3BzKSB8fCAhKDAsIF9zaGFsbG93RXF1YWwyLmRlZmF1bHQpKHRoaXMuc3RhdGUsIG5leHRTdGF0ZSk7XG4gIH07XG5cbiAgR29vZ2xlTWFwTWFya2Vycy5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLnByb3BzLmRpc3BhdGNoZXIucmVtb3ZlTGlzdGVuZXIoJ2tPTl9DSEFOR0UnLCB0aGlzLl9vbkNoYW5nZUhhbmRsZXIpO1xuICAgIHRoaXMucHJvcHMuZGlzcGF0Y2hlci5yZW1vdmVMaXN0ZW5lcigna09OX01PVVNFX1BPU0lUSU9OX0NIQU5HRScsIHRoaXMuX29uTW91c2VDaGFuZ2VIYW5kbGVyKTtcbiAgICB0aGlzLnByb3BzLmRpc3BhdGNoZXIucmVtb3ZlTGlzdGVuZXIoJ2tPTl9DTElDSycsIHRoaXMuX29uQ2hpbGRDbGljayk7XG4gICAgdGhpcy5wcm9wcy5kaXNwYXRjaGVyLnJlbW92ZUxpc3RlbmVyKCdrT05fTURPV04nLCB0aGlzLl9vbkNoaWxkTW91c2VEb3duKTtcblxuICAgIHRoaXMuZGltZW5zaW9uc0NhY2hlXyA9IG51bGw7XG4gIH07XG5cbiAgR29vZ2xlTWFwTWFya2Vycy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIG1haW5FbGVtZW50U3R5bGUgPSB0aGlzLnByb3BzLnN0eWxlIHx8IG1haW5TdHlsZTtcbiAgICB0aGlzLmRpbWVuc2lvbnNDYWNoZV8gPSB7fTtcblxuICAgIHZhciBtYXJrZXJzID0gX3JlYWN0Mi5kZWZhdWx0LkNoaWxkcmVuLm1hcCh0aGlzLnN0YXRlLmNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQsIGNoaWxkSW5kZXgpIHtcbiAgICAgIGlmICghY2hpbGQpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICBpZiAoY2hpbGQucHJvcHMubGF0TG5nID09PSB1bmRlZmluZWQgJiYgY2hpbGQucHJvcHMubGF0ID09PSB1bmRlZmluZWQgJiYgY2hpbGQucHJvcHMubG5nID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgICAkZ2VvU2VydmljZTogX3RoaXMyLnByb3BzLmdlb1NlcnZpY2UsXG4gICAgICAgICAgJG9uTW91c2VBbGxvdzogX3RoaXMyLl9vbk1vdXNlQWxsb3csXG4gICAgICAgICAgJHByZXJlbmRlcjogX3RoaXMyLnByb3BzLnByZXJlbmRlclxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdmFyIGxhdExuZyA9IGNoaWxkLnByb3BzLmxhdExuZyAhPT0gdW5kZWZpbmVkID8gY2hpbGQucHJvcHMubGF0TG5nIDogeyBsYXQ6IGNoaWxkLnByb3BzLmxhdCwgbG5nOiBjaGlsZC5wcm9wcy5sbmcgfTtcblxuICAgICAgdmFyIHB0ID0gX3RoaXMyLnByb3BzLmluc2lkZU1hcFBhbmVzID8gX3RoaXMyLnByb3BzLmdlb1NlcnZpY2UuZnJvbUxhdExuZ1RvRGl2UGl4ZWwobGF0TG5nKSA6IF90aGlzMi5wcm9wcy5nZW9TZXJ2aWNlLmZyb21MYXRMbmdUb0NlbnRlclBpeGVsKGxhdExuZyk7XG5cbiAgICAgIHZhciBzdHlsZVB0UG9zID0ge1xuICAgICAgICBsZWZ0OiBwdC54LFxuICAgICAgICB0b3A6IHB0LnlcbiAgICAgIH07XG5cbiAgICAgIC8vIElmIHRoZSBjb21wb25lbnQgaGFzIGEgc291dGhlYXN0IGNvcm5lciBkZWZpbmVkIChlaXRoZXIgYXMgYSBMYXRMbmcsIG9yIGEgc2VwYXJhdGVcbiAgICAgIC8vIGxhdCBhbmQgbG5nIHBhaXIpLCBzZXQgdGhlIHdpZHRoIGFuZCBoZWlnaHQgYmFzZWQgb24gdGhlIGRpc3RhbmNlIGJldHdlZW4gdGhlIG5vcnRod2VzdFxuICAgICAgLy8gYW5kIHRoZSBzb3V0aGVhc3QgY29ybmVyIHRvIGxvY2sgdGhlIG92ZXJsYXkgdG8gdGhlIGNvcnJlY3QgZ2VvZ3JhcGhpYyBib3VuZHMuXG4gICAgICBpZiAoY2hpbGQucHJvcHMuc2VMYXRMbmcgIT09IHVuZGVmaW5lZCB8fCBjaGlsZC5wcm9wcy5zZUxhdCAhPT0gdW5kZWZpbmVkICYmIGNoaWxkLnByb3BzLnNlTG5nICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdmFyIHNlTGF0TG5nID0gY2hpbGQucHJvcHMuc2VMYXRMbmcgIT09IHVuZGVmaW5lZCA/IGNoaWxkLnByb3BzLnNlTGF0TG5nIDogeyBsYXQ6IGNoaWxkLnByb3BzLnNlTGF0LCBsbmc6IGNoaWxkLnByb3BzLnNlTG5nIH07XG5cbiAgICAgICAgdmFyIHNlUHQgPSBfdGhpczIucHJvcHMuaW5zaWRlTWFwUGFuZXMgPyBfdGhpczIucHJvcHMuZ2VvU2VydmljZS5mcm9tTGF0TG5nVG9EaXZQaXhlbChzZUxhdExuZykgOiBfdGhpczIucHJvcHMuZ2VvU2VydmljZS5mcm9tTGF0TG5nVG9DZW50ZXJQaXhlbChzZUxhdExuZyk7XG5cbiAgICAgICAgc3R5bGVQdFBvcy53aWR0aCA9IHNlUHQueCAtIHB0Lng7XG4gICAgICAgIHN0eWxlUHRQb3MuaGVpZ2h0ID0gc2VQdC55IC0gcHQueTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRhaW5lclB0ID0gX3RoaXMyLnByb3BzLmdlb1NlcnZpY2UuZnJvbUxhdExuZ1RvQ29udGFpbmVyUGl4ZWwobGF0TG5nKTtcblxuICAgICAgLy8gdG8gcHJldmVudCByZXJlbmRlciBvbiBjaGlsZCBlbGVtZW50IGkgbmVlZCB0byBwYXNzXG4gICAgICAvLyBjb25zdCBwYXJhbXMgJGdldERpbWVuc2lvbnMgYW5kICRkaW1lbnNpb25LZXkgaW5zdGVhZCBvZiBkaW1lbnNpb24gb2JqZWN0XG4gICAgICB2YXIgY2hpbGRLZXkgPSBjaGlsZC5rZXkgIT09IHVuZGVmaW5lZCAmJiBjaGlsZC5rZXkgIT09IG51bGwgPyBjaGlsZC5rZXkgOiBjaGlsZEluZGV4O1xuXG4gICAgICBfdGhpczIuZGltZW5zaW9uc0NhY2hlX1tjaGlsZEtleV0gPSBfZXh0ZW5kcyh7XG4gICAgICAgIHg6IGNvbnRhaW5lclB0LngsXG4gICAgICAgIHk6IGNvbnRhaW5lclB0LnlcbiAgICAgIH0sIGxhdExuZyk7XG5cbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHtcbiAgICAgICAgICBrZXk6IGNoaWxkS2V5LFxuICAgICAgICAgIHN0eWxlOiBfZXh0ZW5kcyh7fSwgc3R5bGUsIHN0eWxlUHRQb3MpLFxuICAgICAgICAgIGNsYXNzTmFtZTogY2hpbGQucHJvcHMuJG1hcmtlckhvbGRlckNsYXNzTmFtZVxuICAgICAgICB9LFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgICAgJGhvdmVyOiBjaGlsZEtleSA9PT0gX3RoaXMyLnN0YXRlLmhvdmVyS2V5LFxuICAgICAgICAgICRnZXREaW1lbnNpb25zOiBfdGhpczIuX2dldERpbWVuc2lvbnMsXG4gICAgICAgICAgJGRpbWVuc2lvbktleTogY2hpbGRLZXksXG4gICAgICAgICAgJGdlb1NlcnZpY2U6IF90aGlzMi5wcm9wcy5nZW9TZXJ2aWNlLFxuICAgICAgICAgICRvbk1vdXNlQWxsb3c6IF90aGlzMi5fb25Nb3VzZUFsbG93LFxuICAgICAgICAgICRwcmVyZW5kZXI6IF90aGlzMi5wcm9wcy5wcmVyZW5kZXJcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgc3R5bGU6IG1haW5FbGVtZW50U3R5bGUgfSxcbiAgICAgIG1hcmtlcnNcbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBHb29nbGVNYXBNYXJrZXJzO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuR29vZ2xlTWFwTWFya2Vycy5wcm9wVHlwZXMgPSB7XG4gIGdlb1NlcnZpY2U6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYW55LFxuICBzdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5hbnksXG4gIGRpc3RhbmNlVG9Nb3VzZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBkaXNwYXRjaGVyOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmFueSxcbiAgb25DaGlsZENsaWNrOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIG9uQ2hpbGRNb3VzZURvd246IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgb25DaGlsZE1vdXNlTGVhdmU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgb25DaGlsZE1vdXNlRW50ZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgZ2V0SG92ZXJEaXN0YW5jZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBpbnNpZGVNYXBQYW5lczogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBwcmVyZW5kZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbFxufTtcbkdvb2dsZU1hcE1hcmtlcnMuZGVmYXVsdFByb3BzID0ge1xuICBpbnNpZGVNYXBQYW5lczogZmFsc2UsXG4gIHByZXJlbmRlcjogZmFsc2Vcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBHb29nbGVNYXBNYXJrZXJzOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hY2RsaXRlL3JlY29tcG9zZS9ibG9iL21hc3Rlci9zcmMvcGFja2FnZXMvcmVjb21wb3NlL3V0aWxzL29taXQuanNcbnZhciBvbWl0ID0gZnVuY3Rpb24gb21pdChvYmosIGtleXMpIHtcbiAgdmFyIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBbXSk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgaWYgKGtleSBpbiByZXN0KSB7XG4gICAgICBkZWxldGUgcmVzdFtrZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdDtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IG9taXQ7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHNoYWxsb3dFcXVhbFxuICogQHR5cGVjaGVja3NcbiAqIFxuICovXG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogaW5saW5lZCBPYmplY3QuaXMgcG9seWZpbGwgdG8gYXZvaWQgcmVxdWlyaW5nIGNvbnN1bWVycyBzaGlwIHRoZWlyIG93blxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzXG4gKi9cbmZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgLy8gU2FtZVZhbHVlIGFsZ29yaXRobVxuICBpZiAoeCA9PT0geSkge1xuICAgIC8vIFN0ZXBzIDEtNSwgNy0xMFxuICAgIC8vIFN0ZXBzIDYuYi02LmU6ICswICE9IC0wXG4gICAgLy8gQWRkZWQgdGhlIG5vbnplcm8geSBjaGVjayB0byBtYWtlIEZsb3cgaGFwcHksIGJ1dCBpdCBpcyByZWR1bmRhbnRcbiAgICByZXR1cm4geCAhPT0gMCB8fCB5ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfVxuICAvLyBTdGVwIDYuYTogTmFOID09IE5hTlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG59XG5cbi8qKlxuICogUGVyZm9ybXMgZXF1YWxpdHkgYnkgaXRlcmF0aW5nIHRocm91Z2gga2V5cyBvbiBhbiBvYmplY3QgYW5kIHJldHVybmluZyBmYWxzZVxuICogd2hlbiBhbnkga2V5IGhhcyB2YWx1ZXMgd2hpY2ggYXJlIG5vdCBzdHJpY3RseSBlcXVhbCBiZXR3ZWVuIHRoZSBhcmd1bWVudHMuXG4gKiBSZXR1cm5zIHRydWUgd2hlbiB0aGUgdmFsdWVzIG9mIGFsbCBrZXlzIGFyZSBzdHJpY3RseSBlcXVhbC5cbiAqL1xuZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIpIHtcbiAgaWYgKGlzKG9iakEsIG9iakIpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoKHR5cGVvZiBvYmpBID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihvYmpBKSkgIT09ICdvYmplY3QnIHx8IG9iakEgPT09IG51bGwgfHwgKHR5cGVvZiBvYmpCID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihvYmpCKSkgIT09ICdvYmplY3QnIHx8IG9iakIgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG5cbiAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gVGVzdCBmb3IgQSdzIGtleXMgZGlmZmVyZW50IGZyb20gQi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzQS5sZW5ndGg7IGkrKykge1xuICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChvYmpCLCBrZXlzQVtpXSkgfHwgIWlzKG9iakFba2V5c0FbaV1dLCBvYmpCW2tleXNBW2ldXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaGFsbG93RXF1YWw7XG4vKiBzcmM6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mYmpzL2Jsb2IvbWFzdGVyL3BhY2thZ2VzL2ZianMvc3JjL2NvcmUvc2hhbGxvd0VxdWFsLmpzICovIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBvaW50O1xuXG4vKipcbiAqIEEgc3RhbmRhbG9uZSBwb2ludCBnZW9tZXRyeSB3aXRoIHVzZWZ1bCBhY2Nlc3NvciwgY29tcGFyaXNvbiwgYW5kXG4gKiBtb2RpZmljYXRpb24gbWV0aG9kcy5cbiAqXG4gKiBAY2xhc3MgUG9pbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB4IHRoZSB4LWNvb3JkaW5hdGUuIHRoaXMgY291bGQgYmUgbG9uZ2l0dWRlIG9yIHNjcmVlblxuICogcGl4ZWxzLCBvciBhbnkgb3RoZXIgc29ydCBvZiB1bml0LlxuICogQHBhcmFtIHtOdW1iZXJ9IHkgdGhlIHktY29vcmRpbmF0ZS4gdGhpcyBjb3VsZCBiZSBsYXRpdHVkZSBvciBzY3JlZW5cbiAqIHBpeGVscywgb3IgYW55IG90aGVyIHNvcnQgb2YgdW5pdC5cbiAqIEBleGFtcGxlXG4gKiB2YXIgcG9pbnQgPSBuZXcgUG9pbnQoLTc3LCAzOCk7XG4gKi9cbmZ1bmN0aW9uIFBvaW50KHgsIHkpIHtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG59XG5cblBvaW50LnByb3RvdHlwZSA9IHtcblxuICAgIC8qKlxuICAgICAqIENsb25lIHRoaXMgcG9pbnQsIHJldHVybmluZyBhIG5ldyBwb2ludCB0aGF0IGNhbiBiZSBtb2RpZmllZFxuICAgICAqIHdpdGhvdXQgYWZmZWN0aW5nIHRoZSBvbGQgb25lLlxuICAgICAqIEByZXR1cm4ge1BvaW50fSB0aGUgY2xvbmVcbiAgICAgKi9cbiAgICBjbG9uZTogZnVuY3Rpb24oKSB7IHJldHVybiBuZXcgUG9pbnQodGhpcy54LCB0aGlzLnkpOyB9LFxuXG4gICAgLyoqXG4gICAgICogQWRkIHRoaXMgcG9pbnQncyB4ICYgeSBjb29yZGluYXRlcyB0byBhbm90aGVyIHBvaW50LFxuICAgICAqIHlpZWxkaW5nIGEgbmV3IHBvaW50LlxuICAgICAqIEBwYXJhbSB7UG9pbnR9IHAgdGhlIG90aGVyIHBvaW50XG4gICAgICogQHJldHVybiB7UG9pbnR9IG91dHB1dCBwb2ludFxuICAgICAqL1xuICAgIGFkZDogICAgIGZ1bmN0aW9uKHApIHsgcmV0dXJuIHRoaXMuY2xvbmUoKS5fYWRkKHApOyB9LFxuXG4gICAgLyoqXG4gICAgICogU3VidHJhY3QgdGhpcyBwb2ludCdzIHggJiB5IGNvb3JkaW5hdGVzIHRvIGZyb20gcG9pbnQsXG4gICAgICogeWllbGRpbmcgYSBuZXcgcG9pbnQuXG4gICAgICogQHBhcmFtIHtQb2ludH0gcCB0aGUgb3RoZXIgcG9pbnRcbiAgICAgKiBAcmV0dXJuIHtQb2ludH0gb3V0cHV0IHBvaW50XG4gICAgICovXG4gICAgc3ViOiAgICAgZnVuY3Rpb24ocCkgeyByZXR1cm4gdGhpcy5jbG9uZSgpLl9zdWIocCk7IH0sXG5cbiAgICAvKipcbiAgICAgKiBNdWx0aXBseSB0aGlzIHBvaW50J3MgeCAmIHkgY29vcmRpbmF0ZXMgYnkgcG9pbnQsXG4gICAgICogeWllbGRpbmcgYSBuZXcgcG9pbnQuXG4gICAgICogQHBhcmFtIHtQb2ludH0gcCB0aGUgb3RoZXIgcG9pbnRcbiAgICAgKiBAcmV0dXJuIHtQb2ludH0gb3V0cHV0IHBvaW50XG4gICAgICovXG4gICAgbXVsdEJ5UG9pbnQ6ICAgIGZ1bmN0aW9uKHApIHsgcmV0dXJuIHRoaXMuY2xvbmUoKS5fbXVsdEJ5UG9pbnQocCk7IH0sXG5cbiAgICAvKipcbiAgICAgKiBEaXZpZGUgdGhpcyBwb2ludCdzIHggJiB5IGNvb3JkaW5hdGVzIGJ5IHBvaW50LFxuICAgICAqIHlpZWxkaW5nIGEgbmV3IHBvaW50LlxuICAgICAqIEBwYXJhbSB7UG9pbnR9IHAgdGhlIG90aGVyIHBvaW50XG4gICAgICogQHJldHVybiB7UG9pbnR9IG91dHB1dCBwb2ludFxuICAgICAqL1xuICAgIGRpdkJ5UG9pbnQ6ICAgICBmdW5jdGlvbihwKSB7IHJldHVybiB0aGlzLmNsb25lKCkuX2RpdkJ5UG9pbnQocCk7IH0sXG5cbiAgICAvKipcbiAgICAgKiBNdWx0aXBseSB0aGlzIHBvaW50J3MgeCAmIHkgY29vcmRpbmF0ZXMgYnkgYSBmYWN0b3IsXG4gICAgICogeWllbGRpbmcgYSBuZXcgcG9pbnQuXG4gICAgICogQHBhcmFtIHtQb2ludH0gayBmYWN0b3JcbiAgICAgKiBAcmV0dXJuIHtQb2ludH0gb3V0cHV0IHBvaW50XG4gICAgICovXG4gICAgbXVsdDogICAgZnVuY3Rpb24oaykgeyByZXR1cm4gdGhpcy5jbG9uZSgpLl9tdWx0KGspOyB9LFxuXG4gICAgLyoqXG4gICAgICogRGl2aWRlIHRoaXMgcG9pbnQncyB4ICYgeSBjb29yZGluYXRlcyBieSBhIGZhY3RvcixcbiAgICAgKiB5aWVsZGluZyBhIG5ldyBwb2ludC5cbiAgICAgKiBAcGFyYW0ge1BvaW50fSBrIGZhY3RvclxuICAgICAqIEByZXR1cm4ge1BvaW50fSBvdXRwdXQgcG9pbnRcbiAgICAgKi9cbiAgICBkaXY6ICAgICBmdW5jdGlvbihrKSB7IHJldHVybiB0aGlzLmNsb25lKCkuX2RpdihrKTsgfSxcblxuICAgIC8qKlxuICAgICAqIFJvdGF0ZSB0aGlzIHBvaW50IGFyb3VuZCB0aGUgMCwgMCBvcmlnaW4gYnkgYW4gYW5nbGUgYSxcbiAgICAgKiBnaXZlbiBpbiByYWRpYW5zXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGEgYW5nbGUgdG8gcm90YXRlIGFyb3VuZCwgaW4gcmFkaWFuc1xuICAgICAqIEByZXR1cm4ge1BvaW50fSBvdXRwdXQgcG9pbnRcbiAgICAgKi9cbiAgICByb3RhdGU6ICBmdW5jdGlvbihhKSB7IHJldHVybiB0aGlzLmNsb25lKCkuX3JvdGF0ZShhKTsgfSxcblxuICAgIC8qKlxuICAgICAqIFJvdGF0ZSB0aGlzIHBvaW50IGFyb3VuZCBwIHBvaW50IGJ5IGFuIGFuZ2xlIGEsXG4gICAgICogZ2l2ZW4gaW4gcmFkaWFuc1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBhIGFuZ2xlIHRvIHJvdGF0ZSBhcm91bmQsIGluIHJhZGlhbnNcbiAgICAgKiBAcGFyYW0ge1BvaW50fSBwIFBvaW50IHRvIHJvdGF0ZSBhcm91bmRcbiAgICAgKiBAcmV0dXJuIHtQb2ludH0gb3V0cHV0IHBvaW50XG4gICAgICovXG4gICAgcm90YXRlQXJvdW5kOiAgZnVuY3Rpb24oYSxwKSB7IHJldHVybiB0aGlzLmNsb25lKCkuX3JvdGF0ZUFyb3VuZChhLHApOyB9LFxuXG4gICAgLyoqXG4gICAgICogTXVsdGlwbHkgdGhpcyBwb2ludCBieSBhIDR4MSB0cmFuc2Zvcm1hdGlvbiBtYXRyaXhcbiAgICAgKiBAcGFyYW0ge0FycmF5PE51bWJlcj59IG0gdHJhbnNmb3JtYXRpb24gbWF0cml4XG4gICAgICogQHJldHVybiB7UG9pbnR9IG91dHB1dCBwb2ludFxuICAgICAqL1xuICAgIG1hdE11bHQ6IGZ1bmN0aW9uKG0pIHsgcmV0dXJuIHRoaXMuY2xvbmUoKS5fbWF0TXVsdChtKTsgfSxcblxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZSB0aGlzIHBvaW50IGJ1dCBhcyBhIHVuaXQgdmVjdG9yIGZyb20gMCwgMCwgbWVhbmluZ1xuICAgICAqIHRoYXQgdGhlIGRpc3RhbmNlIGZyb20gdGhlIHJlc3VsdGluZyBwb2ludCB0byB0aGUgMCwgMFxuICAgICAqIGNvb3JkaW5hdGUgd2lsbCBiZSBlcXVhbCB0byAxIGFuZCB0aGUgYW5nbGUgZnJvbSB0aGUgcmVzdWx0aW5nXG4gICAgICogcG9pbnQgdG8gdGhlIDAsIDAgY29vcmRpbmF0ZSB3aWxsIGJlIHRoZSBzYW1lIGFzIGJlZm9yZS5cbiAgICAgKiBAcmV0dXJuIHtQb2ludH0gdW5pdCB2ZWN0b3IgcG9pbnRcbiAgICAgKi9cbiAgICB1bml0OiAgICBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuY2xvbmUoKS5fdW5pdCgpOyB9LFxuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZSBhIHBlcnBlbmRpY3VsYXIgcG9pbnQsIHdoZXJlIHRoZSBuZXcgeSBjb29yZGluYXRlXG4gICAgICogaXMgdGhlIG9sZCB4IGNvb3JkaW5hdGUgYW5kIHRoZSBuZXcgeCBjb29yZGluYXRlIGlzIHRoZSBvbGQgeVxuICAgICAqIGNvb3JkaW5hdGUgbXVsdGlwbGllZCBieSAtMVxuICAgICAqIEByZXR1cm4ge1BvaW50fSBwZXJwZW5kaWN1bGFyIHBvaW50XG4gICAgICovXG4gICAgcGVycDogICAgZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLmNsb25lKCkuX3BlcnAoKTsgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybiBhIHZlcnNpb24gb2YgdGhpcyBwb2ludCB3aXRoIHRoZSB4ICYgeSBjb29yZGluYXRlc1xuICAgICAqIHJvdW5kZWQgdG8gaW50ZWdlcnMuXG4gICAgICogQHJldHVybiB7UG9pbnR9IHJvdW5kZWQgcG9pbnRcbiAgICAgKi9cbiAgICByb3VuZDogICBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuY2xvbmUoKS5fcm91bmQoKTsgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybiB0aGUgbWFnaXR1ZGUgb2YgdGhpcyBwb2ludDogdGhpcyBpcyB0aGUgRXVjbGlkZWFuXG4gICAgICogZGlzdGFuY2UgZnJvbSB0aGUgMCwgMCBjb29yZGluYXRlIHRvIHRoaXMgcG9pbnQncyB4IGFuZCB5XG4gICAgICogY29vcmRpbmF0ZXMuXG4gICAgICogQHJldHVybiB7TnVtYmVyfSBtYWduaXR1ZGVcbiAgICAgKi9cbiAgICBtYWc6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEp1ZGdlIHdoZXRoZXIgdGhpcyBwb2ludCBpcyBlcXVhbCB0byBhbm90aGVyIHBvaW50LCByZXR1cm5pbmdcbiAgICAgKiB0cnVlIG9yIGZhbHNlLlxuICAgICAqIEBwYXJhbSB7UG9pbnR9IG90aGVyIHRoZSBvdGhlciBwb2ludFxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IHdoZXRoZXIgdGhlIHBvaW50cyBhcmUgZXF1YWxcbiAgICAgKi9cbiAgICBlcXVhbHM6IGZ1bmN0aW9uKG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnggPT09IG90aGVyLnggJiZcbiAgICAgICAgICAgICAgIHRoaXMueSA9PT0gb3RoZXIueTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlIHRoZSBkaXN0YW5jZSBmcm9tIHRoaXMgcG9pbnQgdG8gYW5vdGhlciBwb2ludFxuICAgICAqIEBwYXJhbSB7UG9pbnR9IHAgdGhlIG90aGVyIHBvaW50XG4gICAgICogQHJldHVybiB7TnVtYmVyfSBkaXN0YW5jZVxuICAgICAqL1xuICAgIGRpc3Q6IGZ1bmN0aW9uKHApIHtcbiAgICAgICAgcmV0dXJuIE1hdGguc3FydCh0aGlzLmRpc3RTcXIocCkpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGUgdGhlIGRpc3RhbmNlIGZyb20gdGhpcyBwb2ludCB0byBhbm90aGVyIHBvaW50LFxuICAgICAqIHdpdGhvdXQgdGhlIHNxdWFyZSByb290IHN0ZXAuIFVzZWZ1bCBpZiB5b3UncmUgY29tcGFyaW5nXG4gICAgICogcmVsYXRpdmUgZGlzdGFuY2VzLlxuICAgICAqIEBwYXJhbSB7UG9pbnR9IHAgdGhlIG90aGVyIHBvaW50XG4gICAgICogQHJldHVybiB7TnVtYmVyfSBkaXN0YW5jZVxuICAgICAqL1xuICAgIGRpc3RTcXI6IGZ1bmN0aW9uKHApIHtcbiAgICAgICAgdmFyIGR4ID0gcC54IC0gdGhpcy54LFxuICAgICAgICAgICAgZHkgPSBwLnkgLSB0aGlzLnk7XG4gICAgICAgIHJldHVybiBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBhbmdsZSBmcm9tIHRoZSAwLCAwIGNvb3JkaW5hdGUgdG8gdGhpcyBwb2ludCwgaW4gcmFkaWFuc1xuICAgICAqIGNvb3JkaW5hdGVzLlxuICAgICAqIEByZXR1cm4ge051bWJlcn0gYW5nbGVcbiAgICAgKi9cbiAgICBhbmdsZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmF0YW4yKHRoaXMueSwgdGhpcy54KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBhbmdsZSBmcm9tIHRoaXMgcG9pbnQgdG8gYW5vdGhlciBwb2ludCwgaW4gcmFkaWFuc1xuICAgICAqIEBwYXJhbSB7UG9pbnR9IGIgdGhlIG90aGVyIHBvaW50XG4gICAgICogQHJldHVybiB7TnVtYmVyfSBhbmdsZVxuICAgICAqL1xuICAgIGFuZ2xlVG86IGZ1bmN0aW9uKGIpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguYXRhbjIodGhpcy55IC0gYi55LCB0aGlzLnggLSBiLngpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGFuZ2xlIGJldHdlZW4gdGhpcyBwb2ludCBhbmQgYW5vdGhlciBwb2ludCwgaW4gcmFkaWFuc1xuICAgICAqIEBwYXJhbSB7UG9pbnR9IGIgdGhlIG90aGVyIHBvaW50XG4gICAgICogQHJldHVybiB7TnVtYmVyfSBhbmdsZVxuICAgICAqL1xuICAgIGFuZ2xlV2l0aDogZnVuY3Rpb24oYikge1xuICAgICAgICByZXR1cm4gdGhpcy5hbmdsZVdpdGhTZXAoYi54LCBiLnkpO1xuICAgIH0sXG5cbiAgICAvKlxuICAgICAqIEZpbmQgdGhlIGFuZ2xlIG9mIHRoZSB0d28gdmVjdG9ycywgc29sdmluZyB0aGUgZm9ybXVsYSBmb3JcbiAgICAgKiB0aGUgY3Jvc3MgcHJvZHVjdCBhIHggYiA9IHxhfHxifHNpbijOuCkgZm9yIM64LlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB4IHRoZSB4LWNvb3JkaW5hdGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geSB0aGUgeS1jb29yZGluYXRlXG4gICAgICogQHJldHVybiB7TnVtYmVyfSB0aGUgYW5nbGUgaW4gcmFkaWFuc1xuICAgICAqL1xuICAgIGFuZ2xlV2l0aFNlcDogZnVuY3Rpb24oeCwgeSkge1xuICAgICAgICByZXR1cm4gTWF0aC5hdGFuMihcbiAgICAgICAgICAgIHRoaXMueCAqIHkgLSB0aGlzLnkgKiB4LFxuICAgICAgICAgICAgdGhpcy54ICogeCArIHRoaXMueSAqIHkpO1xuICAgIH0sXG5cbiAgICBfbWF0TXVsdDogZnVuY3Rpb24obSkge1xuICAgICAgICB2YXIgeCA9IG1bMF0gKiB0aGlzLnggKyBtWzFdICogdGhpcy55LFxuICAgICAgICAgICAgeSA9IG1bMl0gKiB0aGlzLnggKyBtWzNdICogdGhpcy55O1xuICAgICAgICB0aGlzLnggPSB4O1xuICAgICAgICB0aGlzLnkgPSB5O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgX2FkZDogZnVuY3Rpb24ocCkge1xuICAgICAgICB0aGlzLnggKz0gcC54O1xuICAgICAgICB0aGlzLnkgKz0gcC55O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgX3N1YjogZnVuY3Rpb24ocCkge1xuICAgICAgICB0aGlzLnggLT0gcC54O1xuICAgICAgICB0aGlzLnkgLT0gcC55O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgX211bHQ6IGZ1bmN0aW9uKGspIHtcbiAgICAgICAgdGhpcy54ICo9IGs7XG4gICAgICAgIHRoaXMueSAqPSBrO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgX2RpdjogZnVuY3Rpb24oaykge1xuICAgICAgICB0aGlzLnggLz0gaztcbiAgICAgICAgdGhpcy55IC89IGs7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICBfbXVsdEJ5UG9pbnQ6IGZ1bmN0aW9uKHApIHtcbiAgICAgICAgdGhpcy54ICo9IHAueDtcbiAgICAgICAgdGhpcy55ICo9IHAueTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIF9kaXZCeVBvaW50OiBmdW5jdGlvbihwKSB7XG4gICAgICAgIHRoaXMueCAvPSBwLng7XG4gICAgICAgIHRoaXMueSAvPSBwLnk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICBfdW5pdDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuX2Rpdih0aGlzLm1hZygpKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIF9wZXJwOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHkgPSB0aGlzLnk7XG4gICAgICAgIHRoaXMueSA9IHRoaXMueDtcbiAgICAgICAgdGhpcy54ID0gLXk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICBfcm90YXRlOiBmdW5jdGlvbihhbmdsZSkge1xuICAgICAgICB2YXIgY29zID0gTWF0aC5jb3MoYW5nbGUpLFxuICAgICAgICAgICAgc2luID0gTWF0aC5zaW4oYW5nbGUpLFxuICAgICAgICAgICAgeCA9IGNvcyAqIHRoaXMueCAtIHNpbiAqIHRoaXMueSxcbiAgICAgICAgICAgIHkgPSBzaW4gKiB0aGlzLnggKyBjb3MgKiB0aGlzLnk7XG4gICAgICAgIHRoaXMueCA9IHg7XG4gICAgICAgIHRoaXMueSA9IHk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICBfcm90YXRlQXJvdW5kOiBmdW5jdGlvbihhbmdsZSwgcCkge1xuICAgICAgICB2YXIgY29zID0gTWF0aC5jb3MoYW5nbGUpLFxuICAgICAgICAgICAgc2luID0gTWF0aC5zaW4oYW5nbGUpLFxuICAgICAgICAgICAgeCA9IHAueCArIGNvcyAqICh0aGlzLnggLSBwLngpIC0gc2luICogKHRoaXMueSAtIHAueSksXG4gICAgICAgICAgICB5ID0gcC55ICsgc2luICogKHRoaXMueCAtIHAueCkgKyBjb3MgKiAodGhpcy55IC0gcC55KTtcbiAgICAgICAgdGhpcy54ID0geDtcbiAgICAgICAgdGhpcy55ID0geTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIF9yb3VuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMueCA9IE1hdGgucm91bmQodGhpcy54KTtcbiAgICAgICAgdGhpcy55ID0gTWF0aC5yb3VuZCh0aGlzLnkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59O1xuXG4vKipcbiAqIENvbnN0cnVjdCBhIHBvaW50IGZyb20gYW4gYXJyYXkgaWYgbmVjZXNzYXJ5LCBvdGhlcndpc2UgaWYgdGhlIGlucHV0XG4gKiBpcyBhbHJlYWR5IGEgUG9pbnQsIG9yIGFuIHVua25vd24gdHlwZSwgcmV0dXJuIGl0IHVuY2hhbmdlZFxuICogQHBhcmFtIHtBcnJheTxOdW1iZXI+fFBvaW50fCp9IGEgYW55IGtpbmQgb2YgaW5wdXQgdmFsdWVcbiAqIEByZXR1cm4ge1BvaW50fSBjb25zdHJ1Y3RlZCBwb2ludCwgb3IgcGFzc2VkLXRocm91Z2ggdmFsdWUuXG4gKiBAZXhhbXBsZVxuICogLy8gdGhpc1xuICogdmFyIHBvaW50ID0gUG9pbnQuY29udmVydChbMCwgMV0pO1xuICogLy8gaXMgZXF1aXZhbGVudCB0b1xuICogdmFyIHBvaW50ID0gbmV3IFBvaW50KDAsIDEpO1xuICovXG5Qb2ludC5jb252ZXJ0ID0gZnVuY3Rpb24gKGEpIHtcbiAgICBpZiAoYSBpbnN0YW5jZW9mIFBvaW50KSB7XG4gICAgICAgIHJldHVybiBhO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShhKSkge1xuICAgICAgICByZXR1cm4gbmV3IFBvaW50KGFbMF0sIGFbMV0pO1xuICAgIH1cbiAgICByZXR1cm4gYTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfd3JhcDIgPSByZXF1aXJlKCcuL3dyYXAnKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIExhdExuZyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTGF0TG5nKGxhdCwgbG5nKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExhdExuZyk7XG5cbiAgICBpZiAoaXNOYU4obGF0KSB8fCBpc05hTihsbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgTGF0TG5nIG9iamVjdDogKCcgKyBsYXQgKyAnLCAnICsgbG5nICsgJyknKTtcbiAgICB9XG4gICAgdGhpcy5sYXQgPSArbGF0O1xuICAgIHRoaXMubG5nID0gK2xuZztcbiAgfVxuXG4gIExhdExuZy5wcm90b3R5cGUud3JhcCA9IGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgcmV0dXJuIG5ldyBMYXRMbmcodGhpcy5sYXQsICgwLCBfd3JhcDIud3JhcCkodGhpcy5sbmcsIC0xODAsIDE4MCkpO1xuICB9O1xuXG4gIHJldHVybiBMYXRMbmc7XG59KCk7XG5cbkxhdExuZy5jb252ZXJ0ID0gZnVuY3Rpb24gKGEpIHtcbiAgaWYgKGEgaW5zdGFuY2VvZiBMYXRMbmcpIHtcbiAgICByZXR1cm4gYTtcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KGEpKSB7XG4gICAgcmV0dXJuIG5ldyBMYXRMbmcoYVswXSwgYVsxXSk7XG4gIH1cblxuICBpZiAoJ2xuZycgaW4gYSAmJiAnbGF0JyBpbiBhKSB7XG4gICAgcmV0dXJuIG5ldyBMYXRMbmcoYS5sYXQsIGEubG5nKTtcbiAgfVxuXG4gIHJldHVybiBhO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gTGF0TG5nOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy53cmFwID0gd3JhcDtcbi8qIGVzbGludC1kaXNhYmxlIGltcG9ydC9wcmVmZXItZGVmYXVsdC1leHBvcnQgKi9cblxuZnVuY3Rpb24gd3JhcChuLCBtaW4sIG1heCkge1xuICB2YXIgZCA9IG1heCAtIG1pbjtcbiAgcmV0dXJuIG4gPT09IG1heCA/IG4gOiAoKG4gLSBtaW4pICUgZCArIGQpICUgZCArIG1pbjtcbn0iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBhZGRQYXNzaXZlRXZlbnRMaXN0ZW5lcjtcbi8vIGZlYXR1cmUgZGV0ZWN0aW9uIGZvciBwYXNzaXZlIHN1cHBvcnRcbi8vIHNlZTogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0V2ZW50VGFyZ2V0L2FkZEV2ZW50TGlzdGVuZXIjU2FmZWx5X2RldGVjdGluZ19vcHRpb25fc3VwcG9ydFxuZnVuY3Rpb24gaGFzUGFzc2l2ZVN1cHBvcnQoKSB7XG4gIHZhciBwYXNzaXZlU3VwcG9ydGVkID0gZmFsc2U7XG5cbiAgdHJ5IHtcbiAgICB2YXIgb3B0aW9ucyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ3Bhc3NpdmUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcGFzc2l2ZVN1cHBvcnRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdCcsIG9wdGlvbnMsIG9wdGlvbnMpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd0ZXN0Jywgb3B0aW9ucywgb3B0aW9ucyk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHBhc3NpdmVTdXBwb3J0ZWQgPSBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBwYXNzaXZlU3VwcG9ydGVkO1xufVxuXG5mdW5jdGlvbiBhZGRQYXNzaXZlRXZlbnRMaXN0ZW5lcihlbGVtZW50LCBldmVudE5hbWUsIGZ1bmMsIGNhcHR1cmUpIHtcbiAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgZnVuYywgaGFzUGFzc2l2ZVN1cHBvcnQoKSA/IHtcbiAgICBjYXB0dXJlOiBjYXB0dXJlLFxuICAgIHBhc3NpdmU6IHRydWVcbiAgfSA6IGNhcHR1cmUpO1xufSIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHVuZGVmaW5lZDtcblxudmFyIF9nb29nbGVfbWFwID0gcmVxdWlyZSgnLi9nb29nbGVfbWFwJyk7XG5cbnZhciBfZ29vZ2xlX21hcDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nb29nbGVfbWFwKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gX2dvb2dsZV9tYXAyLmRlZmF1bHQ7IiwiLy9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQiwgY29tcGFyZSwgY29tcGFyZUNvbnRleHQpIHtcbiAgdmFyIHJldCA9IGNvbXBhcmUgPyBjb21wYXJlLmNhbGwoY29tcGFyZUNvbnRleHQsIG9iakEsIG9iakIpIDogdm9pZCAwO1xuXG4gIGlmIChyZXQgIT09IHZvaWQgMCkge1xuICAgIHJldHVybiAhIXJldDtcbiAgfVxuXG4gIGlmIChvYmpBID09PSBvYmpCKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZW9mIG9iakEgIT09IFwib2JqZWN0XCIgfHwgIW9iakEgfHwgdHlwZW9mIG9iakIgIT09IFwib2JqZWN0XCIgfHwgIW9iakIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG5cbiAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGJIYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuYmluZChvYmpCKTtcblxuICAvLyBUZXN0IGZvciBBJ3Mga2V5cyBkaWZmZXJlbnQgZnJvbSBCLlxuICBmb3IgKHZhciBpZHggPSAwOyBpZHggPCBrZXlzQS5sZW5ndGg7IGlkeCsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNBW2lkeF07XG5cbiAgICBpZiAoIWJIYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlQSA9IG9iakFba2V5XTtcbiAgICB2YXIgdmFsdWVCID0gb2JqQltrZXldO1xuXG4gICAgcmV0ID0gY29tcGFyZSA/IGNvbXBhcmUuY2FsbChjb21wYXJlQ29udGV4dCwgdmFsdWVBLCB2YWx1ZUIsIGtleSkgOiB2b2lkIDA7XG5cbiAgICBpZiAocmV0ID09PSBmYWxzZSB8fCAocmV0ID09PSB2b2lkIDAgJiYgdmFsdWVBICE9PSB2YWx1ZUIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuIiwiZnVuY3Rpb24gc3R5bGlzX21pbiAoVykge1xuICBmdW5jdGlvbiBNKGQsIGMsIGUsIGgsIGEpIHtcbiAgICBmb3IgKHZhciBtID0gMCwgYiA9IDAsIHYgPSAwLCBuID0gMCwgcSwgZywgeCA9IDAsIEsgPSAwLCBrLCB1ID0gayA9IHEgPSAwLCBsID0gMCwgciA9IDAsIEkgPSAwLCB0ID0gMCwgQiA9IGUubGVuZ3RoLCBKID0gQiAtIDEsIHksIGYgPSAnJywgcCA9ICcnLCBGID0gJycsIEcgPSAnJywgQzsgbCA8IEI7KSB7XG4gICAgICBnID0gZS5jaGFyQ29kZUF0KGwpO1xuICAgICAgbCA9PT0gSiAmJiAwICE9PSBiICsgbiArIHYgKyBtICYmICgwICE9PSBiICYmIChnID0gNDcgPT09IGIgPyAxMCA6IDQ3KSwgbiA9IHYgPSBtID0gMCwgQisrLCBKKyspO1xuXG4gICAgICBpZiAoMCA9PT0gYiArIG4gKyB2ICsgbSkge1xuICAgICAgICBpZiAobCA9PT0gSiAmJiAoMCA8IHIgJiYgKGYgPSBmLnJlcGxhY2UoTiwgJycpKSwgMCA8IGYudHJpbSgpLmxlbmd0aCkpIHtcbiAgICAgICAgICBzd2l0Y2ggKGcpIHtcbiAgICAgICAgICAgIGNhc2UgMzI6XG4gICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICBjYXNlIDU5OlxuICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBmICs9IGUuY2hhckF0KGwpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGcgPSA1OTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAoZykge1xuICAgICAgICAgIGNhc2UgMTIzOlxuICAgICAgICAgICAgZiA9IGYudHJpbSgpO1xuICAgICAgICAgICAgcSA9IGYuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICAgIGsgPSAxO1xuXG4gICAgICAgICAgICBmb3IgKHQgPSArK2w7IGwgPCBCOykge1xuICAgICAgICAgICAgICBzd2l0Y2ggKGcgPSBlLmNoYXJDb2RlQXQobCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDEyMzpcbiAgICAgICAgICAgICAgICAgIGsrKztcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAxMjU6XG4gICAgICAgICAgICAgICAgICBrLS07XG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgICAgICAgICBzd2l0Y2ggKGcgPSBlLmNoYXJDb2RlQXQobCArIDEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgICAgICAgICAgICAgYToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh1ID0gbCArIDE7IHUgPCBKOyArK3UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChlLmNoYXJDb2RlQXQodSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ3OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDQyID09PSBnICYmIDQyID09PSBlLmNoYXJDb2RlQXQodSAtIDEpICYmIGwgKyAyICE9PSB1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwgPSB1ICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDQ3ID09PSBnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwgPSB1ICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGwgPSB1O1xuICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgOTE6XG4gICAgICAgICAgICAgICAgICBnKys7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDQwOlxuICAgICAgICAgICAgICAgICAgZysrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAzNDpcbiAgICAgICAgICAgICAgICBjYXNlIDM5OlxuICAgICAgICAgICAgICAgICAgZm9yICg7IGwrKyA8IEogJiYgZS5jaGFyQ29kZUF0KGwpICE9PSBnOykge1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoMCA9PT0gaykgYnJlYWs7XG4gICAgICAgICAgICAgIGwrKztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgayA9IGUuc3Vic3RyaW5nKHQsIGwpO1xuICAgICAgICAgICAgMCA9PT0gcSAmJiAocSA9IChmID0gZi5yZXBsYWNlKGNhLCAnJykudHJpbSgpKS5jaGFyQ29kZUF0KDApKTtcblxuICAgICAgICAgICAgc3dpdGNoIChxKSB7XG4gICAgICAgICAgICAgIGNhc2UgNjQ6XG4gICAgICAgICAgICAgICAgMCA8IHIgJiYgKGYgPSBmLnJlcGxhY2UoTiwgJycpKTtcbiAgICAgICAgICAgICAgICBnID0gZi5jaGFyQ29kZUF0KDEpO1xuXG4gICAgICAgICAgICAgICAgc3dpdGNoIChnKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDEwMDpcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTA5OlxuICAgICAgICAgICAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgICAgICAgICBjYXNlIDQ1OlxuICAgICAgICAgICAgICAgICAgICByID0gYztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHIgPSBPO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGsgPSBNKGMsIHIsIGssIGcsIGEgKyAxKTtcbiAgICAgICAgICAgICAgICB0ID0gay5sZW5ndGg7XG4gICAgICAgICAgICAgICAgMCA8IEEgJiYgKHIgPSBYKE8sIGYsIEkpLCBDID0gSCgzLCBrLCByLCBjLCBELCB6LCB0LCBnLCBhLCBoKSwgZiA9IHIuam9pbignJyksIHZvaWQgMCAhPT0gQyAmJiAwID09PSAodCA9IChrID0gQy50cmltKCkpLmxlbmd0aCkgJiYgKGcgPSAwLCBrID0gJycpKTtcbiAgICAgICAgICAgICAgICBpZiAoMCA8IHQpIHN3aXRjaCAoZykge1xuICAgICAgICAgICAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgICAgICAgICAgIGYgPSBmLnJlcGxhY2UoZGEsIGVhKTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAxMDA6XG4gICAgICAgICAgICAgICAgICBjYXNlIDEwOTpcbiAgICAgICAgICAgICAgICAgIGNhc2UgNDU6XG4gICAgICAgICAgICAgICAgICAgIGsgPSBmICsgJ3snICsgayArICd9JztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTA3OlxuICAgICAgICAgICAgICAgICAgICBmID0gZi5yZXBsYWNlKGZhLCAnJDEgJDInKTtcbiAgICAgICAgICAgICAgICAgICAgayA9IGYgKyAneycgKyBrICsgJ30nO1xuICAgICAgICAgICAgICAgICAgICBrID0gMSA9PT0gdyB8fCAyID09PSB3ICYmIEwoJ0AnICsgaywgMykgPyAnQC13ZWJraXQtJyArIGsgKyAnQCcgKyBrIDogJ0AnICsgaztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGsgPSBmICsgaywgMTEyID09PSBoICYmIChrID0gKHAgKz0gaywgJycpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgayA9ICcnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgayA9IE0oYywgWChjLCBmLCBJKSwgaywgaCwgYSArIDEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBGICs9IGs7XG4gICAgICAgICAgICBrID0gSSA9IHIgPSB1ID0gcSA9IDA7XG4gICAgICAgICAgICBmID0gJyc7XG4gICAgICAgICAgICBnID0gZS5jaGFyQ29kZUF0KCsrbCk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMTI1OlxuICAgICAgICAgIGNhc2UgNTk6XG4gICAgICAgICAgICBmID0gKDAgPCByID8gZi5yZXBsYWNlKE4sICcnKSA6IGYpLnRyaW0oKTtcbiAgICAgICAgICAgIGlmICgxIDwgKHQgPSBmLmxlbmd0aCkpIHN3aXRjaCAoMCA9PT0gdSAmJiAocSA9IGYuY2hhckNvZGVBdCgwKSwgNDUgPT09IHEgfHwgOTYgPCBxICYmIDEyMyA+IHEpICYmICh0ID0gKGYgPSBmLnJlcGxhY2UoJyAnLCAnOicpKS5sZW5ndGgpLCAwIDwgQSAmJiB2b2lkIDAgIT09IChDID0gSCgxLCBmLCBjLCBkLCBELCB6LCBwLmxlbmd0aCwgaCwgYSwgaCkpICYmIDAgPT09ICh0ID0gKGYgPSBDLnRyaW0oKSkubGVuZ3RoKSAmJiAoZiA9ICdcXHgwMFxceDAwJyksIHEgPSBmLmNoYXJDb2RlQXQoMCksIGcgPSBmLmNoYXJDb2RlQXQoMSksIHEpIHtcbiAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgNjQ6XG4gICAgICAgICAgICAgICAgaWYgKDEwNSA9PT0gZyB8fCA5OSA9PT0gZykge1xuICAgICAgICAgICAgICAgICAgRyArPSBmICsgZS5jaGFyQXQobCk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICA1OCAhPT0gZi5jaGFyQ29kZUF0KHQgLSAxKSAmJiAocCArPSBQKGYsIHEsIGcsIGYuY2hhckNvZGVBdCgyKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgSSA9IHIgPSB1ID0gcSA9IDA7XG4gICAgICAgICAgICBmID0gJyc7XG4gICAgICAgICAgICBnID0gZS5jaGFyQ29kZUF0KCsrbCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3dpdGNoIChnKSB7XG4gICAgICAgIGNhc2UgMTM6XG4gICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgNDcgPT09IGIgPyBiID0gMCA6IDAgPT09IDEgKyBxICYmIDEwNyAhPT0gaCAmJiAwIDwgZi5sZW5ndGggJiYgKHIgPSAxLCBmICs9ICdcXHgwMCcpO1xuICAgICAgICAgIDAgPCBBICogWSAmJiBIKDAsIGYsIGMsIGQsIEQsIHosIHAubGVuZ3RoLCBoLCBhLCBoKTtcbiAgICAgICAgICB6ID0gMTtcbiAgICAgICAgICBEKys7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSA1OTpcbiAgICAgICAgY2FzZSAxMjU6XG4gICAgICAgICAgaWYgKDAgPT09IGIgKyBuICsgdiArIG0pIHtcbiAgICAgICAgICAgIHorKztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHorKztcbiAgICAgICAgICB5ID0gZS5jaGFyQXQobCk7XG5cbiAgICAgICAgICBzd2l0Y2ggKGcpIHtcbiAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgIGNhc2UgMzI6XG4gICAgICAgICAgICAgIGlmICgwID09PSBuICsgbSArIGIpIHN3aXRjaCAoeCkge1xuICAgICAgICAgICAgICAgIGNhc2UgNDQ6XG4gICAgICAgICAgICAgICAgY2FzZSA1ODpcbiAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgICAgICAgIHkgPSAnJztcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIDMyICE9PSBnICYmICh5ID0gJyAnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICB5ID0gJ1xcXFwwJztcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMTI6XG4gICAgICAgICAgICAgIHkgPSAnXFxcXGYnO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgeSA9ICdcXFxcdic7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDM4OlxuICAgICAgICAgICAgICAwID09PSBuICsgYiArIG0gJiYgKHIgPSBJID0gMSwgeSA9ICdcXGYnICsgeSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDEwODpcbiAgICAgICAgICAgICAgaWYgKDAgPT09IG4gKyBiICsgbSArIEUgJiYgMCA8IHUpIHN3aXRjaCAobCAtIHUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAxMTIgPT09IHggJiYgNTggPT09IGUuY2hhckNvZGVBdChsIC0gMykgJiYgKEUgPSB4KTtcblxuICAgICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICAgIDExMSA9PT0gSyAmJiAoRSA9IEspO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDU4OlxuICAgICAgICAgICAgICAwID09PSBuICsgYiArIG0gJiYgKHUgPSBsKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNDQ6XG4gICAgICAgICAgICAgIDAgPT09IGIgKyB2ICsgbiArIG0gJiYgKHIgPSAxLCB5ICs9ICdcXHInKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMzQ6XG4gICAgICAgICAgICBjYXNlIDM5OlxuICAgICAgICAgICAgICAwID09PSBiICYmIChuID0gbiA9PT0gZyA/IDAgOiAwID09PSBuID8gZyA6IG4pO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA5MTpcbiAgICAgICAgICAgICAgMCA9PT0gbiArIGIgKyB2ICYmIG0rKztcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgOTM6XG4gICAgICAgICAgICAgIDAgPT09IG4gKyBiICsgdiAmJiBtLS07XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDQxOlxuICAgICAgICAgICAgICAwID09PSBuICsgYiArIG0gJiYgdi0tO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA0MDpcbiAgICAgICAgICAgICAgaWYgKDAgPT09IG4gKyBiICsgbSkge1xuICAgICAgICAgICAgICAgIGlmICgwID09PSBxKSBzd2l0Y2ggKDIgKiB4ICsgMyAqIEspIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgNTMzOlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcSA9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHYrKztcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDY0OlxuICAgICAgICAgICAgICAwID09PSBiICsgdiArIG4gKyBtICsgdSArIGsgJiYgKGsgPSAxKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNDI6XG4gICAgICAgICAgICBjYXNlIDQ3OlxuICAgICAgICAgICAgICBpZiAoISgwIDwgbiArIG0gKyB2KSkgc3dpdGNoIChiKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgc3dpdGNoICgyICogZyArIDMgKiBlLmNoYXJDb2RlQXQobCArIDEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjM1OlxuICAgICAgICAgICAgICAgICAgICAgIGIgPSA0NztcbiAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlIDIyMDpcbiAgICAgICAgICAgICAgICAgICAgICB0ID0gbCwgYiA9IDQyO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgNDI6XG4gICAgICAgICAgICAgICAgICA0NyA9PT0gZyAmJiA0MiA9PT0geCAmJiB0ICsgMiAhPT0gbCAmJiAoMzMgPT09IGUuY2hhckNvZGVBdCh0ICsgMikgJiYgKHAgKz0gZS5zdWJzdHJpbmcodCwgbCArIDEpKSwgeSA9ICcnLCBiID0gMCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAwID09PSBiICYmIChmICs9IHkpO1xuICAgICAgfVxuXG4gICAgICBLID0geDtcbiAgICAgIHggPSBnO1xuICAgICAgbCsrO1xuICAgIH1cblxuICAgIHQgPSBwLmxlbmd0aDtcblxuICAgIGlmICgwIDwgdCkge1xuICAgICAgciA9IGM7XG4gICAgICBpZiAoMCA8IEEgJiYgKEMgPSBIKDIsIHAsIHIsIGQsIEQsIHosIHQsIGgsIGEsIGgpLCB2b2lkIDAgIT09IEMgJiYgMCA9PT0gKHAgPSBDKS5sZW5ndGgpKSByZXR1cm4gRyArIHAgKyBGO1xuICAgICAgcCA9IHIuam9pbignLCcpICsgJ3snICsgcCArICd9JztcblxuICAgICAgaWYgKDAgIT09IHcgKiBFKSB7XG4gICAgICAgIDIgIT09IHcgfHwgTChwLCAyKSB8fCAoRSA9IDApO1xuXG4gICAgICAgIHN3aXRjaCAoRSkge1xuICAgICAgICAgIGNhc2UgMTExOlxuICAgICAgICAgICAgcCA9IHAucmVwbGFjZShoYSwgJzotbW96LSQxJykgKyBwO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDExMjpcbiAgICAgICAgICAgIHAgPSBwLnJlcGxhY2UoUSwgJzo6LXdlYmtpdC1pbnB1dC0kMScpICsgcC5yZXBsYWNlKFEsICc6Oi1tb3otJDEnKSArIHAucmVwbGFjZShRLCAnOi1tcy1pbnB1dC0kMScpICsgcDtcbiAgICAgICAgfVxuXG4gICAgICAgIEUgPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBHICsgcCArIEY7XG4gIH1cblxuICBmdW5jdGlvbiBYKGQsIGMsIGUpIHtcbiAgICB2YXIgaCA9IGMudHJpbSgpLnNwbGl0KGlhKTtcbiAgICBjID0gaDtcbiAgICB2YXIgYSA9IGgubGVuZ3RoLFxuICAgICAgICBtID0gZC5sZW5ndGg7XG5cbiAgICBzd2l0Y2ggKG0pIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgdmFyIGIgPSAwO1xuXG4gICAgICAgIGZvciAoZCA9IDAgPT09IG0gPyAnJyA6IGRbMF0gKyAnICc7IGIgPCBhOyArK2IpIHtcbiAgICAgICAgICBjW2JdID0gWihkLCBjW2JdLCBlKS50cmltKCk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdmFyIHYgPSBiID0gMDtcblxuICAgICAgICBmb3IgKGMgPSBbXTsgYiA8IGE7ICsrYikge1xuICAgICAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgbTsgKytuKSB7XG4gICAgICAgICAgICBjW3YrK10gPSBaKGRbbl0gKyAnICcsIGhbYl0sIGUpLnRyaW0oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHJldHVybiBjO1xuICB9XG5cbiAgZnVuY3Rpb24gWihkLCBjLCBlKSB7XG4gICAgdmFyIGggPSBjLmNoYXJDb2RlQXQoMCk7XG4gICAgMzMgPiBoICYmIChoID0gKGMgPSBjLnRyaW0oKSkuY2hhckNvZGVBdCgwKSk7XG5cbiAgICBzd2l0Y2ggKGgpIHtcbiAgICAgIGNhc2UgMzg6XG4gICAgICAgIHJldHVybiBjLnJlcGxhY2UoRiwgJyQxJyArIGQudHJpbSgpKTtcblxuICAgICAgY2FzZSA1ODpcbiAgICAgICAgcmV0dXJuIGQudHJpbSgpICsgYy5yZXBsYWNlKEYsICckMScgKyBkLnRyaW0oKSk7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmICgwIDwgMSAqIGUgJiYgMCA8IGMuaW5kZXhPZignXFxmJykpIHJldHVybiBjLnJlcGxhY2UoRiwgKDU4ID09PSBkLmNoYXJDb2RlQXQoMCkgPyAnJyA6ICckMScpICsgZC50cmltKCkpO1xuICAgIH1cblxuICAgIHJldHVybiBkICsgYztcbiAgfVxuXG4gIGZ1bmN0aW9uIFAoZCwgYywgZSwgaCkge1xuICAgIHZhciBhID0gZCArICc7JyxcbiAgICAgICAgbSA9IDIgKiBjICsgMyAqIGUgKyA0ICogaDtcblxuICAgIGlmICg5NDQgPT09IG0pIHtcbiAgICAgIGQgPSBhLmluZGV4T2YoJzonLCA5KSArIDE7XG4gICAgICB2YXIgYiA9IGEuc3Vic3RyaW5nKGQsIGEubGVuZ3RoIC0gMSkudHJpbSgpO1xuICAgICAgYiA9IGEuc3Vic3RyaW5nKDAsIGQpLnRyaW0oKSArIGIgKyAnOyc7XG4gICAgICByZXR1cm4gMSA9PT0gdyB8fCAyID09PSB3ICYmIEwoYiwgMSkgPyAnLXdlYmtpdC0nICsgYiArIGIgOiBiO1xuICAgIH1cblxuICAgIGlmICgwID09PSB3IHx8IDIgPT09IHcgJiYgIUwoYSwgMSkpIHJldHVybiBhO1xuXG4gICAgc3dpdGNoIChtKSB7XG4gICAgICBjYXNlIDEwMTU6XG4gICAgICAgIHJldHVybiA5NyA9PT0gYS5jaGFyQ29kZUF0KDEwKSA/ICctd2Via2l0LScgKyBhICsgYSA6IGE7XG5cbiAgICAgIGNhc2UgOTUxOlxuICAgICAgICByZXR1cm4gMTE2ID09PSBhLmNoYXJDb2RlQXQoMykgPyAnLXdlYmtpdC0nICsgYSArIGEgOiBhO1xuXG4gICAgICBjYXNlIDk2MzpcbiAgICAgICAgcmV0dXJuIDExMCA9PT0gYS5jaGFyQ29kZUF0KDUpID8gJy13ZWJraXQtJyArIGEgKyBhIDogYTtcblxuICAgICAgY2FzZSAxMDA5OlxuICAgICAgICBpZiAoMTAwICE9PSBhLmNoYXJDb2RlQXQoNCkpIGJyZWFrO1xuXG4gICAgICBjYXNlIDk2OTpcbiAgICAgIGNhc2UgOTQyOlxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyBhO1xuXG4gICAgICBjYXNlIDk3ODpcbiAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tb3otJyArIGEgKyBhO1xuXG4gICAgICBjYXNlIDEwMTk6XG4gICAgICBjYXNlIDk4MzpcbiAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tb3otJyArIGEgKyAnLW1zLScgKyBhICsgYTtcblxuICAgICAgY2FzZSA4ODM6XG4gICAgICAgIGlmICg0NSA9PT0gYS5jaGFyQ29kZUF0KDgpKSByZXR1cm4gJy13ZWJraXQtJyArIGEgKyBhO1xuICAgICAgICBpZiAoMCA8IGEuaW5kZXhPZignaW1hZ2Utc2V0KCcsIDExKSkgcmV0dXJuIGEucmVwbGFjZShqYSwgJyQxLXdlYmtpdC0kMicpICsgYTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTMyOlxuICAgICAgICBpZiAoNDUgPT09IGEuY2hhckNvZGVBdCg0KSkgc3dpdGNoIChhLmNoYXJDb2RlQXQoNSkpIHtcbiAgICAgICAgICBjYXNlIDEwMzpcbiAgICAgICAgICAgIHJldHVybiAnLXdlYmtpdC1ib3gtJyArIGEucmVwbGFjZSgnLWdyb3cnLCAnJykgKyAnLXdlYmtpdC0nICsgYSArICctbXMtJyArIGEucmVwbGFjZSgnZ3JvdycsICdwb3NpdGl2ZScpICsgYTtcblxuICAgICAgICAgIGNhc2UgMTE1OlxuICAgICAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy0nICsgYS5yZXBsYWNlKCdzaHJpbmsnLCAnbmVnYXRpdmUnKSArIGE7XG5cbiAgICAgICAgICBjYXNlIDk4OlxuICAgICAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy0nICsgYS5yZXBsYWNlKCdiYXNpcycsICdwcmVmZXJyZWQtc2l6ZScpICsgYTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLScgKyBhICsgYTtcblxuICAgICAgY2FzZSA5NjQ6XG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtZmxleC0nICsgYSArIGE7XG5cbiAgICAgIGNhc2UgMTAyMzpcbiAgICAgICAgaWYgKDk5ICE9PSBhLmNoYXJDb2RlQXQoOCkpIGJyZWFrO1xuICAgICAgICBiID0gYS5zdWJzdHJpbmcoYS5pbmRleE9mKCc6JywgMTUpKS5yZXBsYWNlKCdmbGV4LScsICcnKS5yZXBsYWNlKCdzcGFjZS1iZXR3ZWVuJywgJ2p1c3RpZnknKTtcbiAgICAgICAgcmV0dXJuICctd2Via2l0LWJveC1wYWNrJyArIGIgKyAnLXdlYmtpdC0nICsgYSArICctbXMtZmxleC1wYWNrJyArIGIgKyBhO1xuXG4gICAgICBjYXNlIDEwMDU6XG4gICAgICAgIHJldHVybiBrYS50ZXN0KGEpID8gYS5yZXBsYWNlKGFhLCAnOi13ZWJraXQtJykgKyBhLnJlcGxhY2UoYWEsICc6LW1vei0nKSArIGEgOiBhO1xuXG4gICAgICBjYXNlIDFlMzpcbiAgICAgICAgYiA9IGEuc3Vic3RyaW5nKDEzKS50cmltKCk7XG4gICAgICAgIGMgPSBiLmluZGV4T2YoJy0nKSArIDE7XG5cbiAgICAgICAgc3dpdGNoIChiLmNoYXJDb2RlQXQoMCkgKyBiLmNoYXJDb2RlQXQoYykpIHtcbiAgICAgICAgICBjYXNlIDIyNjpcbiAgICAgICAgICAgIGIgPSBhLnJlcGxhY2UoRywgJ3RiJyk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMjMyOlxuICAgICAgICAgICAgYiA9IGEucmVwbGFjZShHLCAndGItcmwnKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAyMjA6XG4gICAgICAgICAgICBiID0gYS5yZXBsYWNlKEcsICdscicpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLScgKyBiICsgYTtcblxuICAgICAgY2FzZSAxMDE3OlxuICAgICAgICBpZiAoLTEgPT09IGEuaW5kZXhPZignc3RpY2t5JywgOSkpIGJyZWFrO1xuXG4gICAgICBjYXNlIDk3NTpcbiAgICAgICAgYyA9IChhID0gZCkubGVuZ3RoIC0gMTA7XG4gICAgICAgIGIgPSAoMzMgPT09IGEuY2hhckNvZGVBdChjKSA/IGEuc3Vic3RyaW5nKDAsIGMpIDogYSkuc3Vic3RyaW5nKGQuaW5kZXhPZignOicsIDcpICsgMSkudHJpbSgpO1xuXG4gICAgICAgIHN3aXRjaCAobSA9IGIuY2hhckNvZGVBdCgwKSArIChiLmNoYXJDb2RlQXQoNykgfCAwKSkge1xuICAgICAgICAgIGNhc2UgMjAzOlxuICAgICAgICAgICAgaWYgKDExMSA+IGIuY2hhckNvZGVBdCg4KSkgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgIGEgPSBhLnJlcGxhY2UoYiwgJy13ZWJraXQtJyArIGIpICsgJzsnICsgYTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAyMDc6XG4gICAgICAgICAgY2FzZSAxMDI6XG4gICAgICAgICAgICBhID0gYS5yZXBsYWNlKGIsICctd2Via2l0LScgKyAoMTAyIDwgbSA/ICdpbmxpbmUtJyA6ICcnKSArICdib3gnKSArICc7JyArIGEucmVwbGFjZShiLCAnLXdlYmtpdC0nICsgYikgKyAnOycgKyBhLnJlcGxhY2UoYiwgJy1tcy0nICsgYiArICdib3gnKSArICc7JyArIGE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYSArICc7JztcblxuICAgICAgY2FzZSA5Mzg6XG4gICAgICAgIGlmICg0NSA9PT0gYS5jaGFyQ29kZUF0KDUpKSBzd2l0Y2ggKGEuY2hhckNvZGVBdCg2KSkge1xuICAgICAgICAgIGNhc2UgMTA1OlxuICAgICAgICAgICAgcmV0dXJuIGIgPSBhLnJlcGxhY2UoJy1pdGVtcycsICcnKSwgJy13ZWJraXQtJyArIGEgKyAnLXdlYmtpdC1ib3gtJyArIGIgKyAnLW1zLWZsZXgtJyArIGIgKyBhO1xuXG4gICAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLWZsZXgtaXRlbS0nICsgYS5yZXBsYWNlKGJhLCAnJykgKyBhO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtZmxleC1saW5lLXBhY2snICsgYS5yZXBsYWNlKCdhbGlnbi1jb250ZW50JywgJycpLnJlcGxhY2UoYmEsICcnKSArIGE7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTczOlxuICAgICAgY2FzZSA5ODk6XG4gICAgICAgIGlmICg0NSAhPT0gYS5jaGFyQ29kZUF0KDMpIHx8IDEyMiA9PT0gYS5jaGFyQ29kZUF0KDQpKSBicmVhaztcblxuICAgICAgY2FzZSA5MzE6XG4gICAgICBjYXNlIDk1MzpcbiAgICAgICAgaWYgKCEwID09PSBsYS50ZXN0KGQpKSByZXR1cm4gMTE1ID09PSAoYiA9IGQuc3Vic3RyaW5nKGQuaW5kZXhPZignOicpICsgMSkpLmNoYXJDb2RlQXQoMCkgPyBQKGQucmVwbGFjZSgnc3RyZXRjaCcsICdmaWxsLWF2YWlsYWJsZScpLCBjLCBlLCBoKS5yZXBsYWNlKCc6ZmlsbC1hdmFpbGFibGUnLCAnOnN0cmV0Y2gnKSA6IGEucmVwbGFjZShiLCAnLXdlYmtpdC0nICsgYikgKyBhLnJlcGxhY2UoYiwgJy1tb3otJyArIGIucmVwbGFjZSgnZmlsbC0nLCAnJykpICsgYTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTYyOlxuICAgICAgICBpZiAoYSA9ICctd2Via2l0LScgKyBhICsgKDEwMiA9PT0gYS5jaGFyQ29kZUF0KDUpID8gJy1tcy0nICsgYSA6ICcnKSArIGEsIDIxMSA9PT0gZSArIGggJiYgMTA1ID09PSBhLmNoYXJDb2RlQXQoMTMpICYmIDAgPCBhLmluZGV4T2YoJ3RyYW5zZm9ybScsIDEwKSkgcmV0dXJuIGEuc3Vic3RyaW5nKDAsIGEuaW5kZXhPZignOycsIDI3KSArIDEpLnJlcGxhY2UobWEsICckMS13ZWJraXQtJDInKSArIGE7XG4gICAgfVxuXG4gICAgcmV0dXJuIGE7XG4gIH1cblxuICBmdW5jdGlvbiBMKGQsIGMpIHtcbiAgICB2YXIgZSA9IGQuaW5kZXhPZigxID09PSBjID8gJzonIDogJ3snKSxcbiAgICAgICAgaCA9IGQuc3Vic3RyaW5nKDAsIDMgIT09IGMgPyBlIDogMTApO1xuICAgIGUgPSBkLnN1YnN0cmluZyhlICsgMSwgZC5sZW5ndGggLSAxKTtcbiAgICByZXR1cm4gUigyICE9PSBjID8gaCA6IGgucmVwbGFjZShuYSwgJyQxJyksIGUsIGMpO1xuICB9XG5cbiAgZnVuY3Rpb24gZWEoZCwgYykge1xuICAgIHZhciBlID0gUChjLCBjLmNoYXJDb2RlQXQoMCksIGMuY2hhckNvZGVBdCgxKSwgYy5jaGFyQ29kZUF0KDIpKTtcbiAgICByZXR1cm4gZSAhPT0gYyArICc7JyA/IGUucmVwbGFjZShvYSwgJyBvciAoJDEpJykuc3Vic3RyaW5nKDQpIDogJygnICsgYyArICcpJztcbiAgfVxuXG4gIGZ1bmN0aW9uIEgoZCwgYywgZSwgaCwgYSwgbSwgYiwgdiwgbiwgcSkge1xuICAgIGZvciAodmFyIGcgPSAwLCB4ID0gYywgdzsgZyA8IEE7ICsrZykge1xuICAgICAgc3dpdGNoICh3ID0gU1tnXS5jYWxsKEIsIGQsIHgsIGUsIGgsIGEsIG0sIGIsIHYsIG4sIHEpKSB7XG4gICAgICAgIGNhc2Ugdm9pZCAwOlxuICAgICAgICBjYXNlICExOlxuICAgICAgICBjYXNlICEwOlxuICAgICAgICBjYXNlIG51bGw6XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB4ID0gdztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoeCAhPT0gYykgcmV0dXJuIHg7XG4gIH1cblxuICBmdW5jdGlvbiBUKGQpIHtcbiAgICBzd2l0Y2ggKGQpIHtcbiAgICAgIGNhc2Ugdm9pZCAwOlxuICAgICAgY2FzZSBudWxsOlxuICAgICAgICBBID0gUy5sZW5ndGggPSAwO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBkKSBTW0ErK10gPSBkO2Vsc2UgaWYgKCdvYmplY3QnID09PSB0eXBlb2YgZCkgZm9yICh2YXIgYyA9IDAsIGUgPSBkLmxlbmd0aDsgYyA8IGU7ICsrYykge1xuICAgICAgICAgIFQoZFtjXSk7XG4gICAgICAgIH0gZWxzZSBZID0gISFkIHwgMDtcbiAgICB9XG5cbiAgICByZXR1cm4gVDtcbiAgfVxuXG4gIGZ1bmN0aW9uIFUoZCkge1xuICAgIGQgPSBkLnByZWZpeDtcbiAgICB2b2lkIDAgIT09IGQgJiYgKFIgPSBudWxsLCBkID8gJ2Z1bmN0aW9uJyAhPT0gdHlwZW9mIGQgPyB3ID0gMSA6ICh3ID0gMiwgUiA9IGQpIDogdyA9IDApO1xuICAgIHJldHVybiBVO1xuICB9XG5cbiAgZnVuY3Rpb24gQihkLCBjKSB7XG4gICAgdmFyIGUgPSBkO1xuICAgIDMzID4gZS5jaGFyQ29kZUF0KDApICYmIChlID0gZS50cmltKCkpO1xuICAgIFYgPSBlO1xuICAgIGUgPSBbVl07XG5cbiAgICBpZiAoMCA8IEEpIHtcbiAgICAgIHZhciBoID0gSCgtMSwgYywgZSwgZSwgRCwgeiwgMCwgMCwgMCwgMCk7XG4gICAgICB2b2lkIDAgIT09IGggJiYgJ3N0cmluZycgPT09IHR5cGVvZiBoICYmIChjID0gaCk7XG4gICAgfVxuXG4gICAgdmFyIGEgPSBNKE8sIGUsIGMsIDAsIDApO1xuICAgIDAgPCBBICYmIChoID0gSCgtMiwgYSwgZSwgZSwgRCwgeiwgYS5sZW5ndGgsIDAsIDAsIDApLCB2b2lkIDAgIT09IGggJiYgKGEgPSBoKSk7XG4gICAgViA9ICcnO1xuICAgIEUgPSAwO1xuICAgIHogPSBEID0gMTtcbiAgICByZXR1cm4gYTtcbiAgfVxuXG4gIHZhciBjYSA9IC9eXFwwKy9nLFxuICAgICAgTiA9IC9bXFwwXFxyXFxmXS9nLFxuICAgICAgYWEgPSAvOiAqL2csXG4gICAgICBrYSA9IC96b298Z3JhLyxcbiAgICAgIG1hID0gLyhbLDogXSkodHJhbnNmb3JtKS9nLFxuICAgICAgaWEgPSAvLFxccis/L2csXG4gICAgICBGID0gLyhbXFx0XFxyXFxuIF0pKlxcZj8mL2csXG4gICAgICBmYSA9IC9AKGtcXHcrKVxccyooXFxTKilcXHMqLyxcbiAgICAgIFEgPSAvOjoocGxhY2UpL2csXG4gICAgICBoYSA9IC86KHJlYWQtb25seSkvZyxcbiAgICAgIEcgPSAvW3N2aF1cXHcrLVt0YmxyXXsyfS8sXG4gICAgICBkYSA9IC9cXChcXHMqKC4qKVxccypcXCkvZyxcbiAgICAgIG9hID0gLyhbXFxzXFxTXSo/KTsvZyxcbiAgICAgIGJhID0gLy1zZWxmfGZsZXgtL2csXG4gICAgICBuYSA9IC9bXl0qPyg6W3JwXVtlbF1hW1xcdy1dKylbXl0qLyxcbiAgICAgIGxhID0gL3N0cmV0Y2h8OlxccypcXHcrXFwtKD86Y29udGV8YXZhaWwpLyxcbiAgICAgIGphID0gLyhbXi1dKShpbWFnZS1zZXRcXCgpLyxcbiAgICAgIHogPSAxLFxuICAgICAgRCA9IDEsXG4gICAgICBFID0gMCxcbiAgICAgIHcgPSAxLFxuICAgICAgTyA9IFtdLFxuICAgICAgUyA9IFtdLFxuICAgICAgQSA9IDAsXG4gICAgICBSID0gbnVsbCxcbiAgICAgIFkgPSAwLFxuICAgICAgViA9ICcnO1xuICBCLnVzZSA9IFQ7XG4gIEIuc2V0ID0gVTtcbiAgdm9pZCAwICE9PSBXICYmIFUoVyk7XG4gIHJldHVybiBCO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdHlsaXNfbWluO1xuIiwidmFyIHVuaXRsZXNzS2V5cyA9IHtcbiAgYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6IDEsXG4gIGJvcmRlckltYWdlT3V0c2V0OiAxLFxuICBib3JkZXJJbWFnZVNsaWNlOiAxLFxuICBib3JkZXJJbWFnZVdpZHRoOiAxLFxuICBib3hGbGV4OiAxLFxuICBib3hGbGV4R3JvdXA6IDEsXG4gIGJveE9yZGluYWxHcm91cDogMSxcbiAgY29sdW1uQ291bnQ6IDEsXG4gIGNvbHVtbnM6IDEsXG4gIGZsZXg6IDEsXG4gIGZsZXhHcm93OiAxLFxuICBmbGV4UG9zaXRpdmU6IDEsXG4gIGZsZXhTaHJpbms6IDEsXG4gIGZsZXhOZWdhdGl2ZTogMSxcbiAgZmxleE9yZGVyOiAxLFxuICBncmlkUm93OiAxLFxuICBncmlkUm93RW5kOiAxLFxuICBncmlkUm93U3BhbjogMSxcbiAgZ3JpZFJvd1N0YXJ0OiAxLFxuICBncmlkQ29sdW1uOiAxLFxuICBncmlkQ29sdW1uRW5kOiAxLFxuICBncmlkQ29sdW1uU3BhbjogMSxcbiAgZ3JpZENvbHVtblN0YXJ0OiAxLFxuICBtc0dyaWRSb3c6IDEsXG4gIG1zR3JpZFJvd1NwYW46IDEsXG4gIG1zR3JpZENvbHVtbjogMSxcbiAgbXNHcmlkQ29sdW1uU3BhbjogMSxcbiAgZm9udFdlaWdodDogMSxcbiAgbGluZUhlaWdodDogMSxcbiAgb3BhY2l0eTogMSxcbiAgb3JkZXI6IDEsXG4gIG9ycGhhbnM6IDEsXG4gIHRhYlNpemU6IDEsXG4gIHdpZG93czogMSxcbiAgekluZGV4OiAxLFxuICB6b29tOiAxLFxuICBXZWJraXRMaW5lQ2xhbXA6IDEsXG4gIC8vIFNWRy1yZWxhdGVkIHByb3BlcnRpZXNcbiAgZmlsbE9wYWNpdHk6IDEsXG4gIGZsb29kT3BhY2l0eTogMSxcbiAgc3RvcE9wYWNpdHk6IDEsXG4gIHN0cm9rZURhc2hhcnJheTogMSxcbiAgc3Ryb2tlRGFzaG9mZnNldDogMSxcbiAgc3Ryb2tlTWl0ZXJsaW1pdDogMSxcbiAgc3Ryb2tlT3BhY2l0eTogMSxcbiAgc3Ryb2tlV2lkdGg6IDFcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHVuaXRsZXNzS2V5cztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTIgMjEuMzVsLTEuNDUtMS4zMkM1LjQgMTUuMzYgMiAxMi4yOCAyIDguNSAyIDUuNDIgNC40MiAzIDcuNSAzYzEuNzQgMCAzLjQxLjgxIDQuNSAyLjA5QzEzLjA5IDMuODEgMTQuNzYgMyAxNi41IDMgMTkuNTggMyAyMiA1LjQyIDIyIDguNWMwIDMuNzgtMy40IDYuODYtOC41NSAxMS41NEwxMiAyMS4zNXpcIlxufSksICdGYXZvcml0ZScpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KShfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTIyIDRoLTJjLS41NSAwLTEgLjQ1LTEgMXY5YzAgLjU1LjQ1IDEgMSAxaDJWNHpNMi4xNyAxMS4xMmMtLjExLjI1LS4xNy41Mi0uMTcuOFYxM2MwIDEuMS45IDIgMiAyaDUuNWwtLjkyIDQuNjVjLS4wNS4yMi0uMDIuNDYuMDguNjYuMjMuNDUuNTIuODYuODggMS4yMkwxMCAyMmw2LjQxLTYuNDFjLjM4LS4zOC41OS0uODkuNTktMS40MlY2LjM0QzE3IDUuMDUgMTUuOTUgNCAxNC42NiA0aC04LjFjLS43MSAwLTEuMzYuMzctMS43Mi45N2wtMi42NyA2LjE1elwiXG59KSwgJ1RodW1iRG93bkFsdCcpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KShfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTYgMTljMCAxLjEuOSAyIDIgMmg4YzEuMSAwIDItLjkgMi0yVjdINnYxMnptMi40Ni03LjEybDEuNDEtMS40MUwxMiAxMi41OWwyLjEyLTIuMTIgMS40MSAxLjQxTDEzLjQxIDE0bDIuMTIgMi4xMi0xLjQxIDEuNDFMMTIgMTUuNDFsLTIuMTIgMi4xMi0xLjQxLTEuNDFMMTAuNTkgMTRsLTIuMTMtMi4xMnpNMTUuNSA0bC0xLTFoLTVsLTEgMUg1djJoMTRWNHpcIlxufSksICdEZWxldGVGb3JldmVyJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIi8qKlxuICogV0FSTklORzogRG9uJ3QgaW1wb3J0IHRoaXMgZGlyZWN0bHkuXG4gKiBVc2UgYE11aUVycm9yYCBmcm9tIGBAbWF0ZXJpYWwtdWkvdXRpbHMvbWFjcm9zL011aUVycm9yLm1hY3JvYCBpbnN0ZWFkLlxuICogQHBhcmFtIHtudW1iZXJ9IGNvZGVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0TXVpRXJyb3JNZXNzYWdlKGNvZGUpIHtcbiAgLy8gQXBwbHkgYmFiZWwtcGx1Z2luLXRyYW5zZm9ybS10ZW1wbGF0ZS1saXRlcmFscyBpbiBsb29zZSBtb2RlXG4gIC8vIGxvb3NlIG1vZGUgaXMgc2FmZSBpZmYgd2UncmUgY29uY2F0ZW5hdGluZyBwcmltaXRpdmVzXG4gIC8vIHNlZSBodHRwczovL2JhYmVsanMuaW8vZG9jcy9lbi9iYWJlbC1wbHVnaW4tdHJhbnNmb3JtLXRlbXBsYXRlLWxpdGVyYWxzI2xvb3NlXG5cbiAgLyogZXNsaW50LWRpc2FibGUgcHJlZmVyLXRlbXBsYXRlICovXG4gIHZhciB1cmwgPSAnaHR0cHM6Ly9tYXRlcmlhbC11aS5jb20vcHJvZHVjdGlvbi1lcnJvci8/Y29kZT0nICsgY29kZTtcblxuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIC8vIHJlc3QgcGFyYW1zIG92ZXItdHJhbnNwaWxlIGZvciB0aGlzIGNhc2VcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXJlc3QtcGFyYW1zXG4gICAgdXJsICs9ICcmYXJnc1tdPScgKyBlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2ldKTtcbiAgfVxuXG4gIHJldHVybiAnTWluaWZpZWQgTWF0ZXJpYWwtVUkgZXJyb3IgIycgKyBjb2RlICsgJzsgdmlzaXQgJyArIHVybCArICcgZm9yIHRoZSBmdWxsIG1lc3NhZ2UuJztcbiAgLyogZXNsaW50LWVuYWJsZSBwcmVmZXItdGVtcGxhdGUgKi9cbn0iLCJmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcblxuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9zZXRQcm90b3R5cGVPZjsiLCJmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7XG5cbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX3R5cGVvZihvYmopO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF90eXBlb2Y7IiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMy4xXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgbD1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxuPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IscD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLHE9bj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LHI9bj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsdD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCx1PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LHY9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksdz1uP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLHg9bj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIseT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyx6PW4/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsQT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOlxuNjAxMTYsQj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gQyhhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1cbnZhciBEPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxFPXt9O2Z1bmN0aW9uIEYoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RTt0aGlzLnVwZGF0ZXI9Y3x8RH1GLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0YucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcihDKDg1KSk7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtGLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtcbmZ1bmN0aW9uIEcoKXt9Ry5wcm90b3R5cGU9Ri5wcm90b3R5cGU7ZnVuY3Rpb24gSChhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1FO3RoaXMudXBkYXRlcj1jfHxEfXZhciBJPUgucHJvdG90eXBlPW5ldyBHO0kuY29uc3RydWN0b3I9SDtsKEksRi5wcm90b3R5cGUpO0kuaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEo9e2N1cnJlbnQ6bnVsbH0sSz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEw9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIE0oYSxiLGMpe3ZhciBlLGQ9e30sZz1udWxsLGs9bnVsbDtpZihudWxsIT1iKWZvcihlIGluIHZvaWQgMCE9PWIucmVmJiYoaz1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpLGIpSy5jYWxsKGIsZSkmJiFMLmhhc093blByb3BlcnR5KGUpJiYoZFtlXT1iW2VdKTt2YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZC5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxmKXtmb3IodmFyIGg9QXJyYXkoZiksbT0wO208ZjttKyspaFttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWh9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGUgaW4gZj1hLmRlZmF1bHRQcm9wcyxmKXZvaWQgMD09PWRbZV0mJihkW2VdPWZbZV0pO3JldHVybnskJHR5cGVvZjpwLHR5cGU6YSxrZXk6ZyxyZWY6ayxwcm9wczpkLF9vd25lcjpKLmN1cnJlbnR9fVxuZnVuY3Rpb24gTihhLGIpe3JldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTyhhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09cH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiKyhcIlwiK2EpLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBQPS9cXC8rL2csUT1bXTtmdW5jdGlvbiBSKGEsYixjLGUpe2lmKFEubGVuZ3RoKXt2YXIgZD1RLnBvcCgpO2QucmVzdWx0PWE7ZC5rZXlQcmVmaXg9YjtkLmZ1bmM9YztkLmNvbnRleHQ9ZTtkLmNvdW50PTA7cmV0dXJuIGR9cmV0dXJue3Jlc3VsdDphLGtleVByZWZpeDpiLGZ1bmM6Yyxjb250ZXh0OmUsY291bnQ6MH19XG5mdW5jdGlvbiBTKGEpe2EucmVzdWx0PW51bGw7YS5rZXlQcmVmaXg9bnVsbDthLmZ1bmM9bnVsbDthLmNvbnRleHQ9bnVsbDthLmNvdW50PTA7MTA+US5sZW5ndGgmJlEucHVzaChhKX1cbmZ1bmN0aW9uIFQoYSxiLGMsZSl7dmFyIGQ9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWR8fFwiYm9vbGVhblwiPT09ZClhPW51bGw7dmFyIGc9ITE7aWYobnVsbD09PWEpZz0hMDtlbHNlIHN3aXRjaChkKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmc9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHA6Y2FzZSBxOmc9ITB9fWlmKGcpcmV0dXJuIGMoZSxhLFwiXCI9PT1iP1wiLlwiK1UoYSwwKTpiKSwxO2c9MDtiPVwiXCI9PT1iP1wiLlwiOmIrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGs9MDtrPGEubGVuZ3RoO2srKyl7ZD1hW2tdO3ZhciBmPWIrVShkLGspO2crPVQoZCxmLGMsZSl9ZWxzZSBpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhP2Y9bnVsbDooZj1CJiZhW0JdfHxhW1wiQEBpdGVyYXRvclwiXSxmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBmP2Y6bnVsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGs9XG4wOyEoZD1hLm5leHQoKSkuZG9uZTspZD1kLnZhbHVlLGY9YitVKGQsaysrKSxnKz1UKGQsZixjLGUpO2Vsc2UgaWYoXCJvYmplY3RcIj09PWQpdGhyb3cgYz1cIlwiK2EsRXJyb3IoQygzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09Yz9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjpjLFwiXCIpKTtyZXR1cm4gZ31mdW5jdGlvbiBWKGEsYixjKXtyZXR1cm4gbnVsbD09YT8wOlQoYSxcIlwiLGIsYyl9ZnVuY3Rpb24gVShhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShhLmtleSk6Yi50b1N0cmluZygzNil9ZnVuY3Rpb24gVyhhLGIpe2EuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyl9XG5mdW5jdGlvbiBhYShhLGIsYyl7dmFyIGU9YS5yZXN1bHQsZD1hLmtleVByZWZpeDthPWEuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyk7QXJyYXkuaXNBcnJheShhKT9YKGEsZSxjLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk6bnVsbCE9YSYmKE8oYSkmJihhPU4oYSxkKyghYS5rZXl8fGImJmIua2V5PT09YS5rZXk/XCJcIjooXCJcIithLmtleSkucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKStjKSksZS5wdXNoKGEpKX1mdW5jdGlvbiBYKGEsYixjLGUsZCl7dmFyIGc9XCJcIjtudWxsIT1jJiYoZz0oXCJcIitjKS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpO2I9UihiLGcsZSxkKTtWKGEsYWEsYik7UyhiKX12YXIgWT17Y3VycmVudDpudWxsfTtmdW5jdGlvbiBaKCl7dmFyIGE9WS5jdXJyZW50O2lmKG51bGw9PT1hKXRocm93IEVycm9yKEMoMzIxKSk7cmV0dXJuIGF9XG52YXIgYmE9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6WSxSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzp7c3VzcGVuc2U6bnVsbH0sUmVhY3RDdXJyZW50T3duZXI6SixJc1NvbWVSZW5kZXJlckFjdGluZzp7Y3VycmVudDohMX0sYXNzaWduOmx9O2V4cG9ydHMuQ2hpbGRyZW49e21hcDpmdW5jdGlvbihhLGIsYyl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgZT1bXTtYKGEsZSxudWxsLGIsYyk7cmV0dXJuIGV9LGZvckVhY2g6ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PWEpcmV0dXJuIGE7Yj1SKG51bGwsbnVsbCxiLGMpO1YoYSxXLGIpO1MoYil9LGNvdW50OmZ1bmN0aW9uKGEpe3JldHVybiBWKGEsZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0sbnVsbCl9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7dmFyIGI9W107WChhLGIsbnVsbCxmdW5jdGlvbihhKXtyZXR1cm4gYX0pO3JldHVybiBifSxvbmx5OmZ1bmN0aW9uKGEpe2lmKCFPKGEpKXRocm93IEVycm9yKEMoMTQzKSk7cmV0dXJuIGF9fTtcbmV4cG9ydHMuQ29tcG9uZW50PUY7ZXhwb3J0cy5GcmFnbWVudD1yO2V4cG9ydHMuUHJvZmlsZXI9dTtleHBvcnRzLlB1cmVDb21wb25lbnQ9SDtleHBvcnRzLlN0cmljdE1vZGU9dDtleHBvcnRzLlN1c3BlbnNlPXk7ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1iYTtcbmV4cG9ydHMuY2xvbmVFbGVtZW50PWZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT09YXx8dm9pZCAwPT09YSl0aHJvdyBFcnJvcihDKDI2NyxhKSk7dmFyIGU9bCh7fSxhLnByb3BzKSxkPWEua2V5LGc9YS5yZWYsaz1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGc9Yi5yZWYsaz1KLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoZD1cIlwiK2Iua2V5KTtpZihhLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMpdmFyIGY9YS50eXBlLmRlZmF1bHRQcm9wcztmb3IoaCBpbiBiKUsuY2FsbChiLGgpJiYhTC5oYXNPd25Qcm9wZXJ0eShoKSYmKGVbaF09dm9pZCAwPT09YltoXSYmdm9pZCAwIT09Zj9mW2hdOmJbaF0pfXZhciBoPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09aCllLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGgpe2Y9QXJyYXkoaCk7Zm9yKHZhciBtPTA7bTxoO20rKylmW21dPWFyZ3VtZW50c1ttKzJdO2UuY2hpbGRyZW49Zn1yZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxcbmtleTpkLHJlZjpnLHByb3BzOmUsX293bmVyOmt9fTtleHBvcnRzLmNyZWF0ZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj1udWxsKTthPXskJHR5cGVvZjp3LF9jYWxjdWxhdGVDaGFuZ2VkQml0czpiLF9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF90aHJlYWRDb3VudDowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6dixfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfTtleHBvcnRzLmNyZWF0ZUVsZW1lbnQ9TTtleHBvcnRzLmNyZWF0ZUZhY3Rvcnk9ZnVuY3Rpb24oYSl7dmFyIGI9TS5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9O2V4cG9ydHMuY3JlYXRlUmVmPWZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19O2V4cG9ydHMuZm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6eCxyZW5kZXI6YX19O2V4cG9ydHMuaXNWYWxpZEVsZW1lbnQ9TztcbmV4cG9ydHMubGF6eT1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6QSxfY3RvcjphLF9zdGF0dXM6LTEsX3Jlc3VsdDpudWxsfX07ZXhwb3J0cy5tZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOnosdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fTtleHBvcnRzLnVzZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VDYWxsYmFjayhhLGIpfTtleHBvcnRzLnVzZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZUNvbnRleHQoYSxiKX07ZXhwb3J0cy51c2VEZWJ1Z1ZhbHVlPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVzZUVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlSW1wZXJhdGl2ZUhhbmRsZT1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFooKS51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixjKX07XG5leHBvcnRzLnVzZUxheW91dEVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlTGF5b3V0RWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTWVtbz1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlTWVtbyhhLGIpfTtleHBvcnRzLnVzZVJlZHVjZXI9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBaKCkudXNlUmVkdWNlcihhLGIsYyl9O2V4cG9ydHMudXNlUmVmPWZ1bmN0aW9uKGEpe3JldHVybiBaKCkudXNlUmVmKGEpfTtleHBvcnRzLnVzZVN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBaKCkudXNlU3RhdGUoYSl9O2V4cG9ydHMudmVyc2lvbj1cIjE2LjEzLjFcIjtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJyZWFjdFwiKSxuPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLHI9cmVxdWlyZShcInNjaGVkdWxlclwiKTtmdW5jdGlvbiB1KGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifWlmKCFhYSl0aHJvdyBFcnJvcih1KDIyNykpO1xuZnVuY3Rpb24gYmEoYSxiLGMsZCxlLGYsZyxoLGspe3ZhciBsPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLGwpfWNhdGNoKG0pe3RoaXMub25FcnJvcihtKX19dmFyIGRhPSExLGVhPW51bGwsZmE9ITEsaGE9bnVsbCxpYT17b25FcnJvcjpmdW5jdGlvbihhKXtkYT0hMDtlYT1hfX07ZnVuY3Rpb24gamEoYSxiLGMsZCxlLGYsZyxoLGspe2RhPSExO2VhPW51bGw7YmEuYXBwbHkoaWEsYXJndW1lbnRzKX1mdW5jdGlvbiBrYShhLGIsYyxkLGUsZixnLGgsayl7amEuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKGRhKXtpZihkYSl7dmFyIGw9ZWE7ZGE9ITE7ZWE9bnVsbH1lbHNlIHRocm93IEVycm9yKHUoMTk4KSk7ZmF8fChmYT0hMCxoYT1sKX19dmFyIGxhPW51bGwsbWE9bnVsbCxuYT1udWxsO1xuZnVuY3Rpb24gb2EoYSxiLGMpe3ZhciBkPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PW5hKGMpO2thKGQsYix2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9dmFyIHBhPW51bGwscWE9e307XG5mdW5jdGlvbiByYSgpe2lmKHBhKWZvcih2YXIgYSBpbiBxYSl7dmFyIGI9cWFbYV0sYz1wYS5pbmRleE9mKGEpO2lmKCEoLTE8YykpdGhyb3cgRXJyb3IodSg5NixhKSk7aWYoIXNhW2NdKXtpZighYi5leHRyYWN0RXZlbnRzKXRocm93IEVycm9yKHUoOTcsYSkpO3NhW2NdPWI7Yz1iLmV2ZW50VHlwZXM7Zm9yKHZhciBkIGluIGMpe3ZhciBlPXZvaWQgMDt2YXIgZj1jW2RdLGc9YixoPWQ7aWYodGEuaGFzT3duUHJvcGVydHkoaCkpdGhyb3cgRXJyb3IodSg5OSxoKSk7dGFbaF09Zjt2YXIgaz1mLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzO2lmKGspe2ZvcihlIGluIGspay5oYXNPd25Qcm9wZXJ0eShlKSYmdWEoa1tlXSxnLGgpO2U9ITB9ZWxzZSBmLnJlZ2lzdHJhdGlvbk5hbWU/KHVhKGYucmVnaXN0cmF0aW9uTmFtZSxnLGgpLGU9ITApOmU9ITE7aWYoIWUpdGhyb3cgRXJyb3IodSg5OCxkLGEpKTt9fX19XG5mdW5jdGlvbiB1YShhLGIsYyl7aWYodmFbYV0pdGhyb3cgRXJyb3IodSgxMDAsYSkpO3ZhW2FdPWI7d2FbYV09Yi5ldmVudFR5cGVzW2NdLmRlcGVuZGVuY2llc312YXIgc2E9W10sdGE9e30sdmE9e30sd2E9e307ZnVuY3Rpb24geGEoYSl7dmFyIGI9ITEsYztmb3IoYyBpbiBhKWlmKGEuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPWFbY107aWYoIXFhLmhhc093blByb3BlcnR5KGMpfHxxYVtjXSE9PWQpe2lmKHFhW2NdKXRocm93IEVycm9yKHUoMTAyLGMpKTtxYVtjXT1kO2I9ITB9fWImJnJhKCl9dmFyIHlhPSEoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KSx6YT1udWxsLEFhPW51bGwsQmE9bnVsbDtcbmZ1bmN0aW9uIENhKGEpe2lmKGE9bWEoYSkpe2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB6YSl0aHJvdyBFcnJvcih1KDI4MCkpO3ZhciBiPWEuc3RhdGVOb2RlO2ImJihiPWxhKGIpLHphKGEuc3RhdGVOb2RlLGEudHlwZSxiKSl9fWZ1bmN0aW9uIERhKGEpe0FhP0JhP0JhLnB1c2goYSk6QmE9W2FdOkFhPWF9ZnVuY3Rpb24gRWEoKXtpZihBYSl7dmFyIGE9QWEsYj1CYTtCYT1BYT1udWxsO0NhKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylDYShiW2FdKX19ZnVuY3Rpb24gRmEoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBHYShhLGIsYyxkLGUpe3JldHVybiBhKGIsYyxkLGUpfWZ1bmN0aW9uIEhhKCl7fXZhciBJYT1GYSxKYT0hMSxLYT0hMTtmdW5jdGlvbiBMYSgpe2lmKG51bGwhPT1BYXx8bnVsbCE9PUJhKUhhKCksRWEoKX1cbmZ1bmN0aW9uIE1hKGEsYixjKXtpZihLYSlyZXR1cm4gYShiLGMpO0thPSEwO3RyeXtyZXR1cm4gSWEoYSxiLGMpfWZpbmFsbHl7S2E9ITEsTGEoKX19dmFyIE5hPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxPYT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LFBhPXt9LFFhPXt9O1xuZnVuY3Rpb24gUmEoYSl7aWYoT2EuY2FsbChRYSxhKSlyZXR1cm4hMDtpZihPYS5jYWxsKFBhLGEpKXJldHVybiExO2lmKE5hLnRlc3QoYSkpcmV0dXJuIFFhW2FdPSEwO1BhW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIFNhKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gVGEoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8U2EoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiB2KGEsYixjLGQsZSxmKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1iO3RoaXMuc2FuaXRpemVVUkw9Zn12YXIgQz17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDAsITEsYSxudWxsLCExKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtDW2JdPW5ldyB2KGIsMSwhMSxhWzFdLG51bGwsITEpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDIsITEsYSxudWxsLCExKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDMsITAsYSxudWxsLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDQsITEsYSxudWxsLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsNiwhMSxhLG51bGwsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTt2YXIgVWE9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBWYShhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShVYSxcblZhKTtDW2JdPW5ldyB2KGIsMSwhMSxhLG51bGwsITEpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoVWEsVmEpO0NbYl09bmV3IHYoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoVWEsVmEpO0NbYl09bmV3IHYoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTtcbkMueGxpbmtIcmVmPW5ldyB2KFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCl9KTt2YXIgV2E9YWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ7V2EuaGFzT3duUHJvcGVydHkoXCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyXCIpfHwoV2EuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcj17Y3VycmVudDpudWxsfSk7V2EuaGFzT3duUHJvcGVydHkoXCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZ1wiKXx8KFdhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnPXtzdXNwZW5zZTpudWxsfSk7XG5mdW5jdGlvbiBYYShhLGIsYyxkKXt2YXIgZT1DLmhhc093blByb3BlcnR5KGIpP0NbYl06bnVsbDt2YXIgZj1udWxsIT09ZT8wPT09ZS50eXBlOmQ/ITE6ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdPyExOiEwO2Z8fChUYShiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/UmEoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpKX1cbnZhciBZYT0vXiguKilbXFxcXFxcL10vLEU9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixaYT1FP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLCRhPUU/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixhYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxiYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxjYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxkYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxlYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGZiPUU/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxnYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixoYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxpYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpOlxuNjAxMjAsamI9RT9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSxrYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LGxiPUU/U3ltYm9sLmZvcihcInJlYWN0LmJsb2NrXCIpOjYwMTIxLG1iPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBuYihhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9bWImJmFbbWJdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9ZnVuY3Rpb24gb2IoYSl7aWYoLTE9PT1hLl9zdGF0dXMpe2EuX3N0YXR1cz0wO3ZhciBiPWEuX2N0b3I7Yj1iKCk7YS5fcmVzdWx0PWI7Yi50aGVuKGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihiPWIuZGVmYXVsdCxhLl9zdGF0dXM9MSxhLl9yZXN1bHQ9Yil9LGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yil9KX19XG5mdW5jdGlvbiBwYihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIGFiOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlICRhOnJldHVyblwiUG9ydGFsXCI7Y2FzZSBjYjpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSBiYjpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIGhiOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIGliOnJldHVyblwiU3VzcGVuc2VMaXN0XCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIGViOnJldHVyblwiQ29udGV4dC5Db25zdW1lclwiO2Nhc2UgZGI6cmV0dXJuXCJDb250ZXh0LlByb3ZpZGVyXCI7Y2FzZSBnYjp2YXIgYj1hLnJlbmRlcjtiPWIuZGlzcGxheU5hbWV8fGIubmFtZXx8XCJcIjtyZXR1cm4gYS5kaXNwbGF5TmFtZXx8KFwiXCIhPT1iP1wiRm9yd2FyZFJlZihcIitiK1wiKVwiOlxuXCJGb3J3YXJkUmVmXCIpO2Nhc2UgamI6cmV0dXJuIHBiKGEudHlwZSk7Y2FzZSBsYjpyZXR1cm4gcGIoYS5yZW5kZXIpO2Nhc2Uga2I6aWYoYT0xPT09YS5fc3RhdHVzP2EuX3Jlc3VsdDpudWxsKXJldHVybiBwYihhKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBxYihhKXt2YXIgYj1cIlwiO2Rve2E6c3dpdGNoKGEudGFnKXtjYXNlIDM6Y2FzZSA0OmNhc2UgNjpjYXNlIDc6Y2FzZSAxMDpjYXNlIDk6dmFyIGM9XCJcIjticmVhayBhO2RlZmF1bHQ6dmFyIGQ9YS5fZGVidWdPd25lcixlPWEuX2RlYnVnU291cmNlLGY9cGIoYS50eXBlKTtjPW51bGw7ZCYmKGM9cGIoZC50eXBlKSk7ZD1mO2Y9XCJcIjtlP2Y9XCIgKGF0IFwiK2UuZmlsZU5hbWUucmVwbGFjZShZYSxcIlwiKStcIjpcIitlLmxpbmVOdW1iZXIrXCIpXCI6YyYmKGY9XCIgKGNyZWF0ZWQgYnkgXCIrYytcIilcIik7Yz1cIlxcbiAgICBpbiBcIisoZHx8XCJVbmtub3duXCIpK2Z9Yis9YzthPWEucmV0dXJufXdoaWxlKGEpO3JldHVybiBifVxuZnVuY3Rpb24gcmIoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fWZ1bmN0aW9uIHNiKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiB0YihhKXt2YXIgYj1zYihhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24geGIoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPXRiKGEpKX1mdW5jdGlvbiB5YihhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9c2IoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1mdW5jdGlvbiB6YihhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gbih7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9XG5mdW5jdGlvbiBBYihhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz1yYihudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uIEJiKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmWGEoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIENiKGEsYil7QmIoYSxiKTt2YXIgYz1yYihiLnZhbHVlKSxkPWIudHlwZTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1kKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2Vsc2UgaWYoXCJzdWJtaXRcIj09PWR8fFwicmVzZXRcIj09PWQpe2EucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7cmV0dXJufWIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT9EYihhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiZEYihhLGIudHlwZSxyYihiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIEViKGEsYixjKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpe3ZhciBkPWIudHlwZTtpZighKFwic3VibWl0XCIhPT1kJiZcInJlc2V0XCIhPT1kfHx2b2lkIDAhPT1iLnZhbHVlJiZudWxsIT09Yi52YWx1ZSkpcmV0dXJuO2I9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2N8fGI9PT1hLnZhbHVlfHwoYS52YWx1ZT1iKTthLmRlZmF1bHRWYWx1ZT1ifWM9YS5uYW1lO1wiXCIhPT1jJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9ISFhLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWQ7XCJcIiE9PWMmJihhLm5hbWU9Yyl9XG5mdW5jdGlvbiBEYihhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fGEub3duZXJEb2N1bWVudC5hY3RpdmVFbGVtZW50IT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9ZnVuY3Rpb24gRmIoYSl7dmFyIGI9XCJcIjthYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbCE9YSYmKGIrPWEpfSk7cmV0dXJuIGJ9ZnVuY3Rpb24gR2IoYSxiKXthPW4oe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1GYihiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9XG5mdW5jdGlvbiBIYihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrcmIoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIEliKGEsYil7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl0aHJvdyBFcnJvcih1KDkxKSk7cmV0dXJuIG4oe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gSmIoYSxiKXt2YXIgYz1iLnZhbHVlO2lmKG51bGw9PWMpe2M9Yi5jaGlsZHJlbjtiPWIuZGVmYXVsdFZhbHVlO2lmKG51bGwhPWMpe2lmKG51bGwhPWIpdGhyb3cgRXJyb3IodSg5MikpO2lmKEFycmF5LmlzQXJyYXkoYykpe2lmKCEoMT49Yy5sZW5ndGgpKXRocm93IEVycm9yKHUoOTMpKTtjPWNbMF19Yj1jfW51bGw9PWImJihiPVwiXCIpO2M9Yn1hLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpyYihjKX19XG5mdW5jdGlvbiBLYihhLGIpe3ZhciBjPXJiKGIudmFsdWUpLGQ9cmIoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBMYihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiZcIlwiIT09YiYmbnVsbCE9PWImJihhLnZhbHVlPWIpfXZhciBNYj17aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn07XG5mdW5jdGlvbiBOYihhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fWZ1bmN0aW9uIE9iKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9OYihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBQYixRYj1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1NYi5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXtQYj1QYnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtQYi5pbm5lckhUTUw9XCI8c3ZnPlwiK2IudmFsdWVPZigpLnRvU3RyaW5nKCkrXCI8L3N2Zz5cIjtmb3IoYj1QYi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBSYihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifWZ1bmN0aW9uIFNiKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIFRiPXthbmltYXRpb25lbmQ6U2IoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246U2IoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpTYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpTYihcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LFViPXt9LFZiPXt9O1xueWEmJihWYj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBUYi5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBUYi5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBUYi5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBUYi50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIFdiKGEpe2lmKFViW2FdKXJldHVybiBVYlthXTtpZighVGJbYV0pcmV0dXJuIGE7dmFyIGI9VGJbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gVmIpcmV0dXJuIFViW2FdPWJbY107cmV0dXJuIGF9XG52YXIgWGI9V2IoXCJhbmltYXRpb25lbmRcIiksWWI9V2IoXCJhbmltYXRpb25pdGVyYXRpb25cIiksWmI9V2IoXCJhbmltYXRpb25zdGFydFwiKSwkYj1XYihcInRyYW5zaXRpb25lbmRcIiksYWM9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLGJjPW5ldyAoXCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXApO2Z1bmN0aW9uIGNjKGEpe3ZhciBiPWJjLmdldChhKTt2b2lkIDA9PT1iJiYoYj1uZXcgTWFwLGJjLnNldChhLGIpKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGRjKGEpe3ZhciBiPWEsYz1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXthPWI7ZG8gYj1hLDAhPT0oYi5lZmZlY3RUYWcmMTAyNikmJihjPWIucmV0dXJuKSxhPWIucmV0dXJuO3doaWxlKGEpfXJldHVybiAzPT09Yi50YWc/YzpudWxsfWZ1bmN0aW9uIGVjKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09YiYmKGE9YS5hbHRlcm5hdGUsbnVsbCE9PWEmJihiPWEubWVtb2l6ZWRTdGF0ZSkpO2lmKG51bGwhPT1iKXJldHVybiBiLmRlaHlkcmF0ZWR9cmV0dXJuIG51bGx9ZnVuY3Rpb24gZmMoYSl7aWYoZGMoYSkhPT1hKXRocm93IEVycm9yKHUoMTg4KSk7fVxuZnVuY3Rpb24gZ2MoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpe2I9ZGMoYSk7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IodSgxODgpKTtyZXR1cm4gYiE9PWE/bnVsbDphfWZvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybjtpZihudWxsPT09ZSlicmVhazt2YXIgZj1lLmFsdGVybmF0ZTtpZihudWxsPT09Zil7ZD1lLnJldHVybjtpZihudWxsIT09ZCl7Yz1kO2NvbnRpbnVlfWJyZWFrfWlmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IoZj1lLmNoaWxkO2Y7KXtpZihmPT09YylyZXR1cm4gZmMoZSksYTtpZihmPT09ZClyZXR1cm4gZmMoZSksYjtmPWYuc2libGluZ310aHJvdyBFcnJvcih1KDE4OCkpO31pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtmb3IodmFyIGc9ITEsaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1cbmMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXRocm93IEVycm9yKHUoMTg5KSk7fX1pZihjLmFsdGVybmF0ZSE9PWQpdGhyb3cgRXJyb3IodSgxOTApKTt9aWYoMyE9PWMudGFnKXRocm93IEVycm9yKHUoMTg4KSk7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBoYyhhKXthPWdjKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gaWMoYSxiKXtpZihudWxsPT1iKXRocm93IEVycm9yKHUoMzApKTtpZihudWxsPT1hKXJldHVybiBiO2lmKEFycmF5LmlzQXJyYXkoYSkpe2lmKEFycmF5LmlzQXJyYXkoYikpcmV0dXJuIGEucHVzaC5hcHBseShhLGIpLGE7YS5wdXNoKGIpO3JldHVybiBhfXJldHVybiBBcnJheS5pc0FycmF5KGIpP1thXS5jb25jYXQoYik6W2EsYl19ZnVuY3Rpb24gamMoYSxiLGMpe0FycmF5LmlzQXJyYXkoYSk/YS5mb3JFYWNoKGIsYyk6YSYmYi5jYWxsKGMsYSl9dmFyIGtjPW51bGw7XG5mdW5jdGlvbiBsYyhhKXtpZihhKXt2YXIgYj1hLl9kaXNwYXRjaExpc3RlbmVycyxjPWEuX2Rpc3BhdGNoSW5zdGFuY2VzO2lmKEFycmF5LmlzQXJyYXkoYikpZm9yKHZhciBkPTA7ZDxiLmxlbmd0aCYmIWEuaXNQcm9wYWdhdGlvblN0b3BwZWQoKTtkKyspb2EoYSxiW2RdLGNbZF0pO2Vsc2UgYiYmb2EoYSxiLGMpO2EuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGw7YS5fZGlzcGF0Y2hJbnN0YW5jZXM9bnVsbDthLmlzUGVyc2lzdGVudCgpfHxhLmNvbnN0cnVjdG9yLnJlbGVhc2UoYSl9fWZ1bmN0aW9uIG1jKGEpe251bGwhPT1hJiYoa2M9aWMoa2MsYSkpO2E9a2M7a2M9bnVsbDtpZihhKXtqYyhhLGxjKTtpZihrYyl0aHJvdyBFcnJvcih1KDk1KSk7aWYoZmEpdGhyb3cgYT1oYSxmYT0hMSxoYT1udWxsLGE7fX1cbmZ1bmN0aW9uIG5jKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX1mdW5jdGlvbiBvYyhhKXtpZigheWEpcmV0dXJuITE7YT1cIm9uXCIrYTt2YXIgYj1hIGluIGRvY3VtZW50O2J8fChiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYi5zZXRBdHRyaWJ1dGUoYSxcInJldHVybjtcIiksYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYlthXSk7cmV0dXJuIGJ9dmFyIHBjPVtdO2Z1bmN0aW9uIHFjKGEpe2EudG9wTGV2ZWxUeXBlPW51bGw7YS5uYXRpdmVFdmVudD1udWxsO2EudGFyZ2V0SW5zdD1udWxsO2EuYW5jZXN0b3JzLmxlbmd0aD0wOzEwPnBjLmxlbmd0aCYmcGMucHVzaChhKX1cbmZ1bmN0aW9uIHJjKGEsYixjLGQpe2lmKHBjLmxlbmd0aCl7dmFyIGU9cGMucG9wKCk7ZS50b3BMZXZlbFR5cGU9YTtlLmV2ZW50U3lzdGVtRmxhZ3M9ZDtlLm5hdGl2ZUV2ZW50PWI7ZS50YXJnZXRJbnN0PWM7cmV0dXJuIGV9cmV0dXJue3RvcExldmVsVHlwZTphLGV2ZW50U3lzdGVtRmxhZ3M6ZCxuYXRpdmVFdmVudDpiLHRhcmdldEluc3Q6YyxhbmNlc3RvcnM6W119fVxuZnVuY3Rpb24gc2MoYSl7dmFyIGI9YS50YXJnZXRJbnN0LGM9Yjtkb3tpZighYyl7YS5hbmNlc3RvcnMucHVzaChjKTticmVha312YXIgZD1jO2lmKDM9PT1kLnRhZylkPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZWxzZXtmb3IoO2QucmV0dXJuOylkPWQucmV0dXJuO2Q9MyE9PWQudGFnP251bGw6ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mb31pZighZClicmVhaztiPWMudGFnOzUhPT1iJiY2IT09Ynx8YS5hbmNlc3RvcnMucHVzaChjKTtjPXRjKGQpfXdoaWxlKGMpO2ZvcihjPTA7YzxhLmFuY2VzdG9ycy5sZW5ndGg7YysrKXtiPWEuYW5jZXN0b3JzW2NdO3ZhciBlPW5jKGEubmF0aXZlRXZlbnQpO2Q9YS50b3BMZXZlbFR5cGU7dmFyIGY9YS5uYXRpdmVFdmVudCxnPWEuZXZlbnRTeXN0ZW1GbGFnczswPT09YyYmKGd8PTY0KTtmb3IodmFyIGg9bnVsbCxrPTA7azxzYS5sZW5ndGg7aysrKXt2YXIgbD1zYVtrXTtsJiYobD1sLmV4dHJhY3RFdmVudHMoZCxiLGYsZSxnKSkmJihoPVxuaWMoaCxsKSl9bWMoaCl9fWZ1bmN0aW9uIHVjKGEsYixjKXtpZighYy5oYXMoYSkpe3N3aXRjaChhKXtjYXNlIFwic2Nyb2xsXCI6dmMoYixcInNjcm9sbFwiLCEwKTticmVhaztjYXNlIFwiZm9jdXNcIjpjYXNlIFwiYmx1clwiOnZjKGIsXCJmb2N1c1wiLCEwKTt2YyhiLFwiYmx1clwiLCEwKTtjLnNldChcImJsdXJcIixudWxsKTtjLnNldChcImZvY3VzXCIsbnVsbCk7YnJlYWs7Y2FzZSBcImNhbmNlbFwiOmNhc2UgXCJjbG9zZVwiOm9jKGEpJiZ2YyhiLGEsITApO2JyZWFrO2Nhc2UgXCJpbnZhbGlkXCI6Y2FzZSBcInN1Ym1pdFwiOmNhc2UgXCJyZXNldFwiOmJyZWFrO2RlZmF1bHQ6LTE9PT1hYy5pbmRleE9mKGEpJiZGKGEsYil9Yy5zZXQoYSxudWxsKX19XG52YXIgd2MseGMseWMsemM9ITEsQWM9W10sQmM9bnVsbCxDYz1udWxsLERjPW51bGwsRWM9bmV3IE1hcCxGYz1uZXcgTWFwLEdjPVtdLEhjPVwibW91c2Vkb3duIG1vdXNldXAgdG91Y2hjYW5jZWwgdG91Y2hlbmQgdG91Y2hzdGFydCBhdXhjbGljayBkYmxjbGljayBwb2ludGVyY2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJ1cCBkcmFnZW5kIGRyYWdzdGFydCBkcm9wIGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBpbnB1dCB0ZXh0SW5wdXQgY2xvc2UgY2FuY2VsIGNvcHkgY3V0IHBhc3RlIGNsaWNrIGNoYW5nZSBjb250ZXh0bWVudSByZXNldCBzdWJtaXRcIi5zcGxpdChcIiBcIiksSWM9XCJmb2N1cyBibHVyIGRyYWdlbnRlciBkcmFnbGVhdmUgbW91c2VvdmVyIG1vdXNlb3V0IHBvaW50ZXJvdmVyIHBvaW50ZXJvdXQgZ290cG9pbnRlcmNhcHR1cmUgbG9zdHBvaW50ZXJjYXB0dXJlXCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gSmMoYSxiKXt2YXIgYz1jYyhiKTtIYy5mb3JFYWNoKGZ1bmN0aW9uKGEpe3VjKGEsYixjKX0pO0ljLmZvckVhY2goZnVuY3Rpb24oYSl7dWMoYSxiLGMpfSl9ZnVuY3Rpb24gS2MoYSxiLGMsZCxlKXtyZXR1cm57YmxvY2tlZE9uOmEsdG9wTGV2ZWxUeXBlOmIsZXZlbnRTeXN0ZW1GbGFnczpjfDMyLG5hdGl2ZUV2ZW50OmUsY29udGFpbmVyOmR9fVxuZnVuY3Rpb24gTGMoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImZvY3VzXCI6Y2FzZSBcImJsdXJcIjpCYz1udWxsO2JyZWFrO2Nhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Q2M9bnVsbDticmVhaztjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcIm1vdXNlb3V0XCI6RGM9bnVsbDticmVhaztjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcm91dFwiOkVjLmRlbGV0ZShiLnBvaW50ZXJJZCk7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOkZjLmRlbGV0ZShiLnBvaW50ZXJJZCl9fWZ1bmN0aW9uIE1jKGEsYixjLGQsZSxmKXtpZihudWxsPT09YXx8YS5uYXRpdmVFdmVudCE9PWYpcmV0dXJuIGE9S2MoYixjLGQsZSxmKSxudWxsIT09YiYmKGI9TmMoYiksbnVsbCE9PWImJnhjKGIpKSxhO2EuZXZlbnRTeXN0ZW1GbGFnc3w9ZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIE9jKGEsYixjLGQsZSl7c3dpdGNoKGIpe2Nhc2UgXCJmb2N1c1wiOnJldHVybiBCYz1NYyhCYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJkcmFnZW50ZXJcIjpyZXR1cm4gQ2M9TWMoQ2MsYSxiLGMsZCxlKSwhMDtjYXNlIFwibW91c2VvdmVyXCI6cmV0dXJuIERjPU1jKERjLGEsYixjLGQsZSksITA7Y2FzZSBcInBvaW50ZXJvdmVyXCI6dmFyIGY9ZS5wb2ludGVySWQ7RWMuc2V0KGYsTWMoRWMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpO3JldHVybiEwO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOnJldHVybiBmPWUucG9pbnRlcklkLEZjLnNldChmLE1jKEZjLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKSwhMH1yZXR1cm4hMX1cbmZ1bmN0aW9uIFBjKGEpe3ZhciBiPXRjKGEudGFyZ2V0KTtpZihudWxsIT09Yil7dmFyIGM9ZGMoYik7aWYobnVsbCE9PWMpaWYoYj1jLnRhZywxMz09PWIpe2lmKGI9ZWMoYyksbnVsbCE9PWIpe2EuYmxvY2tlZE9uPWI7ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkoYS5wcmlvcml0eSxmdW5jdGlvbigpe3ljKGMpfSk7cmV0dXJufX1lbHNlIGlmKDM9PT1iJiZjLnN0YXRlTm9kZS5oeWRyYXRlKXthLmJsb2NrZWRPbj0zPT09Yy50YWc/Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO3JldHVybn19YS5ibG9ja2VkT249bnVsbH1mdW5jdGlvbiBRYyhhKXtpZihudWxsIT09YS5ibG9ja2VkT24pcmV0dXJuITE7dmFyIGI9UmMoYS50b3BMZXZlbFR5cGUsYS5ldmVudFN5c3RlbUZsYWdzLGEuY29udGFpbmVyLGEubmF0aXZlRXZlbnQpO2lmKG51bGwhPT1iKXt2YXIgYz1OYyhiKTtudWxsIT09YyYmeGMoYyk7YS5ibG9ja2VkT249YjtyZXR1cm4hMX1yZXR1cm4hMH1cbmZ1bmN0aW9uIFNjKGEsYixjKXtRYyhhKSYmYy5kZWxldGUoYil9ZnVuY3Rpb24gVGMoKXtmb3IoemM9ITE7MDxBYy5sZW5ndGg7KXt2YXIgYT1BY1swXTtpZihudWxsIT09YS5ibG9ja2VkT24pe2E9TmMoYS5ibG9ja2VkT24pO251bGwhPT1hJiZ3YyhhKTticmVha312YXIgYj1SYyhhLnRvcExldmVsVHlwZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYS5jb250YWluZXIsYS5uYXRpdmVFdmVudCk7bnVsbCE9PWI/YS5ibG9ja2VkT249YjpBYy5zaGlmdCgpfW51bGwhPT1CYyYmUWMoQmMpJiYoQmM9bnVsbCk7bnVsbCE9PUNjJiZRYyhDYykmJihDYz1udWxsKTtudWxsIT09RGMmJlFjKERjKSYmKERjPW51bGwpO0VjLmZvckVhY2goU2MpO0ZjLmZvckVhY2goU2MpfWZ1bmN0aW9uIFVjKGEsYil7YS5ibG9ja2VkT249PT1iJiYoYS5ibG9ja2VkT249bnVsbCx6Y3x8KHpjPSEwLHIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayhyLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFRjKSkpfVxuZnVuY3Rpb24gVmMoYSl7ZnVuY3Rpb24gYihiKXtyZXR1cm4gVWMoYixhKX1pZigwPEFjLmxlbmd0aCl7VWMoQWNbMF0sYSk7Zm9yKHZhciBjPTE7YzxBYy5sZW5ndGg7YysrKXt2YXIgZD1BY1tjXTtkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKX19bnVsbCE9PUJjJiZVYyhCYyxhKTtudWxsIT09Q2MmJlVjKENjLGEpO251bGwhPT1EYyYmVWMoRGMsYSk7RWMuZm9yRWFjaChiKTtGYy5mb3JFYWNoKGIpO2ZvcihjPTA7YzxHYy5sZW5ndGg7YysrKWQ9R2NbY10sZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCk7Zm9yKDswPEdjLmxlbmd0aCYmKGM9R2NbMF0sbnVsbD09PWMuYmxvY2tlZE9uKTspUGMoYyksbnVsbD09PWMuYmxvY2tlZE9uJiZHYy5zaGlmdCgpfVxudmFyIFdjPXt9LFljPW5ldyBNYXAsWmM9bmV3IE1hcCwkYz1bXCJhYm9ydFwiLFwiYWJvcnRcIixYYixcImFuaW1hdGlvbkVuZFwiLFliLFwiYW5pbWF0aW9uSXRlcmF0aW9uXCIsWmIsXCJhbmltYXRpb25TdGFydFwiLFwiY2FucGxheVwiLFwiY2FuUGxheVwiLFwiY2FucGxheXRocm91Z2hcIixcImNhblBsYXlUaHJvdWdoXCIsXCJkdXJhdGlvbmNoYW5nZVwiLFwiZHVyYXRpb25DaGFuZ2VcIixcImVtcHRpZWRcIixcImVtcHRpZWRcIixcImVuY3J5cHRlZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmRlZFwiLFwiZW5kZWRcIixcImVycm9yXCIsXCJlcnJvclwiLFwiZ290cG9pbnRlcmNhcHR1cmVcIixcImdvdFBvaW50ZXJDYXB0dXJlXCIsXCJsb2FkXCIsXCJsb2FkXCIsXCJsb2FkZWRkYXRhXCIsXCJsb2FkZWREYXRhXCIsXCJsb2FkZWRtZXRhZGF0YVwiLFwibG9hZGVkTWV0YWRhdGFcIixcImxvYWRzdGFydFwiLFwibG9hZFN0YXJ0XCIsXCJsb3N0cG9pbnRlcmNhcHR1cmVcIixcImxvc3RQb2ludGVyQ2FwdHVyZVwiLFwicGxheWluZ1wiLFwicGxheWluZ1wiLFwicHJvZ3Jlc3NcIixcInByb2dyZXNzXCIsXCJzZWVraW5nXCIsXG5cInNlZWtpbmdcIixcInN0YWxsZWRcIixcInN0YWxsZWRcIixcInN1c3BlbmRcIixcInN1c3BlbmRcIixcInRpbWV1cGRhdGVcIixcInRpbWVVcGRhdGVcIiwkYixcInRyYW5zaXRpb25FbmRcIixcIndhaXRpbmdcIixcIndhaXRpbmdcIl07ZnVuY3Rpb24gYWQoYSxiKXtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrPTIpe3ZhciBkPWFbY10sZT1hW2MrMV0sZj1cIm9uXCIrKGVbMF0udG9VcHBlckNhc2UoKStlLnNsaWNlKDEpKTtmPXtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpmLGNhcHR1cmVkOmYrXCJDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbZF0sZXZlbnRQcmlvcml0eTpifTtaYy5zZXQoZCxiKTtZYy5zZXQoZCxmKTtXY1tlXT1mfX1cbmFkKFwiYmx1ciBibHVyIGNhbmNlbCBjYW5jZWwgY2xpY2sgY2xpY2sgY2xvc2UgY2xvc2UgY29udGV4dG1lbnUgY29udGV4dE1lbnUgY29weSBjb3B5IGN1dCBjdXQgYXV4Y2xpY2sgYXV4Q2xpY2sgZGJsY2xpY2sgZG91YmxlQ2xpY2sgZHJhZ2VuZCBkcmFnRW5kIGRyYWdzdGFydCBkcmFnU3RhcnQgZHJvcCBkcm9wIGZvY3VzIGZvY3VzIGlucHV0IGlucHV0IGludmFsaWQgaW52YWxpZCBrZXlkb3duIGtleURvd24ga2V5cHJlc3Mga2V5UHJlc3Mga2V5dXAga2V5VXAgbW91c2Vkb3duIG1vdXNlRG93biBtb3VzZXVwIG1vdXNlVXAgcGFzdGUgcGFzdGUgcGF1c2UgcGF1c2UgcGxheSBwbGF5IHBvaW50ZXJjYW5jZWwgcG9pbnRlckNhbmNlbCBwb2ludGVyZG93biBwb2ludGVyRG93biBwb2ludGVydXAgcG9pbnRlclVwIHJhdGVjaGFuZ2UgcmF0ZUNoYW5nZSByZXNldCByZXNldCBzZWVrZWQgc2Vla2VkIHN1Ym1pdCBzdWJtaXQgdG91Y2hjYW5jZWwgdG91Y2hDYW5jZWwgdG91Y2hlbmQgdG91Y2hFbmQgdG91Y2hzdGFydCB0b3VjaFN0YXJ0IHZvbHVtZWNoYW5nZSB2b2x1bWVDaGFuZ2VcIi5zcGxpdChcIiBcIiksMCk7XG5hZChcImRyYWcgZHJhZyBkcmFnZW50ZXIgZHJhZ0VudGVyIGRyYWdleGl0IGRyYWdFeGl0IGRyYWdsZWF2ZSBkcmFnTGVhdmUgZHJhZ292ZXIgZHJhZ092ZXIgbW91c2Vtb3ZlIG1vdXNlTW92ZSBtb3VzZW91dCBtb3VzZU91dCBtb3VzZW92ZXIgbW91c2VPdmVyIHBvaW50ZXJtb3ZlIHBvaW50ZXJNb3ZlIHBvaW50ZXJvdXQgcG9pbnRlck91dCBwb2ludGVyb3ZlciBwb2ludGVyT3ZlciBzY3JvbGwgc2Nyb2xsIHRvZ2dsZSB0b2dnbGUgdG91Y2htb3ZlIHRvdWNoTW92ZSB3aGVlbCB3aGVlbFwiLnNwbGl0KFwiIFwiKSwxKTthZCgkYywyKTtmb3IodmFyIGJkPVwiY2hhbmdlIHNlbGVjdGlvbmNoYW5nZSB0ZXh0SW5wdXQgY29tcG9zaXRpb25zdGFydCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnVwZGF0ZVwiLnNwbGl0KFwiIFwiKSxjZD0wO2NkPGJkLmxlbmd0aDtjZCsrKVpjLnNldChiZFtjZF0sMCk7XG52YXIgZGQ9ci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxlZD1yLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSxmZD0hMDtmdW5jdGlvbiBGKGEsYil7dmMoYixhLCExKX1mdW5jdGlvbiB2YyhhLGIsYyl7dmFyIGQ9WmMuZ2V0KGIpO3N3aXRjaCh2b2lkIDA9PT1kPzI6ZCl7Y2FzZSAwOmQ9Z2QuYmluZChudWxsLGIsMSxhKTticmVhaztjYXNlIDE6ZD1oZC5iaW5kKG51bGwsYiwxLGEpO2JyZWFrO2RlZmF1bHQ6ZD1pZC5iaW5kKG51bGwsYiwxLGEpfWM/YS5hZGRFdmVudExpc3RlbmVyKGIsZCwhMCk6YS5hZGRFdmVudExpc3RlbmVyKGIsZCwhMSl9ZnVuY3Rpb24gZ2QoYSxiLGMsZCl7SmF8fEhhKCk7dmFyIGU9aWQsZj1KYTtKYT0hMDt0cnl7R2EoZSxhLGIsYyxkKX1maW5hbGx5eyhKYT1mKXx8TGEoKX19ZnVuY3Rpb24gaGQoYSxiLGMsZCl7ZWQoZGQsaWQuYmluZChudWxsLGEsYixjLGQpKX1cbmZ1bmN0aW9uIGlkKGEsYixjLGQpe2lmKGZkKWlmKDA8QWMubGVuZ3RoJiYtMTxIYy5pbmRleE9mKGEpKWE9S2MobnVsbCxhLGIsYyxkKSxBYy5wdXNoKGEpO2Vsc2V7dmFyIGU9UmMoYSxiLGMsZCk7aWYobnVsbD09PWUpTGMoYSxkKTtlbHNlIGlmKC0xPEhjLmluZGV4T2YoYSkpYT1LYyhlLGEsYixjLGQpLEFjLnB1c2goYSk7ZWxzZSBpZighT2MoZSxhLGIsYyxkKSl7TGMoYSxkKTthPXJjKGEsZCxudWxsLGIpO3RyeXtNYShzYyxhKX1maW5hbGx5e3FjKGEpfX19fVxuZnVuY3Rpb24gUmMoYSxiLGMsZCl7Yz1uYyhkKTtjPXRjKGMpO2lmKG51bGwhPT1jKXt2YXIgZT1kYyhjKTtpZihudWxsPT09ZSljPW51bGw7ZWxzZXt2YXIgZj1lLnRhZztpZigxMz09PWYpe2M9ZWMoZSk7aWYobnVsbCE9PWMpcmV0dXJuIGM7Yz1udWxsfWVsc2UgaWYoMz09PWYpe2lmKGUuc3RhdGVOb2RlLmh5ZHJhdGUpcmV0dXJuIDM9PT1lLnRhZz9lLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7Yz1udWxsfWVsc2UgZSE9PWMmJihjPW51bGwpfX1hPXJjKGEsZCxjLGIpO3RyeXtNYShzYyxhKX1maW5hbGx5e3FjKGEpfXJldHVybiBudWxsfVxudmFyIGpkPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxcbmZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LGtkPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhqZCkuZm9yRWFjaChmdW5jdGlvbihhKXtrZC5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO2pkW2JdPWpkW2FdfSl9KTtmdW5jdGlvbiBsZChhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8amQuaGFzT3duUHJvcGVydHkoYSkmJmpkW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIG1kKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPWxkKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIG5kPW4oe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiBvZChhLGIpe2lmKGIpe2lmKG5kW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IodSgxMzcsYSxcIlwiKSk7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl7aWYobnVsbCE9Yi5jaGlsZHJlbil0aHJvdyBFcnJvcih1KDYwKSk7aWYoIShcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcih1KDYxKSk7fWlmKG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZSl0aHJvdyBFcnJvcih1KDYyLFwiXCIpKTt9fVxuZnVuY3Rpb24gcGQoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fXZhciBxZD1NYi5odG1sO2Z1bmN0aW9uIHJkKGEsYil7YT05PT09YS5ub2RlVHlwZXx8MTE9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50O3ZhciBjPWNjKGEpO2I9d2FbYl07Zm9yKHZhciBkPTA7ZDxiLmxlbmd0aDtkKyspdWMoYltkXSxhLGMpfWZ1bmN0aW9uIHNkKCl7fVxuZnVuY3Rpb24gdGQoYSl7YT1hfHwoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudD9kb2N1bWVudDp2b2lkIDApO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDt0cnl7cmV0dXJuIGEuYWN0aXZlRWxlbWVudHx8YS5ib2R5fWNhdGNoKGIpe3JldHVybiBhLmJvZHl9fWZ1bmN0aW9uIHVkKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1mdW5jdGlvbiB2ZChhLGIpe3ZhciBjPXVkKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPXVkKGMpfX1cbmZ1bmN0aW9uIHdkKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/d2QoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfWZ1bmN0aW9uIHhkKCl7Zm9yKHZhciBhPXdpbmRvdyxiPXRkKCk7YiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KXt0cnl7dmFyIGM9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNvbnRlbnRXaW5kb3cubG9jYXRpb24uaHJlZn1jYXRjaChkKXtjPSExfWlmKGMpYT1iLmNvbnRlbnRXaW5kb3c7ZWxzZSBicmVhaztiPXRkKGEuZG9jdW1lbnQpfXJldHVybiBifVxuZnVuY3Rpb24geWQoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX12YXIgemQ9XCIkXCIsQWQ9XCIvJFwiLEJkPVwiJD9cIixDZD1cIiQhXCIsRGQ9bnVsbCxFZD1udWxsO2Z1bmN0aW9uIEZkKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1cbmZ1bmN0aW9uIEdkKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJvcHRpb25cIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH12YXIgSGQ9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAsSWQ9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwO2Z1bmN0aW9uIEpkKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrfXJldHVybiBhfVxuZnVuY3Rpb24gS2QoYSl7YT1hLnByZXZpb3VzU2libGluZztmb3IodmFyIGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihjPT09emR8fGM9PT1DZHx8Yz09PUJkKXtpZigwPT09YilyZXR1cm4gYTtiLS19ZWxzZSBjPT09QWQmJmIrK31hPWEucHJldmlvdXNTaWJsaW5nfXJldHVybiBudWxsfXZhciBMZD1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxNZD1cIl9fcmVhY3RJbnRlcm5hbEluc3RhbmNlJFwiK0xkLE5kPVwiX19yZWFjdEV2ZW50SGFuZGxlcnMkXCIrTGQsT2Q9XCJfX3JlYWN0Q29udGFpbmVyZSRcIitMZDtcbmZ1bmN0aW9uIHRjKGEpe3ZhciBiPWFbTWRdO2lmKGIpcmV0dXJuIGI7Zm9yKHZhciBjPWEucGFyZW50Tm9kZTtjOyl7aWYoYj1jW09kXXx8Y1tNZF0pe2M9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWIuY2hpbGR8fG51bGwhPT1jJiZudWxsIT09Yy5jaGlsZClmb3IoYT1LZChhKTtudWxsIT09YTspe2lmKGM9YVtNZF0pcmV0dXJuIGM7YT1LZChhKX1yZXR1cm4gYn1hPWM7Yz1hLnBhcmVudE5vZGV9cmV0dXJuIG51bGx9ZnVuY3Rpb24gTmMoYSl7YT1hW01kXXx8YVtPZF07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnJiYxMyE9PWEudGFnJiYzIT09YS50YWc/bnVsbDphfWZ1bmN0aW9uIFBkKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTt0aHJvdyBFcnJvcih1KDMzKSk7fWZ1bmN0aW9uIFFkKGEpe3JldHVybiBhW05kXXx8bnVsbH1cbmZ1bmN0aW9uIFJkKGEpe2RvIGE9YS5yZXR1cm47d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9XG5mdW5jdGlvbiBTZChhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKCFjKXJldHVybiBudWxsO3ZhciBkPWxhKGMpO2lmKCFkKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjpjYXNlIFwib25Nb3VzZUVudGVyXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtpZihjJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYyl0aHJvdyBFcnJvcih1KDIzMSxcbmIsdHlwZW9mIGMpKTtyZXR1cm4gY31mdW5jdGlvbiBUZChhLGIsYyl7aWYoYj1TZChhLGMuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbYl0pKWMuX2Rpc3BhdGNoTGlzdGVuZXJzPWljKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPWljKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpfWZ1bmN0aW9uIFVkKGEpe2lmKGEmJmEuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpe2Zvcih2YXIgYj1hLl90YXJnZXRJbnN0LGM9W107YjspYy5wdXNoKGIpLGI9UmQoYik7Zm9yKGI9Yy5sZW5ndGg7MDxiLS07KVRkKGNbYl0sXCJjYXB0dXJlZFwiLGEpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspVGQoY1tiXSxcImJ1YmJsZWRcIixhKX19XG5mdW5jdGlvbiBWZChhLGIsYyl7YSYmYyYmYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiYoYj1TZChhLGMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkpJiYoYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9aWMoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9aWMoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSkpfWZ1bmN0aW9uIFdkKGEpe2EmJmEuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmVmQoYS5fdGFyZ2V0SW5zdCxudWxsLGEpfWZ1bmN0aW9uIFhkKGEpe2pjKGEsVWQpfXZhciBZZD1udWxsLFpkPW51bGwsJGQ9bnVsbDtcbmZ1bmN0aW9uIGFlKCl7aWYoJGQpcmV0dXJuICRkO3ZhciBhLGI9WmQsYz1iLmxlbmd0aCxkLGU9XCJ2YWx1ZVwiaW4gWWQ/WWQudmFsdWU6WWQudGV4dENvbnRlbnQsZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgZz1jLWE7Zm9yKGQ9MTtkPD1nJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtyZXR1cm4gJGQ9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKX1mdW5jdGlvbiBiZSgpe3JldHVybiEwfWZ1bmN0aW9uIGNlKCl7cmV0dXJuITF9XG5mdW5jdGlvbiBHKGEsYixjLGQpe3RoaXMuZGlzcGF0Y2hDb25maWc9YTt0aGlzLl90YXJnZXRJbnN0PWI7dGhpcy5uYXRpdmVFdmVudD1jO2E9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2U7Zm9yKHZhciBlIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShlKSYmKChiPWFbZV0pP3RoaXNbZV09YihjKTpcInRhcmdldFwiPT09ZT90aGlzLnRhcmdldD1kOnRoaXNbZV09Y1tlXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWMuZGVmYXVsdFByZXZlbnRlZD9jLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1jLnJldHVyblZhbHVlKT9iZTpjZTt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPWNlO3JldHVybiB0aGlzfVxubihHLnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWJlKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPWJlKX0scGVyc2lzdDpmdW5jdGlvbigpe3RoaXMuaXNQZXJzaXN0ZW50PWJlfSxpc1BlcnNpc3RlbnQ6Y2UsZGVzdHJ1Y3RvcjpmdW5jdGlvbigpe3ZhciBhPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlLFxuYjtmb3IoYiBpbiBhKXRoaXNbYl09bnVsbDt0aGlzLm5hdGl2ZUV2ZW50PXRoaXMuX3RhcmdldEluc3Q9dGhpcy5kaXNwYXRjaENvbmZpZz1udWxsO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9Y2U7dGhpcy5fZGlzcGF0Y2hJbnN0YW5jZXM9dGhpcy5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbH19KTtHLkludGVyZmFjZT17dHlwZTpudWxsLHRhcmdldDpudWxsLGN1cnJlbnRUYXJnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0sZXZlbnRQaGFzZTpudWxsLGJ1YmJsZXM6bnVsbCxjYW5jZWxhYmxlOm51bGwsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDpudWxsLGlzVHJ1c3RlZDpudWxsfTtcbkcuZXh0ZW5kPWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoKXt9ZnVuY3Rpb24gYygpe3JldHVybiBkLmFwcGx5KHRoaXMsYXJndW1lbnRzKX12YXIgZD10aGlzO2IucHJvdG90eXBlPWQucHJvdG90eXBlO3ZhciBlPW5ldyBiO24oZSxjLnByb3RvdHlwZSk7Yy5wcm90b3R5cGU9ZTtjLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1jO2MuSW50ZXJmYWNlPW4oe30sZC5JbnRlcmZhY2UsYSk7Yy5leHRlbmQ9ZC5leHRlbmQ7ZGUoYyk7cmV0dXJuIGN9O2RlKEcpO2Z1bmN0aW9uIGVlKGEsYixjLGQpe2lmKHRoaXMuZXZlbnRQb29sLmxlbmd0aCl7dmFyIGU9dGhpcy5ldmVudFBvb2wucG9wKCk7dGhpcy5jYWxsKGUsYSxiLGMsZCk7cmV0dXJuIGV9cmV0dXJuIG5ldyB0aGlzKGEsYixjLGQpfVxuZnVuY3Rpb24gZmUoYSl7aWYoIShhIGluc3RhbmNlb2YgdGhpcykpdGhyb3cgRXJyb3IodSgyNzkpKTthLmRlc3RydWN0b3IoKTsxMD50aGlzLmV2ZW50UG9vbC5sZW5ndGgmJnRoaXMuZXZlbnRQb29sLnB1c2goYSl9ZnVuY3Rpb24gZGUoYSl7YS5ldmVudFBvb2w9W107YS5nZXRQb29sZWQ9ZWU7YS5yZWxlYXNlPWZlfXZhciBnZT1HLmV4dGVuZCh7ZGF0YTpudWxsfSksaGU9Ry5leHRlbmQoe2RhdGE6bnVsbH0pLGllPVs5LDEzLDI3LDMyXSxqZT15YSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csa2U9bnVsbDt5YSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoa2U9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbnZhciBsZT15YSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIWtlLG1lPXlhJiYoIWplfHxrZSYmODxrZSYmMTE+PWtlKSxuZT1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxvZT17YmVmb3JlSW5wdXQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25CZWZvcmVJbnB1dFwiLGNhcHR1cmVkOlwib25CZWZvcmVJbnB1dENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXX0sY29tcG9zaXRpb25FbmQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvbkVuZFwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvbkVuZENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbmVuZCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25TdGFydDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcbmNhcHR1cmVkOlwib25Db21wb3NpdGlvblN0YXJ0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uVXBkYXRlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb251cGRhdGUga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9fSxwZT0hMTtcbmZ1bmN0aW9uIHFlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09aWUuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImJsdXJcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiByZShhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBzZT0hMTtmdW5jdGlvbiB0ZShhLGIpe3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gcmUoYik7Y2FzZSBcImtleXByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO3BlPSEwO3JldHVybiBuZTtjYXNlIFwidGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1uZSYmcGU/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gdWUoYSxiKXtpZihzZSlyZXR1cm5cImNvbXBvc2l0aW9uZW5kXCI9PT1hfHwhamUmJnFlKGEsYik/KGE9YWUoKSwkZD1aZD1ZZD1udWxsLHNlPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJwYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBtZSYmXCJrb1wiIT09Yi5sb2NhbGU/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgdmU9e2V2ZW50VHlwZXM6b2UsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZTtpZihqZSliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjp2YXIgZj1vZS5jb21wb3NpdGlvblN0YXJ0O2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6Zj1vZS5jb21wb3NpdGlvbkVuZDticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmY9b2UuY29tcG9zaXRpb25VcGRhdGU7YnJlYWsgYn1mPXZvaWQgMH1lbHNlIHNlP3FlKGEsYykmJihmPW9lLmNvbXBvc2l0aW9uRW5kKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKGY9b2UuY29tcG9zaXRpb25TdGFydCk7Zj8obWUmJlwia29cIiE9PWMubG9jYWxlJiYoc2V8fGYhPT1vZS5jb21wb3NpdGlvblN0YXJ0P2Y9PT1vZS5jb21wb3NpdGlvbkVuZCYmc2UmJihlPWFlKCkpOihZZD1kLFpkPVwidmFsdWVcImluIFlkP1lkLnZhbHVlOllkLnRleHRDb250ZW50LHNlPSEwKSksZj1nZS5nZXRQb29sZWQoZixcbmIsYyxkKSxlP2YuZGF0YT1lOihlPXJlKGMpLG51bGwhPT1lJiYoZi5kYXRhPWUpKSxYZChmKSxlPWYpOmU9bnVsbDsoYT1sZT90ZShhLGMpOnVlKGEsYykpPyhiPWhlLmdldFBvb2xlZChvZS5iZWZvcmVJbnB1dCxiLGMsZCksYi5kYXRhPWEsWGQoYikpOmI9bnVsbDtyZXR1cm4gbnVsbD09PWU/YjpudWxsPT09Yj9lOltlLGJdfX0sd2U9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24geGUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISF3ZVthLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9XG52YXIgeWU9e2NoYW5nZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNoYW5nZVwiLGNhcHR1cmVkOlwib25DaGFuZ2VDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY2hhbmdlIGNsaWNrIGZvY3VzIGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpfX07ZnVuY3Rpb24gemUoYSxiLGMpe2E9Ry5nZXRQb29sZWQoeWUuY2hhbmdlLGEsYixjKTthLnR5cGU9XCJjaGFuZ2VcIjtEYShjKTtYZChhKTtyZXR1cm4gYX12YXIgQWU9bnVsbCxCZT1udWxsO2Z1bmN0aW9uIENlKGEpe21jKGEpfWZ1bmN0aW9uIERlKGEpe3ZhciBiPVBkKGEpO2lmKHliKGIpKXJldHVybiBhfWZ1bmN0aW9uIEVlKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIEZlPSExO3lhJiYoRmU9b2MoXCJpbnB1dFwiKSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKSk7XG5mdW5jdGlvbiBHZSgpe0FlJiYoQWUuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsSGUpLEJlPUFlPW51bGwpfWZ1bmN0aW9uIEhlKGEpe2lmKFwidmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZEZShCZSkpaWYoYT16ZShCZSxhLG5jKGEpKSxKYSltYyhhKTtlbHNle0phPSEwO3RyeXtGYShDZSxhKX1maW5hbGx5e0phPSExLExhKCl9fX1mdW5jdGlvbiBJZShhLGIsYyl7XCJmb2N1c1wiPT09YT8oR2UoKSxBZT1iLEJlPWMsQWUuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsSGUpKTpcImJsdXJcIj09PWEmJkdlKCl9ZnVuY3Rpb24gSmUoYSl7aWYoXCJzZWxlY3Rpb25jaGFuZ2VcIj09PWF8fFwia2V5dXBcIj09PWF8fFwia2V5ZG93blwiPT09YSlyZXR1cm4gRGUoQmUpfWZ1bmN0aW9uIEtlKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gRGUoYil9ZnVuY3Rpb24gTGUoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gRGUoYil9XG52YXIgTWU9e2V2ZW50VHlwZXM6eWUsX2lzSW5wdXRFdmVudFN1cHBvcnRlZDpGZSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWI/UGQoYik6d2luZG93LGY9ZS5ub2RlTmFtZSYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO2lmKFwic2VsZWN0XCI9PT1mfHxcImlucHV0XCI9PT1mJiZcImZpbGVcIj09PWUudHlwZSl2YXIgZz1FZTtlbHNlIGlmKHhlKGUpKWlmKEZlKWc9TGU7ZWxzZXtnPUplO3ZhciBoPUllfWVsc2UoZj1lLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09Zi50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09ZS50eXBlfHxcInJhZGlvXCI9PT1lLnR5cGUpJiYoZz1LZSk7aWYoZyYmKGc9ZyhhLGIpKSlyZXR1cm4gemUoZyxjLGQpO2gmJmgoYSxlLGIpO1wiYmx1clwiPT09YSYmKGE9ZS5fd3JhcHBlclN0YXRlKSYmYS5jb250cm9sbGVkJiZcIm51bWJlclwiPT09ZS50eXBlJiZEYihlLFwibnVtYmVyXCIsZS52YWx1ZSl9fSxOZT1HLmV4dGVuZCh7dmlldzpudWxsLGRldGFpbDpudWxsfSksXG5PZT17QWx0OlwiYWx0S2V5XCIsQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gUGUoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1PZVthXSk/ISFiW2FdOiExfWZ1bmN0aW9uIFFlKCl7cmV0dXJuIFBlfVxudmFyIFJlPTAsU2U9MCxUZT0hMSxVZT0hMSxWZT1OZS5leHRlbmQoe3NjcmVlblg6bnVsbCxzY3JlZW5ZOm51bGwsY2xpZW50WDpudWxsLGNsaWVudFk6bnVsbCxwYWdlWDpudWxsLHBhZ2VZOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6UWUsYnV0dG9uOm51bGwsYnV0dG9uczpudWxsLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVsYXRlZFRhcmdldHx8KGEuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudCl9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW4gYSlyZXR1cm4gYS5tb3ZlbWVudFg7dmFyIGI9UmU7UmU9YS5zY3JlZW5YO3JldHVybiBUZT9cIm1vdXNlbW92ZVwiPT09YS50eXBlP2Euc2NyZWVuWC1iOjA6KFRlPSEwLDApfSxtb3ZlbWVudFk6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFlcImluIGEpcmV0dXJuIGEubW92ZW1lbnRZO1xudmFyIGI9U2U7U2U9YS5zY3JlZW5ZO3JldHVybiBVZT9cIm1vdXNlbW92ZVwiPT09YS50eXBlP2Euc2NyZWVuWS1iOjA6KFVlPSEwLDApfX0pLFdlPVZlLmV4dGVuZCh7cG9pbnRlcklkOm51bGwsd2lkdGg6bnVsbCxoZWlnaHQ6bnVsbCxwcmVzc3VyZTpudWxsLHRhbmdlbnRpYWxQcmVzc3VyZTpudWxsLHRpbHRYOm51bGwsdGlsdFk6bnVsbCx0d2lzdDpudWxsLHBvaW50ZXJUeXBlOm51bGwsaXNQcmltYXJ5Om51bGx9KSxYZT17bW91c2VFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VFbnRlclwiLGRlcGVuZGVuY2llczpbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdfSxtb3VzZUxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUxlYXZlXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LHBvaW50ZXJFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckVudGVyXCIsZGVwZW5kZW5jaWVzOltcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdfSxwb2ludGVyTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvblBvaW50ZXJMZWF2ZVwiLFxuZGVwZW5kZW5jaWVzOltcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdfX0sWWU9e2V2ZW50VHlwZXM6WGUsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hLGc9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGYmJjA9PT0oZSYzMikmJihjLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpfHwhZyYmIWYpcmV0dXJuIG51bGw7Zj1kLndpbmRvdz09PWQ/ZDooZj1kLm93bmVyRG9jdW1lbnQpP2YuZGVmYXVsdFZpZXd8fGYucGFyZW50V2luZG93OndpbmRvdztpZihnKXtpZihnPWIsYj0oYj1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50KT90YyhiKTpudWxsLG51bGwhPT1iKXt2YXIgaD1kYyhiKTtpZihiIT09aHx8NSE9PWIudGFnJiY2IT09Yi50YWcpYj1udWxsfX1lbHNlIGc9bnVsbDtpZihnPT09YilyZXR1cm4gbnVsbDtpZihcIm1vdXNlb3V0XCI9PT1hfHxcIm1vdXNlb3ZlclwiPT09XG5hKXt2YXIgaz1WZTt2YXIgbD1YZS5tb3VzZUxlYXZlO3ZhciBtPVhlLm1vdXNlRW50ZXI7dmFyIHA9XCJtb3VzZVwifWVsc2UgaWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKWs9V2UsbD1YZS5wb2ludGVyTGVhdmUsbT1YZS5wb2ludGVyRW50ZXIscD1cInBvaW50ZXJcIjthPW51bGw9PWc/ZjpQZChnKTtmPW51bGw9PWI/ZjpQZChiKTtsPWsuZ2V0UG9vbGVkKGwsZyxjLGQpO2wudHlwZT1wK1wibGVhdmVcIjtsLnRhcmdldD1hO2wucmVsYXRlZFRhcmdldD1mO2M9ay5nZXRQb29sZWQobSxiLGMsZCk7Yy50eXBlPXArXCJlbnRlclwiO2MudGFyZ2V0PWY7Yy5yZWxhdGVkVGFyZ2V0PWE7ZD1nO3A9YjtpZihkJiZwKWE6e2s9ZDttPXA7Zz0wO2ZvcihhPWs7YTthPVJkKGEpKWcrKzthPTA7Zm9yKGI9bTtiO2I9UmQoYikpYSsrO2Zvcig7MDxnLWE7KWs9UmQoayksZy0tO2Zvcig7MDxhLWc7KW09UmQobSksYS0tO2Zvcig7Zy0tOyl7aWYoaz09PW18fGs9PT1tLmFsdGVybmF0ZSlicmVhayBhO1xuaz1SZChrKTttPVJkKG0pfWs9bnVsbH1lbHNlIGs9bnVsbDttPWs7Zm9yKGs9W107ZCYmZCE9PW07KXtnPWQuYWx0ZXJuYXRlO2lmKG51bGwhPT1nJiZnPT09bSlicmVhaztrLnB1c2goZCk7ZD1SZChkKX1mb3IoZD1bXTtwJiZwIT09bTspe2c9cC5hbHRlcm5hdGU7aWYobnVsbCE9PWcmJmc9PT1tKWJyZWFrO2QucHVzaChwKTtwPVJkKHApfWZvcihwPTA7cDxrLmxlbmd0aDtwKyspVmQoa1twXSxcImJ1YmJsZWRcIixsKTtmb3IocD1kLmxlbmd0aDswPHAtLTspVmQoZFtwXSxcImNhcHR1cmVkXCIsYyk7cmV0dXJuIDA9PT0oZSY2NCk/W2xdOltsLGNdfX07ZnVuY3Rpb24gWmUoYSxiKXtyZXR1cm4gYT09PWImJigwIT09YXx8MS9hPT09MS9iKXx8YSE9PWEmJmIhPT1ifXZhciAkZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgT2JqZWN0LmlzP09iamVjdC5pczpaZSxhZj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZnVuY3Rpb24gYmYoYSxiKXtpZigkZShhLGIpKXJldHVybiEwO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYXx8bnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYnx8bnVsbD09PWIpcmV0dXJuITE7dmFyIGM9T2JqZWN0LmtleXMoYSksZD1PYmplY3Qua2V5cyhiKTtpZihjLmxlbmd0aCE9PWQubGVuZ3RoKXJldHVybiExO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKyspaWYoIWFmLmNhbGwoYixjW2RdKXx8ISRlKGFbY1tkXV0sYltjW2RdXSkpcmV0dXJuITE7cmV0dXJuITB9XG52YXIgY2Y9eWEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxkZj17c2VsZWN0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uU2VsZWN0XCIsY2FwdHVyZWQ6XCJvblNlbGVjdENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb250ZXh0bWVudSBkcmFnZW5kIGZvY3VzIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpfX0sZWY9bnVsbCxmZj1udWxsLGdmPW51bGwsaGY9ITE7XG5mdW5jdGlvbiBqZihhLGIpe3ZhciBjPWIud2luZG93PT09Yj9iLmRvY3VtZW50Ojk9PT1iLm5vZGVUeXBlP2I6Yi5vd25lckRvY3VtZW50O2lmKGhmfHxudWxsPT1lZnx8ZWYhPT10ZChjKSlyZXR1cm4gbnVsbDtjPWVmO1wic2VsZWN0aW9uU3RhcnRcImluIGMmJnlkKGMpP2M9e3N0YXJ0OmMuc2VsZWN0aW9uU3RhcnQsZW5kOmMuc2VsZWN0aW9uRW5kfTooYz0oYy5vd25lckRvY3VtZW50JiZjLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXd8fHdpbmRvdykuZ2V0U2VsZWN0aW9uKCksYz17YW5jaG9yTm9kZTpjLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmMuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpjLmZvY3VzTm9kZSxmb2N1c09mZnNldDpjLmZvY3VzT2Zmc2V0fSk7cmV0dXJuIGdmJiZiZihnZixjKT9udWxsOihnZj1jLGE9Ry5nZXRQb29sZWQoZGYuc2VsZWN0LGZmLGEsYiksYS50eXBlPVwic2VsZWN0XCIsYS50YXJnZXQ9ZWYsWGQoYSksYSl9XG52YXIga2Y9e2V2ZW50VHlwZXM6ZGYsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkLGUsZil7ZT1mfHwoZC53aW5kb3c9PT1kP2QuZG9jdW1lbnQ6OT09PWQubm9kZVR5cGU/ZDpkLm93bmVyRG9jdW1lbnQpO2lmKCEoZj0hZSkpe2E6e2U9Y2MoZSk7Zj13YS5vblNlbGVjdDtmb3IodmFyIGc9MDtnPGYubGVuZ3RoO2crKylpZighZS5oYXMoZltnXSkpe2U9ITE7YnJlYWsgYX1lPSEwfWY9IWV9aWYoZilyZXR1cm4gbnVsbDtlPWI/UGQoYik6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNcIjppZih4ZShlKXx8XCJ0cnVlXCI9PT1lLmNvbnRlbnRFZGl0YWJsZSllZj1lLGZmPWIsZ2Y9bnVsbDticmVhaztjYXNlIFwiYmx1clwiOmdmPWZmPWVmPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOmhmPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpyZXR1cm4gaGY9ITEsamYoYyxkKTtjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYoY2YpYnJlYWs7XG5jYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOnJldHVybiBqZihjLGQpfXJldHVybiBudWxsfX0sbGY9Ry5leHRlbmQoe2FuaW1hdGlvbk5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLG1mPUcuZXh0ZW5kKHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksbmY9TmUuZXh0ZW5kKHtyZWxhdGVkVGFyZ2V0Om51bGx9KTtmdW5jdGlvbiBvZihhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1cbnZhciBwZj17RXNjOlwiRXNjYXBlXCIsU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0scWY9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsXG4xMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIiwxMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LHJmPU5lLmV4dGVuZCh7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1wZlthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1vZihhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/cWZbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxsb2NhdGlvbjpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxyZXBlYXQ6bnVsbCxsb2NhbGU6bnVsbCxnZXRNb2RpZmllclN0YXRlOlFlLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP29mKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP29mKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksc2Y9VmUuZXh0ZW5kKHtkYXRhVHJhbnNmZXI6bnVsbH0pLHRmPU5lLmV4dGVuZCh7dG91Y2hlczpudWxsLHRhcmdldFRvdWNoZXM6bnVsbCxjaGFuZ2VkVG91Y2hlczpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOlFlfSksdWY9Ry5leHRlbmQoe3Byb3BlcnR5TmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksdmY9VmUuZXh0ZW5kKHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW5cbmE/LWEud2hlZWxEZWx0YVg6MH0sZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOm51bGwsZGVsdGFNb2RlOm51bGx9KSx3Zj17ZXZlbnRUeXBlczpXYyxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPVljLmdldChhKTtpZighZSlyZXR1cm4gbnVsbDtzd2l0Y2goYSl7Y2FzZSBcImtleXByZXNzXCI6aWYoMD09PW9mKGMpKXJldHVybiBudWxsO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6YT1yZjticmVhaztjYXNlIFwiYmx1clwiOmNhc2UgXCJmb2N1c1wiOmE9bmY7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKXJldHVybiBudWxsO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6YT1cblZlO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOmE9c2Y7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6YT10ZjticmVhaztjYXNlIFhiOmNhc2UgWWI6Y2FzZSBaYjphPWxmO2JyZWFrO2Nhc2UgJGI6YT11ZjticmVhaztjYXNlIFwic2Nyb2xsXCI6YT1OZTticmVhaztjYXNlIFwid2hlZWxcIjphPXZmO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOmE9bWY7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6YT1cbldlO2JyZWFrO2RlZmF1bHQ6YT1HfWI9YS5nZXRQb29sZWQoZSxiLGMsZCk7WGQoYik7cmV0dXJuIGJ9fTtpZihwYSl0aHJvdyBFcnJvcih1KDEwMSkpO3BhPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKFwiUmVzcG9uZGVyRXZlbnRQbHVnaW4gU2ltcGxlRXZlbnRQbHVnaW4gRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIENoYW5nZUV2ZW50UGx1Z2luIFNlbGVjdEV2ZW50UGx1Z2luIEJlZm9yZUlucHV0RXZlbnRQbHVnaW5cIi5zcGxpdChcIiBcIikpO3JhKCk7dmFyIHhmPU5jO2xhPVFkO21hPXhmO25hPVBkO3hhKHtTaW1wbGVFdmVudFBsdWdpbjp3ZixFbnRlckxlYXZlRXZlbnRQbHVnaW46WWUsQ2hhbmdlRXZlbnRQbHVnaW46TWUsU2VsZWN0RXZlbnRQbHVnaW46a2YsQmVmb3JlSW5wdXRFdmVudFBsdWdpbjp2ZX0pO3ZhciB5Zj1bXSx6Zj0tMTtmdW5jdGlvbiBIKGEpezA+emZ8fChhLmN1cnJlbnQ9eWZbemZdLHlmW3pmXT1udWxsLHpmLS0pfVxuZnVuY3Rpb24gSShhLGIpe3pmKys7eWZbemZdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgQWY9e30sSj17Y3VycmVudDpBZn0sSz17Y3VycmVudDohMX0sQmY9QWY7ZnVuY3Rpb24gQ2YoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiBBZjt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1mdW5jdGlvbiBMKGEpe2E9YS5jaGlsZENvbnRleHRUeXBlcztyZXR1cm4gbnVsbCE9PWEmJnZvaWQgMCE9PWF9XG5mdW5jdGlvbiBEZigpe0goSyk7SChKKX1mdW5jdGlvbiBFZihhLGIsYyl7aWYoSi5jdXJyZW50IT09QWYpdGhyb3cgRXJyb3IodSgxNjgpKTtJKEosYik7SShLLGMpfWZ1bmN0aW9uIEZmKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTthPWIuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBjO2Q9ZC5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gZClpZighKGUgaW4gYSkpdGhyb3cgRXJyb3IodSgxMDgscGIoYil8fFwiVW5rbm93blwiLGUpKTtyZXR1cm4gbih7fSxjLHt9LGQpfWZ1bmN0aW9uIEdmKGEpe2E9KGE9YS5zdGF0ZU5vZGUpJiZhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxBZjtCZj1KLmN1cnJlbnQ7SShKLGEpO0koSyxLLmN1cnJlbnQpO3JldHVybiEwfVxuZnVuY3Rpb24gSGYoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2lmKCFkKXRocm93IEVycm9yKHUoMTY5KSk7Yz8oYT1GZihhLGIsQmYpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YSxIKEspLEgoSiksSShKLGEpKTpIKEspO0koSyxjKX1cbnZhciBJZj1yLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSxKZj1yLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssS2Y9ci51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayxMZj1yLnVuc3RhYmxlX3JlcXVlc3RQYWludCxNZj1yLnVuc3RhYmxlX25vdyxOZj1yLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLE9mPXIudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksUGY9ci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxRZj1yLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFJmPXIudW5zdGFibGVfTG93UHJpb3JpdHksU2Y9ci51bnN0YWJsZV9JZGxlUHJpb3JpdHksVGY9e30sVWY9ci51bnN0YWJsZV9zaG91bGRZaWVsZCxWZj12b2lkIDAhPT1MZj9MZjpmdW5jdGlvbigpe30sV2Y9bnVsbCxYZj1udWxsLFlmPSExLFpmPU1mKCksJGY9MUU0PlpmP01mOmZ1bmN0aW9uKCl7cmV0dXJuIE1mKCktWmZ9O1xuZnVuY3Rpb24gYWcoKXtzd2l0Y2goTmYoKSl7Y2FzZSBPZjpyZXR1cm4gOTk7Y2FzZSBQZjpyZXR1cm4gOTg7Y2FzZSBRZjpyZXR1cm4gOTc7Y2FzZSBSZjpyZXR1cm4gOTY7Y2FzZSBTZjpyZXR1cm4gOTU7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMzMikpO319ZnVuY3Rpb24gYmcoYSl7c3dpdGNoKGEpe2Nhc2UgOTk6cmV0dXJuIE9mO2Nhc2UgOTg6cmV0dXJuIFBmO2Nhc2UgOTc6cmV0dXJuIFFmO2Nhc2UgOTY6cmV0dXJuIFJmO2Nhc2UgOTU6cmV0dXJuIFNmO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgzMzIpKTt9fWZ1bmN0aW9uIGNnKGEsYil7YT1iZyhhKTtyZXR1cm4gSWYoYSxiKX1mdW5jdGlvbiBkZyhhLGIsYyl7YT1iZyhhKTtyZXR1cm4gSmYoYSxiLGMpfWZ1bmN0aW9uIGVnKGEpe251bGw9PT1XZj8oV2Y9W2FdLFhmPUpmKE9mLGZnKSk6V2YucHVzaChhKTtyZXR1cm4gVGZ9ZnVuY3Rpb24gZ2coKXtpZihudWxsIT09WGYpe3ZhciBhPVhmO1hmPW51bGw7S2YoYSl9ZmcoKX1cbmZ1bmN0aW9uIGZnKCl7aWYoIVlmJiZudWxsIT09V2Ype1lmPSEwO3ZhciBhPTA7dHJ5e3ZhciBiPVdmO2NnKDk5LGZ1bmN0aW9uKCl7Zm9yKDthPGIubGVuZ3RoO2ErKyl7dmFyIGM9YlthXTtkbyBjPWMoITApO3doaWxlKG51bGwhPT1jKX19KTtXZj1udWxsfWNhdGNoKGMpe3Rocm93IG51bGwhPT1XZiYmKFdmPVdmLnNsaWNlKGErMSkpLEpmKE9mLGdnKSxjO31maW5hbGx5e1lmPSExfX19ZnVuY3Rpb24gaGcoYSxiLGMpe2MvPTEwO3JldHVybiAxMDczNzQxODIxLSgoKDEwNzM3NDE4MjEtYStiLzEwKS9jfDApKzEpKmN9ZnVuY3Rpb24gaWcoYSxiKXtpZihhJiZhLmRlZmF1bHRQcm9wcyl7Yj1uKHt9LGIpO2E9YS5kZWZhdWx0UHJvcHM7Zm9yKHZhciBjIGluIGEpdm9pZCAwPT09YltjXSYmKGJbY109YVtjXSl9cmV0dXJuIGJ9dmFyIGpnPXtjdXJyZW50Om51bGx9LGtnPW51bGwsbGc9bnVsbCxtZz1udWxsO2Z1bmN0aW9uIG5nKCl7bWc9bGc9a2c9bnVsbH1cbmZ1bmN0aW9uIG9nKGEpe3ZhciBiPWpnLmN1cnJlbnQ7SChqZyk7YS50eXBlLl9jb250ZXh0Ll9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiBwZyhhLGIpe2Zvcig7bnVsbCE9PWE7KXt2YXIgYz1hLmFsdGVybmF0ZTtpZihhLmNoaWxkRXhwaXJhdGlvblRpbWU8YilhLmNoaWxkRXhwaXJhdGlvblRpbWU9YixudWxsIT09YyYmYy5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihjLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7ZWxzZSBpZihudWxsIT09YyYmYy5jaGlsZEV4cGlyYXRpb25UaW1lPGIpYy5jaGlsZEV4cGlyYXRpb25UaW1lPWI7ZWxzZSBicmVhazthPWEucmV0dXJufX1mdW5jdGlvbiBxZyhhLGIpe2tnPWE7bWc9bGc9bnVsbDthPWEuZGVwZW5kZW5jaWVzO251bGwhPT1hJiZudWxsIT09YS5maXJzdENvbnRleHQmJihhLmV4cGlyYXRpb25UaW1lPj1iJiYocmc9ITApLGEuZmlyc3RDb250ZXh0PW51bGwpfVxuZnVuY3Rpb24gc2coYSxiKXtpZihtZyE9PWEmJiExIT09YiYmMCE9PWIpe2lmKFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MTA3Mzc0MTgyMz09PWIpbWc9YSxiPTEwNzM3NDE4MjM7Yj17Y29udGV4dDphLG9ic2VydmVkQml0czpiLG5leHQ6bnVsbH07aWYobnVsbD09PWxnKXtpZihudWxsPT09a2cpdGhyb3cgRXJyb3IodSgzMDgpKTtsZz1iO2tnLmRlcGVuZGVuY2llcz17ZXhwaXJhdGlvblRpbWU6MCxmaXJzdENvbnRleHQ6YixyZXNwb25kZXJzOm51bGx9fWVsc2UgbGc9bGcubmV4dD1ifXJldHVybiBhLl9jdXJyZW50VmFsdWV9dmFyIHRnPSExO2Z1bmN0aW9uIHVnKGEpe2EudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLm1lbW9pemVkU3RhdGUsYmFzZVF1ZXVlOm51bGwsc2hhcmVkOntwZW5kaW5nOm51bGx9LGVmZmVjdHM6bnVsbH19XG5mdW5jdGlvbiB2ZyhhLGIpe2E9YS51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPT09YSYmKGIudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLmJhc2VTdGF0ZSxiYXNlUXVldWU6YS5iYXNlUXVldWUsc2hhcmVkOmEuc2hhcmVkLGVmZmVjdHM6YS5lZmZlY3RzfSl9ZnVuY3Rpb24gd2coYSxiKXthPXtleHBpcmF0aW9uVGltZTphLHN1c3BlbnNlQ29uZmlnOmIsdGFnOjAscGF5bG9hZDpudWxsLGNhbGxiYWNrOm51bGwsbmV4dDpudWxsfTtyZXR1cm4gYS5uZXh0PWF9ZnVuY3Rpb24geGcoYSxiKXthPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWEpe2E9YS5zaGFyZWQ7dmFyIGM9YS5wZW5kaW5nO251bGw9PT1jP2IubmV4dD1iOihiLm5leHQ9Yy5uZXh0LGMubmV4dD1iKTthLnBlbmRpbmc9Yn19XG5mdW5jdGlvbiB5ZyhhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZ2ZyhjLGEpO2E9YS51cGRhdGVRdWV1ZTtjPWEuYmFzZVF1ZXVlO251bGw9PT1jPyhhLmJhc2VRdWV1ZT1iLm5leHQ9YixiLm5leHQ9Yik6KGIubmV4dD1jLm5leHQsYy5uZXh0PWIpfVxuZnVuY3Rpb24gemcoYSxiLGMsZCl7dmFyIGU9YS51cGRhdGVRdWV1ZTt0Zz0hMTt2YXIgZj1lLmJhc2VRdWV1ZSxnPWUuc2hhcmVkLnBlbmRpbmc7aWYobnVsbCE9PWcpe2lmKG51bGwhPT1mKXt2YXIgaD1mLm5leHQ7Zi5uZXh0PWcubmV4dDtnLm5leHQ9aH1mPWc7ZS5zaGFyZWQucGVuZGluZz1udWxsO2g9YS5hbHRlcm5hdGU7bnVsbCE9PWgmJihoPWgudXBkYXRlUXVldWUsbnVsbCE9PWgmJihoLmJhc2VRdWV1ZT1nKSl9aWYobnVsbCE9PWYpe2g9Zi5uZXh0O3ZhciBrPWUuYmFzZVN0YXRlLGw9MCxtPW51bGwscD1udWxsLHg9bnVsbDtpZihudWxsIT09aCl7dmFyIHo9aDtkb3tnPXouZXhwaXJhdGlvblRpbWU7aWYoZzxkKXt2YXIgY2E9e2V4cGlyYXRpb25UaW1lOnouZXhwaXJhdGlvblRpbWUsc3VzcGVuc2VDb25maWc6ei5zdXNwZW5zZUNvbmZpZyx0YWc6ei50YWcscGF5bG9hZDp6LnBheWxvYWQsY2FsbGJhY2s6ei5jYWxsYmFjayxuZXh0Om51bGx9O251bGw9PT14PyhwPXg9XG5jYSxtPWspOng9eC5uZXh0PWNhO2c+bCYmKGw9Zyl9ZWxzZXtudWxsIT09eCYmKHg9eC5uZXh0PXtleHBpcmF0aW9uVGltZToxMDczNzQxODIzLHN1c3BlbnNlQ29uZmlnOnouc3VzcGVuc2VDb25maWcsdGFnOnoudGFnLHBheWxvYWQ6ei5wYXlsb2FkLGNhbGxiYWNrOnouY2FsbGJhY2ssbmV4dDpudWxsfSk7QWcoZyx6LnN1c3BlbnNlQ29uZmlnKTthOnt2YXIgRD1hLHQ9ejtnPWI7Y2E9Yztzd2l0Y2godC50YWcpe2Nhc2UgMTpEPXQucGF5bG9hZDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgRCl7az1ELmNhbGwoY2EsayxnKTticmVhayBhfWs9RDticmVhayBhO2Nhc2UgMzpELmVmZmVjdFRhZz1ELmVmZmVjdFRhZyYtNDA5N3w2NDtjYXNlIDA6RD10LnBheWxvYWQ7Zz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgRD9ELmNhbGwoY2EsayxnKTpEO2lmKG51bGw9PT1nfHx2b2lkIDA9PT1nKWJyZWFrIGE7az1uKHt9LGssZyk7YnJlYWsgYTtjYXNlIDI6dGc9ITB9fW51bGwhPT16LmNhbGxiYWNrJiZcbihhLmVmZmVjdFRhZ3w9MzIsZz1lLmVmZmVjdHMsbnVsbD09PWc/ZS5lZmZlY3RzPVt6XTpnLnB1c2goeikpfXo9ei5uZXh0O2lmKG51bGw9PT16fHx6PT09aClpZihnPWUuc2hhcmVkLnBlbmRpbmcsbnVsbD09PWcpYnJlYWs7ZWxzZSB6PWYubmV4dD1nLm5leHQsZy5uZXh0PWgsZS5iYXNlUXVldWU9Zj1nLGUuc2hhcmVkLnBlbmRpbmc9bnVsbH13aGlsZSgxKX1udWxsPT09eD9tPWs6eC5uZXh0PXA7ZS5iYXNlU3RhdGU9bTtlLmJhc2VRdWV1ZT14O0JnKGwpO2EuZXhwaXJhdGlvblRpbWU9bDthLm1lbW9pemVkU3RhdGU9a319XG5mdW5jdGlvbiBDZyhhLGIsYyl7YT1iLmVmZmVjdHM7Yi5lZmZlY3RzPW51bGw7aWYobnVsbCE9PWEpZm9yKGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGQ9YVtiXSxlPWQuY2FsbGJhY2s7aWYobnVsbCE9PWUpe2QuY2FsbGJhY2s9bnVsbDtkPWU7ZT1jO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkKXRocm93IEVycm9yKHUoMTkxLGQpKTtkLmNhbGwoZSl9fX12YXIgRGc9V2EuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsRWc9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7ZnVuY3Rpb24gRmcoYSxiLGMsZCl7Yj1hLm1lbW9pemVkU3RhdGU7Yz1jKGQsYik7Yz1udWxsPT09Y3x8dm9pZCAwPT09Yz9iOm4oe30sYixjKTthLm1lbW9pemVkU3RhdGU9YzswPT09YS5leHBpcmF0aW9uVGltZSYmKGEudXBkYXRlUXVldWUuYmFzZVN0YXRlPWMpfVxudmFyIEpnPXtpc01vdW50ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbEZpYmVyKT9kYyhhKT09PWE6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9R2coKSxlPURnLnN1c3BlbnNlO2Q9SGcoZCxhLGUpO2U9d2coZCxlKTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7eGcoYSxlKTtJZyhhLGQpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1HZygpLGU9RGcuc3VzcGVuc2U7ZD1IZyhkLGEsZSk7ZT13ZyhkLGUpO2UudGFnPTE7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO3hnKGEsZSk7SWcoYSxkKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGM9R2coKSxkPURnLnN1c3BlbnNlO1xuYz1IZyhjLGEsZCk7ZD13ZyhjLGQpO2QudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihkLmNhbGxiYWNrPWIpO3hnKGEsZCk7SWcoYSxjKX19O2Z1bmN0aW9uIEtnKGEsYixjLGQsZSxmLGcpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixnKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IWJmKGMsZCl8fCFiZihlLGYpOiEwfVxuZnVuY3Rpb24gTGcoYSxiLGMpe3ZhciBkPSExLGU9QWY7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9c2coZik6KGU9TChiKT9CZjpKLmN1cnJlbnQsZD1iLmNvbnRleHRUeXBlcyxmPShkPW51bGwhPT1kJiZ2b2lkIDAhPT1kKT9DZihhLGUpOkFmKTtiPW5ldyBiKGMsZik7YS5tZW1vaXplZFN0YXRlPW51bGwhPT1iLnN0YXRlJiZ2b2lkIDAhPT1iLnN0YXRlP2Iuc3RhdGU6bnVsbDtiLnVwZGF0ZXI9Smc7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFsRmliZXI9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gTWcoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJkpnLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24gTmcoYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1FZzt1ZyhhKTt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PXNnKGYpOihmPUwoYik/QmY6Si5jdXJyZW50LGUuY29udGV4dD1DZihhLGYpKTt6ZyhhLGMsZSxkKTtlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtmPWIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYoRmcoYSxiLGYsYyksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8XG4oYj1lLnN0YXRlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCYmZS5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxiIT09ZS5zdGF0ZSYmSmcuZW5xdWV1ZVJlcGxhY2VTdGF0ZShlLGUuc3RhdGUsbnVsbCksemcoYSxjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PTQpfXZhciBPZz1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gUGcoYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO2lmKGMpe2lmKDEhPT1jLnRhZyl0aHJvdyBFcnJvcih1KDMwOSkpO3ZhciBkPWMuc3RhdGVOb2RlfWlmKCFkKXRocm93IEVycm9yKHUoMTQ3LGEpKTt2YXIgZT1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZSlyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1kLnJlZnM7Yj09PUVnJiYoYj1kLnJlZnM9e30pO251bGw9PT1hP2RlbGV0ZSBiW2VdOmJbZV09YX07Yi5fc3RyaW5nUmVmPWU7cmV0dXJuIGJ9aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBhKXRocm93IEVycm9yKHUoMjg0KSk7aWYoIWMuX293bmVyKXRocm93IEVycm9yKHUoMjkwLGEpKTt9cmV0dXJuIGF9XG5mdW5jdGlvbiBRZyhhLGIpe2lmKFwidGV4dGFyZWFcIiE9PWEudHlwZSl0aHJvdyBFcnJvcih1KDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YixcIlwiKSk7fVxuZnVuY3Rpb24gUmcoYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIubGFzdEVmZmVjdDtudWxsIT09ZD8oZC5uZXh0RWZmZWN0PWMsYi5sYXN0RWZmZWN0PWMpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWM7Yy5uZXh0RWZmZWN0PW51bGw7Yy5lZmZlY3RUYWc9OH19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIpe2E9U2coYSxiKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZWZmZWN0VGFnPVxuMixjKTpkO2IuZWZmZWN0VGFnPTI7cmV0dXJuIGN9ZnVuY3Rpb24gZyhiKXthJiZudWxsPT09Yi5hbHRlcm5hdGUmJihiLmVmZmVjdFRhZz0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9VGcoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXtpZihudWxsIT09YiYmYi5lbGVtZW50VHlwZT09PWMudHlwZSlyZXR1cm4gZD1lKGIsYy5wcm9wcyksZC5yZWY9UGcoYSxiLGMpLGQucmV0dXJuPWEsZDtkPVVnKGMudHlwZSxjLmtleSxjLnByb3BzLG51bGwsYS5tb2RlLGQpO2QucmVmPVBnKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIGwoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1cbmMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9VmcoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIG0oYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8NyE9PWIudGFnKXJldHVybiBiPVdnKGMsYS5tb2RlLGQsZiksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gcChhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9VGcoXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2UgWmE6cmV0dXJuIGM9VWcoYi50eXBlLGIua2V5LGIucHJvcHMsbnVsbCxhLm1vZGUsYyksYy5yZWY9UGcoYSxudWxsLGIpLGMucmV0dXJuPWEsYztjYXNlICRhOnJldHVybiBiPVZnKGIsYS5tb2RlLGMpLGIucmV0dXJuPWEsYn1pZihPZyhiKXx8XG5uYihiKSlyZXR1cm4gYj1XZyhiLGEubW9kZSxjLG51bGwpLGIucmV0dXJuPWEsYjtRZyhhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHgoYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpoKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2UgWmE6cmV0dXJuIGMua2V5PT09ZT9jLnR5cGU9PT1hYj9tKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsZSk6ayhhLGIsYyxkKTpudWxsO2Nhc2UgJGE6cmV0dXJuIGMua2V5PT09ZT9sKGEsYixjLGQpOm51bGx9aWYoT2coYyl8fG5iKGMpKXJldHVybiBudWxsIT09ZT9udWxsOm0oYSxiLGMsZCxudWxsKTtRZyhhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIHooYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1cbmEuZ2V0KGMpfHxudWxsLGgoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSBaYTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsZC50eXBlPT09YWI/bShiLGEsZC5wcm9wcy5jaGlsZHJlbixlLGQua2V5KTprKGIsYSxkLGUpO2Nhc2UgJGE6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGwoYixhLGQsZSl9aWYoT2coZCl8fG5iKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLG0oYixhLGQsZSxudWxsKTtRZyhiLGQpfXJldHVybiBudWxsfWZ1bmN0aW9uIGNhKGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLHQ9bnVsbCxtPWcseT1nPTAsQT1udWxsO251bGwhPT1tJiZ5PGgubGVuZ3RoO3krKyl7bS5pbmRleD55PyhBPW0sbT1udWxsKTpBPW0uc2libGluZzt2YXIgcT14KGUsbSxoW3ldLGspO2lmKG51bGw9PT1xKXtudWxsPT09bSYmKG09QSk7YnJlYWt9YSYmXG5tJiZudWxsPT09cS5hbHRlcm5hdGUmJmIoZSxtKTtnPWYocSxnLHkpO251bGw9PT10P2w9cTp0LnNpYmxpbmc9cTt0PXE7bT1BfWlmKHk9PT1oLmxlbmd0aClyZXR1cm4gYyhlLG0pLGw7aWYobnVsbD09PW0pe2Zvcig7eTxoLmxlbmd0aDt5KyspbT1wKGUsaFt5XSxrKSxudWxsIT09bSYmKGc9ZihtLGcseSksbnVsbD09PXQ/bD1tOnQuc2libGluZz1tLHQ9bSk7cmV0dXJuIGx9Zm9yKG09ZChlLG0pO3k8aC5sZW5ndGg7eSsrKUE9eihtLGUseSxoW3ldLGspLG51bGwhPT1BJiYoYSYmbnVsbCE9PUEuYWx0ZXJuYXRlJiZtLmRlbGV0ZShudWxsPT09QS5rZXk/eTpBLmtleSksZz1mKEEsZyx5KSxudWxsPT09dD9sPUE6dC5zaWJsaW5nPUEsdD1BKTthJiZtLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfWZ1bmN0aW9uIEQoZSxnLGgsbCl7dmFyIGs9bmIoaCk7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGspdGhyb3cgRXJyb3IodSgxNTApKTtoPWsuY2FsbChoKTtcbmlmKG51bGw9PWgpdGhyb3cgRXJyb3IodSgxNTEpKTtmb3IodmFyIG09az1udWxsLHQ9Zyx5PWc9MCxBPW51bGwscT1oLm5leHQoKTtudWxsIT09dCYmIXEuZG9uZTt5KysscT1oLm5leHQoKSl7dC5pbmRleD55PyhBPXQsdD1udWxsKTpBPXQuc2libGluZzt2YXIgRD14KGUsdCxxLnZhbHVlLGwpO2lmKG51bGw9PT1EKXtudWxsPT09dCYmKHQ9QSk7YnJlYWt9YSYmdCYmbnVsbD09PUQuYWx0ZXJuYXRlJiZiKGUsdCk7Zz1mKEQsZyx5KTtudWxsPT09bT9rPUQ6bS5zaWJsaW5nPUQ7bT1EO3Q9QX1pZihxLmRvbmUpcmV0dXJuIGMoZSx0KSxrO2lmKG51bGw9PT10KXtmb3IoOyFxLmRvbmU7eSsrLHE9aC5uZXh0KCkpcT1wKGUscS52YWx1ZSxsKSxudWxsIT09cSYmKGc9ZihxLGcseSksbnVsbD09PW0/az1xOm0uc2libGluZz1xLG09cSk7cmV0dXJuIGt9Zm9yKHQ9ZChlLHQpOyFxLmRvbmU7eSsrLHE9aC5uZXh0KCkpcT16KHQsZSx5LHEudmFsdWUsbCksbnVsbCE9PXEmJihhJiZudWxsIT09XG5xLmFsdGVybmF0ZSYmdC5kZWxldGUobnVsbD09PXEua2V5P3k6cS5rZXkpLGc9ZihxLGcseSksbnVsbD09PW0/az1xOm0uc2libGluZz1xLG09cSk7YSYmdC5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4ga31yZXR1cm4gZnVuY3Rpb24oYSxkLGYsaCl7dmFyIGs9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09YWImJm51bGw9PT1mLmtleTtrJiYoZj1mLnByb3BzLmNoaWxkcmVuKTt2YXIgbD1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mO2lmKGwpc3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2UgWmE6YTp7bD1mLmtleTtmb3Ioaz1kO251bGwhPT1rOyl7aWYoay5rZXk9PT1sKXtzd2l0Y2goay50YWcpe2Nhc2UgNzppZihmLnR5cGU9PT1hYil7YyhhLGsuc2libGluZyk7ZD1lKGssZi5wcm9wcy5jaGlsZHJlbik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1icmVhaztkZWZhdWx0OmlmKGsuZWxlbWVudFR5cGU9PT1mLnR5cGUpe2MoYSxcbmsuc2libGluZyk7ZD1lKGssZi5wcm9wcyk7ZC5yZWY9UGcoYSxrLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9fWMoYSxrKTticmVha31lbHNlIGIoYSxrKTtrPWsuc2libGluZ31mLnR5cGU9PT1hYj8oZD1XZyhmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9VWcoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9UGcoYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlICRhOmE6e2ZvcihrPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1rKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPVxuZC5zaWJsaW5nfWQ9VmcoZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSl9aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYpLGQucmV0dXJuPWEsYT1kKTooYyhhLGQpLGQ9VGcoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSk7aWYoT2coZikpcmV0dXJuIGNhKGEsZCxmLGgpO2lmKG5iKGYpKXJldHVybiBEKGEsZCxmLGgpO2wmJlFnKGEsZik7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBmJiYhaylzd2l0Y2goYS50YWcpe2Nhc2UgMTpjYXNlIDA6dGhyb3cgYT1hLnR5cGUsRXJyb3IodSgxNTIsYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxcIkNvbXBvbmVudFwiKSk7fXJldHVybiBjKGEsZCl9fXZhciBYZz1SZyghMCksWWc9UmcoITEpLFpnPXt9LCRnPXtjdXJyZW50OlpnfSxhaD17Y3VycmVudDpaZ30sYmg9e2N1cnJlbnQ6Wmd9O1xuZnVuY3Rpb24gY2goYSl7aWYoYT09PVpnKXRocm93IEVycm9yKHUoMTc0KSk7cmV0dXJuIGF9ZnVuY3Rpb24gZGgoYSxiKXtJKGJoLGIpO0koYWgsYSk7SSgkZyxaZyk7YT1iLm5vZGVUeXBlO3N3aXRjaChhKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTpPYihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6YT04PT09YT9iLnBhcmVudE5vZGU6YixiPWEubmFtZXNwYWNlVVJJfHxudWxsLGE9YS50YWdOYW1lLGI9T2IoYixhKX1IKCRnKTtJKCRnLGIpfWZ1bmN0aW9uIGVoKCl7SCgkZyk7SChhaCk7SChiaCl9ZnVuY3Rpb24gZmgoYSl7Y2goYmguY3VycmVudCk7dmFyIGI9Y2goJGcuY3VycmVudCk7dmFyIGM9T2IoYixhLnR5cGUpO2IhPT1jJiYoSShhaCxhKSxJKCRnLGMpKX1mdW5jdGlvbiBnaChhKXthaC5jdXJyZW50PT09YSYmKEgoJGcpLEgoYWgpKX12YXIgTT17Y3VycmVudDowfTtcbmZ1bmN0aW9uIGhoKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7dmFyIGM9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbD09PWN8fGMuZGF0YT09PUJkfHxjLmRhdGE9PT1DZCkpcmV0dXJuIGJ9ZWxzZSBpZigxOT09PWIudGFnJiZ2b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMucmV2ZWFsT3JkZXIpe2lmKDAhPT0oYi5lZmZlY3RUYWcmNjQpKXJldHVybiBifWVsc2UgaWYobnVsbCE9PWIuY2hpbGQpe2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ31yZXR1cm4gbnVsbH1mdW5jdGlvbiBpaChhLGIpe3JldHVybntyZXNwb25kZXI6YSxwcm9wczpifX1cbnZhciBqaD1XYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGtoPVdhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLGxoPTAsTj1udWxsLE89bnVsbCxQPW51bGwsbWg9ITE7ZnVuY3Rpb24gUSgpe3Rocm93IEVycm9yKHUoMzIxKSk7fWZ1bmN0aW9uIG5oKGEsYil7aWYobnVsbD09PWIpcmV0dXJuITE7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aCYmYzxhLmxlbmd0aDtjKyspaWYoISRlKGFbY10sYltjXSkpcmV0dXJuITE7cmV0dXJuITB9XG5mdW5jdGlvbiBvaChhLGIsYyxkLGUsZil7bGg9ZjtOPWI7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2IuZXhwaXJhdGlvblRpbWU9MDtqaC5jdXJyZW50PW51bGw9PT1hfHxudWxsPT09YS5tZW1vaXplZFN0YXRlP3BoOnFoO2E9YyhkLGUpO2lmKGIuZXhwaXJhdGlvblRpbWU9PT1saCl7Zj0wO2Rve2IuZXhwaXJhdGlvblRpbWU9MDtpZighKDI1PmYpKXRocm93IEVycm9yKHUoMzAxKSk7Zis9MTtQPU89bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7amguY3VycmVudD1yaDthPWMoZCxlKX13aGlsZShiLmV4cGlyYXRpb25UaW1lPT09bGgpfWpoLmN1cnJlbnQ9c2g7Yj1udWxsIT09TyYmbnVsbCE9PU8ubmV4dDtsaD0wO1A9Tz1OPW51bGw7bWg9ITE7aWYoYil0aHJvdyBFcnJvcih1KDMwMCkpO3JldHVybiBhfVxuZnVuY3Rpb24gdGgoKXt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpudWxsLGJhc2VTdGF0ZTpudWxsLGJhc2VRdWV1ZTpudWxsLHF1ZXVlOm51bGwsbmV4dDpudWxsfTtudWxsPT09UD9OLm1lbW9pemVkU3RhdGU9UD1hOlA9UC5uZXh0PWE7cmV0dXJuIFB9ZnVuY3Rpb24gdWgoKXtpZihudWxsPT09Tyl7dmFyIGE9Ti5hbHRlcm5hdGU7YT1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbH1lbHNlIGE9Ty5uZXh0O3ZhciBiPW51bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZTpQLm5leHQ7aWYobnVsbCE9PWIpUD1iLE89YTtlbHNle2lmKG51bGw9PT1hKXRocm93IEVycm9yKHUoMzEwKSk7Tz1hO2E9e21lbW9pemVkU3RhdGU6Ty5tZW1vaXplZFN0YXRlLGJhc2VTdGF0ZTpPLmJhc2VTdGF0ZSxiYXNlUXVldWU6Ty5iYXNlUXVldWUscXVldWU6Ty5xdWV1ZSxuZXh0Om51bGx9O251bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZT1QPWE6UD1QLm5leHQ9YX1yZXR1cm4gUH1cbmZ1bmN0aW9uIHZoKGEsYil7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpifVxuZnVuY3Rpb24gd2goYSl7dmFyIGI9dWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IodSgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1PLGU9ZC5iYXNlUXVldWUsZj1jLnBlbmRpbmc7aWYobnVsbCE9PWYpe2lmKG51bGwhPT1lKXt2YXIgZz1lLm5leHQ7ZS5uZXh0PWYubmV4dDtmLm5leHQ9Z31kLmJhc2VRdWV1ZT1lPWY7Yy5wZW5kaW5nPW51bGx9aWYobnVsbCE9PWUpe2U9ZS5uZXh0O2Q9ZC5iYXNlU3RhdGU7dmFyIGg9Zz1mPW51bGwsaz1lO2Rve3ZhciBsPWsuZXhwaXJhdGlvblRpbWU7aWYobDxsaCl7dmFyIG09e2V4cGlyYXRpb25UaW1lOmsuZXhwaXJhdGlvblRpbWUsc3VzcGVuc2VDb25maWc6ay5zdXNwZW5zZUNvbmZpZyxhY3Rpb246ay5hY3Rpb24sZWFnZXJSZWR1Y2VyOmsuZWFnZXJSZWR1Y2VyLGVhZ2VyU3RhdGU6ay5lYWdlclN0YXRlLG5leHQ6bnVsbH07bnVsbD09PWg/KGc9aD1tLGY9ZCk6aD1oLm5leHQ9bTtsPk4uZXhwaXJhdGlvblRpbWUmJlxuKE4uZXhwaXJhdGlvblRpbWU9bCxCZyhsKSl9ZWxzZSBudWxsIT09aCYmKGg9aC5uZXh0PXtleHBpcmF0aW9uVGltZToxMDczNzQxODIzLHN1c3BlbnNlQ29uZmlnOmsuc3VzcGVuc2VDb25maWcsYWN0aW9uOmsuYWN0aW9uLGVhZ2VyUmVkdWNlcjprLmVhZ2VyUmVkdWNlcixlYWdlclN0YXRlOmsuZWFnZXJTdGF0ZSxuZXh0Om51bGx9KSxBZyhsLGsuc3VzcGVuc2VDb25maWcpLGQ9ay5lYWdlclJlZHVjZXI9PT1hP2suZWFnZXJTdGF0ZTphKGQsay5hY3Rpb24pO2s9ay5uZXh0fXdoaWxlKG51bGwhPT1rJiZrIT09ZSk7bnVsbD09PWg/Zj1kOmgubmV4dD1nOyRlKGQsYi5tZW1vaXplZFN0YXRlKXx8KHJnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZDtiLmJhc2VTdGF0ZT1mO2IuYmFzZVF1ZXVlPWg7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1kfXJldHVybltiLm1lbW9pemVkU3RhdGUsYy5kaXNwYXRjaF19XG5mdW5jdGlvbiB4aChhKXt2YXIgYj11aCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih1KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPWMuZGlzcGF0Y2gsZT1jLnBlbmRpbmcsZj1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWUpe2MucGVuZGluZz1udWxsO3ZhciBnPWU9ZS5uZXh0O2RvIGY9YShmLGcuYWN0aW9uKSxnPWcubmV4dDt3aGlsZShnIT09ZSk7JGUoZixiLm1lbW9pemVkU3RhdGUpfHwocmc9ITApO2IubWVtb2l6ZWRTdGF0ZT1mO251bGw9PT1iLmJhc2VRdWV1ZSYmKGIuYmFzZVN0YXRlPWYpO2MubGFzdFJlbmRlcmVkU3RhdGU9Zn1yZXR1cm5bZixkXX1cbmZ1bmN0aW9uIHloKGEpe3ZhciBiPXRoKCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGEmJihhPWEoKSk7Yi5tZW1vaXplZFN0YXRlPWIuYmFzZVN0YXRlPWE7YT1iLnF1ZXVlPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOnZoLGxhc3RSZW5kZXJlZFN0YXRlOmF9O2E9YS5kaXNwYXRjaD16aC5iaW5kKG51bGwsTixhKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGFdfWZ1bmN0aW9uIEFoKGEsYixjLGQpe2E9e3RhZzphLGNyZWF0ZTpiLGRlc3Ryb3k6YyxkZXBzOmQsbmV4dDpudWxsfTtiPU4udXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbH0sTi51cGRhdGVRdWV1ZT1iLGIubGFzdEVmZmVjdD1hLm5leHQ9YSk6KGM9Yi5sYXN0RWZmZWN0LG51bGw9PT1jP2IubGFzdEVmZmVjdD1hLm5leHQ9YTooZD1jLm5leHQsYy5uZXh0PWEsYS5uZXh0PWQsYi5sYXN0RWZmZWN0PWEpKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIEJoKCl7cmV0dXJuIHVoKCkubWVtb2l6ZWRTdGF0ZX1mdW5jdGlvbiBDaChhLGIsYyxkKXt2YXIgZT10aCgpO04uZWZmZWN0VGFnfD1hO2UubWVtb2l6ZWRTdGF0ZT1BaCgxfGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfWZ1bmN0aW9uIERoKGEsYixjLGQpe3ZhciBlPXVoKCk7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZj12b2lkIDA7aWYobnVsbCE9PU8pe3ZhciBnPU8ubWVtb2l6ZWRTdGF0ZTtmPWcuZGVzdHJveTtpZihudWxsIT09ZCYmbmgoZCxnLmRlcHMpKXtBaChiLGMsZixkKTtyZXR1cm59fU4uZWZmZWN0VGFnfD1hO2UubWVtb2l6ZWRTdGF0ZT1BaCgxfGIsYyxmLGQpfWZ1bmN0aW9uIEVoKGEsYil7cmV0dXJuIENoKDUxNiw0LGEsYil9ZnVuY3Rpb24gRmgoYSxiKXtyZXR1cm4gRGgoNTE2LDQsYSxiKX1mdW5jdGlvbiBHaChhLGIpe3JldHVybiBEaCg0LDIsYSxiKX1cbmZ1bmN0aW9uIEhoKGEsYil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGE9YSgpLGIoYSksZnVuY3Rpb24oKXtiKG51bGwpfTtpZihudWxsIT09YiYmdm9pZCAwIT09YilyZXR1cm4gYT1hKCksYi5jdXJyZW50PWEsZnVuY3Rpb24oKXtiLmN1cnJlbnQ9bnVsbH19ZnVuY3Rpb24gSWgoYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBEaCg0LDIsSGguYmluZChudWxsLGIsYSksYyl9ZnVuY3Rpb24gSmgoKXt9ZnVuY3Rpb24gS2goYSxiKXt0aCgpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfWZ1bmN0aW9uIExoKGEsYil7dmFyIGM9dWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJm5oKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfVxuZnVuY3Rpb24gTWgoYSxiKXt2YXIgYz11aCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmbmgoYixkWzFdKSlyZXR1cm4gZFswXTthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9ZnVuY3Rpb24gTmgoYSxiLGMpe3ZhciBkPWFnKCk7Y2coOTg+ZD85ODpkLGZ1bmN0aW9uKCl7YSghMCl9KTtjZyg5NzxkPzk3OmQsZnVuY3Rpb24oKXt2YXIgZD1raC5zdXNwZW5zZTtraC5zdXNwZW5zZT12b2lkIDA9PT1iP251bGw6Yjt0cnl7YSghMSksYygpfWZpbmFsbHl7a2guc3VzcGVuc2U9ZH19KX1cbmZ1bmN0aW9uIHpoKGEsYixjKXt2YXIgZD1HZygpLGU9RGcuc3VzcGVuc2U7ZD1IZyhkLGEsZSk7ZT17ZXhwaXJhdGlvblRpbWU6ZCxzdXNwZW5zZUNvbmZpZzplLGFjdGlvbjpjLGVhZ2VyUmVkdWNlcjpudWxsLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9O3ZhciBmPWIucGVuZGluZztudWxsPT09Zj9lLm5leHQ9ZTooZS5uZXh0PWYubmV4dCxmLm5leHQ9ZSk7Yi5wZW5kaW5nPWU7Zj1hLmFsdGVybmF0ZTtpZihhPT09Tnx8bnVsbCE9PWYmJmY9PT1OKW1oPSEwLGUuZXhwaXJhdGlvblRpbWU9bGgsTi5leHBpcmF0aW9uVGltZT1saDtlbHNle2lmKDA9PT1hLmV4cGlyYXRpb25UaW1lJiYobnVsbD09PWZ8fDA9PT1mLmV4cGlyYXRpb25UaW1lKSYmKGY9Yi5sYXN0UmVuZGVyZWRSZWR1Y2VyLG51bGwhPT1mKSl0cnl7dmFyIGc9Yi5sYXN0UmVuZGVyZWRTdGF0ZSxoPWYoZyxjKTtlLmVhZ2VyUmVkdWNlcj1mO2UuZWFnZXJTdGF0ZT1oO2lmKCRlKGgsZykpcmV0dXJufWNhdGNoKGspe31maW5hbGx5e31JZyhhLFxuZCl9fVxudmFyIHNoPXtyZWFkQ29udGV4dDpzZyx1c2VDYWxsYmFjazpRLHVzZUNvbnRleHQ6USx1c2VFZmZlY3Q6USx1c2VJbXBlcmF0aXZlSGFuZGxlOlEsdXNlTGF5b3V0RWZmZWN0OlEsdXNlTWVtbzpRLHVzZVJlZHVjZXI6USx1c2VSZWY6USx1c2VTdGF0ZTpRLHVzZURlYnVnVmFsdWU6USx1c2VSZXNwb25kZXI6USx1c2VEZWZlcnJlZFZhbHVlOlEsdXNlVHJhbnNpdGlvbjpRfSxwaD17cmVhZENvbnRleHQ6c2csdXNlQ2FsbGJhY2s6S2gsdXNlQ29udGV4dDpzZyx1c2VFZmZlY3Q6RWgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIENoKDQsMixIaC5iaW5kKG51bGwsYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIENoKDQsMixhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7dmFyIGM9dGgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxcbmJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD10aCgpO2I9dm9pZCAwIT09Yz9jKGIpOmI7ZC5tZW1vaXplZFN0YXRlPWQuYmFzZVN0YXRlPWI7YT1kLnF1ZXVlPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmEsbGFzdFJlbmRlcmVkU3RhdGU6Yn07YT1hLmRpc3BhdGNoPXpoLmJpbmQobnVsbCxOLGEpO3JldHVybltkLm1lbW9pemVkU3RhdGUsYV19LHVzZVJlZjpmdW5jdGlvbihhKXt2YXIgYj10aCgpO2E9e2N1cnJlbnQ6YX07cmV0dXJuIGIubWVtb2l6ZWRTdGF0ZT1hfSx1c2VTdGF0ZTp5aCx1c2VEZWJ1Z1ZhbHVlOkpoLHVzZVJlc3BvbmRlcjppaCx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEsYil7dmFyIGM9eWgoYSksZD1jWzBdLGU9Y1sxXTtFaChmdW5jdGlvbigpe3ZhciBjPWtoLnN1c3BlbnNlO2toLnN1c3BlbnNlPXZvaWQgMD09PWI/bnVsbDpiO3RyeXtlKGEpfWZpbmFsbHl7a2guc3VzcGVuc2U9XG5jfX0sW2EsYl0pO3JldHVybiBkfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKGEpe3ZhciBiPXloKCExKSxjPWJbMF07Yj1iWzFdO3JldHVybltLaChOaC5iaW5kKG51bGwsYixhKSxbYixhXSksY119fSxxaD17cmVhZENvbnRleHQ6c2csdXNlQ2FsbGJhY2s6TGgsdXNlQ29udGV4dDpzZyx1c2VFZmZlY3Q6RmgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpJaCx1c2VMYXlvdXRFZmZlY3Q6R2gsdXNlTWVtbzpNaCx1c2VSZWR1Y2VyOndoLHVzZVJlZjpCaCx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiB3aCh2aCl9LHVzZURlYnVnVmFsdWU6SmgsdXNlUmVzcG9uZGVyOmloLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSxiKXt2YXIgYz13aCh2aCksZD1jWzBdLGU9Y1sxXTtGaChmdW5jdGlvbigpe3ZhciBjPWtoLnN1c3BlbnNlO2toLnN1c3BlbnNlPXZvaWQgMD09PWI/bnVsbDpiO3RyeXtlKGEpfWZpbmFsbHl7a2guc3VzcGVuc2U9Y319LFthLGJdKTtyZXR1cm4gZH0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbihhKXt2YXIgYj1cbndoKHZoKSxjPWJbMF07Yj1iWzFdO3JldHVybltMaChOaC5iaW5kKG51bGwsYixhKSxbYixhXSksY119fSxyaD17cmVhZENvbnRleHQ6c2csdXNlQ2FsbGJhY2s6TGgsdXNlQ29udGV4dDpzZyx1c2VFZmZlY3Q6RmgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpJaCx1c2VMYXlvdXRFZmZlY3Q6R2gsdXNlTWVtbzpNaCx1c2VSZWR1Y2VyOnhoLHVzZVJlZjpCaCx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiB4aCh2aCl9LHVzZURlYnVnVmFsdWU6SmgsdXNlUmVzcG9uZGVyOmloLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSxiKXt2YXIgYz14aCh2aCksZD1jWzBdLGU9Y1sxXTtGaChmdW5jdGlvbigpe3ZhciBjPWtoLnN1c3BlbnNlO2toLnN1c3BlbnNlPXZvaWQgMD09PWI/bnVsbDpiO3RyeXtlKGEpfWZpbmFsbHl7a2guc3VzcGVuc2U9Y319LFthLGJdKTtyZXR1cm4gZH0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbihhKXt2YXIgYj14aCh2aCksYz1iWzBdO2I9YlsxXTtyZXR1cm5bTGgoTmguYmluZChudWxsLFxuYixhKSxbYixhXSksY119fSxPaD1udWxsLFBoPW51bGwsUWg9ITE7ZnVuY3Rpb24gUmgoYSxiKXt2YXIgYz1TaCg1LG51bGwsbnVsbCwwKTtjLmVsZW1lbnRUeXBlPVwiREVMRVRFRFwiO2MudHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yy5lZmZlY3RUYWc9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfVxuZnVuY3Rpb24gVGgoYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTp2YXIgYz1hLnR5cGU7Yj0xIT09Yi5ub2RlVHlwZXx8Yy50b0xvd2VyQ2FzZSgpIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YjtyZXR1cm4gbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgNjpyZXR1cm4gYj1cIlwiPT09YS5wZW5kaW5nUHJvcHN8fDMhPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSAxMzpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIFVoKGEpe2lmKFFoKXt2YXIgYj1QaDtpZihiKXt2YXIgYz1iO2lmKCFUaChhLGIpKXtiPUpkKGMubmV4dFNpYmxpbmcpO2lmKCFifHwhVGgoYSxiKSl7YS5lZmZlY3RUYWc9YS5lZmZlY3RUYWcmLTEwMjV8MjtRaD0hMTtPaD1hO3JldHVybn1SaChPaCxjKX1PaD1hO1BoPUpkKGIuZmlyc3RDaGlsZCl9ZWxzZSBhLmVmZmVjdFRhZz1hLmVmZmVjdFRhZyYtMTAyNXwyLFFoPSExLE9oPWF9fWZ1bmN0aW9uIFZoKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTMhPT1hLnRhZzspYT1hLnJldHVybjtPaD1hfVxuZnVuY3Rpb24gV2goYSl7aWYoYSE9PU9oKXJldHVybiExO2lmKCFRaClyZXR1cm4gVmgoYSksUWg9ITAsITE7dmFyIGI9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFHZChiLGEubWVtb2l6ZWRQcm9wcykpZm9yKGI9UGg7YjspUmgoYSxiKSxiPUpkKGIubmV4dFNpYmxpbmcpO1ZoKGEpO2lmKDEzPT09YS50YWcpe2E9YS5tZW1vaXplZFN0YXRlO2E9bnVsbCE9PWE/YS5kZWh5ZHJhdGVkOm51bGw7aWYoIWEpdGhyb3cgRXJyb3IodSgzMTcpKTthOnthPWEubmV4dFNpYmxpbmc7Zm9yKGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihjPT09QWQpe2lmKDA9PT1iKXtQaD1KZChhLm5leHRTaWJsaW5nKTticmVhayBhfWItLX1lbHNlIGMhPT16ZCYmYyE9PUNkJiZjIT09QmR8fGIrK31hPWEubmV4dFNpYmxpbmd9UGg9bnVsbH19ZWxzZSBQaD1PaD9KZChhLnN0YXRlTm9kZS5uZXh0U2libGluZyk6bnVsbDtyZXR1cm4hMH1cbmZ1bmN0aW9uIFhoKCl7UGg9T2g9bnVsbDtRaD0hMX12YXIgWWg9V2EuUmVhY3RDdXJyZW50T3duZXIscmc9ITE7ZnVuY3Rpb24gUihhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP1lnKGIsbnVsbCxjLGQpOlhnKGIsYS5jaGlsZCxjLGQpfWZ1bmN0aW9uIFpoKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjtxZyhiLGUpO2Q9b2goYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhcmcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmVmZmVjdFRhZyY9LTUxNyxhLmV4cGlyYXRpb25UaW1lPD1lJiYoYS5leHBpcmF0aW9uVGltZT0wKSwkaChhLGIsZSk7Yi5lZmZlY3RUYWd8PTE7UihhLGIsZCxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGFpKGEsYixjLGQsZSxmKXtpZihudWxsPT09YSl7dmFyIGc9Yy50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiYhYmkoZykmJnZvaWQgMD09PWcuZGVmYXVsdFByb3BzJiZudWxsPT09Yy5jb21wYXJlJiZ2b2lkIDA9PT1jLmRlZmF1bHRQcm9wcylyZXR1cm4gYi50YWc9MTUsYi50eXBlPWcsY2koYSxiLGcsZCxlLGYpO2E9VWcoYy50eXBlLG51bGwsZCxudWxsLGIubW9kZSxmKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9Zz1hLmNoaWxkO2lmKGU8ZiYmKGU9Zy5tZW1vaXplZFByb3BzLGM9Yy5jb21wYXJlLGM9bnVsbCE9PWM/YzpiZixjKGUsZCkmJmEucmVmPT09Yi5yZWYpKXJldHVybiAkaChhLGIsZik7Yi5lZmZlY3RUYWd8PTE7YT1TZyhnLGQpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1cbmZ1bmN0aW9uIGNpKGEsYixjLGQsZSxmKXtyZXR1cm4gbnVsbCE9PWEmJmJmKGEubWVtb2l6ZWRQcm9wcyxkKSYmYS5yZWY9PT1iLnJlZiYmKHJnPSExLGU8Zik/KGIuZXhwaXJhdGlvblRpbWU9YS5leHBpcmF0aW9uVGltZSwkaChhLGIsZikpOmRpKGEsYixjLGQsZil9ZnVuY3Rpb24gZWkoYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5lZmZlY3RUYWd8PTEyOH1mdW5jdGlvbiBkaShhLGIsYyxkLGUpe3ZhciBmPUwoYyk/QmY6Si5jdXJyZW50O2Y9Q2YoYixmKTtxZyhiLGUpO2M9b2goYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhcmcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmVmZmVjdFRhZyY9LTUxNyxhLmV4cGlyYXRpb25UaW1lPD1lJiYoYS5leHBpcmF0aW9uVGltZT0wKSwkaChhLGIsZSk7Yi5lZmZlY3RUYWd8PTE7UihhLGIsYyxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGZpKGEsYixjLGQsZSl7aWYoTChjKSl7dmFyIGY9ITA7R2YoYil9ZWxzZSBmPSExO3FnKGIsZSk7aWYobnVsbD09PWIuc3RhdGVOb2RlKW51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKSxMZyhiLGMsZCksTmcoYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9c2cobCk6KGw9TChjKT9CZjpKLmN1cnJlbnQsbD1DZihiLGwpKTt2YXIgbT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxwPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZTtwfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGshPT1sKSYmTWcoYixnLGQsbCk7dGc9ITE7dmFyIHg9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9eDt6ZyhiLGQsZyxlKTtrPWIubWVtb2l6ZWRTdGF0ZTtoIT09ZHx8eCE9PWt8fEsuY3VycmVudHx8dGc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtJiYoRmcoYixjLG0sZCksaz1iLm1lbW9pemVkU3RhdGUpLChoPXRnfHxLZyhiLGMsaCxkLHgsayxsKSk/KHB8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudCYmZy5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09XG50eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1rKSxnLnByb3BzPWQsZy5zdGF0ZT1rLGcuY29udGV4dD1sLGQ9aCk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGQ9ITEpfWVsc2UgZz1iLnN0YXRlTm9kZSx2ZyhhLGIpLGg9Yi5tZW1vaXplZFByb3BzLGcucHJvcHM9Yi50eXBlPT09Yi5lbGVtZW50VHlwZT9oOmlnKGIudHlwZSxoKSxrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGUsXCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPXNnKGwpOihsPUwoYyk/QmY6Si5jdXJyZW50LGw9Q2YoYixsKSksbT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcywocD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgbXx8XCJmdW5jdGlvblwiPT09XG50eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGshPT1sKSYmTWcoYixnLGQsbCksdGc9ITEsaz1iLm1lbW9pemVkU3RhdGUsZy5zdGF0ZT1rLHpnKGIsZCxnLGUpLHg9Yi5tZW1vaXplZFN0YXRlLGghPT1kfHxrIT09eHx8Sy5jdXJyZW50fHx0Zz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihGZyhiLGMsbSxkKSx4PWIubWVtb2l6ZWRTdGF0ZSksKG09dGd8fEtnKGIsYyxoLGQsayx4LGwpKT8ocHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGV8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlJiZnLmNvbXBvbmVudFdpbGxVcGRhdGUoZCxcbngsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoZCx4LGwpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGUmJihiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmVmZmVjdFRhZ3w9MjU2KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yNTYpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT14KSxnLnByb3BzPWQsZy5zdGF0ZT14LGcuY29udGV4dD1sLGQ9bSk6XG4oXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksZD0hMSk7cmV0dXJuIGdpKGEsYixjLGQsZixlKX1cbmZ1bmN0aW9uIGdpKGEsYixjLGQsZSxmKXtlaShhLGIpO3ZhciBnPTAhPT0oYi5lZmZlY3RUYWcmNjQpO2lmKCFkJiYhZylyZXR1cm4gZSYmSGYoYixjLCExKSwkaChhLGIsZik7ZD1iLnN0YXRlTm9kZTtZaC5jdXJyZW50PWI7dmFyIGg9ZyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmVmZmVjdFRhZ3w9MTtudWxsIT09YSYmZz8oYi5jaGlsZD1YZyhiLGEuY2hpbGQsbnVsbCxmKSxiLmNoaWxkPVhnKGIsbnVsbCxoLGYpKTpSKGEsYixoLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJkhmKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gaGkoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9FZihhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZFZihhLGIuY29udGV4dCwhMSk7ZGgoYSxiLmNvbnRhaW5lckluZm8pfVxudmFyIGlpPXtkZWh5ZHJhdGVkOm51bGwscmV0cnlUaW1lOjB9O1xuZnVuY3Rpb24gamkoYSxiLGMpe3ZhciBkPWIubW9kZSxlPWIucGVuZGluZ1Byb3BzLGY9TS5jdXJyZW50LGc9ITEsaDsoaD0wIT09KGIuZWZmZWN0VGFnJjY0KSl8fChoPTAhPT0oZiYyKSYmKG51bGw9PT1hfHxudWxsIT09YS5tZW1vaXplZFN0YXRlKSk7aD8oZz0hMCxiLmVmZmVjdFRhZyY9LTY1KTpudWxsIT09YSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZXx8dm9pZCAwPT09ZS5mYWxsYmFja3x8ITA9PT1lLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwoZnw9MSk7SShNLGYmMSk7aWYobnVsbD09PWEpe3ZvaWQgMCE9PWUuZmFsbGJhY2smJlVoKGIpO2lmKGcpe2c9ZS5mYWxsYmFjaztlPVdnKG51bGwsZCwwLG51bGwpO2UucmV0dXJuPWI7aWYoMD09PShiLm1vZGUmMikpZm9yKGE9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZS5jaGlsZD1hO251bGwhPT1hOylhLnJldHVybj1lLGE9YS5zaWJsaW5nO2M9V2coZyxkLGMsbnVsbCk7Yy5yZXR1cm49XG5iO2Uuc2libGluZz1jO2IubWVtb2l6ZWRTdGF0ZT1paTtiLmNoaWxkPWU7cmV0dXJuIGN9ZD1lLmNoaWxkcmVuO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBiLmNoaWxkPVlnKGIsbnVsbCxkLGMpfWlmKG51bGwhPT1hLm1lbW9pemVkU3RhdGUpe2E9YS5jaGlsZDtkPWEuc2libGluZztpZihnKXtlPWUuZmFsbGJhY2s7Yz1TZyhhLGEucGVuZGluZ1Byb3BzKTtjLnJldHVybj1iO2lmKDA9PT0oYi5tb2RlJjIpJiYoZz1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCxnIT09YS5jaGlsZCkpZm9yKGMuY2hpbGQ9ZztudWxsIT09ZzspZy5yZXR1cm49YyxnPWcuc2libGluZztkPVNnKGQsZSk7ZC5yZXR1cm49YjtjLnNpYmxpbmc9ZDtjLmNoaWxkRXhwaXJhdGlvblRpbWU9MDtiLm1lbW9pemVkU3RhdGU9aWk7Yi5jaGlsZD1jO3JldHVybiBkfWM9WGcoYixhLmNoaWxkLGUuY2hpbGRyZW4sYyk7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGIuY2hpbGQ9XG5jfWE9YS5jaGlsZDtpZihnKXtnPWUuZmFsbGJhY2s7ZT1XZyhudWxsLGQsMCxudWxsKTtlLnJldHVybj1iO2UuY2hpbGQ9YTtudWxsIT09YSYmKGEucmV0dXJuPWUpO2lmKDA9PT0oYi5tb2RlJjIpKWZvcihhPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGUuY2hpbGQ9YTtudWxsIT09YTspYS5yZXR1cm49ZSxhPWEuc2libGluZztjPVdnKGcsZCxjLG51bGwpO2MucmV0dXJuPWI7ZS5zaWJsaW5nPWM7Yy5lZmZlY3RUYWd8PTI7ZS5jaGlsZEV4cGlyYXRpb25UaW1lPTA7Yi5tZW1vaXplZFN0YXRlPWlpO2IuY2hpbGQ9ZTtyZXR1cm4gY31iLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gYi5jaGlsZD1YZyhiLGEsZS5jaGlsZHJlbixjKX1cbmZ1bmN0aW9uIGtpKGEsYil7YS5leHBpcmF0aW9uVGltZTxiJiYoYS5leHBpcmF0aW9uVGltZT1iKTt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmYy5leHBpcmF0aW9uVGltZTxiJiYoYy5leHBpcmF0aW9uVGltZT1iKTtwZyhhLnJldHVybixiKX1mdW5jdGlvbiBsaShhLGIsYyxkLGUsZil7dmFyIGc9YS5tZW1vaXplZFN0YXRlO251bGw9PT1nP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxyZW5kZXJpbmdTdGFydFRpbWU6MCxsYXN0OmQsdGFpbDpjLHRhaWxFeHBpcmF0aW9uOjAsdGFpbE1vZGU6ZSxsYXN0RWZmZWN0OmZ9OihnLmlzQmFja3dhcmRzPWIsZy5yZW5kZXJpbmc9bnVsbCxnLnJlbmRlcmluZ1N0YXJ0VGltZT0wLGcubGFzdD1kLGcudGFpbD1jLGcudGFpbEV4cGlyYXRpb249MCxnLnRhaWxNb2RlPWUsZy5sYXN0RWZmZWN0PWYpfVxuZnVuY3Rpb24gbWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5yZXZlYWxPcmRlcixmPWQudGFpbDtSKGEsYixkLmNoaWxkcmVuLGMpO2Q9TS5jdXJyZW50O2lmKDAhPT0oZCYyKSlkPWQmMXwyLGIuZWZmZWN0VGFnfD02NDtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZWZmZWN0VGFnJjY0KSlhOmZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtpZigxMz09PWEudGFnKW51bGwhPT1hLm1lbW9pemVkU3RhdGUmJmtpKGEsYyk7ZWxzZSBpZigxOT09PWEudGFnKWtpKGEsYyk7ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49YTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWIpYnJlYWsgYTtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fGEucmV0dXJuPT09YilicmVhayBhO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjthPWEuc2libGluZ31kJj0xfUkoTSxkKTtpZigwPT09KGIubW9kZSYyKSliLm1lbW9pemVkU3RhdGU9XG5udWxsO2Vsc2Ugc3dpdGNoKGUpe2Nhc2UgXCJmb3J3YXJkc1wiOmM9Yi5jaGlsZDtmb3IoZT1udWxsO251bGwhPT1jOylhPWMuYWx0ZXJuYXRlLG51bGwhPT1hJiZudWxsPT09aGgoYSkmJihlPWMpLGM9Yy5zaWJsaW5nO2M9ZTtudWxsPT09Yz8oZT1iLmNoaWxkLGIuY2hpbGQ9bnVsbCk6KGU9Yy5zaWJsaW5nLGMuc2libGluZz1udWxsKTtsaShiLCExLGUsYyxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcImJhY2t3YXJkc1wiOmM9bnVsbDtlPWIuY2hpbGQ7Zm9yKGIuY2hpbGQ9bnVsbDtudWxsIT09ZTspe2E9ZS5hbHRlcm5hdGU7aWYobnVsbCE9PWEmJm51bGw9PT1oaChhKSl7Yi5jaGlsZD1lO2JyZWFrfWE9ZS5zaWJsaW5nO2Uuc2libGluZz1jO2M9ZTtlPWF9bGkoYiwhMCxjLG51bGwsZixiLmxhc3RFZmZlY3QpO2JyZWFrO2Nhc2UgXCJ0b2dldGhlclwiOmxpKGIsITEsbnVsbCxudWxsLHZvaWQgMCxiLmxhc3RFZmZlY3QpO2JyZWFrO2RlZmF1bHQ6Yi5tZW1vaXplZFN0YXRlPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiAkaChhLGIsYyl7bnVsbCE9PWEmJihiLmRlcGVuZGVuY2llcz1hLmRlcGVuZGVuY2llcyk7dmFyIGQ9Yi5leHBpcmF0aW9uVGltZTswIT09ZCYmQmcoZCk7aWYoYi5jaGlsZEV4cGlyYXRpb25UaW1lPGMpcmV0dXJuIG51bGw7aWYobnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkKXRocm93IEVycm9yKHUoMTUzKSk7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPVNnKGEsYS5wZW5kaW5nUHJvcHMpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz1TZyhhLGEucGVuZGluZ1Byb3BzKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfXZhciBuaSxvaSxwaSxxaTtcbm5pPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtvaT1mdW5jdGlvbigpe307XG5waT1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcztpZihmIT09ZCl7dmFyIGc9Yi5zdGF0ZU5vZGU7Y2goJGcuY3VycmVudCk7YT1udWxsO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpmPXpiKGcsZik7ZD16YihnLGQpO2E9W107YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmY9R2IoZyxmKTtkPUdiKGcsZCk7YT1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6Zj1uKHt9LGYse3ZhbHVlOnZvaWQgMH0pO2Q9bih7fSxkLHt2YWx1ZTp2b2lkIDB9KTthPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmY9SWIoZyxmKTtkPUliKGcsZCk7YT1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBmLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihnLm9uY2xpY2s9c2QpfW9kKGMsZCk7dmFyIGgsaztjPW51bGw7Zm9yKGggaW4gZilpZighZC5oYXNPd25Qcm9wZXJ0eShoKSYmZi5oYXNPd25Qcm9wZXJ0eShoKSYmbnVsbCE9ZltoXSlpZihcInN0eWxlXCI9PT1cbmgpZm9yKGsgaW4gZz1mW2hdLGcpZy5oYXNPd25Qcm9wZXJ0eShrKSYmKGN8fChjPXt9KSxjW2tdPVwiXCIpO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1oJiZcImNoaWxkcmVuXCIhPT1oJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09aCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWgmJlwiYXV0b0ZvY3VzXCIhPT1oJiYodmEuaGFzT3duUHJvcGVydHkoaCk/YXx8KGE9W10pOihhPWF8fFtdKS5wdXNoKGgsbnVsbCkpO2ZvcihoIGluIGQpe3ZhciBsPWRbaF07Zz1udWxsIT1mP2ZbaF06dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkoaCkmJmwhPT1nJiYobnVsbCE9bHx8bnVsbCE9ZykpaWYoXCJzdHlsZVwiPT09aClpZihnKXtmb3IoayBpbiBnKSFnLmhhc093blByb3BlcnR5KGspfHxsJiZsLmhhc093blByb3BlcnR5KGspfHwoY3x8KGM9e30pLGNba109XCJcIik7Zm9yKGsgaW4gbClsLmhhc093blByb3BlcnR5KGspJiZnW2tdIT09bFtrXSYmKGN8fChjPXt9KSxcbmNba109bFtrXSl9ZWxzZSBjfHwoYXx8KGE9W10pLGEucHVzaChoLGMpKSxjPWw7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWg/KGw9bD9sLl9faHRtbDp2b2lkIDAsZz1nP2cuX19odG1sOnZvaWQgMCxudWxsIT1sJiZnIT09bCYmKGE9YXx8W10pLnB1c2goaCxsKSk6XCJjaGlsZHJlblwiPT09aD9nPT09bHx8XCJzdHJpbmdcIiE9PXR5cGVvZiBsJiZcIm51bWJlclwiIT09dHlwZW9mIGx8fChhPWF8fFtdKS5wdXNoKGgsXCJcIitsKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09aCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWgmJih2YS5oYXNPd25Qcm9wZXJ0eShoKT8obnVsbCE9bCYmcmQoZSxoKSxhfHxnPT09bHx8KGE9W10pKTooYT1hfHxbXSkucHVzaChoLGwpKX1jJiYoYT1hfHxbXSkucHVzaChcInN0eWxlXCIsYyk7ZT1hO2lmKGIudXBkYXRlUXVldWU9ZSliLmVmZmVjdFRhZ3w9NH19O1xucWk9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJihiLmVmZmVjdFRhZ3w9NCl9O2Z1bmN0aW9uIHJpKGEsYil7c3dpdGNoKGEudGFpbE1vZGUpe2Nhc2UgXCJoaWRkZW5cIjpiPWEudGFpbDtmb3IodmFyIGM9bnVsbDtudWxsIT09YjspbnVsbCE9PWIuYWx0ZXJuYXRlJiYoYz1iKSxiPWIuc2libGluZztudWxsPT09Yz9hLnRhaWw9bnVsbDpjLnNpYmxpbmc9bnVsbDticmVhaztjYXNlIFwiY29sbGFwc2VkXCI6Yz1hLnRhaWw7Zm9yKHZhciBkPW51bGw7bnVsbCE9PWM7KW51bGwhPT1jLmFsdGVybmF0ZSYmKGQ9YyksYz1jLnNpYmxpbmc7bnVsbD09PWQ/Ynx8bnVsbD09PWEudGFpbD9hLnRhaWw9bnVsbDphLnRhaWwuc2libGluZz1udWxsOmQuc2libGluZz1udWxsfX1cbmZ1bmN0aW9uIHNpKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcztzd2l0Y2goYi50YWcpe2Nhc2UgMjpjYXNlIDE2OmNhc2UgMTU6Y2FzZSAwOmNhc2UgMTE6Y2FzZSA3OmNhc2UgODpjYXNlIDEyOmNhc2UgOTpjYXNlIDE0OnJldHVybiBudWxsO2Nhc2UgMTpyZXR1cm4gTChiLnR5cGUpJiZEZigpLG51bGw7Y2FzZSAzOnJldHVybiBlaCgpLEgoSyksSChKKSxjPWIuc3RhdGVOb2RlLGMucGVuZGluZ0NvbnRleHQmJihjLmNvbnRleHQ9Yy5wZW5kaW5nQ29udGV4dCxjLnBlbmRpbmdDb250ZXh0PW51bGwpLG51bGwhPT1hJiZudWxsIT09YS5jaGlsZHx8IVdoKGIpfHwoYi5lZmZlY3RUYWd8PTQpLG9pKGIpLG51bGw7Y2FzZSA1OmdoKGIpO2M9Y2goYmguY3VycmVudCk7dmFyIGU9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSlwaShhLGIsZSxkLGMpLGEucmVmIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KTtlbHNle2lmKCFkKXtpZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IodSgxNjYpKTtcbnJldHVybiBudWxsfWE9Y2goJGcuY3VycmVudCk7aWYoV2goYikpe2Q9Yi5zdGF0ZU5vZGU7ZT1iLnR5cGU7dmFyIGY9Yi5tZW1vaXplZFByb3BzO2RbTWRdPWI7ZFtOZF09Zjtzd2l0Y2goZSl7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpGKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihhPTA7YTxhYy5sZW5ndGg7YSsrKUYoYWNbYV0sZCk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkYoXCJlcnJvclwiLGQpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkYoXCJlcnJvclwiLGQpO0YoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcImZvcm1cIjpGKFwicmVzZXRcIixkKTtGKFwic3VibWl0XCIsZCk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpGKFwidG9nZ2xlXCIsZCk7YnJlYWs7Y2FzZSBcImlucHV0XCI6QWIoZCxmKTtGKFwiaW52YWxpZFwiLGQpO3JkKGMsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZC5fd3JhcHBlclN0YXRlPVxue3dhc011bHRpcGxlOiEhZi5tdWx0aXBsZX07RihcImludmFsaWRcIixkKTtyZChjLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6SmIoZCxmKSxGKFwiaW52YWxpZFwiLGQpLHJkKGMsXCJvbkNoYW5nZVwiKX1vZChlLGYpO2E9bnVsbDtmb3IodmFyIGcgaW4gZilpZihmLmhhc093blByb3BlcnR5KGcpKXt2YXIgaD1mW2ddO1wiY2hpbGRyZW5cIj09PWc/XCJzdHJpbmdcIj09PXR5cGVvZiBoP2QudGV4dENvbnRlbnQhPT1oJiYoYT1bXCJjaGlsZHJlblwiLGhdKTpcIm51bWJlclwiPT09dHlwZW9mIGgmJmQudGV4dENvbnRlbnQhPT1cIlwiK2gmJihhPVtcImNoaWxkcmVuXCIsXCJcIitoXSk6dmEuaGFzT3duUHJvcGVydHkoZykmJm51bGwhPWgmJnJkKGMsZyl9c3dpdGNoKGUpe2Nhc2UgXCJpbnB1dFwiOnhiKGQpO0ViKGQsZiwhMCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6eGIoZCk7TGIoZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLm9uQ2xpY2smJlxuKGQub25jbGljaz1zZCl9Yz1hO2IudXBkYXRlUXVldWU9YztudWxsIT09YyYmKGIuZWZmZWN0VGFnfD00KX1lbHNle2c9OT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQ7YT09PXFkJiYoYT1OYihlKSk7YT09PXFkP1wic2NyaXB0XCI9PT1lPyhhPWcuY3JlYXRlRWxlbWVudChcImRpdlwiKSxhLmlubmVySFRNTD1cIjxzY3JpcHQ+XFx4M2Mvc2NyaXB0PlwiLGE9YS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpKTpcInN0cmluZ1wiPT09dHlwZW9mIGQuaXM/YT1nLmNyZWF0ZUVsZW1lbnQoZSx7aXM6ZC5pc30pOihhPWcuY3JlYXRlRWxlbWVudChlKSxcInNlbGVjdFwiPT09ZSYmKGc9YSxkLm11bHRpcGxlP2cubXVsdGlwbGU9ITA6ZC5zaXplJiYoZy5zaXplPWQuc2l6ZSkpKTphPWcuY3JlYXRlRWxlbWVudE5TKGEsZSk7YVtNZF09YjthW05kXT1kO25pKGEsYiwhMSwhMSk7Yi5zdGF0ZU5vZGU9YTtnPXBkKGUsZCk7c3dpdGNoKGUpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RihcImxvYWRcIixcbmEpO2g9ZDticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoaD0wO2g8YWMubGVuZ3RoO2grKylGKGFjW2hdLGEpO2g9ZDticmVhaztjYXNlIFwic291cmNlXCI6RihcImVycm9yXCIsYSk7aD1kO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkYoXCJlcnJvclwiLGEpO0YoXCJsb2FkXCIsYSk7aD1kO2JyZWFrO2Nhc2UgXCJmb3JtXCI6RihcInJlc2V0XCIsYSk7RihcInN1Ym1pdFwiLGEpO2g9ZDticmVhaztjYXNlIFwiZGV0YWlsc1wiOkYoXCJ0b2dnbGVcIixhKTtoPWQ7YnJlYWs7Y2FzZSBcImlucHV0XCI6QWIoYSxkKTtoPXpiKGEsZCk7RihcImludmFsaWRcIixhKTtyZChjLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmg9R2IoYSxkKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWQubXVsdGlwbGV9O2g9bih7fSxkLHt2YWx1ZTp2b2lkIDB9KTtGKFwiaW52YWxpZFwiLGEpO3JkKGMsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpKYihhLFxuZCk7aD1JYihhLGQpO0YoXCJpbnZhbGlkXCIsYSk7cmQoYyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2RlZmF1bHQ6aD1kfW9kKGUsaCk7dmFyIGs9aDtmb3IoZiBpbiBrKWlmKGsuaGFzT3duUHJvcGVydHkoZikpe3ZhciBsPWtbZl07XCJzdHlsZVwiPT09Zj9tZChhLGwpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWY/KGw9bD9sLl9faHRtbDp2b2lkIDAsbnVsbCE9bCYmUWIoYSxsKSk6XCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGw/KFwidGV4dGFyZWFcIiE9PWV8fFwiXCIhPT1sKSYmUmIoYSxsKTpcIm51bWJlclwiPT09dHlwZW9mIGwmJlJiKGEsXCJcIitsKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZiYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWYmJlwiYXV0b0ZvY3VzXCIhPT1mJiYodmEuaGFzT3duUHJvcGVydHkoZik/bnVsbCE9bCYmcmQoYyxmKTpudWxsIT1sJiZYYShhLGYsbCxnKSl9c3dpdGNoKGUpe2Nhc2UgXCJpbnB1dFwiOnhiKGEpO0ViKGEsZCwhMSk7XG5icmVhaztjYXNlIFwidGV4dGFyZWFcIjp4YihhKTtMYihhKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9ZC52YWx1ZSYmYS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIrcmIoZC52YWx1ZSkpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLm11bHRpcGxlPSEhZC5tdWx0aXBsZTtjPWQudmFsdWU7bnVsbCE9Yz9IYihhLCEhZC5tdWx0aXBsZSxjLCExKTpudWxsIT1kLmRlZmF1bHRWYWx1ZSYmSGIoYSwhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGgub25DbGljayYmKGEub25jbGljaz1zZCl9RmQoZSxkKSYmKGIuZWZmZWN0VGFnfD00KX1udWxsIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KX1yZXR1cm4gbnVsbDtjYXNlIDY6aWYoYSYmbnVsbCE9Yi5zdGF0ZU5vZGUpcWkoYSxiLGEubWVtb2l6ZWRQcm9wcyxkKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZCYmbnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHUoMTY2KSk7XG5jPWNoKGJoLmN1cnJlbnQpO2NoKCRnLmN1cnJlbnQpO1doKGIpPyhjPWIuc3RhdGVOb2RlLGQ9Yi5tZW1vaXplZFByb3BzLGNbTWRdPWIsYy5ub2RlVmFsdWUhPT1kJiYoYi5lZmZlY3RUYWd8PTQpKTooYz0oOT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGQpLGNbTWRdPWIsYi5zdGF0ZU5vZGU9Yyl9cmV0dXJuIG51bGw7Y2FzZSAxMzpIKE0pO2Q9Yi5tZW1vaXplZFN0YXRlO2lmKDAhPT0oYi5lZmZlY3RUYWcmNjQpKXJldHVybiBiLmV4cGlyYXRpb25UaW1lPWMsYjtjPW51bGwhPT1kO2Q9ITE7bnVsbD09PWE/dm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLmZhbGxiYWNrJiZXaChiKTooZT1hLm1lbW9pemVkU3RhdGUsZD1udWxsIT09ZSxjfHxudWxsPT09ZXx8KGU9YS5jaGlsZC5zaWJsaW5nLG51bGwhPT1lJiYoZj1iLmZpcnN0RWZmZWN0LG51bGwhPT1mPyhiLmZpcnN0RWZmZWN0PWUsZS5uZXh0RWZmZWN0PWYpOihiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1cbmUsZS5uZXh0RWZmZWN0PW51bGwpLGUuZWZmZWN0VGFnPTgpKSk7aWYoYyYmIWQmJjAhPT0oYi5tb2RlJjIpKWlmKG51bGw9PT1hJiYhMCE9PWIubWVtb2l6ZWRQcm9wcy51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8MCE9PShNLmN1cnJlbnQmMSkpUz09PXRpJiYoUz11aSk7ZWxzZXtpZihTPT09dGl8fFM9PT11aSlTPXZpOzAhPT13aSYmbnVsbCE9PVQmJih4aShULFUpLHlpKFQsd2kpKX1pZihjfHxkKWIuZWZmZWN0VGFnfD00O3JldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gZWgoKSxvaShiKSxudWxsO2Nhc2UgMTA6cmV0dXJuIG9nKGIpLG51bGw7Y2FzZSAxNzpyZXR1cm4gTChiLnR5cGUpJiZEZigpLG51bGw7Y2FzZSAxOTpIKE0pO2Q9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2U9MCE9PShiLmVmZmVjdFRhZyY2NCk7Zj1kLnJlbmRlcmluZztpZihudWxsPT09ZilpZihlKXJpKGQsITEpO2Vsc2V7aWYoUyE9PXRpfHxudWxsIT09YSYmMCE9PShhLmVmZmVjdFRhZyZcbjY0KSlmb3IoZj1iLmNoaWxkO251bGwhPT1mOyl7YT1oaChmKTtpZihudWxsIT09YSl7Yi5lZmZlY3RUYWd8PTY0O3JpKGQsITEpO2U9YS51cGRhdGVRdWV1ZTtudWxsIT09ZSYmKGIudXBkYXRlUXVldWU9ZSxiLmVmZmVjdFRhZ3w9NCk7bnVsbD09PWQubGFzdEVmZmVjdCYmKGIuZmlyc3RFZmZlY3Q9bnVsbCk7Yi5sYXN0RWZmZWN0PWQubGFzdEVmZmVjdDtmb3IoZD1iLmNoaWxkO251bGwhPT1kOyllPWQsZj1jLGUuZWZmZWN0VGFnJj0yLGUubmV4dEVmZmVjdD1udWxsLGUuZmlyc3RFZmZlY3Q9bnVsbCxlLmxhc3RFZmZlY3Q9bnVsbCxhPWUuYWx0ZXJuYXRlLG51bGw9PT1hPyhlLmNoaWxkRXhwaXJhdGlvblRpbWU9MCxlLmV4cGlyYXRpb25UaW1lPWYsZS5jaGlsZD1udWxsLGUubWVtb2l6ZWRQcm9wcz1udWxsLGUubWVtb2l6ZWRTdGF0ZT1udWxsLGUudXBkYXRlUXVldWU9bnVsbCxlLmRlcGVuZGVuY2llcz1udWxsKTooZS5jaGlsZEV4cGlyYXRpb25UaW1lPWEuY2hpbGRFeHBpcmF0aW9uVGltZSxcbmUuZXhwaXJhdGlvblRpbWU9YS5leHBpcmF0aW9uVGltZSxlLmNoaWxkPWEuY2hpbGQsZS5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcyxlLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlLGUudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxmPWEuZGVwZW5kZW5jaWVzLGUuZGVwZW5kZW5jaWVzPW51bGw9PT1mP251bGw6e2V4cGlyYXRpb25UaW1lOmYuZXhwaXJhdGlvblRpbWUsZmlyc3RDb250ZXh0OmYuZmlyc3RDb250ZXh0LHJlc3BvbmRlcnM6Zi5yZXNwb25kZXJzfSksZD1kLnNpYmxpbmc7SShNLE0uY3VycmVudCYxfDIpO3JldHVybiBiLmNoaWxkfWY9Zi5zaWJsaW5nfX1lbHNle2lmKCFlKWlmKGE9aGgoZiksbnVsbCE9PWEpe2lmKGIuZWZmZWN0VGFnfD02NCxlPSEwLGM9YS51cGRhdGVRdWV1ZSxudWxsIT09YyYmKGIudXBkYXRlUXVldWU9YyxiLmVmZmVjdFRhZ3w9NCkscmkoZCwhMCksbnVsbD09PWQudGFpbCYmXCJoaWRkZW5cIj09PWQudGFpbE1vZGUmJiFmLmFsdGVybmF0ZSlyZXR1cm4gYj1cbmIubGFzdEVmZmVjdD1kLmxhc3RFZmZlY3QsbnVsbCE9PWImJihiLm5leHRFZmZlY3Q9bnVsbCksbnVsbH1lbHNlIDIqJGYoKS1kLnJlbmRlcmluZ1N0YXJ0VGltZT5kLnRhaWxFeHBpcmF0aW9uJiYxPGMmJihiLmVmZmVjdFRhZ3w9NjQsZT0hMCxyaShkLCExKSxiLmV4cGlyYXRpb25UaW1lPWIuY2hpbGRFeHBpcmF0aW9uVGltZT1jLTEpO2QuaXNCYWNrd2FyZHM/KGYuc2libGluZz1iLmNoaWxkLGIuY2hpbGQ9Zik6KGM9ZC5sYXN0LG51bGwhPT1jP2Muc2libGluZz1mOmIuY2hpbGQ9ZixkLmxhc3Q9Zil9cmV0dXJuIG51bGwhPT1kLnRhaWw/KDA9PT1kLnRhaWxFeHBpcmF0aW9uJiYoZC50YWlsRXhwaXJhdGlvbj0kZigpKzUwMCksYz1kLnRhaWwsZC5yZW5kZXJpbmc9YyxkLnRhaWw9Yy5zaWJsaW5nLGQubGFzdEVmZmVjdD1iLmxhc3RFZmZlY3QsZC5yZW5kZXJpbmdTdGFydFRpbWU9JGYoKSxjLnNpYmxpbmc9bnVsbCxiPU0uY3VycmVudCxJKE0sZT9iJjF8MjpiJjEpLGMpOm51bGx9dGhyb3cgRXJyb3IodSgxNTYsXG5iLnRhZykpO31mdW5jdGlvbiB6aShhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMTpMKGEudHlwZSkmJkRmKCk7dmFyIGI9YS5lZmZlY3RUYWc7cmV0dXJuIGImNDA5Nj8oYS5lZmZlY3RUYWc9YiYtNDA5N3w2NCxhKTpudWxsO2Nhc2UgMzplaCgpO0goSyk7SChKKTtiPWEuZWZmZWN0VGFnO2lmKDAhPT0oYiY2NCkpdGhyb3cgRXJyb3IodSgyODUpKTthLmVmZmVjdFRhZz1iJi00MDk3fDY0O3JldHVybiBhO2Nhc2UgNTpyZXR1cm4gZ2goYSksbnVsbDtjYXNlIDEzOnJldHVybiBIKE0pLGI9YS5lZmZlY3RUYWcsYiY0MDk2PyhhLmVmZmVjdFRhZz1iJi00MDk3fDY0LGEpOm51bGw7Y2FzZSAxOTpyZXR1cm4gSChNKSxudWxsO2Nhc2UgNDpyZXR1cm4gZWgoKSxudWxsO2Nhc2UgMTA6cmV0dXJuIG9nKGEpLG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19ZnVuY3Rpb24gQWkoYSxiKXtyZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazpxYihiKX19XG52YXIgQmk9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQ7ZnVuY3Rpb24gQ2koYSxiKXt2YXIgYz1iLnNvdXJjZSxkPWIuc3RhY2s7bnVsbD09PWQmJm51bGwhPT1jJiYoZD1xYihjKSk7bnVsbCE9PWMmJnBiKGMudHlwZSk7Yj1iLnZhbHVlO251bGwhPT1hJiYxPT09YS50YWcmJnBiKGEudHlwZSk7dHJ5e2NvbnNvbGUuZXJyb3IoYil9Y2F0Y2goZSl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGU7fSl9fWZ1bmN0aW9uIERpKGEsYil7dHJ5e2IucHJvcHM9YS5tZW1vaXplZFByb3BzLGIuc3RhdGU9YS5tZW1vaXplZFN0YXRlLGIuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChjKXtFaShhLGMpfX1mdW5jdGlvbiBGaShhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09YilpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYil0cnl7YihudWxsKX1jYXRjaChjKXtFaShhLGMpfWVsc2UgYi5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiBHaShhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpjYXNlIDIyOnJldHVybjtjYXNlIDE6aWYoYi5lZmZlY3RUYWcmMjU2JiZudWxsIT09YSl7dmFyIGM9YS5tZW1vaXplZFByb3BzLGQ9YS5tZW1vaXplZFN0YXRlO2E9Yi5zdGF0ZU5vZGU7Yj1hLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGU9PT1iLnR5cGU/YzppZyhiLnR5cGUsYyksZCk7YS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1ifXJldHVybjtjYXNlIDM6Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6Y2FzZSAxNzpyZXR1cm59dGhyb3cgRXJyb3IodSgxNjMpKTt9XG5mdW5jdGlvbiBIaShhLGIpe2I9Yi51cGRhdGVRdWV1ZTtiPW51bGwhPT1iP2IubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1iKXt2YXIgYz1iPWIubmV4dDtkb3tpZigoYy50YWcmYSk9PT1hKXt2YXIgZD1jLmRlc3Ryb3k7Yy5kZXN0cm95PXZvaWQgMDt2b2lkIDAhPT1kJiZkKCl9Yz1jLm5leHR9d2hpbGUoYyE9PWIpfX1mdW5jdGlvbiBJaShhLGIpe2I9Yi51cGRhdGVRdWV1ZTtiPW51bGwhPT1iP2IubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1iKXt2YXIgYz1iPWIubmV4dDtkb3tpZigoYy50YWcmYSk9PT1hKXt2YXIgZD1jLmNyZWF0ZTtjLmRlc3Ryb3k9ZCgpfWM9Yy5uZXh0fXdoaWxlKGMhPT1iKX19XG5mdW5jdGlvbiBKaShhLGIsYyl7c3dpdGNoKGMudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6SWkoMyxjKTtyZXR1cm47Y2FzZSAxOmE9Yy5zdGF0ZU5vZGU7aWYoYy5lZmZlY3RUYWcmNClpZihudWxsPT09YilhLmNvbXBvbmVudERpZE1vdW50KCk7ZWxzZXt2YXIgZD1jLmVsZW1lbnRUeXBlPT09Yy50eXBlP2IubWVtb2l6ZWRQcm9wczppZyhjLnR5cGUsYi5tZW1vaXplZFByb3BzKTthLmNvbXBvbmVudERpZFVwZGF0ZShkLGIubWVtb2l6ZWRTdGF0ZSxhLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKX1iPWMudXBkYXRlUXVldWU7bnVsbCE9PWImJkNnKGMsYixhKTtyZXR1cm47Y2FzZSAzOmI9Yy51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YT1udWxsO2lmKG51bGwhPT1jLmNoaWxkKXN3aXRjaChjLmNoaWxkLnRhZyl7Y2FzZSA1OmE9Yy5jaGlsZC5zdGF0ZU5vZGU7YnJlYWs7Y2FzZSAxOmE9Yy5jaGlsZC5zdGF0ZU5vZGV9Q2coYyxiLGEpfXJldHVybjtcbmNhc2UgNTphPWMuc3RhdGVOb2RlO251bGw9PT1iJiZjLmVmZmVjdFRhZyY0JiZGZChjLnR5cGUsYy5tZW1vaXplZFByb3BzKSYmYS5mb2N1cygpO3JldHVybjtjYXNlIDY6cmV0dXJuO2Nhc2UgNDpyZXR1cm47Y2FzZSAxMjpyZXR1cm47Y2FzZSAxMzpudWxsPT09Yy5tZW1vaXplZFN0YXRlJiYoYz1jLmFsdGVybmF0ZSxudWxsIT09YyYmKGM9Yy5tZW1vaXplZFN0YXRlLG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbCE9PWMmJlZjKGMpKSkpO3JldHVybjtjYXNlIDE5OmNhc2UgMTc6Y2FzZSAyMDpjYXNlIDIxOnJldHVybn10aHJvdyBFcnJvcih1KDE2MykpO31cbmZ1bmN0aW9uIEtpKGEsYixjKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgTGkmJkxpKGIpO3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmNhc2UgMjI6YT1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1hJiYoYT1hLmxhc3RFZmZlY3QsbnVsbCE9PWEpKXt2YXIgZD1hLm5leHQ7Y2coOTc8Yz85NzpjLGZ1bmN0aW9uKCl7dmFyIGE9ZDtkb3t2YXIgYz1hLmRlc3Ryb3k7aWYodm9pZCAwIT09Yyl7dmFyIGc9Yjt0cnl7YygpfWNhdGNoKGgpe0VpKGcsaCl9fWE9YS5uZXh0fXdoaWxlKGEhPT1kKX0pfWJyZWFrO2Nhc2UgMTpGaShiKTtjPWIuc3RhdGVOb2RlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmNvbXBvbmVudFdpbGxVbm1vdW50JiZEaShiLGMpO2JyZWFrO2Nhc2UgNTpGaShiKTticmVhaztjYXNlIDQ6TWkoYSxiLGMpfX1cbmZ1bmN0aW9uIE5pKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2EucmV0dXJuPW51bGw7YS5jaGlsZD1udWxsO2EubWVtb2l6ZWRTdGF0ZT1udWxsO2EudXBkYXRlUXVldWU9bnVsbDthLmRlcGVuZGVuY2llcz1udWxsO2EuYWx0ZXJuYXRlPW51bGw7YS5maXJzdEVmZmVjdD1udWxsO2EubGFzdEVmZmVjdD1udWxsO2EucGVuZGluZ1Byb3BzPW51bGw7YS5tZW1vaXplZFByb3BzPW51bGw7YS5zdGF0ZU5vZGU9bnVsbDtudWxsIT09YiYmTmkoYil9ZnVuY3Rpb24gT2koYSl7cmV0dXJuIDU9PT1hLnRhZ3x8Mz09PWEudGFnfHw0PT09YS50YWd9XG5mdW5jdGlvbiBQaShhKXthOntmb3IodmFyIGI9YS5yZXR1cm47bnVsbCE9PWI7KXtpZihPaShiKSl7dmFyIGM9YjticmVhayBhfWI9Yi5yZXR1cm59dGhyb3cgRXJyb3IodSgxNjApKTt9Yj1jLnN0YXRlTm9kZTtzd2l0Y2goYy50YWcpe2Nhc2UgNTp2YXIgZD0hMTticmVhaztjYXNlIDM6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztjYXNlIDQ6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHUoMTYxKSk7fWMuZWZmZWN0VGFnJjE2JiYoUmIoYixcIlwiKSxjLmVmZmVjdFRhZyY9LTE3KTthOmI6Zm9yKGM9YTs7KXtmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fE9pKGMucmV0dXJuKSl7Yz1udWxsO2JyZWFrIGF9Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2ZvcihjPWMuc2libGluZzs1IT09Yy50YWcmJjYhPT1jLnRhZyYmMTghPT1jLnRhZzspe2lmKGMuZWZmZWN0VGFnJjIpY29udGludWUgYjtcbmlmKG51bGw9PT1jLmNoaWxkfHw0PT09Yy50YWcpY29udGludWUgYjtlbHNlIGMuY2hpbGQucmV0dXJuPWMsYz1jLmNoaWxkfWlmKCEoYy5lZmZlY3RUYWcmMikpe2M9Yy5zdGF0ZU5vZGU7YnJlYWsgYX19ZD9RaShhLGMsYik6UmkoYSxjLGIpfVxuZnVuY3Rpb24gUWkoYSxiLGMpe3ZhciBkPWEudGFnLGU9NT09PWR8fDY9PT1kO2lmKGUpYT1lP2Euc3RhdGVOb2RlOmEuc3RhdGVOb2RlLmluc3RhbmNlLGI/OD09PWMubm9kZVR5cGU/Yy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLGIpOmMuaW5zZXJ0QmVmb3JlKGEsYik6KDg9PT1jLm5vZGVUeXBlPyhiPWMucGFyZW50Tm9kZSxiLmluc2VydEJlZm9yZShhLGMpKTooYj1jLGIuYXBwZW5kQ2hpbGQoYSkpLGM9Yy5fcmVhY3RSb290Q29udGFpbmVyLG51bGwhPT1jJiZ2b2lkIDAhPT1jfHxudWxsIT09Yi5vbmNsaWNrfHwoYi5vbmNsaWNrPXNkKSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKFFpKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspUWkoYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gUmkoYSxiLGMpe3ZhciBkPWEudGFnLGU9NT09PWR8fDY9PT1kO2lmKGUpYT1lP2Euc3RhdGVOb2RlOmEuc3RhdGVOb2RlLmluc3RhbmNlLGI/Yy5pbnNlcnRCZWZvcmUoYSxiKTpjLmFwcGVuZENoaWxkKGEpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihSaShhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KVJpKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIE1pKGEsYixjKXtmb3IodmFyIGQ9YixlPSExLGYsZzs7KXtpZighZSl7ZT1kLnJldHVybjthOmZvcig7Oyl7aWYobnVsbD09PWUpdGhyb3cgRXJyb3IodSgxNjApKTtmPWUuc3RhdGVOb2RlO3N3aXRjaChlLnRhZyl7Y2FzZSA1Omc9ITE7YnJlYWsgYTtjYXNlIDM6Zj1mLmNvbnRhaW5lckluZm87Zz0hMDticmVhayBhO2Nhc2UgNDpmPWYuY29udGFpbmVySW5mbztnPSEwO2JyZWFrIGF9ZT1lLnJldHVybn1lPSEwfWlmKDU9PT1kLnRhZ3x8Nj09PWQudGFnKXthOmZvcih2YXIgaD1hLGs9ZCxsPWMsbT1rOzspaWYoS2koaCxtLGwpLG51bGwhPT1tLmNoaWxkJiY0IT09bS50YWcpbS5jaGlsZC5yZXR1cm49bSxtPW0uY2hpbGQ7ZWxzZXtpZihtPT09aylicmVhayBhO2Zvcig7bnVsbD09PW0uc2libGluZzspe2lmKG51bGw9PT1tLnJldHVybnx8bS5yZXR1cm49PT1rKWJyZWFrIGE7bT1tLnJldHVybn1tLnNpYmxpbmcucmV0dXJuPW0ucmV0dXJuO209bS5zaWJsaW5nfWc/KGg9XG5mLGs9ZC5zdGF0ZU5vZGUsOD09PWgubm9kZVR5cGU/aC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGspOmgucmVtb3ZlQ2hpbGQoaykpOmYucmVtb3ZlQ2hpbGQoZC5zdGF0ZU5vZGUpfWVsc2UgaWYoND09PWQudGFnKXtpZihudWxsIT09ZC5jaGlsZCl7Zj1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2c9ITA7ZC5jaGlsZC5yZXR1cm49ZDtkPWQuY2hpbGQ7Y29udGludWV9fWVsc2UgaWYoS2koYSxkLGMpLG51bGwhPT1kLmNoaWxkKXtkLmNoaWxkLnJldHVybj1kO2Q9ZC5jaGlsZDtjb250aW51ZX1pZihkPT09YilicmVhaztmb3IoO251bGw9PT1kLnNpYmxpbmc7KXtpZihudWxsPT09ZC5yZXR1cm58fGQucmV0dXJuPT09YilyZXR1cm47ZD1kLnJldHVybjs0PT09ZC50YWcmJihlPSExKX1kLnNpYmxpbmcucmV0dXJuPWQucmV0dXJuO2Q9ZC5zaWJsaW5nfX1cbmZ1bmN0aW9uIFNpKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6Y2FzZSAyMjpIaSgzLGIpO3JldHVybjtjYXNlIDE6cmV0dXJuO2Nhc2UgNTp2YXIgYz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXt2YXIgZD1iLm1lbW9pemVkUHJvcHMsZT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDthPWIudHlwZTt2YXIgZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09Zil7Y1tOZF09ZDtcImlucHV0XCI9PT1hJiZcInJhZGlvXCI9PT1kLnR5cGUmJm51bGwhPWQubmFtZSYmQmIoYyxkKTtwZChhLGUpO2I9cGQoYSxkKTtmb3IoZT0wO2U8Zi5sZW5ndGg7ZSs9Mil7dmFyIGc9ZltlXSxoPWZbZSsxXTtcInN0eWxlXCI9PT1nP21kKGMsaCk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zz9RYihjLGgpOlwiY2hpbGRyZW5cIj09PWc/UmIoYyxoKTpYYShjLGcsaCxiKX1zd2l0Y2goYSl7Y2FzZSBcImlucHV0XCI6Q2IoYyxkKTticmVhaztcbmNhc2UgXCJ0ZXh0YXJlYVwiOktiKGMsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWQubXVsdGlwbGUsYT1kLnZhbHVlLG51bGwhPWE/SGIoYywhIWQubXVsdGlwbGUsYSwhMSk6YiE9PSEhZC5tdWx0aXBsZSYmKG51bGwhPWQuZGVmYXVsdFZhbHVlP0hiKGMsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTpIYihjLCEhZC5tdWx0aXBsZSxkLm11bHRpcGxlP1tdOlwiXCIsITEpKX19fXJldHVybjtjYXNlIDY6aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHUoMTYyKSk7Yi5zdGF0ZU5vZGUubm9kZVZhbHVlPWIubWVtb2l6ZWRQcm9wcztyZXR1cm47Y2FzZSAzOmI9Yi5zdGF0ZU5vZGU7Yi5oeWRyYXRlJiYoYi5oeWRyYXRlPSExLFZjKGIuY29udGFpbmVySW5mbykpO3JldHVybjtjYXNlIDEyOnJldHVybjtjYXNlIDEzOmM9YjtudWxsPT09Yi5tZW1vaXplZFN0YXRlP1xuZD0hMTooZD0hMCxjPWIuY2hpbGQsVGk9JGYoKSk7aWYobnVsbCE9PWMpYTpmb3IoYT1jOzspe2lmKDU9PT1hLnRhZylmPWEuc3RhdGVOb2RlLGQ/KGY9Zi5zdHlsZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5zZXRQcm9wZXJ0eT9mLnNldFByb3BlcnR5KFwiZGlzcGxheVwiLFwibm9uZVwiLFwiaW1wb3J0YW50XCIpOmYuZGlzcGxheT1cIm5vbmVcIik6KGY9YS5zdGF0ZU5vZGUsZT1hLm1lbW9pemVkUHJvcHMuc3R5bGUsZT12b2lkIDAhPT1lJiZudWxsIT09ZSYmZS5oYXNPd25Qcm9wZXJ0eShcImRpc3BsYXlcIik/ZS5kaXNwbGF5Om51bGwsZi5zdHlsZS5kaXNwbGF5PWxkKFwiZGlzcGxheVwiLGUpKTtlbHNlIGlmKDY9PT1hLnRhZylhLnN0YXRlTm9kZS5ub2RlVmFsdWU9ZD9cIlwiOmEubWVtb2l6ZWRQcm9wcztlbHNlIGlmKDEzPT09YS50YWcmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUmJm51bGw9PT1hLm1lbW9pemVkU3RhdGUuZGVoeWRyYXRlZCl7Zj1hLmNoaWxkLnNpYmxpbmc7Zi5yZXR1cm49YTthPVxuZjtjb250aW51ZX1lbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YylicmVhaztmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fGEucmV0dXJuPT09YylicmVhayBhO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjthPWEuc2libGluZ31VaShiKTtyZXR1cm47Y2FzZSAxOTpVaShiKTtyZXR1cm47Y2FzZSAxNzpyZXR1cm59dGhyb3cgRXJyb3IodSgxNjMpKTt9ZnVuY3Rpb24gVWkoYSl7dmFyIGI9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YS51cGRhdGVRdWV1ZT1udWxsO3ZhciBjPWEuc3RhdGVOb2RlO251bGw9PT1jJiYoYz1hLnN0YXRlTm9kZT1uZXcgQmkpO2IuZm9yRWFjaChmdW5jdGlvbihiKXt2YXIgZD1WaS5iaW5kKG51bGwsYSxiKTtjLmhhcyhiKXx8KGMuYWRkKGIpLGIudGhlbihkLGQpKX0pfX1cbnZhciBXaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcDtmdW5jdGlvbiBYaShhLGIsYyl7Yz13ZyhjLG51bGwpO2MudGFnPTM7Yy5wYXlsb2FkPXtlbGVtZW50Om51bGx9O3ZhciBkPWIudmFsdWU7Yy5jYWxsYmFjaz1mdW5jdGlvbigpe1lpfHwoWWk9ITAsWmk9ZCk7Q2koYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiAkaShhLGIsYyl7Yz13ZyhjLG51bGwpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtDaShhLGIpO3JldHVybiBkKGUpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09YWo/YWo9bmV3IFNldChbdGhpc10pOmFqLmFkZCh0aGlzKSxDaShhLGIpKTt2YXIgYz1iLnN0YWNrO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYi52YWx1ZSx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWM/YzpcIlwifSl9KTtyZXR1cm4gY31cbnZhciBiaj1NYXRoLmNlaWwsY2o9V2EuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixkaj1XYS5SZWFjdEN1cnJlbnRPd25lcixWPTAsZWo9OCxmaj0xNixnaj0zMix0aT0wLGhqPTEsaWo9Mix1aT0zLHZpPTQsamo9NSxXPVYsVD1udWxsLFg9bnVsbCxVPTAsUz10aSxraj1udWxsLGxqPTEwNzM3NDE4MjMsbWo9MTA3Mzc0MTgyMyxuaj1udWxsLHdpPTAsb2o9ITEsVGk9MCxwaj01MDAsWT1udWxsLFlpPSExLFppPW51bGwsYWo9bnVsbCxxaj0hMSxyaj1udWxsLHNqPTkwLHRqPW51bGwsdWo9MCx2aj1udWxsLHdqPTA7ZnVuY3Rpb24gR2coKXtyZXR1cm4oVyYoZmp8Z2opKSE9PVY/MTA3Mzc0MTgyMS0oJGYoKS8xMHwwKTowIT09d2o/d2o6d2o9MTA3Mzc0MTgyMS0oJGYoKS8xMHwwKX1cbmZ1bmN0aW9uIEhnKGEsYixjKXtiPWIubW9kZTtpZigwPT09KGImMikpcmV0dXJuIDEwNzM3NDE4MjM7dmFyIGQ9YWcoKTtpZigwPT09KGImNCkpcmV0dXJuIDk5PT09ZD8xMDczNzQxODIzOjEwNzM3NDE4MjI7aWYoKFcmZmopIT09VilyZXR1cm4gVTtpZihudWxsIT09YylhPWhnKGEsYy50aW1lb3V0TXN8MHx8NUUzLDI1MCk7ZWxzZSBzd2l0Y2goZCl7Y2FzZSA5OTphPTEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA5ODphPWhnKGEsMTUwLDEwMCk7YnJlYWs7Y2FzZSA5NzpjYXNlIDk2OmE9aGcoYSw1RTMsMjUwKTticmVhaztjYXNlIDk1OmE9MjticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHUoMzI2KSk7fW51bGwhPT1UJiZhPT09VSYmLS1hO3JldHVybiBhfVxuZnVuY3Rpb24gSWcoYSxiKXtpZig1MDx1ail0aHJvdyB1aj0wLHZqPW51bGwsRXJyb3IodSgxODUpKTthPXhqKGEsYik7aWYobnVsbCE9PWEpe3ZhciBjPWFnKCk7MTA3Mzc0MTgyMz09PWI/KFcmZWopIT09ViYmKFcmKGZqfGdqKSk9PT1WP3lqKGEpOihaKGEpLFc9PT1WJiZnZygpKTpaKGEpOyhXJjQpPT09Vnx8OTghPT1jJiY5OSE9PWN8fChudWxsPT09dGo/dGo9bmV3IE1hcChbW2EsYl1dKTooYz10ai5nZXQoYSksKHZvaWQgMD09PWN8fGM+YikmJnRqLnNldChhLGIpKSl9fVxuZnVuY3Rpb24geGooYSxiKXthLmV4cGlyYXRpb25UaW1lPGImJihhLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZjLmV4cGlyYXRpb25UaW1lPGImJihjLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBkPWEucmV0dXJuLGU9bnVsbDtpZihudWxsPT09ZCYmMz09PWEudGFnKWU9YS5zdGF0ZU5vZGU7ZWxzZSBmb3IoO251bGwhPT1kOyl7Yz1kLmFsdGVybmF0ZTtkLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGQuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtudWxsIT09YyYmYy5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihjLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7aWYobnVsbD09PWQucmV0dXJuJiYzPT09ZC50YWcpe2U9ZC5zdGF0ZU5vZGU7YnJlYWt9ZD1kLnJldHVybn1udWxsIT09ZSYmKFQ9PT1lJiYoQmcoYiksUz09PXZpJiZ4aShlLFUpKSx5aShlLGIpKTtyZXR1cm4gZX1cbmZ1bmN0aW9uIHpqKGEpe3ZhciBiPWEubGFzdEV4cGlyZWRUaW1lO2lmKDAhPT1iKXJldHVybiBiO2I9YS5maXJzdFBlbmRpbmdUaW1lO2lmKCFBaihhLGIpKXJldHVybiBiO3ZhciBjPWEubGFzdFBpbmdlZFRpbWU7YT1hLm5leHRLbm93blBlbmRpbmdMZXZlbDthPWM+YT9jOmE7cmV0dXJuIDI+PWEmJmIhPT1hPzA6YX1cbmZ1bmN0aW9uIFooYSl7aWYoMCE9PWEubGFzdEV4cGlyZWRUaW1lKWEuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT0xMDczNzQxODIzLGEuY2FsbGJhY2tQcmlvcml0eT05OSxhLmNhbGxiYWNrTm9kZT1lZyh5ai5iaW5kKG51bGwsYSkpO2Vsc2V7dmFyIGI9emooYSksYz1hLmNhbGxiYWNrTm9kZTtpZigwPT09YiludWxsIT09YyYmKGEuY2FsbGJhY2tOb2RlPW51bGwsYS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTAsYS5jYWxsYmFja1ByaW9yaXR5PTkwKTtlbHNle3ZhciBkPUdnKCk7MTA3Mzc0MTgyMz09PWI/ZD05OToxPT09Ynx8Mj09PWI/ZD05NTooZD0xMCooMTA3Mzc0MTgyMS1iKS0xMCooMTA3Mzc0MTgyMS1kKSxkPTA+PWQ/OTk6MjUwPj1kPzk4OjUyNTA+PWQ/OTc6OTUpO2lmKG51bGwhPT1jKXt2YXIgZT1hLmNhbGxiYWNrUHJpb3JpdHk7aWYoYS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPT09YiYmZT49ZClyZXR1cm47YyE9PVRmJiZLZihjKX1hLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9XG5iO2EuY2FsbGJhY2tQcmlvcml0eT1kO2I9MTA3Mzc0MTgyMz09PWI/ZWcoeWouYmluZChudWxsLGEpKTpkZyhkLEJqLmJpbmQobnVsbCxhKSx7dGltZW91dDoxMCooMTA3Mzc0MTgyMS1iKS0kZigpfSk7YS5jYWxsYmFja05vZGU9Yn19fVxuZnVuY3Rpb24gQmooYSxiKXt3aj0wO2lmKGIpcmV0dXJuIGI9R2coKSxDaihhLGIpLFooYSksbnVsbDt2YXIgYz16aihhKTtpZigwIT09Yyl7Yj1hLmNhbGxiYWNrTm9kZTtpZigoVyYoZmp8Z2opKSE9PVYpdGhyb3cgRXJyb3IodSgzMjcpKTtEaigpO2E9PT1UJiZjPT09VXx8RWooYSxjKTtpZihudWxsIT09WCl7dmFyIGQ9VztXfD1majt2YXIgZT1GaigpO2RvIHRyeXtHaigpO2JyZWFrfWNhdGNoKGgpe0hqKGEsaCl9d2hpbGUoMSk7bmcoKTtXPWQ7Y2ouY3VycmVudD1lO2lmKFM9PT1oail0aHJvdyBiPWtqLEVqKGEsYykseGkoYSxjKSxaKGEpLGI7aWYobnVsbD09PVgpc3dpdGNoKGU9YS5maW5pc2hlZFdvcms9YS5jdXJyZW50LmFsdGVybmF0ZSxhLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9YyxkPVMsVD1udWxsLGQpe2Nhc2UgdGk6Y2FzZSBoajp0aHJvdyBFcnJvcih1KDM0NSkpO2Nhc2UgaWo6Q2ooYSwyPGM/MjpjKTticmVhaztjYXNlIHVpOnhpKGEsYyk7ZD1hLmxhc3RTdXNwZW5kZWRUaW1lO1xuYz09PWQmJihhLm5leHRLbm93blBlbmRpbmdMZXZlbD1JaihlKSk7aWYoMTA3Mzc0MTgyMz09PWxqJiYoZT1UaStwai0kZigpLDEwPGUpKXtpZihvail7dmFyIGY9YS5sYXN0UGluZ2VkVGltZTtpZigwPT09Znx8Zj49Yyl7YS5sYXN0UGluZ2VkVGltZT1jO0VqKGEsYyk7YnJlYWt9fWY9emooYSk7aWYoMCE9PWYmJmYhPT1jKWJyZWFrO2lmKDAhPT1kJiZkIT09Yyl7YS5sYXN0UGluZ2VkVGltZT1kO2JyZWFrfWEudGltZW91dEhhbmRsZT1IZChKai5iaW5kKG51bGwsYSksZSk7YnJlYWt9SmooYSk7YnJlYWs7Y2FzZSB2aTp4aShhLGMpO2Q9YS5sYXN0U3VzcGVuZGVkVGltZTtjPT09ZCYmKGEubmV4dEtub3duUGVuZGluZ0xldmVsPUlqKGUpKTtpZihvaiYmKGU9YS5sYXN0UGluZ2VkVGltZSwwPT09ZXx8ZT49Yykpe2EubGFzdFBpbmdlZFRpbWU9YztFaihhLGMpO2JyZWFrfWU9emooYSk7aWYoMCE9PWUmJmUhPT1jKWJyZWFrO2lmKDAhPT1kJiZkIT09Yyl7YS5sYXN0UGluZ2VkVGltZT1cbmQ7YnJlYWt9MTA3Mzc0MTgyMyE9PW1qP2Q9MTAqKDEwNzM3NDE4MjEtbWopLSRmKCk6MTA3Mzc0MTgyMz09PWxqP2Q9MDooZD0xMCooMTA3Mzc0MTgyMS1saiktNUUzLGU9JGYoKSxjPTEwKigxMDczNzQxODIxLWMpLWUsZD1lLWQsMD5kJiYoZD0wKSxkPSgxMjA+ZD8xMjA6NDgwPmQ/NDgwOjEwODA+ZD8xMDgwOjE5MjA+ZD8xOTIwOjNFMz5kPzNFMzo0MzIwPmQ/NDMyMDoxOTYwKmJqKGQvMTk2MCkpLWQsYzxkJiYoZD1jKSk7aWYoMTA8ZCl7YS50aW1lb3V0SGFuZGxlPUhkKEpqLmJpbmQobnVsbCxhKSxkKTticmVha31KaihhKTticmVhaztjYXNlIGpqOmlmKDEwNzM3NDE4MjMhPT1saiYmbnVsbCE9PW5qKXtmPWxqO3ZhciBnPW5qO2Q9Zy5idXN5TWluRHVyYXRpb25Nc3wwOzA+PWQ/ZD0wOihlPWcuYnVzeURlbGF5TXN8MCxmPSRmKCktKDEwKigxMDczNzQxODIxLWYpLShnLnRpbWVvdXRNc3wwfHw1RTMpKSxkPWY8PWU/MDplK2QtZik7aWYoMTA8ZCl7eGkoYSxjKTthLnRpbWVvdXRIYW5kbGU9XG5IZChKai5iaW5kKG51bGwsYSksZCk7YnJlYWt9fUpqKGEpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgzMjkpKTt9WihhKTtpZihhLmNhbGxiYWNrTm9kZT09PWIpcmV0dXJuIEJqLmJpbmQobnVsbCxhKX19cmV0dXJuIG51bGx9XG5mdW5jdGlvbiB5aihhKXt2YXIgYj1hLmxhc3RFeHBpcmVkVGltZTtiPTAhPT1iP2I6MTA3Mzc0MTgyMztpZigoVyYoZmp8Z2opKSE9PVYpdGhyb3cgRXJyb3IodSgzMjcpKTtEaigpO2E9PT1UJiZiPT09VXx8RWooYSxiKTtpZihudWxsIT09WCl7dmFyIGM9VztXfD1majt2YXIgZD1GaigpO2RvIHRyeXtLaigpO2JyZWFrfWNhdGNoKGUpe0hqKGEsZSl9d2hpbGUoMSk7bmcoKTtXPWM7Y2ouY3VycmVudD1kO2lmKFM9PT1oail0aHJvdyBjPWtqLEVqKGEsYikseGkoYSxiKSxaKGEpLGM7aWYobnVsbCE9PVgpdGhyb3cgRXJyb3IodSgyNjEpKTthLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRFeHBpcmF0aW9uVGltZT1iO1Q9bnVsbDtKaihhKTtaKGEpfXJldHVybiBudWxsfWZ1bmN0aW9uIExqKCl7aWYobnVsbCE9PXRqKXt2YXIgYT10ajt0aj1udWxsO2EuZm9yRWFjaChmdW5jdGlvbihhLGMpe0NqKGMsYSk7WihjKX0pO2dnKCl9fVxuZnVuY3Rpb24gTWooYSxiKXt2YXIgYz1XO1d8PTE7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7Vz1jLFc9PT1WJiZnZygpfX1mdW5jdGlvbiBOaihhLGIpe3ZhciBjPVc7VyY9LTI7V3w9ZWo7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7Vz1jLFc9PT1WJiZnZygpfX1cbmZ1bmN0aW9uIEVqKGEsYil7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9MDt2YXIgYz1hLnRpbWVvdXRIYW5kbGU7LTEhPT1jJiYoYS50aW1lb3V0SGFuZGxlPS0xLElkKGMpKTtpZihudWxsIT09WClmb3IoYz1YLnJldHVybjtudWxsIT09Yzspe3ZhciBkPWM7c3dpdGNoKGQudGFnKXtjYXNlIDE6ZD1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWQmJnZvaWQgMCE9PWQmJkRmKCk7YnJlYWs7Y2FzZSAzOmVoKCk7SChLKTtIKEopO2JyZWFrO2Nhc2UgNTpnaChkKTticmVhaztjYXNlIDQ6ZWgoKTticmVhaztjYXNlIDEzOkgoTSk7YnJlYWs7Y2FzZSAxOTpIKE0pO2JyZWFrO2Nhc2UgMTA6b2coZCl9Yz1jLnJldHVybn1UPWE7WD1TZyhhLmN1cnJlbnQsbnVsbCk7VT1iO1M9dGk7a2o9bnVsbDttaj1saj0xMDczNzQxODIzO25qPW51bGw7d2k9MDtvaj0hMX1cbmZ1bmN0aW9uIEhqKGEsYil7ZG97dHJ5e25nKCk7amguY3VycmVudD1zaDtpZihtaClmb3IodmFyIGM9Ti5tZW1vaXplZFN0YXRlO251bGwhPT1jOyl7dmFyIGQ9Yy5xdWV1ZTtudWxsIT09ZCYmKGQucGVuZGluZz1udWxsKTtjPWMubmV4dH1saD0wO1A9Tz1OPW51bGw7bWg9ITE7aWYobnVsbD09PVh8fG51bGw9PT1YLnJldHVybilyZXR1cm4gUz1oaixraj1iLFg9bnVsbDthOnt2YXIgZT1hLGY9WC5yZXR1cm4sZz1YLGg9YjtiPVU7Zy5lZmZlY3RUYWd8PTIwNDg7Zy5maXJzdEVmZmVjdD1nLmxhc3RFZmZlY3Q9bnVsbDtpZihudWxsIT09aCYmXCJvYmplY3RcIj09PXR5cGVvZiBoJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC50aGVuKXt2YXIgaz1oO2lmKDA9PT0oZy5tb2RlJjIpKXt2YXIgbD1nLmFsdGVybmF0ZTtsPyhnLnVwZGF0ZVF1ZXVlPWwudXBkYXRlUXVldWUsZy5tZW1vaXplZFN0YXRlPWwubWVtb2l6ZWRTdGF0ZSxnLmV4cGlyYXRpb25UaW1lPWwuZXhwaXJhdGlvblRpbWUpOihnLnVwZGF0ZVF1ZXVlPVxubnVsbCxnLm1lbW9pemVkU3RhdGU9bnVsbCl9dmFyIG09MCE9PShNLmN1cnJlbnQmMSkscD1mO2Rve3ZhciB4O2lmKHg9MTM9PT1wLnRhZyl7dmFyIHo9cC5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT16KXg9bnVsbCE9PXouZGVoeWRyYXRlZD8hMDohMTtlbHNle3ZhciBjYT1wLm1lbW9pemVkUHJvcHM7eD12b2lkIDA9PT1jYS5mYWxsYmFjaz8hMTohMCE9PWNhLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrPyEwOm0/ITE6ITB9fWlmKHgpe3ZhciBEPXAudXBkYXRlUXVldWU7aWYobnVsbD09PUQpe3ZhciB0PW5ldyBTZXQ7dC5hZGQoayk7cC51cGRhdGVRdWV1ZT10fWVsc2UgRC5hZGQoayk7aWYoMD09PShwLm1vZGUmMikpe3AuZWZmZWN0VGFnfD02NDtnLmVmZmVjdFRhZyY9LTI5ODE7aWYoMT09PWcudGFnKWlmKG51bGw9PT1nLmFsdGVybmF0ZSlnLnRhZz0xNztlbHNle3ZhciB5PXdnKDEwNzM3NDE4MjMsbnVsbCk7eS50YWc9Mjt4ZyhnLHkpfWcuZXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMztcbmJyZWFrIGF9aD12b2lkIDA7Zz1iO3ZhciBBPWUucGluZ0NhY2hlO251bGw9PT1BPyhBPWUucGluZ0NhY2hlPW5ldyBXaSxoPW5ldyBTZXQsQS5zZXQoayxoKSk6KGg9QS5nZXQoayksdm9pZCAwPT09aCYmKGg9bmV3IFNldCxBLnNldChrLGgpKSk7aWYoIWguaGFzKGcpKXtoLmFkZChnKTt2YXIgcT1Pai5iaW5kKG51bGwsZSxrLGcpO2sudGhlbihxLHEpfXAuZWZmZWN0VGFnfD00MDk2O3AuZXhwaXJhdGlvblRpbWU9YjticmVhayBhfXA9cC5yZXR1cm59d2hpbGUobnVsbCE9PXApO2g9RXJyb3IoKHBiKGcudHlwZSl8fFwiQSBSZWFjdCBjb21wb25lbnRcIikrXCIgc3VzcGVuZGVkIHdoaWxlIHJlbmRlcmluZywgYnV0IG5vIGZhbGxiYWNrIFVJIHdhcyBzcGVjaWZpZWQuXFxuXFxuQWRkIGEgPFN1c3BlbnNlIGZhbGxiYWNrPS4uLj4gY29tcG9uZW50IGhpZ2hlciBpbiB0aGUgdHJlZSB0byBwcm92aWRlIGEgbG9hZGluZyBpbmRpY2F0b3Igb3IgcGxhY2Vob2xkZXIgdG8gZGlzcGxheS5cIitxYihnKSl9UyE9PVxuamomJihTPWlqKTtoPUFpKGgsZyk7cD1mO2Rve3N3aXRjaChwLnRhZyl7Y2FzZSAzOms9aDtwLmVmZmVjdFRhZ3w9NDA5NjtwLmV4cGlyYXRpb25UaW1lPWI7dmFyIEI9WGkocCxrLGIpO3lnKHAsQik7YnJlYWsgYTtjYXNlIDE6az1oO3ZhciB3PXAudHlwZSx1Yj1wLnN0YXRlTm9kZTtpZigwPT09KHAuZWZmZWN0VGFnJjY0KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiB3LmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PXViJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgdWIuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09YWp8fCFhai5oYXModWIpKSkpe3AuZWZmZWN0VGFnfD00MDk2O3AuZXhwaXJhdGlvblRpbWU9Yjt2YXIgdmI9JGkocCxrLGIpO3lnKHAsdmIpO2JyZWFrIGF9fXA9cC5yZXR1cm59d2hpbGUobnVsbCE9PXApfVg9UGooWCl9Y2F0Y2goWGMpe2I9WGM7Y29udGludWV9YnJlYWt9d2hpbGUoMSl9XG5mdW5jdGlvbiBGaigpe3ZhciBhPWNqLmN1cnJlbnQ7Y2ouY3VycmVudD1zaDtyZXR1cm4gbnVsbD09PWE/c2g6YX1mdW5jdGlvbiBBZyhhLGIpe2E8bGomJjI8YSYmKGxqPWEpO251bGwhPT1iJiZhPG1qJiYyPGEmJihtaj1hLG5qPWIpfWZ1bmN0aW9uIEJnKGEpe2E+d2kmJih3aT1hKX1mdW5jdGlvbiBLaigpe2Zvcig7bnVsbCE9PVg7KVg9UWooWCl9ZnVuY3Rpb24gR2ooKXtmb3IoO251bGwhPT1YJiYhVWYoKTspWD1RaihYKX1mdW5jdGlvbiBRaihhKXt2YXIgYj1SaihhLmFsdGVybmF0ZSxhLFUpO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09YiYmKGI9UGooYSkpO2RqLmN1cnJlbnQ9bnVsbDtyZXR1cm4gYn1cbmZ1bmN0aW9uIFBqKGEpe1g9YTtkb3t2YXIgYj1YLmFsdGVybmF0ZTthPVgucmV0dXJuO2lmKDA9PT0oWC5lZmZlY3RUYWcmMjA0OCkpe2I9c2koYixYLFUpO2lmKDE9PT1VfHwxIT09WC5jaGlsZEV4cGlyYXRpb25UaW1lKXtmb3IodmFyIGM9MCxkPVguY2hpbGQ7bnVsbCE9PWQ7KXt2YXIgZT1kLmV4cGlyYXRpb25UaW1lLGY9ZC5jaGlsZEV4cGlyYXRpb25UaW1lO2U+YyYmKGM9ZSk7Zj5jJiYoYz1mKTtkPWQuc2libGluZ31YLmNoaWxkRXhwaXJhdGlvblRpbWU9Y31pZihudWxsIT09YilyZXR1cm4gYjtudWxsIT09YSYmMD09PShhLmVmZmVjdFRhZyYyMDQ4KSYmKG51bGw9PT1hLmZpcnN0RWZmZWN0JiYoYS5maXJzdEVmZmVjdD1YLmZpcnN0RWZmZWN0KSxudWxsIT09WC5sYXN0RWZmZWN0JiYobnVsbCE9PWEubGFzdEVmZmVjdCYmKGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PVguZmlyc3RFZmZlY3QpLGEubGFzdEVmZmVjdD1YLmxhc3RFZmZlY3QpLDE8WC5lZmZlY3RUYWcmJihudWxsIT09XG5hLmxhc3RFZmZlY3Q/YS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9WDphLmZpcnN0RWZmZWN0PVgsYS5sYXN0RWZmZWN0PVgpKX1lbHNle2I9emkoWCk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZWZmZWN0VGFnJj0yMDQ3LGI7bnVsbCE9PWEmJihhLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1udWxsLGEuZWZmZWN0VGFnfD0yMDQ4KX1iPVguc2libGluZztpZihudWxsIT09YilyZXR1cm4gYjtYPWF9d2hpbGUobnVsbCE9PVgpO1M9PT10aSYmKFM9amopO3JldHVybiBudWxsfWZ1bmN0aW9uIElqKGEpe3ZhciBiPWEuZXhwaXJhdGlvblRpbWU7YT1hLmNoaWxkRXhwaXJhdGlvblRpbWU7cmV0dXJuIGI+YT9iOmF9ZnVuY3Rpb24gSmooYSl7dmFyIGI9YWcoKTtjZyg5OSxTai5iaW5kKG51bGwsYSxiKSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBTaihhLGIpe2RvIERqKCk7d2hpbGUobnVsbCE9PXJqKTtpZigoVyYoZmp8Z2opKSE9PVYpdGhyb3cgRXJyb3IodSgzMjcpKTt2YXIgYz1hLmZpbmlzaGVkV29yayxkPWEuZmluaXNoZWRFeHBpcmF0aW9uVGltZTtpZihudWxsPT09YylyZXR1cm4gbnVsbDthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wO2lmKGM9PT1hLmN1cnJlbnQpdGhyb3cgRXJyb3IodSgxNzcpKTthLmNhbGxiYWNrTm9kZT1udWxsO2EuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT0wO2EuY2FsbGJhY2tQcmlvcml0eT05MDthLm5leHRLbm93blBlbmRpbmdMZXZlbD0wO3ZhciBlPUlqKGMpO2EuZmlyc3RQZW5kaW5nVGltZT1lO2Q8PWEubGFzdFN1c3BlbmRlZFRpbWU/YS5maXJzdFN1c3BlbmRlZFRpbWU9YS5sYXN0U3VzcGVuZGVkVGltZT1hLm5leHRLbm93blBlbmRpbmdMZXZlbD0wOmQ8PWEuZmlyc3RTdXNwZW5kZWRUaW1lJiYoYS5maXJzdFN1c3BlbmRlZFRpbWU9XG5kLTEpO2Q8PWEubGFzdFBpbmdlZFRpbWUmJihhLmxhc3RQaW5nZWRUaW1lPTApO2Q8PWEubGFzdEV4cGlyZWRUaW1lJiYoYS5sYXN0RXhwaXJlZFRpbWU9MCk7YT09PVQmJihYPVQ9bnVsbCxVPTApOzE8Yy5lZmZlY3RUYWc/bnVsbCE9PWMubGFzdEVmZmVjdD8oYy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxlPWMuZmlyc3RFZmZlY3QpOmU9YzplPWMuZmlyc3RFZmZlY3Q7aWYobnVsbCE9PWUpe3ZhciBmPVc7V3w9Z2o7ZGouY3VycmVudD1udWxsO0RkPWZkO3ZhciBnPXhkKCk7aWYoeWQoZykpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGcpdmFyIGg9e3N0YXJ0Omcuc2VsZWN0aW9uU3RhcnQsZW5kOmcuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e2g9KGg9Zy5vd25lckRvY3VtZW50KSYmaC5kZWZhdWx0Vmlld3x8d2luZG93O3ZhciBrPWguZ2V0U2VsZWN0aW9uJiZoLmdldFNlbGVjdGlvbigpO2lmKGsmJjAhPT1rLnJhbmdlQ291bnQpe2g9ay5hbmNob3JOb2RlO3ZhciBsPWsuYW5jaG9yT2Zmc2V0LFxubT1rLmZvY3VzTm9kZTtrPWsuZm9jdXNPZmZzZXQ7dHJ5e2gubm9kZVR5cGUsbS5ub2RlVHlwZX1jYXRjaCh3Yil7aD1udWxsO2JyZWFrIGF9dmFyIHA9MCx4PS0xLHo9LTEsY2E9MCxEPTAsdD1nLHk9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciBBOzspe3QhPT1ofHwwIT09bCYmMyE9PXQubm9kZVR5cGV8fCh4PXArbCk7dCE9PW18fDAhPT1rJiYzIT09dC5ub2RlVHlwZXx8KHo9cCtrKTszPT09dC5ub2RlVHlwZSYmKHArPXQubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PShBPXQuZmlyc3RDaGlsZCkpYnJlYWs7eT10O3Q9QX1mb3IoOzspe2lmKHQ9PT1nKWJyZWFrIGI7eT09PWgmJisrY2E9PT1sJiYoeD1wKTt5PT09bSYmKytEPT09ayYmKHo9cCk7aWYobnVsbCE9PShBPXQubmV4dFNpYmxpbmcpKWJyZWFrO3Q9eTt5PXQucGFyZW50Tm9kZX10PUF9aD0tMT09PXh8fC0xPT09ej9udWxsOntzdGFydDp4LGVuZDp6fX1lbHNlIGg9bnVsbH1oPWh8fHtzdGFydDowLGVuZDowfX1lbHNlIGg9XG5udWxsO0VkPXthY3RpdmVFbGVtZW50RGV0YWNoZWQ6bnVsbCxmb2N1c2VkRWxlbTpnLHNlbGVjdGlvblJhbmdlOmh9O2ZkPSExO1k9ZTtkbyB0cnl7VGooKX1jYXRjaCh3Yil7aWYobnVsbD09PVkpdGhyb3cgRXJyb3IodSgzMzApKTtFaShZLHdiKTtZPVkubmV4dEVmZmVjdH13aGlsZShudWxsIT09WSk7WT1lO2RvIHRyeXtmb3IoZz1hLGg9YjtudWxsIT09WTspe3ZhciBxPVkuZWZmZWN0VGFnO3EmMTYmJlJiKFkuc3RhdGVOb2RlLFwiXCIpO2lmKHEmMTI4KXt2YXIgQj1ZLmFsdGVybmF0ZTtpZihudWxsIT09Qil7dmFyIHc9Qi5yZWY7bnVsbCE9PXcmJihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdz93KG51bGwpOncuY3VycmVudD1udWxsKX19c3dpdGNoKHEmMTAzOCl7Y2FzZSAyOlBpKFkpO1kuZWZmZWN0VGFnJj0tMzticmVhaztjYXNlIDY6UGkoWSk7WS5lZmZlY3RUYWcmPS0zO1NpKFkuYWx0ZXJuYXRlLFkpO2JyZWFrO2Nhc2UgMTAyNDpZLmVmZmVjdFRhZyY9LTEwMjU7YnJlYWs7Y2FzZSAxMDI4OlkuZWZmZWN0VGFnJj1cbi0xMDI1O1NpKFkuYWx0ZXJuYXRlLFkpO2JyZWFrO2Nhc2UgNDpTaShZLmFsdGVybmF0ZSxZKTticmVhaztjYXNlIDg6bD1ZLE1pKGcsbCxoKSxOaShsKX1ZPVkubmV4dEVmZmVjdH19Y2F0Y2god2Ipe2lmKG51bGw9PT1ZKXRocm93IEVycm9yKHUoMzMwKSk7RWkoWSx3Yik7WT1ZLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVkpO3c9RWQ7Qj14ZCgpO3E9dy5mb2N1c2VkRWxlbTtoPXcuc2VsZWN0aW9uUmFuZ2U7aWYoQiE9PXEmJnEmJnEub3duZXJEb2N1bWVudCYmd2QocS5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxxKSl7bnVsbCE9PWgmJnlkKHEpJiYoQj1oLnN0YXJ0LHc9aC5lbmQsdm9pZCAwPT09dyYmKHc9QiksXCJzZWxlY3Rpb25TdGFydFwiaW4gcT8ocS5zZWxlY3Rpb25TdGFydD1CLHEuc2VsZWN0aW9uRW5kPU1hdGgubWluKHcscS52YWx1ZS5sZW5ndGgpKToodz0oQj1xLm93bmVyRG9jdW1lbnR8fGRvY3VtZW50KSYmQi5kZWZhdWx0Vmlld3x8d2luZG93LHcuZ2V0U2VsZWN0aW9uJiZcbih3PXcuZ2V0U2VsZWN0aW9uKCksbD1xLnRleHRDb250ZW50Lmxlbmd0aCxnPU1hdGgubWluKGguc3RhcnQsbCksaD12b2lkIDA9PT1oLmVuZD9nOk1hdGgubWluKGguZW5kLGwpLCF3LmV4dGVuZCYmZz5oJiYobD1oLGg9ZyxnPWwpLGw9dmQocSxnKSxtPXZkKHEsaCksbCYmbSYmKDEhPT13LnJhbmdlQ291bnR8fHcuYW5jaG9yTm9kZSE9PWwubm9kZXx8dy5hbmNob3JPZmZzZXQhPT1sLm9mZnNldHx8dy5mb2N1c05vZGUhPT1tLm5vZGV8fHcuZm9jdXNPZmZzZXQhPT1tLm9mZnNldCkmJihCPUIuY3JlYXRlUmFuZ2UoKSxCLnNldFN0YXJ0KGwubm9kZSxsLm9mZnNldCksdy5yZW1vdmVBbGxSYW5nZXMoKSxnPmg/KHcuYWRkUmFuZ2UoQiksdy5leHRlbmQobS5ub2RlLG0ub2Zmc2V0KSk6KEIuc2V0RW5kKG0ubm9kZSxtLm9mZnNldCksdy5hZGRSYW5nZShCKSkpKSkpO0I9W107Zm9yKHc9cTt3PXcucGFyZW50Tm9kZTspMT09PXcubm9kZVR5cGUmJkIucHVzaCh7ZWxlbWVudDp3LGxlZnQ6dy5zY3JvbGxMZWZ0LFxudG9wOncuc2Nyb2xsVG9wfSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIHEuZm9jdXMmJnEuZm9jdXMoKTtmb3IocT0wO3E8Qi5sZW5ndGg7cSsrKXc9QltxXSx3LmVsZW1lbnQuc2Nyb2xsTGVmdD13LmxlZnQsdy5lbGVtZW50LnNjcm9sbFRvcD13LnRvcH1mZD0hIURkO0VkPURkPW51bGw7YS5jdXJyZW50PWM7WT1lO2RvIHRyeXtmb3IocT1hO251bGwhPT1ZOyl7dmFyIHViPVkuZWZmZWN0VGFnO3ViJjM2JiZKaShxLFkuYWx0ZXJuYXRlLFkpO2lmKHViJjEyOCl7Qj12b2lkIDA7dmFyIHZiPVkucmVmO2lmKG51bGwhPT12Yil7dmFyIFhjPVkuc3RhdGVOb2RlO3N3aXRjaChZLnRhZyl7Y2FzZSA1OkI9WGM7YnJlYWs7ZGVmYXVsdDpCPVhjfVwiZnVuY3Rpb25cIj09PXR5cGVvZiB2Yj92YihCKTp2Yi5jdXJyZW50PUJ9fVk9WS5uZXh0RWZmZWN0fX1jYXRjaCh3Yil7aWYobnVsbD09PVkpdGhyb3cgRXJyb3IodSgzMzApKTtFaShZLHdiKTtZPVkubmV4dEVmZmVjdH13aGlsZShudWxsIT09WSk7WT1cbm51bGw7VmYoKTtXPWZ9ZWxzZSBhLmN1cnJlbnQ9YztpZihxailxaj0hMSxyaj1hLHNqPWI7ZWxzZSBmb3IoWT1lO251bGwhPT1ZOyliPVkubmV4dEVmZmVjdCxZLm5leHRFZmZlY3Q9bnVsbCxZPWI7Yj1hLmZpcnN0UGVuZGluZ1RpbWU7MD09PWImJihhaj1udWxsKTsxMDczNzQxODIzPT09Yj9hPT09dmo/dWorKzoodWo9MCx2aj1hKTp1aj0wO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBVaiYmVWooYy5zdGF0ZU5vZGUsZCk7WihhKTtpZihZaSl0aHJvdyBZaT0hMSxhPVppLFppPW51bGwsYTtpZigoVyZlaikhPT1WKXJldHVybiBudWxsO2dnKCk7cmV0dXJuIG51bGx9ZnVuY3Rpb24gVGooKXtmb3IoO251bGwhPT1ZOyl7dmFyIGE9WS5lZmZlY3RUYWc7MCE9PShhJjI1NikmJkdpKFkuYWx0ZXJuYXRlLFkpOzA9PT0oYSY1MTIpfHxxanx8KHFqPSEwLGRnKDk3LGZ1bmN0aW9uKCl7RGooKTtyZXR1cm4gbnVsbH0pKTtZPVkubmV4dEVmZmVjdH19XG5mdW5jdGlvbiBEaigpe2lmKDkwIT09c2ope3ZhciBhPTk3PHNqPzk3OnNqO3NqPTkwO3JldHVybiBjZyhhLFZqKX19ZnVuY3Rpb24gVmooKXtpZihudWxsPT09cmopcmV0dXJuITE7dmFyIGE9cmo7cmo9bnVsbDtpZigoVyYoZmp8Z2opKSE9PVYpdGhyb3cgRXJyb3IodSgzMzEpKTt2YXIgYj1XO1d8PWdqO2ZvcihhPWEuY3VycmVudC5maXJzdEVmZmVjdDtudWxsIT09YTspe3RyeXt2YXIgYz1hO2lmKDAhPT0oYy5lZmZlY3RUYWcmNTEyKSlzd2l0Y2goYy50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpIaSg1LGMpLElpKDUsYyl9fWNhdGNoKGQpe2lmKG51bGw9PT1hKXRocm93IEVycm9yKHUoMzMwKSk7RWkoYSxkKX1jPWEubmV4dEVmZmVjdDthLm5leHRFZmZlY3Q9bnVsbDthPWN9Vz1iO2dnKCk7cmV0dXJuITB9XG5mdW5jdGlvbiBXaihhLGIsYyl7Yj1BaShjLGIpO2I9WGkoYSxiLDEwNzM3NDE4MjMpO3hnKGEsYik7YT14aihhLDEwNzM3NDE4MjMpO251bGwhPT1hJiZaKGEpfWZ1bmN0aW9uIEVpKGEsYil7aWYoMz09PWEudGFnKVdqKGEsYSxiKTtlbHNlIGZvcih2YXIgYz1hLnJldHVybjtudWxsIT09Yzspe2lmKDM9PT1jLnRhZyl7V2ooYyxhLGIpO2JyZWFrfWVsc2UgaWYoMT09PWMudGFnKXt2YXIgZD1jLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09YWp8fCFhai5oYXMoZCkpKXthPUFpKGIsYSk7YT0kaShjLGEsMTA3Mzc0MTgyMyk7eGcoYyxhKTtjPXhqKGMsMTA3Mzc0MTgyMyk7bnVsbCE9PWMmJlooYyk7YnJlYWt9fWM9Yy5yZXR1cm59fVxuZnVuY3Rpb24gT2ooYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO251bGwhPT1kJiZkLmRlbGV0ZShiKTtUPT09YSYmVT09PWM/Uz09PXZpfHxTPT09dWkmJjEwNzM3NDE4MjM9PT1saiYmJGYoKS1UaTxwaj9FaihhLFUpOm9qPSEwOkFqKGEsYykmJihiPWEubGFzdFBpbmdlZFRpbWUsMCE9PWImJmI8Y3x8KGEubGFzdFBpbmdlZFRpbWU9YyxaKGEpKSl9ZnVuY3Rpb24gVmkoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtudWxsIT09YyYmYy5kZWxldGUoYik7Yj0wOzA9PT1iJiYoYj1HZygpLGI9SGcoYixhLG51bGwpKTthPXhqKGEsYik7bnVsbCE9PWEmJlooYSl9dmFyIFJqO1xuUmo9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWIuZXhwaXJhdGlvblRpbWU7aWYobnVsbCE9PWEpe3ZhciBlPWIucGVuZGluZ1Byb3BzO2lmKGEubWVtb2l6ZWRQcm9wcyE9PWV8fEsuY3VycmVudClyZz0hMDtlbHNle2lmKGQ8Yyl7cmc9ITE7c3dpdGNoKGIudGFnKXtjYXNlIDM6aGkoYik7WGgoKTticmVhaztjYXNlIDU6ZmgoYik7aWYoYi5tb2RlJjQmJjEhPT1jJiZlLmhpZGRlbilyZXR1cm4gYi5leHBpcmF0aW9uVGltZT1iLmNoaWxkRXhwaXJhdGlvblRpbWU9MSxudWxsO2JyZWFrO2Nhc2UgMTpMKGIudHlwZSkmJkdmKGIpO2JyZWFrO2Nhc2UgNDpkaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTA6ZD1iLm1lbW9pemVkUHJvcHMudmFsdWU7ZT1iLnR5cGUuX2NvbnRleHQ7SShqZyxlLl9jdXJyZW50VmFsdWUpO2UuX2N1cnJlbnRWYWx1ZT1kO2JyZWFrO2Nhc2UgMTM6aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSl7ZD1iLmNoaWxkLmNoaWxkRXhwaXJhdGlvblRpbWU7XG5pZigwIT09ZCYmZD49YylyZXR1cm4gamkoYSxiLGMpO0koTSxNLmN1cnJlbnQmMSk7Yj0kaChhLGIsYyk7cmV0dXJuIG51bGwhPT1iP2Iuc2libGluZzpudWxsfUkoTSxNLmN1cnJlbnQmMSk7YnJlYWs7Y2FzZSAxOTpkPWIuY2hpbGRFeHBpcmF0aW9uVGltZT49YztpZigwIT09KGEuZWZmZWN0VGFnJjY0KSl7aWYoZClyZXR1cm4gbWkoYSxiLGMpO2IuZWZmZWN0VGFnfD02NH1lPWIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGUucmVuZGVyaW5nPW51bGwsZS50YWlsPW51bGwpO0koTSxNLmN1cnJlbnQpO2lmKCFkKXJldHVybiBudWxsfXJldHVybiAkaChhLGIsYyl9cmc9ITF9fWVsc2Ugcmc9ITE7Yi5leHBpcmF0aW9uVGltZT0wO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmQ9Yi50eXBlO251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKTthPWIucGVuZGluZ1Byb3BzO2U9Q2YoYixKLmN1cnJlbnQpO3FnKGIsYyk7ZT1vaChudWxsLFxuYixkLGEsZSxjKTtiLmVmZmVjdFRhZ3w9MTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGUmJm51bGwhPT1lJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5yZW5kZXImJnZvaWQgMD09PWUuJCR0eXBlb2Ype2IudGFnPTE7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2lmKEwoZCkpe3ZhciBmPSEwO0dmKGIpfWVsc2UgZj0hMTtiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsO3VnKGIpO3ZhciBnPWQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiZGZyhiLGQsZyxhKTtlLnVwZGF0ZXI9Smc7Yi5zdGF0ZU5vZGU9ZTtlLl9yZWFjdEludGVybmFsRmliZXI9YjtOZyhiLGQsYSxjKTtiPWdpKG51bGwsYixkLCEwLGYsYyl9ZWxzZSBiLnRhZz0wLFIobnVsbCxiLGUsYyksYj1iLmNoaWxkO3JldHVybiBiO2Nhc2UgMTY6YTp7ZT1iLmVsZW1lbnRUeXBlO251bGwhPT1hJiYoYS5hbHRlcm5hdGU9XG5udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7b2IoZSk7aWYoMSE9PWUuX3N0YXR1cyl0aHJvdyBlLl9yZXN1bHQ7ZT1lLl9yZXN1bHQ7Yi50eXBlPWU7Zj1iLnRhZz1YaihlKTthPWlnKGUsYSk7c3dpdGNoKGYpe2Nhc2UgMDpiPWRpKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDE6Yj1maShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxMTpiPVpoKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDE0OmI9YWkobnVsbCxiLGUsaWcoZS50eXBlLGEpLGQsYyk7YnJlYWsgYX10aHJvdyBFcnJvcih1KDMwNixlLFwiXCIpKTt9cmV0dXJuIGI7Y2FzZSAwOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTppZyhkLGUpLGRpKGEsYixkLGUsYyk7Y2FzZSAxOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTppZyhkLGUpLGZpKGEsYixkLGUsYyk7XG5jYXNlIDM6aGkoYik7ZD1iLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1hfHxudWxsPT09ZCl0aHJvdyBFcnJvcih1KDI4MikpO2Q9Yi5wZW5kaW5nUHJvcHM7ZT1iLm1lbW9pemVkU3RhdGU7ZT1udWxsIT09ZT9lLmVsZW1lbnQ6bnVsbDt2ZyhhLGIpO3pnKGIsZCxudWxsLGMpO2Q9Yi5tZW1vaXplZFN0YXRlLmVsZW1lbnQ7aWYoZD09PWUpWGgoKSxiPSRoKGEsYixjKTtlbHNle2lmKGU9Yi5zdGF0ZU5vZGUuaHlkcmF0ZSlQaD1KZChiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLmZpcnN0Q2hpbGQpLE9oPWIsZT1RaD0hMDtpZihlKWZvcihjPVlnKGIsbnVsbCxkLGMpLGIuY2hpbGQ9YztjOyljLmVmZmVjdFRhZz1jLmVmZmVjdFRhZyYtM3wxMDI0LGM9Yy5zaWJsaW5nO2Vsc2UgUihhLGIsZCxjKSxYaCgpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDU6cmV0dXJuIGZoKGIpLG51bGw9PT1hJiZVaChiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOlxubnVsbCxnPWUuY2hpbGRyZW4sR2QoZCxlKT9nPW51bGw6bnVsbCE9PWYmJkdkKGQsZikmJihiLmVmZmVjdFRhZ3w9MTYpLGVpKGEsYiksYi5tb2RlJjQmJjEhPT1jJiZlLmhpZGRlbj8oYi5leHBpcmF0aW9uVGltZT1iLmNoaWxkRXhwaXJhdGlvblRpbWU9MSxiPW51bGwpOihSKGEsYixnLGMpLGI9Yi5jaGlsZCksYjtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZVaChiKSxudWxsO2Nhc2UgMTM6cmV0dXJuIGppKGEsYixjKTtjYXNlIDQ6cmV0dXJuIGRoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPVhnKGIsbnVsbCxkLGMpOlIoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDExOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTppZyhkLGUpLFpoKGEsYixkLGUsYyk7Y2FzZSA3OnJldHVybiBSKGEsYixiLnBlbmRpbmdQcm9wcyxjKSxiLmNoaWxkO2Nhc2UgODpyZXR1cm4gUihhLFxuYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIFIoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMDphOntkPWIudHlwZS5fY29udGV4dDtlPWIucGVuZGluZ1Byb3BzO2c9Yi5tZW1vaXplZFByb3BzO2Y9ZS52YWx1ZTt2YXIgaD1iLnR5cGUuX2NvbnRleHQ7SShqZyxoLl9jdXJyZW50VmFsdWUpO2guX2N1cnJlbnRWYWx1ZT1mO2lmKG51bGwhPT1nKWlmKGg9Zy52YWx1ZSxmPSRlKGgsZik/MDooXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzP2QuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzKGgsZik6MTA3Mzc0MTgyMyl8MCwwPT09Zil7aWYoZy5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJiFLLmN1cnJlbnQpe2I9JGgoYSxiLGMpO2JyZWFrIGF9fWVsc2UgZm9yKGg9Yi5jaGlsZCxudWxsIT09aCYmKGgucmV0dXJuPWIpO251bGwhPT1oOyl7dmFyIGs9aC5kZXBlbmRlbmNpZXM7aWYobnVsbCE9PVxuayl7Zz1oLmNoaWxkO2Zvcih2YXIgbD1rLmZpcnN0Q29udGV4dDtudWxsIT09bDspe2lmKGwuY29udGV4dD09PWQmJjAhPT0obC5vYnNlcnZlZEJpdHMmZikpezE9PT1oLnRhZyYmKGw9d2coYyxudWxsKSxsLnRhZz0yLHhnKGgsbCkpO2guZXhwaXJhdGlvblRpbWU8YyYmKGguZXhwaXJhdGlvblRpbWU9Yyk7bD1oLmFsdGVybmF0ZTtudWxsIT09bCYmbC5leHBpcmF0aW9uVGltZTxjJiYobC5leHBpcmF0aW9uVGltZT1jKTtwZyhoLnJldHVybixjKTtrLmV4cGlyYXRpb25UaW1lPGMmJihrLmV4cGlyYXRpb25UaW1lPWMpO2JyZWFrfWw9bC5uZXh0fX1lbHNlIGc9MTA9PT1oLnRhZz9oLnR5cGU9PT1iLnR5cGU/bnVsbDpoLmNoaWxkOmguY2hpbGQ7aWYobnVsbCE9PWcpZy5yZXR1cm49aDtlbHNlIGZvcihnPWg7bnVsbCE9PWc7KXtpZihnPT09Yil7Zz1udWxsO2JyZWFrfWg9Zy5zaWJsaW5nO2lmKG51bGwhPT1oKXtoLnJldHVybj1nLnJldHVybjtnPWg7YnJlYWt9Zz1nLnJldHVybn1oPVxuZ31SKGEsYixlLmNoaWxkcmVuLGMpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGY9Yi5wZW5kaW5nUHJvcHMsZD1mLmNoaWxkcmVuLHFnKGIsYyksZT1zZyhlLGYudW5zdGFibGVfb2JzZXJ2ZWRCaXRzKSxkPWQoZSksYi5lZmZlY3RUYWd8PTEsUihhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTQ6cmV0dXJuIGU9Yi50eXBlLGY9aWcoZSxiLnBlbmRpbmdQcm9wcyksZj1pZyhlLnR5cGUsZiksYWkoYSxiLGUsZixkLGMpO2Nhc2UgMTU6cmV0dXJuIGNpKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsZCxjKTtjYXNlIDE3OnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTppZyhkLGUpLG51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKSxiLnRhZz0xLEwoZCk/KGE9ITAsR2YoYikpOmE9ITEscWcoYixjKSxMZyhiLGQsZSksTmcoYixkLGUsYyksZ2kobnVsbCxcbmIsZCwhMCxhLGMpO2Nhc2UgMTk6cmV0dXJuIG1pKGEsYixjKX10aHJvdyBFcnJvcih1KDE1NixiLnRhZykpO307dmFyIFVqPW51bGwsTGk9bnVsbDtmdW5jdGlvbiBZaihhKXtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXylyZXR1cm4hMTt2YXIgYj1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoYi5pc0Rpc2FibGVkfHwhYi5zdXBwb3J0c0ZpYmVyKXJldHVybiEwO3RyeXt2YXIgYz1iLmluamVjdChhKTtVaj1mdW5jdGlvbihhKXt0cnl7Yi5vbkNvbW1pdEZpYmVyUm9vdChjLGEsdm9pZCAwLDY0PT09KGEuY3VycmVudC5lZmZlY3RUYWcmNjQpKX1jYXRjaChlKXt9fTtMaT1mdW5jdGlvbihhKXt0cnl7Yi5vbkNvbW1pdEZpYmVyVW5tb3VudChjLGEpfWNhdGNoKGUpe319fWNhdGNoKGQpe31yZXR1cm4hMH1cbmZ1bmN0aW9uIFpqKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5kZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5lZmZlY3RUYWc9MDt0aGlzLmxhc3RFZmZlY3Q9dGhpcy5maXJzdEVmZmVjdD10aGlzLm5leHRFZmZlY3Q9bnVsbDt0aGlzLmNoaWxkRXhwaXJhdGlvblRpbWU9dGhpcy5leHBpcmF0aW9uVGltZT0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9ZnVuY3Rpb24gU2goYSxiLGMsZCl7cmV0dXJuIG5ldyBaaihhLGIsYyxkKX1cbmZ1bmN0aW9uIGJpKGEpe2E9YS5wcm90b3R5cGU7cmV0dXJuISghYXx8IWEuaXNSZWFjdENvbXBvbmVudCl9ZnVuY3Rpb24gWGooYSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGJpKGEpPzE6MDtpZih2b2lkIDAhPT1hJiZudWxsIT09YSl7YT1hLiQkdHlwZW9mO2lmKGE9PT1nYilyZXR1cm4gMTE7aWYoYT09PWpiKXJldHVybiAxNH1yZXR1cm4gMn1cbmZ1bmN0aW9uIFNnKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbD09PWM/KGM9U2goYS50YWcsYixhLmtleSxhLm1vZGUpLGMuZWxlbWVudFR5cGU9YS5lbGVtZW50VHlwZSxjLnR5cGU9YS50eXBlLGMuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGMuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9Yyk6KGMucGVuZGluZ1Byb3BzPWIsYy5lZmZlY3RUYWc9MCxjLm5leHRFZmZlY3Q9bnVsbCxjLmZpcnN0RWZmZWN0PW51bGwsYy5sYXN0RWZmZWN0PW51bGwpO2MuY2hpbGRFeHBpcmF0aW9uVGltZT1hLmNoaWxkRXhwaXJhdGlvblRpbWU7Yy5leHBpcmF0aW9uVGltZT1hLmV4cGlyYXRpb25UaW1lO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2I9YS5kZXBlbmRlbmNpZXM7Yy5kZXBlbmRlbmNpZXM9bnVsbD09PWI/bnVsbDp7ZXhwaXJhdGlvblRpbWU6Yi5leHBpcmF0aW9uVGltZSxcbmZpcnN0Q29udGV4dDpiLmZpcnN0Q29udGV4dCxyZXNwb25kZXJzOmIucmVzcG9uZGVyc307Yy5zaWJsaW5nPWEuc2libGluZztjLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiBVZyhhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpYmkoYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgYWI6cmV0dXJuIFdnKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgZmI6Zz04O2V8PTc7YnJlYWs7Y2FzZSBiYjpnPTg7ZXw9MTticmVhaztjYXNlIGNiOnJldHVybiBhPVNoKDEyLGMsYixlfDgpLGEuZWxlbWVudFR5cGU9Y2IsYS50eXBlPWNiLGEuZXhwaXJhdGlvblRpbWU9ZixhO2Nhc2UgaGI6cmV0dXJuIGE9U2goMTMsYyxiLGUpLGEudHlwZT1oYixhLmVsZW1lbnRUeXBlPWhiLGEuZXhwaXJhdGlvblRpbWU9ZixhO2Nhc2UgaWI6cmV0dXJuIGE9U2goMTksYyxiLGUpLGEuZWxlbWVudFR5cGU9aWIsYS5leHBpcmF0aW9uVGltZT1mLGE7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIGRiOmc9XG4xMDticmVhayBhO2Nhc2UgZWI6Zz05O2JyZWFrIGE7Y2FzZSBnYjpnPTExO2JyZWFrIGE7Y2FzZSBqYjpnPTE0O2JyZWFrIGE7Y2FzZSBrYjpnPTE2O2Q9bnVsbDticmVhayBhO2Nhc2UgbGI6Zz0yMjticmVhayBhfXRocm93IEVycm9yKHUoMTMwLG51bGw9PWE/YTp0eXBlb2YgYSxcIlwiKSk7fWI9U2goZyxjLGIsZSk7Yi5lbGVtZW50VHlwZT1hO2IudHlwZT1kO2IuZXhwaXJhdGlvblRpbWU9ZjtyZXR1cm4gYn1mdW5jdGlvbiBXZyhhLGIsYyxkKXthPVNoKDcsYSxkLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1mdW5jdGlvbiBUZyhhLGIsYyl7YT1TaCg2LGEsbnVsbCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiBWZyhhLGIsYyl7Yj1TaCg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5leHBpcmF0aW9uVGltZT1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGFrKGEsYixjKXt0aGlzLnRhZz1iO3RoaXMuY3VycmVudD1udWxsO3RoaXMuY29udGFpbmVySW5mbz1hO3RoaXMucGluZ0NhY2hlPXRoaXMucGVuZGluZ0NoaWxkcmVuPW51bGw7dGhpcy5maW5pc2hlZEV4cGlyYXRpb25UaW1lPTA7dGhpcy5maW5pc2hlZFdvcms9bnVsbDt0aGlzLnRpbWVvdXRIYW5kbGU9LTE7dGhpcy5wZW5kaW5nQ29udGV4dD10aGlzLmNvbnRleHQ9bnVsbDt0aGlzLmh5ZHJhdGU9Yzt0aGlzLmNhbGxiYWNrTm9kZT1udWxsO3RoaXMuY2FsbGJhY2tQcmlvcml0eT05MDt0aGlzLmxhc3RFeHBpcmVkVGltZT10aGlzLmxhc3RQaW5nZWRUaW1lPXRoaXMubmV4dEtub3duUGVuZGluZ0xldmVsPXRoaXMubGFzdFN1c3BlbmRlZFRpbWU9dGhpcy5maXJzdFN1c3BlbmRlZFRpbWU9dGhpcy5maXJzdFBlbmRpbmdUaW1lPTB9XG5mdW5jdGlvbiBBaihhLGIpe3ZhciBjPWEuZmlyc3RTdXNwZW5kZWRUaW1lO2E9YS5sYXN0U3VzcGVuZGVkVGltZTtyZXR1cm4gMCE9PWMmJmM+PWImJmE8PWJ9ZnVuY3Rpb24geGkoYSxiKXt2YXIgYz1hLmZpcnN0U3VzcGVuZGVkVGltZSxkPWEubGFzdFN1c3BlbmRlZFRpbWU7YzxiJiYoYS5maXJzdFN1c3BlbmRlZFRpbWU9Yik7aWYoZD5ifHwwPT09YylhLmxhc3RTdXNwZW5kZWRUaW1lPWI7Yjw9YS5sYXN0UGluZ2VkVGltZSYmKGEubGFzdFBpbmdlZFRpbWU9MCk7Yjw9YS5sYXN0RXhwaXJlZFRpbWUmJihhLmxhc3RFeHBpcmVkVGltZT0wKX1cbmZ1bmN0aW9uIHlpKGEsYil7Yj5hLmZpcnN0UGVuZGluZ1RpbWUmJihhLmZpcnN0UGVuZGluZ1RpbWU9Yik7dmFyIGM9YS5maXJzdFN1c3BlbmRlZFRpbWU7MCE9PWMmJihiPj1jP2EuZmlyc3RTdXNwZW5kZWRUaW1lPWEubGFzdFN1c3BlbmRlZFRpbWU9YS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9MDpiPj1hLmxhc3RTdXNwZW5kZWRUaW1lJiYoYS5sYXN0U3VzcGVuZGVkVGltZT1iKzEpLGI+YS5uZXh0S25vd25QZW5kaW5nTGV2ZWwmJihhLm5leHRLbm93blBlbmRpbmdMZXZlbD1iKSl9ZnVuY3Rpb24gQ2ooYSxiKXt2YXIgYz1hLmxhc3RFeHBpcmVkVGltZTtpZigwPT09Y3x8Yz5iKWEubGFzdEV4cGlyZWRUaW1lPWJ9XG5mdW5jdGlvbiBiayhhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1HZygpLGc9RGcuc3VzcGVuc2U7Zj1IZyhmLGUsZyk7YTppZihjKXtjPWMuX3JlYWN0SW50ZXJuYWxGaWJlcjtiOntpZihkYyhjKSE9PWN8fDEhPT1jLnRhZyl0aHJvdyBFcnJvcih1KDE3MCkpO3ZhciBoPWM7ZG97c3dpdGNoKGgudGFnKXtjYXNlIDM6aD1oLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGI7Y2FzZSAxOmlmKEwoaC50eXBlKSl7aD1oLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBifX1oPWgucmV0dXJufXdoaWxlKG51bGwhPT1oKTt0aHJvdyBFcnJvcih1KDE3MSkpO31pZigxPT09Yy50YWcpe3ZhciBrPWMudHlwZTtpZihMKGspKXtjPUZmKGMsayxoKTticmVhayBhfX1jPWh9ZWxzZSBjPUFmO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9d2coZixnKTtiLnBheWxvYWQ9e2VsZW1lbnQ6YX07ZD12b2lkIDA9PT1cbmQ/bnVsbDpkO251bGwhPT1kJiYoYi5jYWxsYmFjaz1kKTt4ZyhlLGIpO0lnKGUsZik7cmV0dXJuIGZ9ZnVuY3Rpb24gY2soYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1mdW5jdGlvbiBkayhhLGIpe2E9YS5tZW1vaXplZFN0YXRlO251bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkJiZhLnJldHJ5VGltZTxiJiYoYS5yZXRyeVRpbWU9Yil9ZnVuY3Rpb24gZWsoYSxiKXtkayhhLGIpOyhhPWEuYWx0ZXJuYXRlKSYmZGsoYSxiKX1cbmZ1bmN0aW9uIGZrKGEsYixjKXtjPW51bGwhPWMmJiEwPT09Yy5oeWRyYXRlO3ZhciBkPW5ldyBhayhhLGIsYyksZT1TaCgzLG51bGwsbnVsbCwyPT09Yj83OjE9PT1iPzM6MCk7ZC5jdXJyZW50PWU7ZS5zdGF0ZU5vZGU9ZDt1ZyhlKTthW09kXT1kLmN1cnJlbnQ7YyYmMCE9PWImJkpjKGEsOT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQpO3RoaXMuX2ludGVybmFsUm9vdD1kfWZrLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7YmsoYSx0aGlzLl9pbnRlcm5hbFJvb3QsbnVsbCxudWxsKX07ZmsucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9pbnRlcm5hbFJvb3QsYj1hLmNvbnRhaW5lckluZm87YmsobnVsbCxhLG51bGwsZnVuY3Rpb24oKXtiW09kXT1udWxsfSl9O1xuZnVuY3Rpb24gZ2soYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfWZ1bmN0aW9uIGhrKGEsYil7Ynx8KGI9YT85PT09YS5ub2RlVHlwZT9hLmRvY3VtZW50RWxlbWVudDphLmZpcnN0Q2hpbGQ6bnVsbCxiPSEoIWJ8fDEhPT1iLm5vZGVUeXBlfHwhYi5oYXNBdHRyaWJ1dGUoXCJkYXRhLXJlYWN0cm9vdFwiKSkpO2lmKCFiKWZvcih2YXIgYztjPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGMpO3JldHVybiBuZXcgZmsoYSwwLGI/e2h5ZHJhdGU6ITB9OnZvaWQgMCl9XG5mdW5jdGlvbiBpayhhLGIsYyxkLGUpe3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXt2YXIgZz1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPWNrKGcpO2guY2FsbChhKX19YmsoYixnLGEsZSl9ZWxzZXtmPWMuX3JlYWN0Um9vdENvbnRhaW5lcj1oayhjLGQpO2c9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaz1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1jayhnKTtrLmNhbGwoYSl9fU5qKGZ1bmN0aW9uKCl7YmsoYixnLGEsZSl9KX1yZXR1cm4gY2soZyl9ZnVuY3Rpb24gamsoYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjokYSxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbndjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWhnKEdnKCksMTUwLDEwMCk7SWcoYSxiKTtlayhhLGIpfX07eGM9ZnVuY3Rpb24oYSl7MTM9PT1hLnRhZyYmKElnKGEsMyksZWsoYSwzKSl9O3ljPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUdnKCk7Yj1IZyhiLGEsbnVsbCk7SWcoYSxiKTtlayhhLGIpfX07XG56YT1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOkNiKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1RZChkKTtpZighZSl0aHJvdyBFcnJvcih1KDkwKSk7eWIoZCk7Q2IoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOktiKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZIYihhLCEhYy5tdWx0aXBsZSxiLCExKX19O0ZhPU1qO1xuR2E9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1XO1d8PTQ7dHJ5e3JldHVybiBjZyg5OCxhLmJpbmQobnVsbCxiLGMsZCxlKSl9ZmluYWxseXtXPWYsVz09PVYmJmdnKCl9fTtIYT1mdW5jdGlvbigpeyhXJigxfGZqfGdqKSk9PT1WJiYoTGooKSxEaigpKX07SWE9ZnVuY3Rpb24oYSxiKXt2YXIgYz1XO1d8PTI7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7Vz1jLFc9PT1WJiZnZygpfX07ZnVuY3Rpb24ga2soYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtpZighZ2soYikpdGhyb3cgRXJyb3IodSgyMDApKTtyZXR1cm4gamsoYSxiLG51bGwsYyl9dmFyIGxrPXtFdmVudHM6W05jLFBkLFFkLHhhLHRhLFhkLGZ1bmN0aW9uKGEpe2pjKGEsV2QpfSxEYSxFYSxpZCxtYyxEaix7Y3VycmVudDohMX1dfTtcbihmdW5jdGlvbihhKXt2YXIgYj1hLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlO3JldHVybiBZaihuKHt9LGEse292ZXJyaWRlSG9va1N0YXRlOm51bGwsb3ZlcnJpZGVQcm9wczpudWxsLHNldFN1c3BlbnNlSGFuZGxlcjpudWxsLHNjaGVkdWxlVXBkYXRlOm51bGwsY3VycmVudERpc3BhdGNoZXJSZWY6V2EuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPWhjKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gYj9iKGEpOm51bGx9LGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDpudWxsLHNjaGVkdWxlUmVmcmVzaDpudWxsLHNjaGVkdWxlUm9vdDpudWxsLHNldFJlZnJlc2hIYW5kbGVyOm51bGwsZ2V0Q3VycmVudEZpYmVyOm51bGx9KSl9KSh7ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6dGMsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNi4xMy4xXCIsXG5yZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9KTtleHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPWxrO2V4cG9ydHMuY3JlYXRlUG9ydGFsPWtrO2V4cG9ydHMuZmluZERPTU5vZGU9ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFsRmliZXI7aWYodm9pZCAwPT09Yil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyKXRocm93IEVycm9yKHUoMTg4KSk7dGhyb3cgRXJyb3IodSgyNjgsT2JqZWN0LmtleXMoYSkpKTt9YT1oYyhiKTthPW51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGU7cmV0dXJuIGF9O1xuZXhwb3J0cy5mbHVzaFN5bmM9ZnVuY3Rpb24oYSxiKXtpZigoVyYoZmp8Z2opKSE9PVYpdGhyb3cgRXJyb3IodSgxODcpKTt2YXIgYz1XO1d8PTE7dHJ5e3JldHVybiBjZyg5OSxhLmJpbmQobnVsbCxiKSl9ZmluYWxseXtXPWMsZ2coKX19O2V4cG9ydHMuaHlkcmF0ZT1mdW5jdGlvbihhLGIsYyl7aWYoIWdrKGIpKXRocm93IEVycm9yKHUoMjAwKSk7cmV0dXJuIGlrKG51bGwsYSxiLCEwLGMpfTtleHBvcnRzLnJlbmRlcj1mdW5jdGlvbihhLGIsYyl7aWYoIWdrKGIpKXRocm93IEVycm9yKHUoMjAwKSk7cmV0dXJuIGlrKG51bGwsYSxiLCExLGMpfTtcbmV4cG9ydHMudW5tb3VudENvbXBvbmVudEF0Tm9kZT1mdW5jdGlvbihhKXtpZighZ2soYSkpdGhyb3cgRXJyb3IodSg0MCkpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KE5qKGZ1bmN0aW9uKCl7aWsobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbDthW09kXT1udWxsfSl9KSwhMCk6ITF9O2V4cG9ydHMudW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM9TWo7ZXhwb3J0cy51bnN0YWJsZV9jcmVhdGVQb3J0YWw9ZnVuY3Rpb24oYSxiKXtyZXR1cm4ga2soYSxiLDI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsKX07XG5leHBvcnRzLnVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyPWZ1bmN0aW9uKGEsYixjLGQpe2lmKCFnayhjKSl0aHJvdyBFcnJvcih1KDIwMCkpO2lmKG51bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxGaWJlcil0aHJvdyBFcnJvcih1KDM4KSk7cmV0dXJuIGlrKGEsYixjLCExLGQpfTtleHBvcnRzLnZlcnNpb249XCIxNi4xMy4xXCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYwLjE5LjFcbiAqIHNjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgZixnLGgsayxsO1xuaWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbCl7dmFyIHA9bnVsbCxxPW51bGwsdD1mdW5jdGlvbigpe2lmKG51bGwhPT1wKXRyeXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO3AoITAsYSk7cD1udWxsfWNhdGNoKGIpe3Rocm93IHNldFRpbWVvdXQodCwwKSxiO319LHU9RGF0ZS5ub3coKTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBEYXRlLm5vdygpLXV9O2Y9ZnVuY3Rpb24oYSl7bnVsbCE9PXA/c2V0VGltZW91dChmLDAsYSk6KHA9YSxzZXRUaW1lb3V0KHQsMCkpfTtnPWZ1bmN0aW9uKGEsYil7cT1zZXRUaW1lb3V0KGEsYil9O2g9ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQocSl9O2s9ZnVuY3Rpb24oKXtyZXR1cm4hMX07bD1leHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKCl7fX1lbHNle3ZhciB3PXdpbmRvdy5wZXJmb3JtYW5jZSx4PXdpbmRvdy5EYXRlLFxueT13aW5kb3cuc2V0VGltZW91dCx6PXdpbmRvdy5jbGVhclRpbWVvdXQ7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjb25zb2xlKXt2YXIgQT13aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWU7XCJmdW5jdGlvblwiIT09dHlwZW9mIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHJlcXVlc3RBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHNcIik7XCJmdW5jdGlvblwiIT09dHlwZW9mIEEmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IGNhbmNlbEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxsc1wiKX1pZihcIm9iamVjdFwiPT09XG50eXBlb2YgdyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHcubm93KWV4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHcubm93KCl9O2Vsc2V7dmFyIEI9eC5ub3coKTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiB4Lm5vdygpLUJ9fXZhciBDPSExLEQ9bnVsbCxFPS0xLEY9NSxHPTA7az1mdW5jdGlvbigpe3JldHVybiBleHBvcnRzLnVuc3RhYmxlX25vdygpPj1HfTtsPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKGEpezA+YXx8MTI1PGE/Y29uc29sZS5lcnJvcihcImZvcmNlRnJhbWVSYXRlIHRha2VzIGEgcG9zaXRpdmUgaW50IGJldHdlZW4gMCBhbmQgMTI1LCBmb3JjaW5nIGZyYW1lcmF0ZXMgaGlnaGVyIHRoYW4gMTI1IGZwcyBpcyBub3QgdW5zdXBwb3J0ZWRcIik6Rj0wPGE/TWF0aC5mbG9vcigxRTMvYSk6NX07dmFyIEg9bmV3IE1lc3NhZ2VDaGFubmVsLEk9SC5wb3J0MjtILnBvcnQxLm9ubWVzc2FnZT1cbmZ1bmN0aW9uKCl7aWYobnVsbCE9PUQpe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7Rz1hK0Y7dHJ5e0QoITAsYSk/SS5wb3N0TWVzc2FnZShudWxsKTooQz0hMSxEPW51bGwpfWNhdGNoKGIpe3Rocm93IEkucG9zdE1lc3NhZ2UobnVsbCksYjt9fWVsc2UgQz0hMX07Zj1mdW5jdGlvbihhKXtEPWE7Q3x8KEM9ITAsSS5wb3N0TWVzc2FnZShudWxsKSl9O2c9ZnVuY3Rpb24oYSxiKXtFPXkoZnVuY3Rpb24oKXthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSxiKX07aD1mdW5jdGlvbigpe3ooRSk7RT0tMX19ZnVuY3Rpb24gSihhLGIpe3ZhciBjPWEubGVuZ3RoO2EucHVzaChiKTthOmZvcig7Oyl7dmFyIGQ9Yy0xPj4+MSxlPWFbZF07aWYodm9pZCAwIT09ZSYmMDxLKGUsYikpYVtkXT1iLGFbY109ZSxjPWQ7ZWxzZSBicmVhayBhfX1mdW5jdGlvbiBMKGEpe2E9YVswXTtyZXR1cm4gdm9pZCAwPT09YT9udWxsOmF9XG5mdW5jdGlvbiBNKGEpe3ZhciBiPWFbMF07aWYodm9pZCAwIT09Yil7dmFyIGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aDtkPGU7KXt2YXIgbT0yKihkKzEpLTEsbj1hW21dLHY9bSsxLHI9YVt2XTtpZih2b2lkIDAhPT1uJiYwPksobixjKSl2b2lkIDAhPT1yJiYwPksocixuKT8oYVtkXT1yLGFbdl09YyxkPXYpOihhW2RdPW4sYVttXT1jLGQ9bSk7ZWxzZSBpZih2b2lkIDAhPT1yJiYwPksocixjKSlhW2RdPXIsYVt2XT1jLGQ9djtlbHNlIGJyZWFrIGF9fXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIEsoYSxiKXt2YXIgYz1hLnNvcnRJbmRleC1iLnNvcnRJbmRleDtyZXR1cm4gMCE9PWM/YzphLmlkLWIuaWR9dmFyIE49W10sTz1bXSxQPTEsUT1udWxsLFI9MyxTPSExLFQ9ITEsVT0hMTtcbmZ1bmN0aW9uIFYoYSl7Zm9yKHZhciBiPUwoTyk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylNKE8pO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpTShPKSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLEooTixiKTtlbHNlIGJyZWFrO2I9TChPKX19ZnVuY3Rpb24gVyhhKXtVPSExO1YoYSk7aWYoIVQpaWYobnVsbCE9PUwoTikpVD0hMCxmKFgpO2Vsc2V7dmFyIGI9TChPKTtudWxsIT09YiYmZyhXLGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIFgoYSxiKXtUPSExO1UmJihVPSExLGgoKSk7Uz0hMDt2YXIgYz1SO3RyeXtWKGIpO2ZvcihRPUwoTik7bnVsbCE9PVEmJighKFEuZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFrKCkpOyl7dmFyIGQ9US5jYWxsYmFjaztpZihudWxsIT09ZCl7US5jYWxsYmFjaz1udWxsO1I9US5wcmlvcml0eUxldmVsO3ZhciBlPWQoUS5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP1EuY2FsbGJhY2s9ZTpRPT09TChOKSYmTShOKTtWKGIpfWVsc2UgTShOKTtRPUwoTil9aWYobnVsbCE9PVEpdmFyIG09ITA7ZWxzZXt2YXIgbj1MKE8pO251bGwhPT1uJiZnKFcsbi5zdGFydFRpbWUtYik7bT0hMX1yZXR1cm4gbX1maW5hbGx5e1E9bnVsbCxSPWMsUz0hMX19XG5mdW5jdGlvbiBZKGEpe3N3aXRjaChhKXtjYXNlIDE6cmV0dXJuLTE7Y2FzZSAyOnJldHVybiAyNTA7Y2FzZSA1OnJldHVybiAxMDczNzQxODIzO2Nhc2UgNDpyZXR1cm4gMUU0O2RlZmF1bHQ6cmV0dXJuIDVFM319dmFyIFo9bDtleHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O2V4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk9MTtleHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5PTQ7ZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eT0zO2V4cG9ydHMudW5zdGFibGVfUHJvZmlsaW5nPW51bGw7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7YS5jYWxsYmFjaz1udWxsfTtleHBvcnRzLnVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7VHx8U3x8KFQ9ITAsZihYKSl9O1xuZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiBSfTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIEwoTil9O2V4cG9ydHMudW5zdGFibGVfbmV4dD1mdW5jdGlvbihhKXtzd2l0Y2goUil7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6dmFyIGI9MzticmVhaztkZWZhdWx0OmI9Un12YXIgYz1SO1I9Yjt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e1I9Y319O2V4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb249ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfcmVxdWVzdFBhaW50PVo7ZXhwb3J0cy51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHk9ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6Y2FzZSA0OmNhc2UgNTpicmVhaztkZWZhdWx0OmE9M312YXIgYz1SO1I9YTt0cnl7cmV0dXJuIGIoKX1maW5hbGx5e1I9Y319O1xuZXhwb3J0cy51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1leHBvcnRzLnVuc3RhYmxlX25vdygpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3ZhciBlPWMuZGVsYXk7ZT1cIm51bWJlclwiPT09dHlwZW9mIGUmJjA8ZT9kK2U6ZDtjPVwibnVtYmVyXCI9PT10eXBlb2YgYy50aW1lb3V0P2MudGltZW91dDpZKGEpfWVsc2UgYz1ZKGEpLGU9ZDtjPWUrYzthPXtpZDpQKyssY2FsbGJhY2s6Yixwcmlvcml0eUxldmVsOmEsc3RhcnRUaW1lOmUsZXhwaXJhdGlvblRpbWU6Yyxzb3J0SW5kZXg6LTF9O2U+ZD8oYS5zb3J0SW5kZXg9ZSxKKE8sYSksbnVsbD09PUwoTikmJmE9PT1MKE8pJiYoVT9oKCk6VT0hMCxnKFcsZS1kKSkpOihhLnNvcnRJbmRleD1jLEooTixhKSxUfHxTfHwoVD0hMCxmKFgpKSk7cmV0dXJuIGF9O1xuZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7VihhKTt2YXIgYj1MKE4pO3JldHVybiBiIT09USYmbnVsbCE9PVEmJm51bGwhPT1iJiZudWxsIT09Yi5jYWxsYmFjayYmYi5zdGFydFRpbWU8PWEmJmIuZXhwaXJhdGlvblRpbWU8US5leHBpcmF0aW9uVGltZXx8aygpfTtleHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1SO3JldHVybiBmdW5jdGlvbigpe3ZhciBjPVI7Uj1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXtSPWN9fX07XG4iLCIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9tYWluLnNjc3NcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbi8vIFByZXBhcmUgY3NzVHJhbnNmb3JtYXRpb25cbnZhciB0cmFuc2Zvcm07XG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcblx0Ly8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0aWYoIWNvbnRlbnQubG9jYWxzKSB7XG5cdFx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vbWFpbi5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL21haW4uc2Nzc1wiKTtcblx0XHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXHRcdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHRcdH0pO1xuXHR9XG5cdC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJAaW1wb3J0IHVybChodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9UmFsZXdheTozMDAsNDAwLDYwMCk7XCIsIFwiXCJdKTtcblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIqIHtcXG4gIGZvbnQtZmFtaWx5OiAnUmFsZXdheScsIHNhbnMtc2VyaWY7IH1cXG5cXG4qIHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7IH1cXG5cXG5ib2R5IHtcXG4gIGJhY2tncm91bmQ6ICNlY2VjZWM7IH1cXG5cXG4uaG9tZSB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHdpZHRoOiAxMDI0cHg7XFxuICBoZWlnaHQ6IGF1dG87XFxuICBtYXJnaW46IDUwcHggYXV0bztcXG4gIGJhY2tncm91bmQ6ICNmZmY7XFxuICBib3JkZXItcmFkaXVzOiA1cHg7XFxuICBwYWRkaW5nOiAxNXB4IDUwcHg7IH1cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odXNlU291cmNlTWFwKSB7XG5cdHZhciBsaXN0ID0gW107XG5cblx0Ly8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXHRsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0XHR2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblx0XHRcdGlmKGl0ZW1bMl0pIHtcblx0XHRcdFx0cmV0dXJuIFwiQG1lZGlhIFwiICsgaXRlbVsyXSArIFwie1wiICsgY29udGVudCArIFwifVwiO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdFx0XHR9XG5cdFx0fSkuam9pbihcIlwiKTtcblx0fTtcblxuXHQvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XG5cdFx0aWYodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpXG5cdFx0XHRtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG5cdFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGlkID0gdGhpc1tpXVswXTtcblx0XHRcdGlmKHR5cGVvZiBpZCA9PT0gXCJudW1iZXJcIilcblx0XHRcdFx0YWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuXHRcdH1cblx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IG1vZHVsZXNbaV07XG5cdFx0XHQvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXG5cdFx0XHQvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xuXHRcdFx0Ly8gIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cblx0XHRcdC8vICBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXG5cdFx0XHRpZih0eXBlb2YgaXRlbVswXSAhPT0gXCJudW1iZXJcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuXHRcdFx0XHRpZihtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IG1lZGlhUXVlcnk7XG5cdFx0XHRcdH0gZWxzZSBpZihtZWRpYVF1ZXJ5KSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IFwiKFwiICsgaXRlbVsyXSArIFwiKSBhbmQgKFwiICsgbWVkaWFRdWVyeSArIFwiKVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcblx0dmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnO1xuXHR2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cdGlmICghY3NzTWFwcGluZykge1xuXHRcdHJldHVybiBjb250ZW50O1xuXHR9XG5cblx0aWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuXHRcdHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG5cdFx0XHRyZXR1cm4gJy8qIyBzb3VyY2VVUkw9JyArIGNzc01hcHBpbmcuc291cmNlUm9vdCArIHNvdXJjZSArICcgKi8nXG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcblx0fVxuXG5cdHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59XG5cbi8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG5cdHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuXHR2YXIgZGF0YSA9ICdzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCwnICsgYmFzZTY0O1xuXG5cdHJldHVybiAnLyojICcgKyBkYXRhICsgJyAqLyc7XG59XG4iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuXG52YXIgc3R5bGVzSW5Eb20gPSB7fTtcblxudmFyXHRtZW1vaXplID0gZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHR5cGVvZiBtZW1vID09PSBcInVuZGVmaW5lZFwiKSBtZW1vID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRyZXR1cm4gbWVtbztcblx0fTtcbn07XG5cbnZhciBpc09sZElFID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG5cdC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG5cdC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcblx0Ly8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuXHQvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcblx0Ly8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG5cdHJldHVybiB3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYjtcbn0pO1xuXG52YXIgZ2V0RWxlbWVudCA9IChmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW8gPSB7fTtcblxuXHRyZXR1cm4gZnVuY3Rpb24oc2VsZWN0b3IpIHtcblx0XHRpZiAodHlwZW9mIG1lbW9bc2VsZWN0b3JdID09PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHR2YXIgc3R5bGVUYXJnZXQgPSBmbi5jYWxsKHRoaXMsIHNlbGVjdG9yKTtcblx0XHRcdC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cdFx0XHRpZiAoc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHQvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuXHRcdFx0XHRcdC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcblx0XHRcdFx0fSBjYXRjaChlKSB7XG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRtZW1vW3NlbGVjdG9yXSA9IHN0eWxlVGFyZ2V0O1xuXHRcdH1cblx0XHRyZXR1cm4gbWVtb1tzZWxlY3Rvcl1cblx0fTtcbn0pKGZ1bmN0aW9uICh0YXJnZXQpIHtcblx0cmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KVxufSk7XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyXHRzaW5nbGV0b25Db3VudGVyID0gMDtcbnZhclx0c3R5bGVzSW5zZXJ0ZWRBdFRvcCA9IFtdO1xuXG52YXJcdGZpeFVybHMgPSByZXF1aXJlKFwiLi91cmxzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QsIG9wdGlvbnMpIHtcblx0aWYgKHR5cGVvZiBERUJVRyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBERUJVRykge1xuXHRcdGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBFcnJvcihcIlRoZSBzdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudFwiKTtcblx0fVxuXG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdG9wdGlvbnMuYXR0cnMgPSB0eXBlb2Ygb3B0aW9ucy5hdHRycyA9PT0gXCJvYmplY3RcIiA/IG9wdGlvbnMuYXR0cnMgOiB7fTtcblxuXHQvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cblx0Ly8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXHRpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gXCJib29sZWFuXCIpIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIDxoZWFkPiBlbGVtZW50XG5cdGlmICghb3B0aW9ucy5pbnNlcnRJbnRvKSBvcHRpb25zLmluc2VydEludG8gPSBcImhlYWRcIjtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSBib3R0b20gb2YgdGhlIHRhcmdldFxuXHRpZiAoIW9wdGlvbnMuaW5zZXJ0QXQpIG9wdGlvbnMuaW5zZXJ0QXQgPSBcImJvdHRvbVwiO1xuXG5cdHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCwgb3B0aW9ucyk7XG5cblx0YWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlIChuZXdMaXN0KSB7XG5cdFx0dmFyIG1heVJlbW92ZSA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRcdGRvbVN0eWxlLnJlZnMtLTtcblx0XHRcdG1heVJlbW92ZS5wdXNoKGRvbVN0eWxlKTtcblx0XHR9XG5cblx0XHRpZihuZXdMaXN0KSB7XG5cdFx0XHR2YXIgbmV3U3R5bGVzID0gbGlzdFRvU3R5bGVzKG5ld0xpc3QsIG9wdGlvbnMpO1xuXHRcdFx0YWRkU3R5bGVzVG9Eb20obmV3U3R5bGVzLCBvcHRpb25zKTtcblx0XHR9XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1heVJlbW92ZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldO1xuXG5cdFx0XHRpZihkb21TdHlsZS5yZWZzID09PSAwKSB7XG5cdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIGRvbVN0eWxlLnBhcnRzW2pdKCk7XG5cblx0XHRcdFx0ZGVsZXRlIHN0eWxlc0luRG9tW2RvbVN0eWxlLmlkXTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG59O1xuXG5mdW5jdGlvbiBhZGRTdHlsZXNUb0RvbSAoc3R5bGVzLCBvcHRpb25zKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRpZihkb21TdHlsZSkge1xuXHRcdFx0ZG9tU3R5bGUucmVmcysrO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHNbal0oaXRlbS5wYXJ0c1tqXSk7XG5cdFx0XHR9XG5cblx0XHRcdGZvcig7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgcGFydHMgPSBbXTtcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0cGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cblx0XHRcdHN0eWxlc0luRG9tW2l0ZW0uaWRdID0ge2lkOiBpdGVtLmlkLCByZWZzOiAxLCBwYXJ0czogcGFydHN9O1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBsaXN0VG9TdHlsZXMgKGxpc3QsIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlcyA9IFtdO1xuXHR2YXIgbmV3U3R5bGVzID0ge307XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBsaXN0W2ldO1xuXHRcdHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuXHRcdHZhciBjc3MgPSBpdGVtWzFdO1xuXHRcdHZhciBtZWRpYSA9IGl0ZW1bMl07XG5cdFx0dmFyIHNvdXJjZU1hcCA9IGl0ZW1bM107XG5cdFx0dmFyIHBhcnQgPSB7Y3NzOiBjc3MsIG1lZGlhOiBtZWRpYSwgc291cmNlTWFwOiBzb3VyY2VNYXB9O1xuXG5cdFx0aWYoIW5ld1N0eWxlc1tpZF0pIHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7aWQ6IGlkLCBwYXJ0czogW3BhcnRdfSk7XG5cdFx0ZWxzZSBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydCk7XG5cdH1cblxuXHRyZXR1cm4gc3R5bGVzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQgKG9wdGlvbnMsIHN0eWxlKSB7XG5cdHZhciB0YXJnZXQgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50bylcblxuXHRpZiAoIXRhcmdldCkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0SW50bycgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuXHR9XG5cblx0dmFyIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcFtzdHlsZXNJbnNlcnRlZEF0VG9wLmxlbmd0aCAtIDFdO1xuXG5cdGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcInRvcFwiKSB7XG5cdFx0aWYgKCFsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCkge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgdGFyZ2V0LmZpcnN0Q2hpbGQpO1xuXHRcdH0gZWxzZSBpZiAobGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0XHR9XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5wdXNoKHN0eWxlKTtcblx0fSBlbHNlIGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcImJvdHRvbVwiKSB7XG5cdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0fSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJvYmplY3RcIiAmJiBvcHRpb25zLmluc2VydEF0LmJlZm9yZSkge1xuXHRcdHZhciBuZXh0U2libGluZyA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvICsgXCIgXCIgKyBvcHRpb25zLmluc2VydEF0LmJlZm9yZSk7XG5cdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbmV4dFNpYmxpbmcpO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIltTdHlsZSBMb2FkZXJdXFxuXFxuIEludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciAnaW5zZXJ0QXQnICgnb3B0aW9ucy5pbnNlcnRBdCcpIGZvdW5kLlxcbiBNdXN0IGJlICd0b3AnLCAnYm90dG9tJywgb3IgT2JqZWN0LlxcbiAoaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIjaW5zZXJ0YXQpXFxuXCIpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudCAoc3R5bGUpIHtcblx0aWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblx0c3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG5cblx0dmFyIGlkeCA9IHN0eWxlc0luc2VydGVkQXRUb3AuaW5kZXhPZihzdHlsZSk7XG5cdGlmKGlkeCA+PSAwKSB7XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5zcGxpY2UoaWR4LCAxKTtcblx0fVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuXG5cdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblxuXHRhZGRBdHRycyhzdHlsZSwgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBzdHlsZSk7XG5cblx0cmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMaW5rRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuXG5cdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0b3B0aW9ucy5hdHRycy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblxuXHRhZGRBdHRycyhsaW5rLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIGxpbmspO1xuXG5cdHJldHVybiBsaW5rO1xufVxuXG5mdW5jdGlvbiBhZGRBdHRycyAoZWwsIGF0dHJzKSB7XG5cdE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlIChvYmosIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlLCB1cGRhdGUsIHJlbW92ZSwgcmVzdWx0O1xuXG5cdC8vIElmIGEgdHJhbnNmb3JtIGZ1bmN0aW9uIHdhcyBkZWZpbmVkLCBydW4gaXQgb24gdGhlIGNzc1xuXHRpZiAob3B0aW9ucy50cmFuc2Zvcm0gJiYgb2JqLmNzcykge1xuXHQgICAgcmVzdWx0ID0gb3B0aW9ucy50cmFuc2Zvcm0ob2JqLmNzcyk7XG5cblx0ICAgIGlmIChyZXN1bHQpIHtcblx0ICAgIFx0Ly8gSWYgdHJhbnNmb3JtIHJldHVybnMgYSB2YWx1ZSwgdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBydW5uaW5nIHJ1bnRpbWUgdHJhbnNmb3JtYXRpb25zIG9uIHRoZSBjc3MuXG5cdCAgICBcdG9iai5jc3MgPSByZXN1bHQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgXHQvLyBJZiB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHJldHVybnMgYSBmYWxzeSB2YWx1ZSwgZG9uJ3QgYWRkIHRoaXMgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBjb25kaXRpb25hbCBsb2FkaW5nIG9mIGNzc1xuXHQgICAgXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICBcdFx0Ly8gbm9vcFxuXHQgICAgXHR9O1xuXHQgICAgfVxuXHR9XG5cblx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG5cdFx0dmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG5cblx0XHRzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcblxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuXHRcdHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG5cblx0fSBlbHNlIGlmIChcblx0XHRvYmouc291cmNlTWFwICYmXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIlxuXHQpIHtcblx0XHRzdHlsZSA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblxuXHRcdFx0aWYoc3R5bGUuaHJlZikgVVJMLnJldm9rZU9iamVjdFVSTChzdHlsZS5ocmVmKTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdHN0eWxlID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblx0XHR9O1xuXHR9XG5cblx0dXBkYXRlKG9iaik7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmopIHtcblx0XHRpZiAobmV3T2JqKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcblx0XHRcdFx0bmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcblx0XHRcdFx0bmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcFxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlbW92ZSgpO1xuXHRcdH1cblx0fTtcbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIHRleHRTdG9yZSA9IFtdO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG5cdFx0dGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuXG5cdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG5cdH07XG59KSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG5cdHZhciBjc3MgPSByZW1vdmUgPyBcIlwiIDogb2JqLmNzcztcblxuXHRpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuXHR9IGVsc2Uge1xuXHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcblx0XHR2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cblx0XHRpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcblxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0c3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcblxuXHRpZihtZWRpYSkge1xuXHRcdHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxuXHR9XG5cblx0aWYoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcblx0fSBlbHNlIHtcblx0XHR3aGlsZShzdHlsZS5maXJzdENoaWxkKSB7XG5cdFx0XHRzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcblx0XHR9XG5cblx0XHRzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcblx0fVxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaW5rIChsaW5rLCBvcHRpb25zLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG5cdC8qXG5cdFx0SWYgY29udmVydFRvQWJzb2x1dGVVcmxzIGlzbid0IGRlZmluZWQsIGJ1dCBzb3VyY2VtYXBzIGFyZSBlbmFibGVkXG5cdFx0YW5kIHRoZXJlIGlzIG5vIHB1YmxpY1BhdGggZGVmaW5lZCB0aGVuIGxldHMgdHVybiBjb252ZXJ0VG9BYnNvbHV0ZVVybHNcblx0XHRvbiBieSBkZWZhdWx0LiAgT3RoZXJ3aXNlIGRlZmF1bHQgdG8gdGhlIGNvbnZlcnRUb0Fic29sdXRlVXJscyBvcHRpb25cblx0XHRkaXJlY3RseVxuXHQqL1xuXHR2YXIgYXV0b0ZpeFVybHMgPSBvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyA9PT0gdW5kZWZpbmVkICYmIHNvdXJjZU1hcDtcblxuXHRpZiAob3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgfHwgYXV0b0ZpeFVybHMpIHtcblx0XHRjc3MgPSBmaXhVcmxzKGNzcyk7XG5cdH1cblxuXHRpZiAoc291cmNlTWFwKSB7XG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XG5cdH1cblxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcblxuXHR2YXIgb2xkU3JjID0gbGluay5ocmVmO1xuXG5cdGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cblx0aWYob2xkU3JjKSBVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XG59XG4iLCJcbi8qKlxuICogV2hlbiBzb3VyY2UgbWFwcyBhcmUgZW5hYmxlZCwgYHN0eWxlLWxvYWRlcmAgdXNlcyBhIGxpbmsgZWxlbWVudCB3aXRoIGEgZGF0YS11cmkgdG9cbiAqIGVtYmVkIHRoZSBjc3Mgb24gdGhlIHBhZ2UuIFRoaXMgYnJlYWtzIGFsbCByZWxhdGl2ZSB1cmxzIGJlY2F1c2Ugbm93IHRoZXkgYXJlIHJlbGF0aXZlIHRvIGFcbiAqIGJ1bmRsZSBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHBhZ2UuXG4gKlxuICogT25lIHNvbHV0aW9uIGlzIHRvIG9ubHkgdXNlIGZ1bGwgdXJscywgYnV0IHRoYXQgbWF5IGJlIGltcG9zc2libGUuXG4gKlxuICogSW5zdGVhZCwgdGhpcyBmdW5jdGlvbiBcImZpeGVzXCIgdGhlIHJlbGF0aXZlIHVybHMgdG8gYmUgYWJzb2x1dGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHBhZ2UgbG9jYXRpb24uXG4gKlxuICogQSBydWRpbWVudGFyeSB0ZXN0IHN1aXRlIGlzIGxvY2F0ZWQgYXQgYHRlc3QvZml4VXJscy5qc2AgYW5kIGNhbiBiZSBydW4gdmlhIHRoZSBgbnBtIHRlc3RgIGNvbW1hbmQuXG4gKlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzcykge1xuICAvLyBnZXQgY3VycmVudCBsb2NhdGlvblxuICB2YXIgbG9jYXRpb24gPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbjtcblxuICBpZiAoIWxvY2F0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7XG4gIH1cblxuXHQvLyBibGFuayBvciBudWxsP1xuXHRpZiAoIWNzcyB8fCB0eXBlb2YgY3NzICE9PSBcInN0cmluZ1wiKSB7XG5cdCAgcmV0dXJuIGNzcztcbiAgfVxuXG4gIHZhciBiYXNlVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0O1xuICB2YXIgY3VycmVudERpciA9IGJhc2VVcmwgKyBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sIFwiL1wiKTtcblxuXHQvLyBjb252ZXJ0IGVhY2ggdXJsKC4uLilcblx0Lypcblx0VGhpcyByZWd1bGFyIGV4cHJlc3Npb24gaXMganVzdCBhIHdheSB0byByZWN1cnNpdmVseSBtYXRjaCBicmFja2V0cyB3aXRoaW5cblx0YSBzdHJpbmcuXG5cblx0IC91cmxcXHMqXFwoICA9IE1hdGNoIG9uIHRoZSB3b3JkIFwidXJsXCIgd2l0aCBhbnkgd2hpdGVzcGFjZSBhZnRlciBpdCBhbmQgdGhlbiBhIHBhcmVuc1xuXHQgICAoICA9IFN0YXJ0IGEgY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgKD86ICA9IFN0YXJ0IGEgbm9uLWNhcHR1cmluZyBncm91cFxuXHQgICAgICAgICBbXikoXSAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKD86ICA9IFN0YXJ0IGFub3RoZXIgbm9uLWNhcHR1cmluZyBncm91cHNcblx0ICAgICAgICAgICAgICAgICBbXikoXSsgID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgICAgIFteKShdKiAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICBcXCkgID0gTWF0Y2ggYSBlbmQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICkgID0gRW5kIEdyb3VwXG4gICAgICAgICAgICAgICpcXCkgPSBNYXRjaCBhbnl0aGluZyBhbmQgdGhlbiBhIGNsb3NlIHBhcmVuc1xuICAgICAgICAgICkgID0gQ2xvc2Ugbm9uLWNhcHR1cmluZyBncm91cFxuICAgICAgICAgICogID0gTWF0Y2ggYW55dGhpbmdcbiAgICAgICApICA9IENsb3NlIGNhcHR1cmluZyBncm91cFxuXHQgXFwpICA9IE1hdGNoIGEgY2xvc2UgcGFyZW5zXG5cblx0IC9naSAgPSBHZXQgYWxsIG1hdGNoZXMsIG5vdCB0aGUgZmlyc3QuICBCZSBjYXNlIGluc2Vuc2l0aXZlLlxuXHQgKi9cblx0dmFyIGZpeGVkQ3NzID0gY3NzLnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLCBmdW5jdGlvbihmdWxsTWF0Y2gsIG9yaWdVcmwpIHtcblx0XHQvLyBzdHJpcCBxdW90ZXMgKGlmIHRoZXkgZXhpc3QpXG5cdFx0dmFyIHVucXVvdGVkT3JpZ1VybCA9IG9yaWdVcmxcblx0XHRcdC50cmltKClcblx0XHRcdC5yZXBsYWNlKC9eXCIoLiopXCIkLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pXG5cdFx0XHQucmVwbGFjZSgvXicoLiopJyQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSk7XG5cblx0XHQvLyBhbHJlYWR5IGEgZnVsbCB1cmw/IG5vIGNoYW5nZVxuXHRcdGlmICgvXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcLykvaS50ZXN0KHVucXVvdGVkT3JpZ1VybCkpIHtcblx0XHQgIHJldHVybiBmdWxsTWF0Y2g7XG5cdFx0fVxuXG5cdFx0Ly8gY29udmVydCB0aGUgdXJsIHRvIGEgZnVsbCB1cmxcblx0XHR2YXIgbmV3VXJsO1xuXG5cdFx0aWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcblx0XHQgIFx0Ly9UT0RPOiBzaG91bGQgd2UgYWRkIHByb3RvY29sP1xuXHRcdFx0bmV3VXJsID0gdW5xdW90ZWRPcmlnVXJsO1xuXHRcdH0gZWxzZSBpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvXCIpID09PSAwKSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgYmFzZSB1cmxcblx0XHRcdG5ld1VybCA9IGJhc2VVcmwgKyB1bnF1b3RlZE9yaWdVcmw7IC8vIGFscmVhZHkgc3RhcnRzIHdpdGggJy8nXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIGN1cnJlbnQgZGlyZWN0b3J5XG5cdFx0XHRuZXdVcmwgPSBjdXJyZW50RGlyICsgdW5xdW90ZWRPcmlnVXJsLnJlcGxhY2UoL15cXC5cXC8vLCBcIlwiKTsgLy8gU3RyaXAgbGVhZGluZyAnLi8nXG5cdFx0fVxuXG5cdFx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCB1cmwoLi4uKVxuXHRcdHJldHVybiBcInVybChcIiArIEpTT04uc3RyaW5naWZ5KG5ld1VybCkgKyBcIilcIjtcblx0fSk7XG5cblx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCBjc3Ncblx0cmV0dXJuIGZpeGVkQ3NzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL2NvcmUvbWVyZ2VDb25maWcnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgdmFyIGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIHZhciBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0KTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxudmFyIGF4aW9zID0gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdHMpO1xuXG4vLyBFeHBvc2UgQXhpb3MgY2xhc3MgdG8gYWxsb3cgY2xhc3MgaW5oZXJpdGFuY2VcbmF4aW9zLkF4aW9zID0gQXhpb3M7XG5cbi8vIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXNcbmF4aW9zLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICByZXR1cm4gY3JlYXRlSW5zdGFuY2UobWVyZ2VDb25maWcoYXhpb3MuZGVmYXVsdHMsIGluc3RhbmNlQ29uZmlnKSk7XG59O1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbCcpO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWxUb2tlbicpO1xuYXhpb3MuaXNDYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9pc0NhbmNlbCcpO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuYXhpb3Muc3ByZWFkID0gcmVxdWlyZSgnLi9oZWxwZXJzL3NwcmVhZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF4aW9zO1xuXG4vLyBBbGxvdyB1c2Ugb2YgZGVmYXVsdCBpbXBvcnQgc3ludGF4IGluIFR5cGVTY3JpcHRcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBheGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIEludGVyY2VwdG9yTWFuYWdlciA9IHJlcXVpcmUoJy4vSW50ZXJjZXB0b3JNYW5hZ2VyJyk7XG52YXIgZGlzcGF0Y2hSZXF1ZXN0ID0gcmVxdWlyZSgnLi9kaXNwYXRjaFJlcXVlc3QnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vbWVyZ2VDb25maWcnKTtcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gQXhpb3MoaW5zdGFuY2VDb25maWcpIHtcbiAgdGhpcy5kZWZhdWx0cyA9IGluc3RhbmNlQ29uZmlnO1xuICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICByZXF1ZXN0OiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKCksXG4gICAgcmVzcG9uc2U6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKVxuICB9O1xufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyBzcGVjaWZpYyBmb3IgdGhpcyByZXF1ZXN0IChtZXJnZWQgd2l0aCB0aGlzLmRlZmF1bHRzKVxuICovXG5BeGlvcy5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIHJlcXVlc3QoY29uZmlnKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgIGNvbmZpZyA9IGFyZ3VtZW50c1sxXSB8fCB7fTtcbiAgICBjb25maWcudXJsID0gYXJndW1lbnRzWzBdO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgfVxuXG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG5cbiAgLy8gU2V0IGNvbmZpZy5tZXRob2RcbiAgaWYgKGNvbmZpZy5tZXRob2QpIHtcbiAgICBjb25maWcubWV0aG9kID0gY29uZmlnLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2UgaWYgKHRoaXMuZGVmYXVsdHMubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IHRoaXMuZGVmYXVsdHMubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnLm1ldGhvZCA9ICdnZXQnO1xuICB9XG5cbiAgLy8gSG9vayB1cCBpbnRlcmNlcHRvcnMgbWlkZGxld2FyZVxuICB2YXIgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LCB1bmRlZmluZWRdO1xuICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgd2hpbGUgKGNoYWluLmxlbmd0aCkge1xuICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW4uc2hpZnQoKSwgY2hhaW4uc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbkF4aW9zLnByb3RvdHlwZS5nZXRVcmkgPSBmdW5jdGlvbiBnZXRVcmkoY29uZmlnKSB7XG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gIHJldHVybiBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcikucmVwbGFjZSgvXlxcPy8sICcnKTtcbn07XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybFxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gSW50ZXJjZXB0b3JNYW5hZ2VyKCkge1xuICB0aGlzLmhhbmRsZXJzID0gW107XG59XG5cbi8qKlxuICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gKlxuICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkKSB7XG4gIHRoaXMuaGFuZGxlcnMucHVzaCh7XG4gICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQsXG4gICAgcmVqZWN0ZWQ6IHJlamVjdGVkXG4gIH0pO1xuICByZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGggLSAxO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gaWQgVGhlIElEIHRoYXQgd2FzIHJldHVybmVkIGJ5IGB1c2VgXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZWplY3QgPSBmdW5jdGlvbiBlamVjdChpZCkge1xuICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gIH1cbn07XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAqXG4gKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICB1dGlscy5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIGZvckVhY2hIYW5kbGVyKGgpIHtcbiAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgZm4oaCk7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW50ZXJjZXB0b3JNYW5hZ2VyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgdHJhbnNmb3JtRGF0YSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtRGF0YScpO1xudmFyIGlzQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL2lzQ2FuY2VsJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIGNvbmZpZ3VyZWQgYWRhcHRlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcbiAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gIC8vIEVuc3VyZSBoZWFkZXJzIGV4aXN0XG4gIGNvbmZpZy5oZWFkZXJzID0gY29uZmlnLmhlYWRlcnMgfHwge307XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgY29uZmlnLmRhdGEsXG4gICAgY29uZmlnLmhlYWRlcnMsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICAvLyBGbGF0dGVuIGhlYWRlcnNcbiAgY29uZmlnLmhlYWRlcnMgPSB1dGlscy5tZXJnZShcbiAgICBjb25maWcuaGVhZGVycy5jb21tb24gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNbY29uZmlnLm1ldGhvZF0gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNcbiAgKTtcblxuICB1dGlscy5mb3JFYWNoKFxuICAgIFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2NvbW1vbiddLFxuICAgIGZ1bmN0aW9uIGNsZWFuSGVhZGVyQ29uZmlnKG1ldGhvZCkge1xuICAgICAgZGVsZXRlIGNvbmZpZy5oZWFkZXJzW21ldGhvZF07XG4gICAgfVxuICApO1xuXG4gIHZhciBhZGFwdGVyID0gY29uZmlnLmFkYXB0ZXIgfHwgZGVmYXVsdHMuYWRhcHRlcjtcblxuICByZXR1cm4gYWRhcHRlcihjb25maWcpLnRoZW4oZnVuY3Rpb24gb25BZGFwdGVyUmVzb2x1dGlvbihyZXNwb25zZSkge1xuICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgcmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICByZXNwb25zZS5kYXRhLFxuICAgICAgcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyxcbiAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBiZSB0cmFuc2Zvcm1lZFxuICogQHBhcmFtIHtBcnJheX0gaGVhZGVycyBUaGUgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3Qgb3IgcmVzcG9uc2VcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgdXRpbHMuZm9yRWFjaChmbnMsIGZ1bmN0aW9uIHRyYW5zZm9ybShmbikge1xuICAgIGRhdGEgPSBmbihkYXRhLCBoZWFkZXJzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgbm9ybWFsaXplZE5hbWUpIHtcbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgaGVhZGVyc1tub3JtYWxpemVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuL2NyZWF0ZUVycm9yJyk7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgdmFyIHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuICBpZiAoIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgbnVsbCxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVwZGF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlnLCBlcnJvciBjb2RlLCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGVycm9yLmNvbmZpZyA9IGNvbmZpZztcbiAgaWYgKGNvZGUpIHtcbiAgICBlcnJvci5jb2RlID0gY29kZTtcbiAgfVxuXG4gIGVycm9yLnJlcXVlc3QgPSByZXF1ZXN0O1xuICBlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICBlcnJvci5pc0F4aW9zRXJyb3IgPSB0cnVlO1xuXG4gIGVycm9yLnRvSlNPTiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvLyBTdGFuZGFyZFxuICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlLFxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgLy8gTWljcm9zb2Z0XG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIG51bWJlcjogdGhpcy5udW1iZXIsXG4gICAgICAvLyBNb3ppbGxhXG4gICAgICBmaWxlTmFtZTogdGhpcy5maWxlTmFtZSxcbiAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcbiAgICAgIGNvbHVtbk51bWJlcjogdGhpcy5jb2x1bW5OdW1iZXIsXG4gICAgICBzdGFjazogdGhpcy5zdGFjayxcbiAgICAgIC8vIEF4aW9zXG4gICAgICBjb25maWc6IHRoaXMuY29uZmlnLFxuICAgICAgY29kZTogdGhpcy5jb2RlXG4gICAgfTtcbiAgfTtcbiAgcmV0dXJuIGVycm9yO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwnKTtcbnZhciBjb21iaW5lVVJMcyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIGJhc2VVUkwgd2l0aCB0aGUgcmVxdWVzdGVkVVJMLFxuICogb25seSB3aGVuIHRoZSByZXF1ZXN0ZWRVUkwgaXMgbm90IGFscmVhZHkgYW4gYWJzb2x1dGUgVVJMLlxuICogSWYgdGhlIHJlcXVlc3RVUkwgaXMgYWJzb2x1dGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcmVxdWVzdGVkVVJMIHVudG91Y2hlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0ZWRVUkwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIHRvIGNvbWJpbmVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBmdWxsIHBhdGhcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZEZ1bGxQYXRoKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCkge1xuICBpZiAoYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChyZXF1ZXN0ZWRVUkwpKSB7XG4gICAgcmV0dXJuIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCk7XG4gIH1cbiAgcmV0dXJuIHJlcXVlc3RlZFVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZFxcK1xcLVxcLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vLyBIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xudmFyIGlnbm9yZUR1cGxpY2F0ZU9mID0gW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl07XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdmFyIHBhcnNlZCA9IHt9O1xuICB2YXIga2V5O1xuICB2YXIgdmFsO1xuICB2YXIgaTtcblxuICBpZiAoIWhlYWRlcnMpIHsgcmV0dXJuIHBhcnNlZDsgfVxuXG4gIHV0aWxzLmZvckVhY2goaGVhZGVycy5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoMCwgaSkpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGtleSkge1xuICAgICAgaWYgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgICBwYXJzZWRba2V5XSA9IChwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldIDogW10pLmNvbmNhdChbdmFsXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgdmFyIG9yaWdpblVSTDtcblxuICAgICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgICB2YXIgaHJlZiA9IHVybDtcblxuICAgICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICAgIH1cblxuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICAgIHZhciBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgICAgIHZhciBjb29raWUgPSBbXTtcbiAgICAgICAgICBjb29raWUucHVzaChuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNOdW1iZXIoZXhwaXJlcykpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcocGF0aCkpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcoZG9tYWluKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2VjdXJlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZChuYW1lKSB7XG4gICAgICAgICAgdmFyIG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKG5hbWUpIHtcbiAgICAgICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30sXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQoKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuL0NhbmNlbCcpO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIENhbmNlbFRva2VuKGV4ZWN1dG9yKSB7XG4gIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgcmVzb2x2ZVByb21pc2U7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICB9KTtcblxuICB2YXIgdG9rZW4gPSB0aGlzO1xuICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSkge1xuICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWwobWVzc2FnZSk7XG4gICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQgPSBmdW5jdGlvbiB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICovXG5DYW5jZWxUb2tlbi5zb3VyY2UgPSBmdW5jdGlvbiBzb3VyY2UoKSB7XG4gIHZhciBjYW5jZWw7XG4gIHZhciB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgY2FuY2VsID0gYztcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdG9rZW46IHRva2VuLFxuICAgIGNhbmNlbDogY2FuY2VsXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbFRva2VuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfcmVhY3REb20gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcblxudmFyIF9yZWFjdERvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdERvbSk7XG5cbnZhciBfZ29vZ2xlX21hcF9tYXAgPSByZXF1aXJlKCcuL2dvb2dsZV9tYXBfbWFwJyk7XG5cbnZhciBfZ29vZ2xlX21hcF9tYXAyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ29vZ2xlX21hcF9tYXApO1xuXG52YXIgX21hcmtlcl9kaXNwYXRjaGVyID0gcmVxdWlyZSgnLi9tYXJrZXJfZGlzcGF0Y2hlcicpO1xuXG52YXIgX21hcmtlcl9kaXNwYXRjaGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21hcmtlcl9kaXNwYXRjaGVyKTtcblxudmFyIF9nb29nbGVfbWFwX21hcmtlcnMgPSByZXF1aXJlKCcuL2dvb2dsZV9tYXBfbWFya2VycycpO1xuXG52YXIgX2dvb2dsZV9tYXBfbWFya2VyczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nb29nbGVfbWFwX21hcmtlcnMpO1xuXG52YXIgX2dvb2dsZV9tYXBfbWFya2Vyc19wcmVyZW5kZXIgPSByZXF1aXJlKCcuL2dvb2dsZV9tYXBfbWFya2Vyc19wcmVyZW5kZXInKTtcblxudmFyIF9nb29nbGVfbWFwX21hcmtlcnNfcHJlcmVuZGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dvb2dsZV9tYXBfbWFya2Vyc19wcmVyZW5kZXIpO1xuXG52YXIgX2dvb2dsZV9oZWF0bWFwID0gcmVxdWlyZSgnLi9nb29nbGVfaGVhdG1hcCcpO1xuXG52YXIgX2dvb2dsZV9tYXBfbG9hZGVyID0gcmVxdWlyZSgnLi9sb2FkZXJzL2dvb2dsZV9tYXBfbG9hZGVyJyk7XG5cbnZhciBfZ29vZ2xlX21hcF9sb2FkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ29vZ2xlX21hcF9sb2FkZXIpO1xuXG52YXIgX2dlbyA9IHJlcXVpcmUoJy4vdXRpbHMvZ2VvJyk7XG5cbnZhciBfZ2VvMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dlbyk7XG5cbnZhciBfcmFmID0gcmVxdWlyZSgnLi91dGlscy9yYWYnKTtcblxudmFyIF9yYWYyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmFmKTtcblxudmFyIF9waWNrID0gcmVxdWlyZSgnLi91dGlscy9waWNrJyk7XG5cbnZhciBfcGljazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9waWNrKTtcblxudmFyIF9vbWl0ID0gcmVxdWlyZSgnLi91dGlscy9vbWl0Jyk7XG5cbnZhciBfb21pdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vbWl0KTtcblxudmFyIF9sb2cgPSByZXF1aXJlKCcuL3V0aWxzL21hdGgvbG9nMicpO1xuXG52YXIgX2xvZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9sb2cpO1xuXG52YXIgX2lzRW1wdHkgPSByZXF1aXJlKCcuL3V0aWxzL2lzRW1wdHknKTtcblxudmFyIF9pc0VtcHR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzRW1wdHkpO1xuXG52YXIgX2lzTnVtYmVyID0gcmVxdWlyZSgnLi91dGlscy9pc051bWJlcicpO1xuXG52YXIgX2lzTnVtYmVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzTnVtYmVyKTtcblxudmFyIF9kZXRlY3QgPSByZXF1aXJlKCcuL3V0aWxzL2RldGVjdCcpO1xuXG52YXIgX2RldGVjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZXRlY3QpO1xuXG52YXIgX3NoYWxsb3dFcXVhbCA9IHJlcXVpcmUoJy4vdXRpbHMvc2hhbGxvd0VxdWFsJyk7XG5cbnZhciBfc2hhbGxvd0VxdWFsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NoYWxsb3dFcXVhbCk7XG5cbnZhciBfaXNQbGFpbk9iamVjdCA9IHJlcXVpcmUoJy4vdXRpbHMvaXNQbGFpbk9iamVjdCcpO1xuXG52YXIgX2lzUGxhaW5PYmplY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNQbGFpbk9iamVjdCk7XG5cbnZhciBfaXNBcnJheXNFcXVhbEVwcyA9IHJlcXVpcmUoJy4vdXRpbHMvaXNBcnJheXNFcXVhbEVwcycpO1xuXG52YXIgX2lzQXJyYXlzRXF1YWxFcHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNBcnJheXNFcXVhbEVwcyk7XG5cbnZhciBfZGV0ZWN0RWxlbWVudFJlc2l6ZSA9IHJlcXVpcmUoJy4vdXRpbHMvZGV0ZWN0RWxlbWVudFJlc2l6ZScpO1xuXG52YXIgX2RldGVjdEVsZW1lbnRSZXNpemUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGV0ZWN0RWxlbWVudFJlc2l6ZSk7XG5cbnZhciBfcGFzc2l2ZUV2ZW50cyA9IHJlcXVpcmUoJy4vdXRpbHMvcGFzc2l2ZUV2ZW50cycpO1xuXG52YXIgX3Bhc3NpdmVFdmVudHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFzc2l2ZUV2ZW50cyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH0gLyogZXNsaW50LWRpc2FibGUgaW1wb3J0L25vLWV4dHJhbmVvdXMtZGVwZW5kZW5jaWVzLCByZWFjdC9mb3JiaWQtcHJvcC10eXBlcywgcmVhY3Qvbm8tZmluZC1kb20tbm9kZSwgbm8tY29uc29sZSAqL1xuXG5cbi8vIGhlbHBlcnNcblxuXG4vLyBsb2FkZXJzXG5cblxuLy8gdXRpbHNcblxuXG4vLyBjb25zdHNcbnZhciBrRVBTID0gMC4wMDAwMTtcbnZhciBLX0dPT0dMRV9USUxFX1NJWkUgPSAyNTY7XG4vLyByZWFsIG1pblpvb20gY2FsY3VsYXRlZCBoZXJlIF9nZXRNaW5ab29tXG52YXIgS19JRExFX1RJTUVPVVQgPSAxMDA7XG52YXIgS19JRExFX0NMSUNLX1RJTUVPVVQgPSAzMDA7XG52YXIgREVGQVVMVF9NSU5fWk9PTSA9IDM7XG4vLyBTdGFydGluZyB3aXRoIHZlcnNpb24gMy4zMiwgdGhlIG1hcHMgQVBJIGNhbGxzIGBkcmF3KClgIGVhY2ggZnJhbWUgZHVyaW5nXG4vLyBhIHpvb20gYW5pbWF0aW9uLlxudmFyIERSQVdfQ0FMTEVEX0RVUklOR19BTklNQVRJT05fVkVSU0lPTiA9IDMyO1xudmFyIElTX1JFQUNUXzE2ID0gX3JlYWN0RG9tMi5kZWZhdWx0LmNyZWF0ZVBvcnRhbCAhPT0gdW5kZWZpbmVkO1xuXG52YXIgY3JlYXRlUG9ydGFsID0gSVNfUkVBQ1RfMTYgPyBfcmVhY3REb20yLmRlZmF1bHQuY3JlYXRlUG9ydGFsIDogX3JlYWN0RG9tMi5kZWZhdWx0LnVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyO1xuXG5mdW5jdGlvbiBkZWZhdWx0T3B0aW9uc18oKSAvKiBtYXBzICove1xuICByZXR1cm4ge1xuICAgIG92ZXJ2aWV3TWFwQ29udHJvbDogZmFsc2UsXG4gICAgc3RyZWV0Vmlld0NvbnRyb2w6IGZhbHNlLFxuICAgIHJvdGF0ZUNvbnRyb2w6IHRydWUsXG4gICAgbWFwVHlwZUNvbnRyb2w6IGZhbHNlLFxuICAgIC8vIGRpc2FibGUgcG9pXG4gICAgc3R5bGVzOiBbe1xuICAgICAgZmVhdHVyZVR5cGU6ICdwb2knLFxuICAgICAgZWxlbWVudFR5cGU6ICdsYWJlbHMnLFxuICAgICAgc3R5bGVyczogW3sgdmlzaWJpbGl0eTogJ29mZicgfV1cbiAgICB9XSxcbiAgICBtaW5ab29tOiBERUZBVUxUX01JTl9aT09NIC8vIGR5bmFtaWNhbGx5IHJlY2FsY3VsdGVkIGlmIHBvc3NpYmxlIGR1cmluZyBpbml0XG4gIH07XG59XG5cbnZhciBsYXRMbmcyT2JqID0gZnVuY3Rpb24gbGF0TG5nMk9iaihsYXRMbmcpIHtcbiAgcmV0dXJuICgwLCBfaXNQbGFpbk9iamVjdDIuZGVmYXVsdCkobGF0TG5nKSA/IGxhdExuZyA6IHsgbGF0OiBsYXRMbmdbMF0sIGxuZzogbGF0TG5nWzFdIH07XG59O1xuXG52YXIgX2NoZWNrTWluWm9vbSA9IGZ1bmN0aW9uIF9jaGVja01pblpvb20oem9vbSwgbWluWm9vbSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh6b29tIDwgbWluWm9vbSkge1xuICAgICAgY29uc29sZS53YXJuKCdHb29nbGVNYXA6ICcgKyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICAnbWluWm9vbSBvcHRpb24gaXMgbGVzcyB0aGFuIHJlY29tbWVuZGVkICcgKyAnbWluWm9vbSBvcHRpb24gZm9yIHlvdXIgbWFwIHNpemVzLlxcbicgKyAnb3ZlcnJpZGVkIHRvIHZhbHVlICcgKyBtaW5ab29tKTtcbiAgICB9XG4gIH1cblxuICBpZiAobWluWm9vbSA8IHpvb20pIHtcbiAgICByZXR1cm4gem9vbTtcbiAgfVxuICByZXR1cm4gbWluWm9vbTtcbn07XG5cbnZhciBpc0Z1bGxTY3JlZW4gPSBmdW5jdGlvbiBpc0Z1bGxTY3JlZW4oKSB7XG4gIHJldHVybiBkb2N1bWVudC5mdWxsc2NyZWVuIHx8IGRvY3VtZW50LndlYmtpdElzRnVsbFNjcmVlbiB8fCBkb2N1bWVudC5tb3pGdWxsU2NyZWVuIHx8IGRvY3VtZW50Lm1zRnVsbHNjcmVlbkVsZW1lbnQ7XG59O1xuXG52YXIgR29vZ2xlTWFwID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKEdvb2dsZU1hcCwgX0NvbXBvbmVudCk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gIGZ1bmN0aW9uIEdvb2dsZU1hcChwcm9wcykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBHb29nbGVNYXApO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfdGhpcy5fZ2V0TWluWm9vbSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5nZW9TZXJ2aWNlXy5nZXRXaWR0aCgpID4gMCB8fCBfdGhpcy5nZW9TZXJ2aWNlXy5nZXRIZWlnaHQoKSA+IDApIHtcbiAgICAgICAgdmFyIHRpbGVzUGVyV2lkdGggPSBNYXRoLmNlaWwoX3RoaXMuZ2VvU2VydmljZV8uZ2V0V2lkdGgoKSAvIEtfR09PR0xFX1RJTEVfU0laRSkgKyAyO1xuICAgICAgICB2YXIgdGlsZXNQZXJIZWlnaHQgPSBNYXRoLmNlaWwoX3RoaXMuZ2VvU2VydmljZV8uZ2V0SGVpZ2h0KCkgLyBLX0dPT0dMRV9USUxFX1NJWkUpICsgMjtcbiAgICAgICAgdmFyIG1heFRpbGVzUGVyRGltID0gTWF0aC5tYXgodGlsZXNQZXJXaWR0aCwgdGlsZXNQZXJIZWlnaHQpO1xuICAgICAgICByZXR1cm4gTWF0aC5jZWlsKCgwLCBfbG9nMi5kZWZhdWx0KShtYXhUaWxlc1BlckRpbSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIERFRkFVTFRfTUlOX1pPT007XG4gICAgfTtcblxuICAgIF90aGlzLl9jb21wdXRlTWluWm9vbSA9IGZ1bmN0aW9uIChtaW5ab29tKSB7XG4gICAgICBpZiAoISgwLCBfaXNFbXB0eTIuZGVmYXVsdCkobWluWm9vbSkpIHtcbiAgICAgICAgcmV0dXJuIG1pblpvb207XG4gICAgICB9XG4gICAgICByZXR1cm4gX3RoaXMuX2dldE1pblpvb20oKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuX21hcERvbVJlc2l6ZUNhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMucmVzZXRTaXplT25JZGxlXyA9IHRydWU7XG4gICAgICBpZiAoX3RoaXMubWFwc18pIHtcbiAgICAgICAgdmFyIG9yaWdpbmFsQ2VudGVyID0gX3RoaXMucHJvcHMuY2VudGVyIHx8IF90aGlzLnByb3BzLmRlZmF1bHRDZW50ZXI7XG4gICAgICAgIHZhciBjdXJyZW50Q2VudGVyID0gX3RoaXMubWFwXy5nZXRDZW50ZXIoKTtcbiAgICAgICAgX3RoaXMubWFwc18uZXZlbnQudHJpZ2dlcihfdGhpcy5tYXBfLCAncmVzaXplJyk7XG4gICAgICAgIF90aGlzLm1hcF8uc2V0Q2VudGVyKF90aGlzLnByb3BzLnJlc2V0Qm91bmRzT25SZXNpemUgPyBvcmlnaW5hbENlbnRlciA6IGN1cnJlbnRDZW50ZXIpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5fc2V0TGF5ZXJzID0gZnVuY3Rpb24gKGxheWVyVHlwZXMpIHtcbiAgICAgIGxheWVyVHlwZXMuZm9yRWFjaChmdW5jdGlvbiAobGF5ZXJUeXBlKSB7XG4gICAgICAgIF90aGlzLmxheWVyc19bbGF5ZXJUeXBlXSA9IG5ldyBfdGhpcy5tYXBzX1tsYXllclR5cGVdKCk7XG4gICAgICAgIF90aGlzLmxheWVyc19bbGF5ZXJUeXBlXS5zZXRNYXAoX3RoaXMubWFwXyk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuX3JlbmRlclBvcnRhbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZ29vZ2xlX21hcF9tYXJrZXJzMi5kZWZhdWx0LCB7XG4gICAgICAgIGV4cGVyaW1lbnRhbDogX3RoaXMucHJvcHMuZXhwZXJpbWVudGFsLFxuICAgICAgICBvbkNoaWxkQ2xpY2s6IF90aGlzLl9vbkNoaWxkQ2xpY2ssXG4gICAgICAgIG9uQ2hpbGRNb3VzZURvd246IF90aGlzLl9vbkNoaWxkTW91c2VEb3duLFxuICAgICAgICBvbkNoaWxkTW91c2VFbnRlcjogX3RoaXMuX29uQ2hpbGRNb3VzZUVudGVyLFxuICAgICAgICBvbkNoaWxkTW91c2VMZWF2ZTogX3RoaXMuX29uQ2hpbGRNb3VzZUxlYXZlLFxuICAgICAgICBnZW9TZXJ2aWNlOiBfdGhpcy5nZW9TZXJ2aWNlXyxcbiAgICAgICAgaW5zaWRlTWFwUGFuZXM6IHRydWUsXG4gICAgICAgIGRpc3RhbmNlVG9Nb3VzZTogX3RoaXMucHJvcHMuZGlzdGFuY2VUb01vdXNlLFxuICAgICAgICBnZXRIb3ZlckRpc3RhbmNlOiBfdGhpcy5fZ2V0SG92ZXJEaXN0YW5jZSxcbiAgICAgICAgZGlzcGF0Y2hlcjogX3RoaXMubWFya2Vyc0Rpc3BhdGNoZXJfXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuX2luaXRNYXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBvbmx5IGluaXRpYWxpemUgdGhlIG1hcCBvbmNlXG4gICAgICBpZiAoX3RoaXMuaW5pdGlhbGl6ZWRfKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIF90aGlzLmluaXRpYWxpemVkXyA9IHRydWU7XG5cbiAgICAgIHZhciBwcm9wc0NlbnRlciA9IGxhdExuZzJPYmooX3RoaXMucHJvcHMuY2VudGVyIHx8IF90aGlzLnByb3BzLmRlZmF1bHRDZW50ZXIpO1xuICAgICAgX3RoaXMuZ2VvU2VydmljZV8uc2V0Vmlldyhwcm9wc0NlbnRlciwgX3RoaXMucHJvcHMuem9vbSB8fCBfdGhpcy5wcm9wcy5kZWZhdWx0Wm9vbSwgMCk7XG5cbiAgICAgIF90aGlzLl9vbkJvdW5kc0NoYW5nZWQoKTsgLy8gbm93IHdlIGNhbiBjYWxjdWxhdGUgbWFwIGJvdW5kcyBjZW50ZXIgZXRjLi4uXG5cbiAgICAgIHZhciBib290c3RyYXBVUkxLZXlzID0gX2V4dGVuZHMoe30sIF90aGlzLnByb3BzLmFwaUtleSAmJiB7IGtleTogX3RoaXMucHJvcHMuYXBpS2V5IH0sIF90aGlzLnByb3BzLmJvb3RzdHJhcFVSTEtleXMpO1xuXG4gICAgICBfdGhpcy5wcm9wcy5nb29nbGVNYXBMb2FkZXIoYm9vdHN0cmFwVVJMS2V5cywgX3RoaXMucHJvcHMuaGVhdG1hcExpYnJhcnkpLnRoZW4oZnVuY3Rpb24gKG1hcHMpIHtcbiAgICAgICAgaWYgKCFfdGhpcy5tb3VudGVkXykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjZW50ZXJMYXRMbmcgPSBfdGhpcy5nZW9TZXJ2aWNlXy5nZXRDZW50ZXIoKTtcblxuICAgICAgICB2YXIgcHJvcHNPcHRpb25zID0ge1xuICAgICAgICAgIHpvb206IF90aGlzLnByb3BzLnpvb20gfHwgX3RoaXMucHJvcHMuZGVmYXVsdFpvb20sXG4gICAgICAgICAgY2VudGVyOiBuZXcgbWFwcy5MYXRMbmcoY2VudGVyTGF0TG5nLmxhdCwgY2VudGVyTGF0TG5nLmxuZylcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBTdGFydCBIZWF0bWFwXG4gICAgICAgIGlmIChfdGhpcy5wcm9wcy5oZWF0bWFwLnBvc2l0aW9ucykge1xuICAgICAgICAgIE9iamVjdC5hc3NpZ24oX3RoaXMsIHtcbiAgICAgICAgICAgIGhlYXRtYXA6ICgwLCBfZ29vZ2xlX2hlYXRtYXAuZ2VuZXJhdGVIZWF0bWFwKShtYXBzLCBfdGhpcy5wcm9wcy5oZWF0bWFwKVxuICAgICAgICAgIH0pO1xuICAgICAgICAgICgwLCBfZ29vZ2xlX2hlYXRtYXAub3B0aW9uc0hlYXRtYXApKF90aGlzLmhlYXRtYXAsIF90aGlzLnByb3BzLmhlYXRtYXApO1xuICAgICAgICB9XG4gICAgICAgIC8vIEVuZCBIZWF0bWFwXG5cbiAgICAgICAgLy8gcHJldmVudCB0byBleGFwb3NlIGZ1bGwgYXBpXG4gICAgICAgIC8vIG5leHQgcHJvcHMgbXVzdCBiZSBleHBvc2VkIChjb25zb2xlLmxvZyhPYmplY3Qua2V5cyhwaWNrKG1hcHMsIGlzUGxhaW5PYmplY3QpKSkpXG4gICAgICAgIC8vIFwiQW5pbWF0aW9uXCIsIFwiQ29udHJvbFBvc2l0aW9uXCIsIFwiTWFwVHlwZUNvbnRyb2xTdHlsZVwiLCBcIk1hcFR5cGVJZFwiLFxuICAgICAgICAvLyBcIk5hdmlnYXRpb25Db250cm9sU3R5bGVcIiwgXCJTY2FsZUNvbnRyb2xTdHlsZVwiLCBcIlN0cm9rZVBvc2l0aW9uXCIsXG4gICAgICAgIC8vIFwiU3ltYm9sUGF0aFwiLCBcIlpvb21Db250cm9sU3R5bGVcIixcbiAgICAgICAgLy8gXCJldmVudFwiLCBcIkRpcmVjdGlvbnNTdGF0dXNcIiwgXCJEaXJlY3Rpb25zVHJhdmVsTW9kZVwiLCBcIkRpcmVjdGlvbnNVbml0U3lzdGVtXCIsXG4gICAgICAgIC8vIFwiRGlzdGFuY2VNYXRyaXhTdGF0dXNcIixcbiAgICAgICAgLy8gXCJEaXN0YW5jZU1hdHJpeEVsZW1lbnRTdGF0dXNcIiwgXCJFbGV2YXRpb25TdGF0dXNcIiwgXCJHZW9jb2RlckxvY2F0aW9uVHlwZVwiLFxuICAgICAgICAvLyBcIkdlb2NvZGVyU3RhdHVzXCIsIFwiS21sTGF5ZXJTdGF0dXNcIixcbiAgICAgICAgLy8gXCJNYXhab29tU3RhdHVzXCIsIFwiU3RyZWV0Vmlld1N0YXR1c1wiLCBcIlRyYW5zaXRNb2RlXCIsIFwiVHJhbnNpdFJvdXRlUHJlZmVyZW5jZVwiLFxuICAgICAgICAvLyBcIlRyYXZlbE1vZGVcIiwgXCJVbml0U3lzdGVtXCJcbiAgICAgICAgdmFyIG1hcFBsYWluT2JqZWN0cyA9ICgwLCBfcGljazIuZGVmYXVsdCkobWFwcywgX2lzUGxhaW5PYmplY3QyLmRlZmF1bHQpO1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBfdGhpcy5wcm9wcy5vcHRpb25zID09PSAnZnVuY3Rpb24nID8gX3RoaXMucHJvcHMub3B0aW9ucyhtYXBQbGFpbk9iamVjdHMpIDogX3RoaXMucHJvcHMub3B0aW9ucztcbiAgICAgICAgdmFyIGRlZmF1bHRPcHRpb25zID0gZGVmYXVsdE9wdGlvbnNfKG1hcFBsYWluT2JqZWN0cyk7XG5cbiAgICAgICAgdmFyIGRyYWdnYWJsZU9wdGlvbnMgPSAhKDAsIF9pc0VtcHR5Mi5kZWZhdWx0KShfdGhpcy5wcm9wcy5kcmFnZ2FibGUpICYmIHtcbiAgICAgICAgICBkcmFnZ2FibGU6IF90aGlzLnByb3BzLmRyYWdnYWJsZVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBtaW5ab29tID0gX3RoaXMuX2NvbXB1dGVNaW5ab29tKG9wdGlvbnMubWluWm9vbSk7XG4gICAgICAgIF90aGlzLm1pblpvb21fID0gbWluWm9vbTtcblxuICAgICAgICB2YXIgcHJlTWFwT3B0aW9ucyA9IF9leHRlbmRzKHt9LCBkZWZhdWx0T3B0aW9ucywge1xuICAgICAgICAgIG1pblpvb206IG1pblpvb21cbiAgICAgICAgfSwgb3B0aW9ucywgcHJvcHNPcHRpb25zKTtcblxuICAgICAgICBfdGhpcy5kZWZhdWx0RHJhZ2dhYmxlT3B0aW9uXyA9ICEoMCwgX2lzRW1wdHkyLmRlZmF1bHQpKHByZU1hcE9wdGlvbnMuZHJhZ2dhYmxlKSA/IHByZU1hcE9wdGlvbnMuZHJhZ2dhYmxlIDogX3RoaXMuZGVmYXVsdERyYWdnYWJsZU9wdGlvbl87XG5cbiAgICAgICAgdmFyIG1hcE9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgcHJlTWFwT3B0aW9ucywgZHJhZ2dhYmxlT3B0aW9ucyk7XG5cbiAgICAgICAgbWFwT3B0aW9ucy5taW5ab29tID0gX2NoZWNrTWluWm9vbShtYXBPcHRpb25zLm1pblpvb20sIG1pblpvb20pO1xuXG4gICAgICAgIHZhciBtYXAgPSBuZXcgbWFwcy5NYXAoX3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKF90aGlzLmdvb2dsZU1hcERvbV8pLCBtYXBPcHRpb25zKTtcblxuICAgICAgICBfdGhpcy5tYXBfID0gbWFwO1xuICAgICAgICBfdGhpcy5tYXBzXyA9IG1hcHM7XG5cbiAgICAgICAgX3RoaXMuX3NldExheWVycyhfdGhpcy5wcm9wcy5sYXllclR5cGVzKTtcblxuICAgICAgICAvLyBQYXJzZSBgZ29vZ2xlLm1hcHMudmVyc2lvbmAgdG8gY2FwdHVyZSB0aGUgbWFqb3IgdmVyc2lvbiBudW1iZXIuXG4gICAgICAgIHZhciB2ZXJzaW9uTWF0Y2ggPSBtYXBzLnZlcnNpb24ubWF0Y2goL14zXFwuKFxcZCspXFwuLyk7XG4gICAgICAgIC8vIFRoZSBtYWpvciB2ZXJzaW9uIGlzIHRoZSBmaXJzdCAoYW5kIG9ubHkpIGNhcHR1cmVkIGdyb3VwLlxuICAgICAgICB2YXIgbWFwc1ZlcnNpb24gPSB2ZXJzaW9uTWF0Y2ggJiYgTnVtYmVyKHZlcnNpb25NYXRjaFsxXSk7XG5cbiAgICAgICAgLy8gcmVuZGVyIGluIG92ZXJsYXlcbiAgICAgICAgdmFyIHRoaXNfID0gX3RoaXM7XG4gICAgICAgIHZhciBvdmVybGF5ID0gT2JqZWN0LmFzc2lnbihuZXcgbWFwcy5PdmVybGF5VmlldygpLCB7XG4gICAgICAgICAgb25BZGQ6IGZ1bmN0aW9uIG9uQWRkKCkge1xuICAgICAgICAgICAgdmFyIEtfTUFYX1dJRFRIID0gdHlwZW9mIHNjcmVlbiAhPT0gJ3VuZGVmaW5lZCcgPyBzY3JlZW4ud2lkdGggKyAncHgnIDogJzIwMDBweCc7XG4gICAgICAgICAgICB2YXIgS19NQVhfSEVJR0hUID0gdHlwZW9mIHNjcmVlbiAhPT0gJ3VuZGVmaW5lZCcgPyBzY3JlZW4uaGVpZ2h0ICsgJ3B4JyA6ICcyMDAwcHgnO1xuXG4gICAgICAgICAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBkaXYuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ3RyYW5zcGFyZW50JztcbiAgICAgICAgICAgIGRpdi5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgICAgICAgICBkaXYuc3R5bGUubGVmdCA9ICcwcHgnO1xuICAgICAgICAgICAgZGl2LnN0eWxlLnRvcCA9ICcwcHgnO1xuICAgICAgICAgICAgZGl2LnN0eWxlLndpZHRoID0gS19NQVhfV0lEVEg7IC8vIHByZXZlbnRzIHNvbWUgY2hyb21lIGRyYXcgZGVmZWN0c1xuICAgICAgICAgICAgZGl2LnN0eWxlLmhlaWdodCA9IEtfTUFYX0hFSUdIVDtcblxuICAgICAgICAgICAgaWYgKHRoaXNfLnByb3BzLm92ZXJsYXlWaWV3RGl2U3R5bGUpIHtcbiAgICAgICAgICAgICAgdmFyIG92ZXJsYXlWaWV3RGl2U3R5bGUgPSB0aGlzXy5wcm9wcy5vdmVybGF5Vmlld0RpdlN0eWxlO1xuXG4gICAgICAgICAgICAgIGlmICgodHlwZW9mIG92ZXJsYXlWaWV3RGl2U3R5bGUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKG92ZXJsYXlWaWV3RGl2U3R5bGUpKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhvdmVybGF5Vmlld0RpdlN0eWxlKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wZXJ0eSkge1xuICAgICAgICAgICAgICAgICAgZGl2LnN0eWxlW3Byb3BlcnR5XSA9IG92ZXJsYXlWaWV3RGl2U3R5bGVbcHJvcGVydHldO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBwYW5lcyA9IHRoaXMuZ2V0UGFuZXMoKTtcbiAgICAgICAgICAgIHBhbmVzLm92ZXJsYXlNb3VzZVRhcmdldC5hcHBlbmRDaGlsZChkaXYpO1xuICAgICAgICAgICAgdGhpc18uZ2VvU2VydmljZV8uc2V0TWFwQ2FudmFzUHJvamVjdGlvbihtYXBzLCBvdmVybGF5LmdldFByb2plY3Rpb24oKSk7XG5cbiAgICAgICAgICAgIGlmICghSVNfUkVBQ1RfMTYpIHtcbiAgICAgICAgICAgICAgY3JlYXRlUG9ydGFsKHRoaXNfLCB0aGlzXy5fcmVuZGVyUG9ydGFsKCksIGRpdixcbiAgICAgICAgICAgICAgLy8gcmVtb3ZlIHByZXJlbmRlcmVkIG1hcmtlcnNcbiAgICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzXy5zZXRTdGF0ZSh7IG92ZXJsYXk6IGRpdiB9KTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzXy5zZXRTdGF0ZSh7IG92ZXJsYXk6IGRpdiB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIG9uUmVtb3ZlOiBmdW5jdGlvbiBvblJlbW92ZSgpIHtcbiAgICAgICAgICAgIHZhciByZW5kZXJlZE92ZXJsYXkgPSB0aGlzXy5zdGF0ZS5vdmVybGF5O1xuICAgICAgICAgICAgaWYgKHJlbmRlcmVkT3ZlcmxheSAmJiAhSVNfUkVBQ1RfMTYpIHtcbiAgICAgICAgICAgICAgX3JlYWN0RG9tMi5kZWZhdWx0LnVubW91bnRDb21wb25lbnRBdE5vZGUocmVuZGVyZWRPdmVybGF5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXNfLnNldFN0YXRlKHsgb3ZlcmxheTogbnVsbCB9KTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGRyYXc6IGZ1bmN0aW9uIGRyYXcoKSB7XG4gICAgICAgICAgICB0aGlzXy51cGRhdGVDb3VudGVyXysrO1xuICAgICAgICAgICAgdGhpc18uX29uQm91bmRzQ2hhbmdlZChtYXAsIG1hcHMsICF0aGlzXy5wcm9wcy5kZWJvdW5jZWQpO1xuXG4gICAgICAgICAgICBpZiAoIXRoaXNfLmdvb2dsZUFwaUxvYWRlZENhbGxlZF8pIHtcbiAgICAgICAgICAgICAgdGhpc18uX29uR29vZ2xlQXBpTG9hZGVkKHsgbWFwOiBtYXAsIG1hcHM6IG1hcHMsIHJlZjogdGhpc18uZ29vZ2xlTWFwRG9tXyB9KTtcbiAgICAgICAgICAgICAgdGhpc18uZ29vZ2xlQXBpTG9hZGVkQ2FsbGVkXyA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzXy5tb3VzZV8pIHtcbiAgICAgICAgICAgICAgdmFyIGxhdExuZyA9IHRoaXNfLmdlb1NlcnZpY2VfLmZyb21Db250YWluZXJQaXhlbFRvTGF0TG5nKHRoaXNfLm1vdXNlXyk7XG4gICAgICAgICAgICAgIHRoaXNfLm1vdXNlXy5sYXQgPSBsYXRMbmcubGF0O1xuICAgICAgICAgICAgICB0aGlzXy5tb3VzZV8ubG5nID0gbGF0TG5nLmxuZztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpc18uX29uQ2hpbGRNb3VzZU1vdmUoKTtcblxuICAgICAgICAgICAgaWYgKHRoaXNfLm1hcmtlcnNEaXNwYXRjaGVyXykge1xuICAgICAgICAgICAgICB0aGlzXy5tYXJrZXJzRGlzcGF0Y2hlcl8uZW1pdCgna09OX0NIQU5HRScpO1xuICAgICAgICAgICAgICBpZiAodGhpc18uZmlyZU1vdXNlRXZlbnRPbklkbGVfKSB7XG4gICAgICAgICAgICAgICAgdGhpc18ubWFya2Vyc0Rpc3BhdGNoZXJfLmVtaXQoJ2tPTl9NT1VTRV9QT1NJVElPTl9DSEFOR0UnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgX3RoaXMub3ZlcmxheV8gPSBvdmVybGF5O1xuXG4gICAgICAgIG92ZXJsYXkuc2V0TWFwKG1hcCk7XG4gICAgICAgIGlmIChfdGhpcy5wcm9wcy5oZWF0bWFwLnBvc2l0aW9ucykge1xuICAgICAgICAgIF90aGlzLmhlYXRtYXAuc2V0TWFwKG1hcCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoX3RoaXMucHJvcHMub25UaWxlc0xvYWRlZCkge1xuICAgICAgICAgIG1hcHMuZXZlbnQuYWRkTGlzdGVuZXIobWFwLCAndGlsZXNsb2FkZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzXy5fb25UaWxlc0xvYWRlZCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgbWFwcy5ldmVudC5hZGRMaXN0ZW5lcihtYXAsICd6b29tX2NoYW5nZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgLy8gcmVjYWxjIHBvc2l0aW9uIGF0IHpvb20gc3RhcnRcbiAgICAgICAgICBpZiAodGhpc18uZ2VvU2VydmljZV8uZ2V0Wm9vbSgpICE9PSBtYXAuZ2V0Wm9vbSgpKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXNfLnpvb21BbmltYXRpb25JblByb2dyZXNzXykge1xuICAgICAgICAgICAgICB0aGlzXy56b29tQW5pbWF0aW9uSW5Qcm9ncmVzc18gPSB0cnVlO1xuICAgICAgICAgICAgICB0aGlzXy5fb25ab29tQW5pbWF0aW9uU3RhcnQobWFwLnpvb20pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiBkcmF3KCkgaXMgbm90IGNhbGxlZCBlYWNoIGZyYW1lIGR1cmluZyBhIHpvb20gYW5pbWF0aW9uLFxuICAgICAgICAgICAgLy8gc2ltdWxhdGUgaXQuXG4gICAgICAgICAgICBpZiAobWFwc1ZlcnNpb24gPCBEUkFXX0NBTExFRF9EVVJJTkdfQU5JTUFUSU9OX1ZFUlNJT04pIHtcbiAgICAgICAgICAgICAgdmFyIFRJTUVPVVRfWk9PTSA9IDMwMDtcblxuICAgICAgICAgICAgICBpZiAobmV3IERhdGUoKS5nZXRUaW1lKCkgLSBfdGhpcy56b29tQ29udHJvbENsaWNrVGltZV8gPCBUSU1FT1VUX1pPT00pIHtcbiAgICAgICAgICAgICAgICAvLyB0aGVyZSBpcyBzdHJhbmdlIEdvb2dsZSBNYXAgQXBpIGJlaGF2aW9yIGluIGNocm9tZSB3aGVuIHpvb20gYW5pbWF0aW9uIG9mIG1hcFxuICAgICAgICAgICAgICAgIC8vIGlzIHN0YXJ0ZWQgb25seSBvbiBzZWNvbmQgcmFmIGNhbGwsIGlmIHdhcyBjbGljayBvbiB6b29tIGNvbnRyb2xcbiAgICAgICAgICAgICAgICAvLyBvciArLSBrZXlzIHByZXNzZWQsIHNvIGkgd2FpdCBmb3IgdHdvIHJhZnMgYmVmb3JlIGNoYW5nZSBzdGF0ZVxuXG4gICAgICAgICAgICAgICAgLy8gdGhpcyBkb2VzIG5vdCBmdWxseSBwcmV2ZW50IGFuaW1hdGlvbiBqdW1wXG4gICAgICAgICAgICAgICAgLy8gYnV0IHJlZHVjZSBpdCdzIG9jY3VyZW5jZSBwcm9iYWJpbGl0eVxuICAgICAgICAgICAgICAgICgwLCBfcmFmMi5kZWZhdWx0KShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKDAsIF9yYWYyLmRlZmF1bHQpKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc18udXBkYXRlQ291bnRlcl8rKztcbiAgICAgICAgICAgICAgICAgICAgdGhpc18uX29uQm91bmRzQ2hhbmdlZChtYXAsIG1hcHMpO1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpc18udXBkYXRlQ291bnRlcl8rKztcbiAgICAgICAgICAgICAgICB0aGlzXy5fb25Cb3VuZHNDaGFuZ2VkKG1hcCwgbWFwcyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIG1hcHMuZXZlbnQuYWRkTGlzdGVuZXIobWFwLCAnaWRsZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoX3RoaXMucmVzZXRTaXplT25JZGxlXykge1xuICAgICAgICAgICAgX3RoaXMuX3NldFZpZXdTaXplKCk7XG4gICAgICAgICAgICB2YXIgY3Vyck1pblpvb20gPSBfdGhpcy5fY29tcHV0ZU1pblpvb20oX3RoaXMucHJvcHMub3B0aW9ucy5taW5ab29tKTtcblxuICAgICAgICAgICAgaWYgKGN1cnJNaW5ab29tICE9PSBfdGhpcy5taW5ab29tXykge1xuICAgICAgICAgICAgICBfdGhpcy5taW5ab29tXyA9IGN1cnJNaW5ab29tO1xuICAgICAgICAgICAgICBtYXAuc2V0T3B0aW9ucyh7IG1pblpvb206IGN1cnJNaW5ab29tIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfdGhpcy5yZXNldFNpemVPbklkbGVfID0gZmFsc2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRoaXNfLnpvb21BbmltYXRpb25JblByb2dyZXNzXykge1xuICAgICAgICAgICAgdGhpc18uem9vbUFuaW1hdGlvbkluUHJvZ3Jlc3NfID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzXy5fb25ab29tQW5pbWF0aW9uRW5kKG1hcC56b29tKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzXy51cGRhdGVDb3VudGVyXysrO1xuICAgICAgICAgIHRoaXNfLl9vbkJvdW5kc0NoYW5nZWQobWFwLCBtYXBzKTtcblxuICAgICAgICAgIHRoaXNfLmRyYWdUaW1lXyA9IDA7XG5cbiAgICAgICAgICBpZiAodGhpc18ubWFya2Vyc0Rpc3BhdGNoZXJfKSB7XG4gICAgICAgICAgICB0aGlzXy5tYXJrZXJzRGlzcGF0Y2hlcl8uZW1pdCgna09OX0NIQU5HRScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgbWFwcy5ldmVudC5hZGRMaXN0ZW5lcihtYXAsICdtb3VzZW92ZXInLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgLy8gaGFzIGFkdmFudGFnZSBvdmVyIGRpdiBNb3VzZUxlYXZlXG4gICAgICAgICAgdGhpc18ubW91c2VJbk1hcF8gPSB0cnVlO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBhbiBhbHRlcm5hdGl2ZSB3YXkgdG8ga25vdyB0aGUgbW91c2UgaXMgYmFjayB3aXRoaW4gdGhlIG1hcFxuICAgICAgICAvLyBUaGlzIHdvdWxkIG5vdCBmaXJlIHdoZW4gY2xpY2tpbmcvaW50ZXJhY3Rpbmcgd2l0aCBnb29nbGUgbWFwc1xuICAgICAgICAvLyBvd24gb24tbWFwIGNvdW50cm9scyttYXJrZXJzLiBUaGlzIGhhbmRsZXMgYW4gZWRnZSBjYXNlIGZvciB0b3VjaCBkZXZpY2VzXG4gICAgICAgIC8vICsgJ2RyYWdnYWJsZTpmYWxzZScgY3VzdG9tIG9wdGlvbi4gU2VlICMzMzIgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgbWFwcy5ldmVudC5hZGRMaXN0ZW5lcihtYXAsICdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGlzXy5tb3VzZUluTWFwXyA9IHRydWU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIG1hcHMuZXZlbnQuYWRkTGlzdGVuZXIobWFwLCAnbW91c2VvdXQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgLy8gaGFzIGFkdmFudGFnZSBvdmVyIGRpdiBNb3VzZUxlYXZlXG4gICAgICAgICAgdGhpc18ubW91c2VJbk1hcF8gPSBmYWxzZTtcbiAgICAgICAgICB0aGlzXy5tb3VzZV8gPSBudWxsO1xuICAgICAgICAgIHRoaXNfLm1hcmtlcnNEaXNwYXRjaGVyXy5lbWl0KCdrT05fTU9VU0VfUE9TSVRJT05fQ0hBTkdFJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIG1hcHMuZXZlbnQuYWRkTGlzdGVuZXIobWFwLCAnZHJhZycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGlzXy5kcmFnVGltZV8gPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgICB0aGlzXy5fb25EcmFnKG1hcCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIG1hcHMuZXZlbnQuYWRkTGlzdGVuZXIobWFwLCAnZHJhZ2VuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAvLyAnZHJhZ2VuZCcgZmlyZXMgb24gbW91c2UgcmVsZWFzZS5cbiAgICAgICAgICAvLyAnaWRsZScgbGlzdGVuZXIgd2FpdHMgdW50aWwgZHJhZyBpbmVydGlhIGVuZHMgYmVmb3JlIGZpcmluZyBgb25EcmFnRW5kYFxuICAgICAgICAgIHZhciBpZGxlTGlzdGVuZXIgPSBtYXBzLmV2ZW50LmFkZExpc3RlbmVyKG1hcCwgJ2lkbGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBtYXBzLmV2ZW50LnJlbW92ZUxpc3RlbmVyKGlkbGVMaXN0ZW5lcik7XG4gICAgICAgICAgICB0aGlzXy5fb25EcmFnRW5kKG1hcCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyB1c2VyIGNob29zaW5nIHNhdGVsbGl0ZSB2cyByb2FkcywgZXRjXG4gICAgICAgIG1hcHMuZXZlbnQuYWRkTGlzdGVuZXIobWFwLCAnbWFwdHlwZWlkX2NoYW5nZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGhpc18uX29uTWFwVHlwZUlkQ2hhbmdlKG1hcC5nZXRNYXBUeXBlSWQoKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgLy8gbm90aWZ5IGNhbGxiYWNrIG9mIGxvYWQgZmFpbHVyZVxuICAgICAgICBfdGhpcy5fb25Hb29nbGVBcGlMb2FkZWQoe1xuICAgICAgICAgIG1hcDogbnVsbCxcbiAgICAgICAgICBtYXBzOiBudWxsLFxuICAgICAgICAgIHJlZjogX3RoaXMuZ29vZ2xlTWFwRG9tX1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc29sZS5lcnJvcihlKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICAgIHRocm93IGU7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuX29uR29vZ2xlQXBpTG9hZGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLm9uR29vZ2xlQXBpTG9hZGVkKSB7XG4gICAgICAgIHZhciBfdGhpcyRwcm9wcztcblxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBfdGhpcy5wcm9wcy55ZXNJV2FudFRvVXNlR29vZ2xlTWFwQXBpSW50ZXJuYWxzICE9PSB0cnVlKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKCdHb29nbGVNYXA6ICcgKyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICAgICAgJ1VzYWdlIG9mIGludGVybmFsIGFwaSBvYmplY3RzIGlzIGRhbmdlcm91cyAnICsgJ2FuZCBjYW4gY2F1c2UgYSBsb3Qgb2YgaXNzdWVzLlxcbicgKyAnVG8gaGlkZSB0aGlzIHdhcm5pbmcgYWRkIHllc0lXYW50VG9Vc2VHb29nbGVNYXBBcGlJbnRlcm5hbHM9e3RydWV9ICcgKyAndG8gPEdvb2dsZU1hcCBpbnN0YW5jZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgKF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMpLm9uR29vZ2xlQXBpTG9hZGVkLmFwcGx5KF90aGlzJHByb3BzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5fZ2V0SG92ZXJEaXN0YW5jZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy5wcm9wcy5ob3ZlckRpc3RhbmNlO1xuICAgIH07XG5cbiAgICBfdGhpcy5fb25EcmFnID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMjtcblxuICAgICAgcmV0dXJuIF90aGlzLnByb3BzLm9uRHJhZyAmJiAoX3RoaXMkcHJvcHMyID0gX3RoaXMucHJvcHMpLm9uRHJhZy5hcHBseShfdGhpcyRwcm9wczIsIGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIF90aGlzLl9vbkRyYWdFbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMzO1xuXG4gICAgICByZXR1cm4gX3RoaXMucHJvcHMub25EcmFnRW5kICYmIChfdGhpcyRwcm9wczMgPSBfdGhpcy5wcm9wcykub25EcmFnRW5kLmFwcGx5KF90aGlzJHByb3BzMywgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuX29uTWFwVHlwZUlkQ2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzNDtcblxuICAgICAgcmV0dXJuIF90aGlzLnByb3BzLm9uTWFwVHlwZUlkQ2hhbmdlICYmIChfdGhpcyRwcm9wczQgPSBfdGhpcy5wcm9wcykub25NYXBUeXBlSWRDaGFuZ2UuYXBwbHkoX3RoaXMkcHJvcHM0LCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBfdGhpcy5fb25ab29tQW5pbWF0aW9uU3RhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM1O1xuXG4gICAgICByZXR1cm4gX3RoaXMucHJvcHMub25ab29tQW5pbWF0aW9uU3RhcnQgJiYgKF90aGlzJHByb3BzNSA9IF90aGlzLnByb3BzKS5vblpvb21BbmltYXRpb25TdGFydC5hcHBseShfdGhpcyRwcm9wczUsIGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIF90aGlzLl9vblpvb21BbmltYXRpb25FbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM2O1xuXG4gICAgICByZXR1cm4gX3RoaXMucHJvcHMub25ab29tQW5pbWF0aW9uRW5kICYmIChfdGhpcyRwcm9wczYgPSBfdGhpcy5wcm9wcykub25ab29tQW5pbWF0aW9uRW5kLmFwcGx5KF90aGlzJHByb3BzNiwgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuX29uVGlsZXNMb2FkZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMucHJvcHMub25UaWxlc0xvYWRlZCAmJiBfdGhpcy5wcm9wcy5vblRpbGVzTG9hZGVkKCk7XG4gICAgfTtcblxuICAgIF90aGlzLl9vbkNoaWxkQ2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMub25DaGlsZENsaWNrKSB7XG4gICAgICAgIHZhciBfdGhpcyRwcm9wczc7XG5cbiAgICAgICAgcmV0dXJuIChfdGhpcyRwcm9wczcgPSBfdGhpcy5wcm9wcykub25DaGlsZENsaWNrLmFwcGx5KF90aGlzJHByb3BzNywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfTtcblxuICAgIF90aGlzLl9vbkNoaWxkTW91c2VEb3duID0gZnVuY3Rpb24gKGhvdmVyS2V5LCBjaGlsZFByb3BzKSB7XG4gICAgICBfdGhpcy5jaGlsZE1vdXNlRG93bkFyZ3NfID0gW2hvdmVyS2V5LCBjaGlsZFByb3BzXTtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkNoaWxkTW91c2VEb3duKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uQ2hpbGRNb3VzZURvd24oaG92ZXJLZXksIGNoaWxkUHJvcHMsIF9leHRlbmRzKHt9LCBfdGhpcy5tb3VzZV8pKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuX29uQ2hpbGRNb3VzZVVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLmNoaWxkTW91c2VEb3duQXJnc18pIHtcbiAgICAgICAgaWYgKF90aGlzLnByb3BzLm9uQ2hpbGRNb3VzZVVwKSB7XG4gICAgICAgICAgdmFyIF90aGlzJHByb3BzODtcblxuICAgICAgICAgIChfdGhpcyRwcm9wczggPSBfdGhpcy5wcm9wcykub25DaGlsZE1vdXNlVXAuYXBwbHkoX3RoaXMkcHJvcHM4LCBfdGhpcy5jaGlsZE1vdXNlRG93bkFyZ3NfLmNvbmNhdChbX2V4dGVuZHMoe30sIF90aGlzLm1vdXNlXyldKSk7XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMuY2hpbGRNb3VzZURvd25BcmdzXyA9IG51bGw7XG4gICAgICAgIF90aGlzLmNoaWxkTW91c2VVcFRpbWVfID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLl9vbkNoaWxkTW91c2VNb3ZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLmNoaWxkTW91c2VEb3duQXJnc18pIHtcbiAgICAgICAgaWYgKF90aGlzLnByb3BzLm9uQ2hpbGRNb3VzZU1vdmUpIHtcbiAgICAgICAgICB2YXIgX3RoaXMkcHJvcHM5O1xuXG4gICAgICAgICAgKF90aGlzJHByb3BzOSA9IF90aGlzLnByb3BzKS5vbkNoaWxkTW91c2VNb3ZlLmFwcGx5KF90aGlzJHByb3BzOSwgX3RoaXMuY2hpbGRNb3VzZURvd25BcmdzXy5jb25jYXQoW19leHRlbmRzKHt9LCBfdGhpcy5tb3VzZV8pXSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLl9vbkNoaWxkTW91c2VFbnRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkNoaWxkTW91c2VFbnRlcikge1xuICAgICAgICB2YXIgX3RoaXMkcHJvcHMxMDtcblxuICAgICAgICByZXR1cm4gKF90aGlzJHByb3BzMTAgPSBfdGhpcy5wcm9wcykub25DaGlsZE1vdXNlRW50ZXIuYXBwbHkoX3RoaXMkcHJvcHMxMCwgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfTtcblxuICAgIF90aGlzLl9vbkNoaWxkTW91c2VMZWF2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkNoaWxkTW91c2VMZWF2ZSkge1xuICAgICAgICB2YXIgX3RoaXMkcHJvcHMxMTtcblxuICAgICAgICByZXR1cm4gKF90aGlzJHByb3BzMTEgPSBfdGhpcy5wcm9wcykub25DaGlsZE1vdXNlTGVhdmUuYXBwbHkoX3RoaXMkcHJvcHMxMSwgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfTtcblxuICAgIF90aGlzLl9zZXRWaWV3U2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghX3RoaXMubW91bnRlZF8pIHJldHVybjtcbiAgICAgIGlmIChpc0Z1bGxTY3JlZW4oKSkge1xuICAgICAgICBfdGhpcy5nZW9TZXJ2aWNlXy5zZXRWaWV3U2l6ZSh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBtYXBEb20gPSBfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUoX3RoaXMuZ29vZ2xlTWFwRG9tXyk7XG4gICAgICAgIF90aGlzLmdlb1NlcnZpY2VfLnNldFZpZXdTaXplKG1hcERvbS5jbGllbnRXaWR0aCwgbWFwRG9tLmNsaWVudEhlaWdodCk7XG4gICAgICB9XG4gICAgICBfdGhpcy5fb25Cb3VuZHNDaGFuZ2VkKCk7XG4gICAgfTtcblxuICAgIF90aGlzLl9vbldpbmRvd1Jlc2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnJlc2V0U2l6ZU9uSWRsZV8gPSB0cnVlO1xuICAgIH07XG5cbiAgICBfdGhpcy5fb25NYXBNb3VzZU1vdmUgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKCFfdGhpcy5tb3VzZUluTWFwXykgcmV0dXJuO1xuXG4gICAgICB2YXIgY3VyclRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgIHZhciBLX1JFQ0FMQ19DTElFTlRfUkVDVF9NUyA9IDUwO1xuXG4gICAgICBpZiAoY3VyclRpbWUgLSBfdGhpcy5tb3VzZU1vdmVUaW1lXyA+IEtfUkVDQUxDX0NMSUVOVF9SRUNUX01TKSB7XG4gICAgICAgIF90aGlzLmJvdW5kaW5nUmVjdF8gPSBlLmN1cnJlbnRUYXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICB9XG4gICAgICBfdGhpcy5tb3VzZU1vdmVUaW1lXyA9IGN1cnJUaW1lO1xuXG4gICAgICB2YXIgbW91c2VQb3NYID0gZS5jbGllbnRYIC0gX3RoaXMuYm91bmRpbmdSZWN0Xy5sZWZ0O1xuICAgICAgdmFyIG1vdXNlUG9zWSA9IGUuY2xpZW50WSAtIF90aGlzLmJvdW5kaW5nUmVjdF8udG9wO1xuXG4gICAgICBpZiAoIV90aGlzLm1vdXNlXykge1xuICAgICAgICBfdGhpcy5tb3VzZV8gPSB7IHg6IDAsIHk6IDAsIGxhdDogMCwgbG5nOiAwIH07XG4gICAgICB9XG5cbiAgICAgIF90aGlzLm1vdXNlXy54ID0gbW91c2VQb3NYO1xuICAgICAgX3RoaXMubW91c2VfLnkgPSBtb3VzZVBvc1k7XG5cbiAgICAgIHZhciBsYXRMbmcgPSBfdGhpcy5nZW9TZXJ2aWNlXy5mcm9tQ29udGFpbmVyUGl4ZWxUb0xhdExuZyhfdGhpcy5tb3VzZV8pO1xuICAgICAgX3RoaXMubW91c2VfLmxhdCA9IGxhdExuZy5sYXQ7XG4gICAgICBfdGhpcy5tb3VzZV8ubG5nID0gbGF0TG5nLmxuZztcblxuICAgICAgX3RoaXMuX29uQ2hpbGRNb3VzZU1vdmUoKTtcblxuICAgICAgaWYgKGN1cnJUaW1lIC0gX3RoaXMuZHJhZ1RpbWVfIDwgS19JRExFX1RJTUVPVVQpIHtcbiAgICAgICAgX3RoaXMuZmlyZU1vdXNlRXZlbnRPbklkbGVfID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLm1hcmtlcnNEaXNwYXRjaGVyXy5lbWl0KCdrT05fTU9VU0VfUE9TSVRJT05fQ0hBTkdFJyk7XG4gICAgICAgIF90aGlzLmZpcmVNb3VzZUV2ZW50T25JZGxlXyA9IGZhbHNlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5fb25DbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczEyO1xuXG4gICAgICByZXR1cm4gX3RoaXMucHJvcHMub25DbGljayAmJiAhX3RoaXMuY2hpbGRNb3VzZURvd25BcmdzXyAmJiBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIF90aGlzLmNoaWxkTW91c2VVcFRpbWVfID4gS19JRExFX0NMSUNLX1RJTUVPVVQgJiYgX3RoaXMuZHJhZ1RpbWVfID09PSAwICYmIChfdGhpcyRwcm9wczEyID0gX3RoaXMucHJvcHMpLm9uQ2xpY2suYXBwbHkoX3RoaXMkcHJvcHMxMiwgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuX29uTWFwQ2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy5tYXJrZXJzRGlzcGF0Y2hlcl8pIHtcbiAgICAgICAgLy8gc3VwcG9ydCB0b3VjaCBldmVudHMgYW5kIHJlY2FsY3VsYXRlIG1vdXNlIHBvc2l0aW9uIG9uIGNsaWNrXG4gICAgICAgIF90aGlzLl9vbk1hcE1vdXNlTW92ZShldmVudCk7XG4gICAgICAgIHZhciBjdXJyVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICBpZiAoY3VyclRpbWUgLSBfdGhpcy5kcmFnVGltZV8gPiBLX0lETEVfVElNRU9VVCkge1xuICAgICAgICAgIGlmIChfdGhpcy5tb3VzZV8pIHtcbiAgICAgICAgICAgIF90aGlzLl9vbkNsaWNrKF9leHRlbmRzKHt9LCBfdGhpcy5tb3VzZV8sIHtcbiAgICAgICAgICAgICAgZXZlbnQ6IGV2ZW50XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX3RoaXMubWFya2Vyc0Rpc3BhdGNoZXJfLmVtaXQoJ2tPTl9DTElDSycsIGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5fb25NYXBNb3VzZURvd25OYXRpdmUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmICghX3RoaXMubW91c2VJbk1hcF8pIHJldHVybjtcblxuICAgICAgX3RoaXMuX29uTWFwTW91c2VEb3duKGV2ZW50KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuX29uTWFwTW91c2VEb3duID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoX3RoaXMubWFya2Vyc0Rpc3BhdGNoZXJfKSB7XG4gICAgICAgIHZhciBjdXJyVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICBpZiAoY3VyclRpbWUgLSBfdGhpcy5kcmFnVGltZV8gPiBLX0lETEVfVElNRU9VVCkge1xuICAgICAgICAgIC8vIEhvdmVyZWQgbWFya2VyIGRldGVjdGVkIGF0IG1vdXNlIG1vdmUgY291bGQgYmUgZGVsZXRlZCBhdCBtb3VzZSBkb3duIHRpbWVcbiAgICAgICAgICAvLyBzbyBpdCB3aWxsIGJlIGdvb2QgdG8gZm9yY2UgaG92ZXJlZCBtYXJrZXIgcmVjYWxjdWxhdGlvblxuICAgICAgICAgIF90aGlzLl9vbk1hcE1vdXNlTW92ZShldmVudCk7XG4gICAgICAgICAgX3RoaXMubWFya2Vyc0Rpc3BhdGNoZXJfLmVtaXQoJ2tPTl9NRE9XTicsIGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5fb25NYXBNb3VzZURvd25DYXB0dXJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCgwLCBfZGV0ZWN0Mi5kZWZhdWx0KSgpLmlzQ2hyb21lKSB7XG4gICAgICAgIC8vIHRvIGZpeCBzdHJhbmdlIHpvb20gaW4gY2hyb21lXG4gICAgICAgIF90aGlzLnpvb21Db250cm9sQ2xpY2tUaW1lXyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5fb25LZXlEb3duQ2FwdHVyZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICgoMCwgX2RldGVjdDIuZGVmYXVsdCkoKS5pc0Nocm9tZSkge1xuICAgICAgICBfdGhpcy56b29tQ29udHJvbENsaWNrVGltZV8gPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuX2lzQ2VudGVyRGVmaW5lZCA9IGZ1bmN0aW9uIChjZW50ZXIpIHtcbiAgICAgIHJldHVybiBjZW50ZXIgJiYgKCgwLCBfaXNQbGFpbk9iamVjdDIuZGVmYXVsdCkoY2VudGVyKSAmJiAoMCwgX2lzTnVtYmVyMi5kZWZhdWx0KShjZW50ZXIubGF0KSAmJiAoMCwgX2lzTnVtYmVyMi5kZWZhdWx0KShjZW50ZXIubG5nKSB8fCBjZW50ZXIubGVuZ3RoID09PSAyICYmICgwLCBfaXNOdW1iZXIyLmRlZmF1bHQpKGNlbnRlclswXSkgJiYgKDAsIF9pc051bWJlcjIuZGVmYXVsdCkoY2VudGVyWzFdKSk7XG4gICAgfTtcblxuICAgIF90aGlzLl9vbkJvdW5kc0NoYW5nZWQgPSBmdW5jdGlvbiAobWFwLCBtYXBzLCBjYWxsRXh0Qm91bmRzQ2hhbmdlKSB7XG4gICAgICBpZiAobWFwKSB7XG4gICAgICAgIHZhciBnbUMgPSBtYXAuZ2V0Q2VudGVyKCk7XG4gICAgICAgIF90aGlzLmdlb1NlcnZpY2VfLnNldFZpZXcoW2dtQy5sYXQoKSwgZ21DLmxuZygpXSwgbWFwLmdldFpvb20oKSwgMCk7XG4gICAgICB9XG5cbiAgICAgIGlmICgoX3RoaXMucHJvcHMub25DaGFuZ2UgfHwgX3RoaXMucHJvcHMub25Cb3VuZHNDaGFuZ2UpICYmIF90aGlzLmdlb1NlcnZpY2VfLmNhblByb2plY3QoKSkge1xuICAgICAgICB2YXIgem9vbSA9IF90aGlzLmdlb1NlcnZpY2VfLmdldFpvb20oKTtcbiAgICAgICAgdmFyIGJvdW5kcyA9IF90aGlzLmdlb1NlcnZpY2VfLmdldEJvdW5kcygpO1xuICAgICAgICB2YXIgY2VudGVyTGF0TG5nID0gX3RoaXMuZ2VvU2VydmljZV8uZ2V0Q2VudGVyKCk7XG5cbiAgICAgICAgaWYgKCEoMCwgX2lzQXJyYXlzRXF1YWxFcHMyLmRlZmF1bHQpKGJvdW5kcywgX3RoaXMucHJldkJvdW5kc18sIGtFUFMpKSB7XG4gICAgICAgICAgaWYgKGNhbGxFeHRCb3VuZHNDaGFuZ2UgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICB2YXIgbWFyZ2luQm91bmRzID0gX3RoaXMuZ2VvU2VydmljZV8uZ2V0Qm91bmRzKF90aGlzLnByb3BzLm1hcmdpbik7XG4gICAgICAgICAgICBpZiAoX3RoaXMucHJvcHMub25Cb3VuZHNDaGFuZ2UpIHtcbiAgICAgICAgICAgICAgX3RoaXMucHJvcHMub25Cb3VuZHNDaGFuZ2UoX3RoaXMuY2VudGVySXNPYmplY3RfID8gX2V4dGVuZHMoe30sIGNlbnRlckxhdExuZykgOiBbY2VudGVyTGF0TG5nLmxhdCwgY2VudGVyTGF0TG5nLmxuZ10sIHpvb20sIGJvdW5kcywgbWFyZ2luQm91bmRzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKF90aGlzLnByb3BzLm9uQ2hhbmdlKSB7XG4gICAgICAgICAgICAgIF90aGlzLnByb3BzLm9uQ2hhbmdlKHtcbiAgICAgICAgICAgICAgICBjZW50ZXI6IF9leHRlbmRzKHt9LCBjZW50ZXJMYXRMbmcpLFxuICAgICAgICAgICAgICAgIHpvb206IHpvb20sXG4gICAgICAgICAgICAgICAgYm91bmRzOiB7XG4gICAgICAgICAgICAgICAgICBudzoge1xuICAgICAgICAgICAgICAgICAgICBsYXQ6IGJvdW5kc1swXSxcbiAgICAgICAgICAgICAgICAgICAgbG5nOiBib3VuZHNbMV1cbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBzZToge1xuICAgICAgICAgICAgICAgICAgICBsYXQ6IGJvdW5kc1syXSxcbiAgICAgICAgICAgICAgICAgICAgbG5nOiBib3VuZHNbM11cbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBzdzoge1xuICAgICAgICAgICAgICAgICAgICBsYXQ6IGJvdW5kc1s0XSxcbiAgICAgICAgICAgICAgICAgICAgbG5nOiBib3VuZHNbNV1cbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBuZToge1xuICAgICAgICAgICAgICAgICAgICBsYXQ6IGJvdW5kc1s2XSxcbiAgICAgICAgICAgICAgICAgICAgbG5nOiBib3VuZHNbN11cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG1hcmdpbkJvdW5kczoge1xuICAgICAgICAgICAgICAgICAgbnc6IHtcbiAgICAgICAgICAgICAgICAgICAgbGF0OiBtYXJnaW5Cb3VuZHNbMF0sXG4gICAgICAgICAgICAgICAgICAgIGxuZzogbWFyZ2luQm91bmRzWzFdXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgc2U6IHtcbiAgICAgICAgICAgICAgICAgICAgbGF0OiBtYXJnaW5Cb3VuZHNbMl0sXG4gICAgICAgICAgICAgICAgICAgIGxuZzogbWFyZ2luQm91bmRzWzNdXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgc3c6IHtcbiAgICAgICAgICAgICAgICAgICAgbGF0OiBtYXJnaW5Cb3VuZHNbNF0sXG4gICAgICAgICAgICAgICAgICAgIGxuZzogbWFyZ2luQm91bmRzWzVdXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgbmU6IHtcbiAgICAgICAgICAgICAgICAgICAgbGF0OiBtYXJnaW5Cb3VuZHNbNl0sXG4gICAgICAgICAgICAgICAgICAgIGxuZzogbWFyZ2luQm91bmRzWzddXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHNpemU6IF90aGlzLmdlb1NlcnZpY2VfLmhhc1NpemUoKSA/IHtcbiAgICAgICAgICAgICAgICAgIHdpZHRoOiBfdGhpcy5nZW9TZXJ2aWNlXy5nZXRXaWR0aCgpLFxuICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBfdGhpcy5nZW9TZXJ2aWNlXy5nZXRIZWlnaHQoKVxuICAgICAgICAgICAgICAgIH0gOiB7XG4gICAgICAgICAgICAgICAgICB3aWR0aDogMCxcbiAgICAgICAgICAgICAgICAgIGhlaWdodDogMFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF90aGlzLnByZXZCb3VuZHNfID0gYm91bmRzO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5fcmVnaXN0ZXJDaGlsZCA9IGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgIF90aGlzLmdvb2dsZU1hcERvbV8gPSByZWY7XG4gICAgfTtcblxuICAgIF90aGlzLm1vdW50ZWRfID0gZmFsc2U7XG4gICAgX3RoaXMuaW5pdGlhbGl6ZWRfID0gZmFsc2U7XG4gICAgX3RoaXMuZ29vZ2xlQXBpTG9hZGVkQ2FsbGVkXyA9IGZhbHNlO1xuXG4gICAgX3RoaXMubWFwXyA9IG51bGw7XG4gICAgX3RoaXMubWFwc18gPSBudWxsO1xuICAgIF90aGlzLnByZXZCb3VuZHNfID0gbnVsbDtcbiAgICBfdGhpcy5oZWF0bWFwID0gbnVsbDtcblxuICAgIF90aGlzLmxheWVyc18gPSB7fTtcblxuICAgIF90aGlzLm1vdXNlXyA9IG51bGw7XG4gICAgX3RoaXMubW91c2VNb3ZlVGltZV8gPSAwO1xuICAgIF90aGlzLmJvdW5kaW5nUmVjdF8gPSBudWxsO1xuICAgIF90aGlzLm1vdXNlSW5NYXBfID0gdHJ1ZTtcblxuICAgIF90aGlzLmRyYWdUaW1lXyA9IDA7XG4gICAgX3RoaXMuZmlyZU1vdXNlRXZlbnRPbklkbGVfID0gZmFsc2U7XG4gICAgX3RoaXMudXBkYXRlQ291bnRlcl8gPSAwO1xuXG4gICAgX3RoaXMubWFya2Vyc0Rpc3BhdGNoZXJfID0gbmV3IF9tYXJrZXJfZGlzcGF0Y2hlcjIuZGVmYXVsdChfdGhpcyk7XG4gICAgX3RoaXMuZ2VvU2VydmljZV8gPSBuZXcgX2dlbzIuZGVmYXVsdChLX0dPT0dMRV9USUxFX1NJWkUpO1xuICAgIF90aGlzLmNlbnRlcklzT2JqZWN0XyA9ICgwLCBfaXNQbGFpbk9iamVjdDIuZGVmYXVsdCkoX3RoaXMucHJvcHMuY2VudGVyKTtcblxuICAgIF90aGlzLm1pblpvb21fID0gREVGQVVMVF9NSU5fWk9PTTtcbiAgICBfdGhpcy5kZWZhdWx0RHJhZ2dhYmxlT3B0aW9uXyA9IHRydWU7XG5cbiAgICBfdGhpcy56b29tQ29udHJvbENsaWNrVGltZV8gPSAwO1xuXG4gICAgX3RoaXMuY2hpbGRNb3VzZURvd25BcmdzXyA9IG51bGw7XG4gICAgX3RoaXMuY2hpbGRNb3VzZVVwVGltZV8gPSAwO1xuXG4gICAgX3RoaXMuZ29vZ2xlTWFwRG9tXyA9IG51bGw7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKF90aGlzLnByb3BzLmFwaUtleSkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ0dvb2dsZU1hcDogJyArIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgICAgICAnYXBpS2V5IGlzIGRlcHJlY2F0ZWQsIHVzZSAnICsgJ2Jvb3RzdHJhcFVSTEtleXM9e3trZXk6IFlPVVJfQVBJX0tFWX19IGluc3RlYWQuJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkJvdW5kc0NoYW5nZSkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ0dvb2dsZU1hcDogJyArIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgICAgICAnb25Cb3VuZHNDaGFuZ2UgaXMgZGVwcmVjYXRlZCwgdXNlICcgKyAnb25DaGFuZ2Uoe2NlbnRlciwgem9vbSwgYm91bmRzLCAuLi5vdGhlcn0pIGluc3RlYWQuJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICgoMCwgX2lzRW1wdHkyLmRlZmF1bHQpKF90aGlzLnByb3BzLmNlbnRlcikgJiYgKDAsIF9pc0VtcHR5Mi5kZWZhdWx0KShfdGhpcy5wcm9wcy5kZWZhdWx0Q2VudGVyKSkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ0dvb2dsZU1hcDogY2VudGVyIG9yIGRlZmF1bHRDZW50ZXIgcHJvcGVydHkgbXVzdCBiZSBkZWZpbmVkJyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCgwLCBfaXNFbXB0eTIuZGVmYXVsdCkoX3RoaXMucHJvcHMuem9vbSkgJiYgKDAsIF9pc0VtcHR5Mi5kZWZhdWx0KShfdGhpcy5wcm9wcy5kZWZhdWx0Wm9vbSkpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdHb29nbGVNYXA6IHpvb20gb3IgZGVmYXVsdFpvb20gcHJvcGVydHkgbXVzdCBiZSBkZWZpbmVkJyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoX3RoaXMuX2lzQ2VudGVyRGVmaW5lZChfdGhpcy5wcm9wcy5jZW50ZXIgfHwgX3RoaXMucHJvcHMuZGVmYXVsdENlbnRlcikpIHtcbiAgICAgIHZhciBwcm9wc0NlbnRlciA9IGxhdExuZzJPYmooX3RoaXMucHJvcHMuY2VudGVyIHx8IF90aGlzLnByb3BzLmRlZmF1bHRDZW50ZXIpO1xuICAgICAgX3RoaXMuZ2VvU2VydmljZV8uc2V0Vmlldyhwcm9wc0NlbnRlciwgX3RoaXMucHJvcHMuem9vbSB8fCBfdGhpcy5wcm9wcy5kZWZhdWx0Wm9vbSwgMCk7XG4gICAgfVxuXG4gICAgX3RoaXMuem9vbUFuaW1hdGlvbkluUHJvZ3Jlc3NfID0gZmFsc2U7XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG92ZXJsYXk6IG51bGxcbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIEdvb2dsZU1hcC5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHRoaXMubW91bnRlZF8gPSB0cnVlO1xuICAgICgwLCBfcGFzc2l2ZUV2ZW50czIuZGVmYXVsdCkod2luZG93LCAncmVzaXplJywgdGhpcy5fb25XaW5kb3dSZXNpemUsIGZhbHNlKTtcbiAgICAoMCwgX3Bhc3NpdmVFdmVudHMyLmRlZmF1bHQpKHdpbmRvdywgJ2tleWRvd24nLCB0aGlzLl9vbktleURvd25DYXB0dXJlLCB0cnVlKTtcbiAgICB2YXIgbWFwRG9tID0gX3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKHRoaXMuZ29vZ2xlTWFwRG9tXyk7XG4gICAgLy8gZ21hcCBjYW4ndCBwcmV2ZW50IG1hcCBkcmFnIGlmIG1vdXNlZG93biBldmVudCBhbHJlYWR5IG9jY3VyZWRcbiAgICAvLyB0aGUgb25seSB3b3JrYXJvdW5kIEkgZmluZCBpcyBwcmV2ZW50IG1vdXNlZG93biBuYXRpdmUgYnJvd3NlciBldmVudFxuXG4gICAgaWYgKG1hcERvbSkge1xuICAgICAgKDAsIF9wYXNzaXZlRXZlbnRzMi5kZWZhdWx0KShtYXBEb20sICdtb3VzZWRvd24nLCB0aGlzLl9vbk1hcE1vdXNlRG93bk5hdGl2ZSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgKDAsIF9wYXNzaXZlRXZlbnRzMi5kZWZhdWx0KSh3aW5kb3csICdtb3VzZXVwJywgdGhpcy5fb25DaGlsZE1vdXNlVXAsIGZhbHNlKTtcbiAgICB2YXIgYm9vdHN0cmFwVVJMS2V5cyA9IF9leHRlbmRzKHt9LCB0aGlzLnByb3BzLmFwaUtleSAmJiB7IGtleTogdGhpcy5wcm9wcy5hcGlLZXkgfSwgdGhpcy5wcm9wcy5ib290c3RyYXBVUkxLZXlzKTtcblxuICAgIHRoaXMucHJvcHMuZ29vZ2xlTWFwTG9hZGVyKGJvb3RzdHJhcFVSTEtleXMsIHRoaXMucHJvcHMuaGVhdG1hcExpYnJhcnkpOyAvLyB3ZSBjYW4gc3RhcnQgbG9hZCBpbW1lZGlhdGx5XG5cbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHRvIGRldGVjdCBzaXplXG4gICAgICBfdGhpczIuX3NldFZpZXdTaXplKCk7XG4gICAgICBpZiAoX3RoaXMyLl9pc0NlbnRlckRlZmluZWQoX3RoaXMyLnByb3BzLmNlbnRlciB8fCBfdGhpczIucHJvcHMuZGVmYXVsdENlbnRlcikpIHtcbiAgICAgICAgX3RoaXMyLl9pbml0TWFwKCk7XG4gICAgICB9XG4gICAgfSwgMCwgdGhpcyk7XG4gICAgaWYgKHRoaXMucHJvcHMucmVzZXRCb3VuZHNPblJlc2l6ZSkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgX2RldGVjdEVsZW1lbnRSZXNpemUyLmRlZmF1bHQuYWRkUmVzaXplTGlzdGVuZXIobWFwRG9tLCB0aGF0Ll9tYXBEb21SZXNpemVDYWxsYmFjayk7XG4gICAgfVxuICB9O1xuXG4gIEdvb2dsZU1hcC5wcm90b3R5cGUuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoISgwLCBfc2hhbGxvd0VxdWFsMi5kZWZhdWx0KSh0aGlzLnByb3BzLmRlZmF1bHRDZW50ZXIsIG5leHRQcm9wcy5kZWZhdWx0Q2VudGVyKSkge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJHb29nbGVNYXA6IGRlZmF1bHRDZW50ZXIgcHJvcCBjaGFuZ2VkLiBZb3UgY2FuJ3QgY2hhbmdlIGRlZmF1bHQgcHJvcHMuXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoISgwLCBfc2hhbGxvd0VxdWFsMi5kZWZhdWx0KSh0aGlzLnByb3BzLmRlZmF1bHRab29tLCBuZXh0UHJvcHMuZGVmYXVsdFpvb20pKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIkdvb2dsZU1hcDogZGVmYXVsdFpvb20gcHJvcCBjaGFuZ2VkLiBZb3UgY2FuJ3QgY2hhbmdlIGRlZmF1bHQgcHJvcHMuXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghdGhpcy5faXNDZW50ZXJEZWZpbmVkKHRoaXMucHJvcHMuY2VudGVyKSAmJiB0aGlzLl9pc0NlbnRlckRlZmluZWQobmV4dFByb3BzLmNlbnRlcikpIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMzLl9pbml0TWFwKCk7XG4gICAgICB9LCAwKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5tYXBfKSB7XG4gICAgICB2YXIgY2VudGVyTGF0TG5nID0gdGhpcy5nZW9TZXJ2aWNlXy5nZXRDZW50ZXIoKTtcbiAgICAgIGlmICh0aGlzLl9pc0NlbnRlckRlZmluZWQobmV4dFByb3BzLmNlbnRlcikpIHtcbiAgICAgICAgdmFyIG5leHRQcm9wc0NlbnRlciA9IGxhdExuZzJPYmoobmV4dFByb3BzLmNlbnRlcik7XG4gICAgICAgIHZhciBjdXJyQ2VudGVyID0gdGhpcy5faXNDZW50ZXJEZWZpbmVkKHRoaXMucHJvcHMuY2VudGVyKSA/IGxhdExuZzJPYmoodGhpcy5wcm9wcy5jZW50ZXIpIDogbnVsbDtcblxuICAgICAgICBpZiAoIWN1cnJDZW50ZXIgfHwgTWF0aC5hYnMobmV4dFByb3BzQ2VudGVyLmxhdCAtIGN1cnJDZW50ZXIubGF0KSArIE1hdGguYWJzKG5leHRQcm9wc0NlbnRlci5sbmcgLSBjdXJyQ2VudGVyLmxuZykgPiBrRVBTKSB7XG4gICAgICAgICAgaWYgKE1hdGguYWJzKG5leHRQcm9wc0NlbnRlci5sYXQgLSBjZW50ZXJMYXRMbmcubGF0KSArIE1hdGguYWJzKG5leHRQcm9wc0NlbnRlci5sbmcgLSBjZW50ZXJMYXRMbmcubG5nKSA+IGtFUFMpIHtcbiAgICAgICAgICAgIHRoaXMubWFwXy5wYW5Ubyh7XG4gICAgICAgICAgICAgIGxhdDogbmV4dFByb3BzQ2VudGVyLmxhdCxcbiAgICAgICAgICAgICAgbG5nOiBuZXh0UHJvcHNDZW50ZXIubG5nXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCEoMCwgX2lzRW1wdHkyLmRlZmF1bHQpKG5leHRQcm9wcy56b29tKSkge1xuICAgICAgICAvLyBpZiB6b29tIGNoYWdlZCBieSB1c2VyXG4gICAgICAgIGlmIChNYXRoLmFicyhuZXh0UHJvcHMuem9vbSAtIHRoaXMucHJvcHMuem9vbSkgPiAwKSB7XG4gICAgICAgICAgdGhpcy5tYXBfLnNldFpvb20obmV4dFByb3BzLnpvb20pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghKDAsIF9pc0VtcHR5Mi5kZWZhdWx0KSh0aGlzLnByb3BzLmRyYWdnYWJsZSkgJiYgKDAsIF9pc0VtcHR5Mi5kZWZhdWx0KShuZXh0UHJvcHMuZHJhZ2dhYmxlKSkge1xuICAgICAgICAvLyByZXNldCB0byBkZWZhdWx0XG4gICAgICAgIHRoaXMubWFwXy5zZXRPcHRpb25zKHsgZHJhZ2dhYmxlOiB0aGlzLmRlZmF1bHREcmFnZ2FibGVPcHRpb25fIH0pO1xuICAgICAgfSBlbHNlIGlmICghKDAsIF9zaGFsbG93RXF1YWwyLmRlZmF1bHQpKHRoaXMucHJvcHMuZHJhZ2dhYmxlLCBuZXh0UHJvcHMuZHJhZ2dhYmxlKSkge1xuICAgICAgICAvLyBhbHNvIHByZXZlbnQgdGhpcyBvbiB3aW5kb3cgJ21vdXNlZG93bicgZXZlbnQgdG8gcHJldmVudCBtYXAgbW92ZVxuICAgICAgICB0aGlzLm1hcF8uc2V0T3B0aW9ucyh7IGRyYWdnYWJsZTogbmV4dFByb3BzLmRyYWdnYWJsZSB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gdXNlIHNoYWxsb3dFcXVhbCB0byB0cnkgYXZvaWQgY2FsbGluZyBtYXAuX3NldE9wdGlvbnMgaWYgb25seSB0aGUgcmVmIGNoYW5nZXNcbiAgICAgIGlmICghKDAsIF9pc0VtcHR5Mi5kZWZhdWx0KShuZXh0UHJvcHMub3B0aW9ucykgJiYgISgwLCBfc2hhbGxvd0VxdWFsMi5kZWZhdWx0KSh0aGlzLnByb3BzLm9wdGlvbnMsIG5leHRQcm9wcy5vcHRpb25zKSkge1xuICAgICAgICB2YXIgbWFwUGxhaW5PYmplY3RzID0gKDAsIF9waWNrMi5kZWZhdWx0KSh0aGlzLm1hcHNfLCBfaXNQbGFpbk9iamVjdDIuZGVmYXVsdCk7XG4gICAgICAgIHZhciBvcHRpb25zID0gdHlwZW9mIG5leHRQcm9wcy5vcHRpb25zID09PSAnZnVuY3Rpb24nID8gbmV4dFByb3BzLm9wdGlvbnMobWFwUGxhaW5PYmplY3RzKSA6IG5leHRQcm9wcy5vcHRpb25zO1xuICAgICAgICAvLyByZW1vdmUgem9vbSwgY2VudGVyIGFuZCBkcmFnZ2FibGUgb3B0aW9ucyBhcyB0aGVzZSBhcmUgbWFuYWdlZCBieSBnb29nbGUtbWFwcy1yZWFjdFxuICAgICAgICBvcHRpb25zID0gKDAsIF9vbWl0Mi5kZWZhdWx0KShvcHRpb25zLCBbJ3pvb20nLCAnY2VudGVyJywgJ2RyYWdnYWJsZSddKTtcblxuICAgICAgICBpZiAoJ21pblpvb20nIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICB2YXIgbWluWm9vbSA9IHRoaXMuX2NvbXB1dGVNaW5ab29tKG9wdGlvbnMubWluWm9vbSk7XG4gICAgICAgICAgb3B0aW9ucy5taW5ab29tID0gX2NoZWNrTWluWm9vbShvcHRpb25zLm1pblpvb20sIG1pblpvb20pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5tYXBfLnNldE9wdGlvbnMob3B0aW9ucyk7XG4gICAgICB9XG5cbiAgICAgIGlmICghKDAsIF9zaGFsbG93RXF1YWwyLmRlZmF1bHQpKG5leHRQcm9wcy5sYXllclR5cGVzLCB0aGlzLnByb3BzLmxheWVyVHlwZXMpKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMubGF5ZXJzXykuZm9yRWFjaChmdW5jdGlvbiAobGF5ZXJLZXkpIHtcbiAgICAgICAgICBfdGhpczMubGF5ZXJzX1tsYXllcktleV0uc2V0TWFwKG51bGwpO1xuICAgICAgICAgIGRlbGV0ZSBfdGhpczMubGF5ZXJzX1tsYXllcktleV07XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9zZXRMYXllcnMobmV4dFByb3BzLmxheWVyVHlwZXMpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5oZWF0bWFwICYmICEoMCwgX3NoYWxsb3dFcXVhbDIuZGVmYXVsdCkobmV4dFByb3BzLmhlYXRtYXAucG9zaXRpb25zLCB0aGlzLnByb3BzLmhlYXRtYXAucG9zaXRpb25zKSkge1xuICAgICAgICB0aGlzLmhlYXRtYXAuc2V0RGF0YShuZXh0UHJvcHMuaGVhdG1hcC5wb3NpdGlvbnMubWFwKGZ1bmN0aW9uIChwKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxvY2F0aW9uOiBuZXcgX3RoaXMzLm1hcHNfLkxhdExuZyhwLmxhdCwgcC5sbmcpLFxuICAgICAgICAgICAgd2VpZ2h0OiBwLndlaWdodFxuICAgICAgICAgIH07XG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgR29vZ2xlTWFwLnByb3RvdHlwZS5zaG91bGRDb21wb25lbnRVcGRhdGUgPSBmdW5jdGlvbiBzaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcbiAgICAvLyBkcmFnZ2FibGUgZG9lcyBub3QgYWZmZWN0IGlubmVyIGNvbXBvbmVudHNcbiAgICByZXR1cm4gISgwLCBfc2hhbGxvd0VxdWFsMi5kZWZhdWx0KSgoMCwgX29taXQyLmRlZmF1bHQpKHRoaXMucHJvcHMsIFsnZHJhZ2dhYmxlJ10pLCAoMCwgX29taXQyLmRlZmF1bHQpKG5leHRQcm9wcywgWydkcmFnZ2FibGUnXSkpIHx8ICEoMCwgX3NoYWxsb3dFcXVhbDIuZGVmYXVsdCkodGhpcy5zdGF0ZSwgbmV4dFN0YXRlKTtcbiAgfTtcblxuICBHb29nbGVNYXAucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICB0aGlzLm1hcmtlcnNEaXNwYXRjaGVyXy5lbWl0KCdrT05fQ0hBTkdFJyk7XG5cbiAgICBpZiAoISgwLCBfc2hhbGxvd0VxdWFsMi5kZWZhdWx0KSh0aGlzLnByb3BzLmhvdmVyRGlzdGFuY2UsIHByZXZQcm9wcy5ob3ZlckRpc3RhbmNlKSkge1xuICAgICAgdGhpcy5tYXJrZXJzRGlzcGF0Y2hlcl8uZW1pdCgna09OX01PVVNFX1BPU0lUSU9OX0NIQU5HRScpO1xuICAgIH1cbiAgfTtcblxuICBHb29nbGVNYXAucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5tb3VudGVkXyA9IGZhbHNlO1xuICAgIHZhciBtYXBEb20gPSBfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUodGhpcy5nb29nbGVNYXBEb21fKTtcbiAgICBpZiAobWFwRG9tKSB7XG4gICAgICBtYXBEb20ucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5fb25NYXBNb3VzZURvd25OYXRpdmUsIHRydWUpO1xuICAgIH1cbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5fb25XaW5kb3dSZXNpemUpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5fb25LZXlEb3duQ2FwdHVyZSk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLl9vbkNoaWxkTW91c2VVcCwgZmFsc2UpO1xuICAgIGlmICh0aGlzLnByb3BzLnJlc2V0Qm91bmRzT25SZXNpemUpIHtcbiAgICAgIF9kZXRlY3RFbGVtZW50UmVzaXplMi5kZWZhdWx0LnJlbW92ZVJlc2l6ZUxpc3RlbmVyKG1hcERvbSwgdGhpcy5fbWFwRG9tUmVzaXplQ2FsbGJhY2spO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm92ZXJsYXlfKSB7XG4gICAgICAvLyB0aGlzIHRyaWdnZXJzIG92ZXJsYXlfLm9uUmVtb3ZlKCksIHdoaWNoIHdpbGwgdW5tb3VudCB0aGUgPEdvb2dsZU1hcE1hcmtlcnMvPlxuICAgICAgdGhpcy5vdmVybGF5Xy5zZXRNYXAobnVsbCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubWFwc18gJiYgdGhpcy5tYXBfICYmIHRoaXMucHJvcHMuc2hvdWxkVW5yZWdpc3Rlck1hcE9uVW5tb3VudCkge1xuICAgICAgLy8gZml4IGdvb2dsZSwgYXMgb3RoZXJ3aXNlIGxpc3RlbmVycyB3b3JrcyBldmVuIHdpdGhvdXQgbWFwXG4gICAgICB0aGlzLm1hcF8uc2V0T3B0aW9ucyh7IHNjcm9sbHdoZWVsOiBmYWxzZSB9KTtcbiAgICAgIHRoaXMubWFwc18uZXZlbnQuY2xlYXJJbnN0YW5jZUxpc3RlbmVycyh0aGlzLm1hcF8pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLnNob3VsZFVucmVnaXN0ZXJNYXBPblVubW91bnQpIHtcbiAgICAgIHRoaXMubWFwXyA9IG51bGw7XG4gICAgICB0aGlzLm1hcHNfID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5tYXJrZXJzRGlzcGF0Y2hlcl8uZGlzcG9zZSgpO1xuXG4gICAgdGhpcy5yZXNldFNpemVPbklkbGVfID0gZmFsc2U7XG5cbiAgICBpZiAodGhpcy5wcm9wcy5zaG91bGRVbnJlZ2lzdGVyTWFwT25Vbm1vdW50KSB7XG4gICAgICBkZWxldGUgdGhpcy5tYXBfO1xuICAgICAgZGVsZXRlIHRoaXMubWFya2Vyc0Rpc3BhdGNoZXJfO1xuICAgIH1cbiAgfTtcbiAgLy8gY2FsYyBtaW5ab29tIGlmIG1hcCBzaXplIGF2YWlsYWJsZVxuICAvLyBpdCdzIGJldHRlciB0byBub3Qgc2V0IG1pblpvb20gbGVzcyB0aGFuIHRoaXMgY2FsY3VsYXRpb24gZ2l2ZXNcbiAgLy8gb3RoZXJ3aXNlIHRoZXJlIGlzIG5vIGhvbWVvbW9ycGhpc20gYmV0d2VlbiBzY3JlZW4gY29vcmRpbmF0ZXMgYW5kIG1hcFxuICAvLyAob25lIG1hcCBjb29yZGluYXRlIGNhbiBoYXZlIGRpZmZlcmVudCBzY3JlZW4gY29vcmRpbmF0ZXMpXG5cblxuICAvLyB0aGlzIG1ldGhvZCB3b3JrcyBvbmx5IGlmIHRoaXMucHJvcHMub25DaGlsZE1vdXNlRG93biB3YXMgY2FsbGVkXG5cblxuICAvLyB0aGlzIG1ldGhvZCB3b3JrcyBvbmx5IGlmIHRoaXMucHJvcHMub25DaGlsZE1vdXNlRG93biB3YXMgY2FsbGVkXG5cblxuICAvLyBLX0lETEVfQ0xJQ0tfVElNRU9VVCAtIGxvb2tzIGxpa2UgMzAwIGlzIGVub3VnaFxuXG5cbiAgLy8gZ21hcCBjYW4ndCBwcmV2ZW50IG1hcCBkcmFnIGlmIG1vdXNlZG93biBldmVudCBhbHJlYWR5IG9jY3VyZWRcbiAgLy8gdGhlIG9ubHkgd29ya2Fyb3VuZCBJIGZpbmQgaXMgcHJldmVudCBtb3VzZWRvd24gbmF0aXZlIGJyb3dzZXIgZXZlbnRcblxuXG4gIEdvb2dsZU1hcC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBvdmVybGF5ID0gdGhpcy5zdGF0ZS5vdmVybGF5O1xuICAgIHZhciBtYXBNYXJrZXJQcmVyZW5kZXIgPSAhb3ZlcmxheSA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9nb29nbGVfbWFwX21hcmtlcnNfcHJlcmVuZGVyMi5kZWZhdWx0LCB7XG4gICAgICBleHBlcmltZW50YWw6IHRoaXMucHJvcHMuZXhwZXJpbWVudGFsLFxuICAgICAgb25DaGlsZENsaWNrOiB0aGlzLl9vbkNoaWxkQ2xpY2ssXG4gICAgICBvbkNoaWxkTW91c2VEb3duOiB0aGlzLl9vbkNoaWxkTW91c2VEb3duLFxuICAgICAgb25DaGlsZE1vdXNlRW50ZXI6IHRoaXMuX29uQ2hpbGRNb3VzZUVudGVyLFxuICAgICAgb25DaGlsZE1vdXNlTGVhdmU6IHRoaXMuX29uQ2hpbGRNb3VzZUxlYXZlLFxuICAgICAgZ2VvU2VydmljZTogdGhpcy5nZW9TZXJ2aWNlXyxcbiAgICAgIGluc2lkZU1hcFBhbmVzOiBmYWxzZSxcbiAgICAgIGRpc3RhbmNlVG9Nb3VzZTogdGhpcy5wcm9wcy5kaXN0YW5jZVRvTW91c2UsXG4gICAgICBnZXRIb3ZlckRpc3RhbmNlOiB0aGlzLl9nZXRIb3ZlckRpc3RhbmNlLFxuICAgICAgZGlzcGF0Y2hlcjogdGhpcy5tYXJrZXJzRGlzcGF0Y2hlcl9cbiAgICB9KSA6IG51bGw7XG5cbiAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHtcbiAgICAgICAgc3R5bGU6IHRoaXMucHJvcHMuc3R5bGUsXG4gICAgICAgIG9uTW91c2VNb3ZlOiB0aGlzLl9vbk1hcE1vdXNlTW92ZSxcbiAgICAgICAgb25Nb3VzZURvd25DYXB0dXJlOiB0aGlzLl9vbk1hcE1vdXNlRG93bkNhcHR1cmUsXG4gICAgICAgIG9uQ2xpY2s6IHRoaXMuX29uTWFwQ2xpY2tcbiAgICAgIH0sXG4gICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZ29vZ2xlX21hcF9tYXAyLmRlZmF1bHQsIHsgcmVnaXN0ZXJDaGlsZDogdGhpcy5fcmVnaXN0ZXJDaGlsZCB9KSxcbiAgICAgIElTX1JFQUNUXzE2ICYmIG92ZXJsYXkgJiYgY3JlYXRlUG9ydGFsKHRoaXMuX3JlbmRlclBvcnRhbCgpLCBvdmVybGF5KSxcbiAgICAgIG1hcE1hcmtlclByZXJlbmRlclxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIEdvb2dsZU1hcDtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbkdvb2dsZU1hcC5wcm9wVHlwZXMgPSB7XG4gIGFwaUtleTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGJvb3RzdHJhcFVSTEtleXM6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYW55LFxuXG4gIGRlZmF1bHRDZW50ZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzMi5kZWZhdWx0LmFycmF5LCBfcHJvcFR5cGVzMi5kZWZhdWx0LnNoYXBlKHtcbiAgICBsYXQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICAgIGxuZzogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXJcbiAgfSldKSxcbiAgY2VudGVyOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlczIuZGVmYXVsdC5hcnJheSwgX3Byb3BUeXBlczIuZGVmYXVsdC5zaGFwZSh7XG4gICAgbGF0OiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgICBsbmc6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyXG4gIH0pXSksXG4gIGRlZmF1bHRab29tOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgem9vbTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gIG9uQm91bmRzQ2hhbmdlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIG9uQ2hhbmdlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIG9uQ2xpY2s6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgb25DaGlsZENsaWNrOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIG9uQ2hpbGRNb3VzZURvd246IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgb25DaGlsZE1vdXNlVXA6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgb25DaGlsZE1vdXNlTW92ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBvbkNoaWxkTW91c2VFbnRlcjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBvbkNoaWxkTW91c2VMZWF2ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBvblpvb21BbmltYXRpb25TdGFydDogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBvblpvb21BbmltYXRpb25FbmQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgb25EcmFnOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIG9uRHJhZ0VuZDogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBvbk1hcFR5cGVJZENoYW5nZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBvblRpbGVzTG9hZGVkOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIG9wdGlvbnM6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYW55LFxuICBkaXN0YW5jZVRvTW91c2U6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgaG92ZXJEaXN0YW5jZTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gIGRlYm91bmNlZDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBtYXJnaW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuYXJyYXksXG4gIGdvb2dsZU1hcExvYWRlcjogX3Byb3BUeXBlczIuZGVmYXVsdC5hbnksXG4gIG9uR29vZ2xlQXBpTG9hZGVkOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIHllc0lXYW50VG9Vc2VHb29nbGVNYXBBcGlJbnRlcm5hbHM6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgZHJhZ2dhYmxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIHN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmFueSxcbiAgcmVzZXRCb3VuZHNPblJlc2l6ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBsYXllclR5cGVzOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmFycmF5T2YoX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcpLCAvLyBbJ1RyYW5zaXRMYXllcicsICdUcmFmZmljTGF5ZXInXVxuICBzaG91bGRVbnJlZ2lzdGVyTWFwT25Vbm1vdW50OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2xcbn07XG5Hb29nbGVNYXAuZGVmYXVsdFByb3BzID0ge1xuICBkaXN0YW5jZVRvTW91c2U6IGZ1bmN0aW9uIGRpc3RhbmNlVG9Nb3VzZShwdCwgbW91c2VQb3MgLyogLCBtYXJrZXJQcm9wcyAqLykge1xuICAgIHJldHVybiBNYXRoLnNxcnQoKHB0LnggLSBtb3VzZVBvcy54KSAqIChwdC54IC0gbW91c2VQb3MueCkgKyAocHQueSAtIG1vdXNlUG9zLnkpICogKHB0LnkgLSBtb3VzZVBvcy55KSk7XG4gIH0sXG5cbiAgaG92ZXJEaXN0YW5jZTogMzAsXG4gIGRlYm91bmNlZDogdHJ1ZSxcbiAgb3B0aW9uczogZGVmYXVsdE9wdGlvbnNfLFxuICBnb29nbGVNYXBMb2FkZXI6IF9nb29nbGVfbWFwX2xvYWRlcjIuZGVmYXVsdCxcbiAgeWVzSVdhbnRUb1VzZUdvb2dsZU1hcEFwaUludGVybmFsczogZmFsc2UsXG4gIHN0eWxlOiB7XG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICBtYXJnaW46IDAsXG4gICAgcGFkZGluZzogMCxcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICB9LFxuICBsYXllclR5cGVzOiBbXSxcbiAgaGVhdG1hcDoge30sXG4gIGhlYXRtYXBMaWJyYXJ5OiBmYWxzZSxcbiAgc2hvdWxkVW5yZWdpc3Rlck1hcE9uVW5tb3VudDogdHJ1ZVxufTtcbkdvb2dsZU1hcC5nb29nbGVNYXBMb2FkZXIgPSBfZ29vZ2xlX21hcF9sb2FkZXIyLmRlZmF1bHQ7XG5leHBvcnRzLmRlZmF1bHQgPSBHb29nbGVNYXA7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpIHt9XG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW0sXG5cbiAgICBjaGVja1Byb3BUeXBlczogZW1wdHlGdW5jdGlvbldpdGhSZXNldCxcbiAgICByZXNldFdhcm5pbmdDYWNoZTogZW1wdHlGdW5jdGlvblxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBzdHlsZSA9IHtcbiAgd2lkdGg6ICcxMDAlJyxcbiAgaGVpZ2h0OiAnMTAwJScsXG4gIGxlZnQ6IDAsXG4gIHRvcDogMCxcbiAgbWFyZ2luOiAwLFxuICBwYWRkaW5nOiAwLFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJ1xufTtcblxudmFyIEdvb2dsZU1hcE1hcCA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhHb29nbGVNYXBNYXAsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEdvb2dsZU1hcE1hcCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgR29vZ2xlTWFwTWFwKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgR29vZ2xlTWFwTWFwLnByb3RvdHlwZS5zaG91bGRDb21wb25lbnRVcGRhdGUgPSBmdW5jdGlvbiBzaG91bGRDb21wb25lbnRVcGRhdGUoKSB7XG4gICAgcmV0dXJuIGZhbHNlOyAvLyBkaXNhYmxlIHJlYWN0IG9uIHRoaXMgZGl2XG4gIH07XG5cbiAgR29vZ2xlTWFwTWFwLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIHJlZ2lzdGVyQ2hpbGQgPSB0aGlzLnByb3BzLnJlZ2lzdGVyQ2hpbGQ7XG5cbiAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgcmVmOiByZWdpc3RlckNoaWxkLCBzdHlsZTogc3R5bGUgfSk7XG4gIH07XG5cbiAgcmV0dXJuIEdvb2dsZU1hcE1hcDtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEdvb2dsZU1hcE1hcDsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZXZlbnRlbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRlbWl0dGVyMycpO1xuXG52YXIgX2V2ZW50ZW1pdHRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ldmVudGVtaXR0ZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBNYXJrZXJEaXNwYXRjaGVyID0gZnVuY3Rpb24gKF9FdmVudEVtaXR0ZXIpIHtcbiAgX2luaGVyaXRzKE1hcmtlckRpc3BhdGNoZXIsIF9FdmVudEVtaXR0ZXIpO1xuXG4gIGZ1bmN0aW9uIE1hcmtlckRpc3BhdGNoZXIoZ21hcEluc3RhbmNlKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1hcmtlckRpc3BhdGNoZXIpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0V2ZW50RW1pdHRlci5jYWxsKHRoaXMpKTtcblxuICAgIF90aGlzLmdtYXBJbnN0YW5jZSA9IGdtYXBJbnN0YW5jZTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBNYXJrZXJEaXNwYXRjaGVyLnByb3RvdHlwZS5nZXRDaGlsZHJlbiA9IGZ1bmN0aW9uIGdldENoaWxkcmVuKCkge1xuICAgIHJldHVybiB0aGlzLmdtYXBJbnN0YW5jZS5wcm9wcy5jaGlsZHJlbjtcbiAgfTtcblxuICBNYXJrZXJEaXNwYXRjaGVyLnByb3RvdHlwZS5nZXRNb3VzZVBvc2l0aW9uID0gZnVuY3Rpb24gZ2V0TW91c2VQb3NpdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5nbWFwSW5zdGFuY2UubW91c2VfO1xuICB9O1xuXG4gIE1hcmtlckRpc3BhdGNoZXIucHJvdG90eXBlLmdldFVwZGF0ZUNvdW50ZXIgPSBmdW5jdGlvbiBnZXRVcGRhdGVDb3VudGVyKCkge1xuICAgIHJldHVybiB0aGlzLmdtYXBJbnN0YW5jZS51cGRhdGVDb3VudGVyXztcbiAgfTtcblxuICBNYXJrZXJEaXNwYXRjaGVyLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICB0aGlzLmdtYXBJbnN0YW5jZSA9IG51bGw7XG4gICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgfTtcblxuICByZXR1cm4gTWFya2VyRGlzcGF0Y2hlcjtcbn0oX2V2ZW50ZW1pdHRlcjIuZGVmYXVsdCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IE1hcmtlckRpc3BhdGNoZXI7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuLy9cbi8vIFdlIHN0b3JlIG91ciBFRSBvYmplY3RzIGluIGEgcGxhaW4gb2JqZWN0IHdob3NlIHByb3BlcnRpZXMgYXJlIGV2ZW50IG5hbWVzLlxuLy8gSWYgYE9iamVjdC5jcmVhdGUobnVsbClgIGlzIG5vdCBzdXBwb3J0ZWQgd2UgcHJlZml4IHRoZSBldmVudCBuYW1lcyB3aXRoIGFcbi8vIGB+YCB0byBtYWtlIHN1cmUgdGhhdCB0aGUgYnVpbHQtaW4gb2JqZWN0IHByb3BlcnRpZXMgYXJlIG5vdCBvdmVycmlkZGVuIG9yXG4vLyB1c2VkIGFzIGFuIGF0dGFjayB2ZWN0b3IuXG4vLyBXZSBhbHNvIGFzc3VtZSB0aGF0IGBPYmplY3QuY3JlYXRlKG51bGwpYCBpcyBhdmFpbGFibGUgd2hlbiB0aGUgZXZlbnQgbmFtZVxuLy8gaXMgYW4gRVM2IFN5bWJvbC5cbi8vXG52YXIgcHJlZml4ID0gdHlwZW9mIE9iamVjdC5jcmVhdGUgIT09ICdmdW5jdGlvbicgPyAnficgOiBmYWxzZTtcblxuLyoqXG4gKiBSZXByZXNlbnRhdGlvbiBvZiBhIHNpbmdsZSBFdmVudEVtaXR0ZXIgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gRXZlbnQgaGFuZGxlciB0byBiZSBjYWxsZWQuXG4gKiBAcGFyYW0ge01peGVkfSBjb250ZXh0IENvbnRleHQgZm9yIGZ1bmN0aW9uIGV4ZWN1dGlvbi5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29uY2U9ZmFsc2VdIE9ubHkgZW1pdCBvbmNlXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gRUUoZm4sIGNvbnRleHQsIG9uY2UpIHtcbiAgdGhpcy5mbiA9IGZuO1xuICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLm9uY2UgPSBvbmNlIHx8IGZhbHNlO1xufVxuXG4vKipcbiAqIE1pbmltYWwgRXZlbnRFbWl0dGVyIGludGVyZmFjZSB0aGF0IGlzIG1vbGRlZCBhZ2FpbnN0IHRoZSBOb2RlLmpzXG4gKiBFdmVudEVtaXR0ZXIgaW50ZXJmYWNlLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkgeyAvKiBOb3RoaW5nIHRvIHNldCAqLyB9XG5cbi8qKlxuICogSG9sZCB0aGUgYXNzaWduZWQgRXZlbnRFbWl0dGVycyBieSBuYW1lLlxuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9ldmVudHMgPSB1bmRlZmluZWQ7XG5cbi8qKlxuICogUmV0dXJuIGFuIGFycmF5IGxpc3RpbmcgdGhlIGV2ZW50cyBmb3Igd2hpY2ggdGhlIGVtaXR0ZXIgaGFzIHJlZ2lzdGVyZWRcbiAqIGxpc3RlbmVycy5cbiAqXG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmV2ZW50TmFtZXMgPSBmdW5jdGlvbiBldmVudE5hbWVzKCkge1xuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzXG4gICAgLCBuYW1lcyA9IFtdXG4gICAgLCBuYW1lO1xuXG4gIGlmICghZXZlbnRzKSByZXR1cm4gbmFtZXM7XG5cbiAgZm9yIChuYW1lIGluIGV2ZW50cykge1xuICAgIGlmIChoYXMuY2FsbChldmVudHMsIG5hbWUpKSBuYW1lcy5wdXNoKHByZWZpeCA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lKTtcbiAgfVxuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgcmV0dXJuIG5hbWVzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGV2ZW50cykpO1xuICB9XG5cbiAgcmV0dXJuIG5hbWVzO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gYSBsaXN0IG9mIGFzc2lnbmVkIGV2ZW50IGxpc3RlbmVycy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQgVGhlIGV2ZW50cyB0aGF0IHNob3VsZCBiZSBsaXN0ZWQuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGV4aXN0cyBXZSBvbmx5IG5lZWQgdG8ga25vdyBpZiB0aGVyZSBhcmUgbGlzdGVuZXJzLlxuICogQHJldHVybnMge0FycmF5fEJvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIGxpc3RlbmVycyhldmVudCwgZXhpc3RzKSB7XG4gIHZhciBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50XG4gICAgLCBhdmFpbGFibGUgPSB0aGlzLl9ldmVudHMgJiYgdGhpcy5fZXZlbnRzW2V2dF07XG5cbiAgaWYgKGV4aXN0cykgcmV0dXJuICEhYXZhaWxhYmxlO1xuICBpZiAoIWF2YWlsYWJsZSkgcmV0dXJuIFtdO1xuICBpZiAoYXZhaWxhYmxlLmZuKSByZXR1cm4gW2F2YWlsYWJsZS5mbl07XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhdmFpbGFibGUubGVuZ3RoLCBlZSA9IG5ldyBBcnJheShsKTsgaSA8IGw7IGkrKykge1xuICAgIGVlW2ldID0gYXZhaWxhYmxlW2ldLmZuO1xuICB9XG5cbiAgcmV0dXJuIGVlO1xufTtcblxuLyoqXG4gKiBFbWl0IGFuIGV2ZW50IHRvIGFsbCByZWdpc3RlcmVkIGV2ZW50IGxpc3RlbmVycy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQgVGhlIG5hbWUgb2YgdGhlIGV2ZW50LlxuICogQHJldHVybnMge0Jvb2xlYW59IEluZGljYXRpb24gaWYgd2UndmUgZW1pdHRlZCBhbiBldmVudC5cbiAqIEBhcGkgcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIGVtaXQoZXZlbnQsIGExLCBhMiwgYTMsIGE0LCBhNSkge1xuICB2YXIgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudDtcblxuICBpZiAoIXRoaXMuX2V2ZW50cyB8fCAhdGhpcy5fZXZlbnRzW2V2dF0pIHJldHVybiBmYWxzZTtcblxuICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW2V2dF1cbiAgICAsIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAsIGFyZ3NcbiAgICAsIGk7XG5cbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBsaXN0ZW5lcnMuZm4pIHtcbiAgICBpZiAobGlzdGVuZXJzLm9uY2UpIHRoaXMucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVycy5mbiwgdW5kZWZpbmVkLCB0cnVlKTtcblxuICAgIHN3aXRjaCAobGVuKSB7XG4gICAgICBjYXNlIDE6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCksIHRydWU7XG4gICAgICBjYXNlIDI6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEpLCB0cnVlO1xuICAgICAgY2FzZSAzOiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExLCBhMiksIHRydWU7XG4gICAgICBjYXNlIDQ6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyLCBhMyksIHRydWU7XG4gICAgICBjYXNlIDU6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyLCBhMywgYTQpLCB0cnVlO1xuICAgICAgY2FzZSA2OiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExLCBhMiwgYTMsIGE0LCBhNSksIHRydWU7XG4gICAgfVxuXG4gICAgZm9yIChpID0gMSwgYXJncyA9IG5ldyBBcnJheShsZW4gLTEpOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5mbi5hcHBseShsaXN0ZW5lcnMuY29udGV4dCwgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxlbmd0aCA9IGxpc3RlbmVycy5sZW5ndGhcbiAgICAgICwgajtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGxpc3RlbmVyc1tpXS5vbmNlKSB0aGlzLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcnNbaV0uZm4sIHVuZGVmaW5lZCwgdHJ1ZSk7XG5cbiAgICAgIHN3aXRjaCAobGVuKSB7XG4gICAgICAgIGNhc2UgMTogbGlzdGVuZXJzW2ldLmZuLmNhbGwobGlzdGVuZXJzW2ldLmNvbnRleHQpOyBicmVhaztcbiAgICAgICAgY2FzZSAyOiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCwgYTEpOyBicmVhaztcbiAgICAgICAgY2FzZSAzOiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCwgYTEsIGEyKTsgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgaWYgKCFhcmdzKSBmb3IgKGogPSAxLCBhcmdzID0gbmV3IEFycmF5KGxlbiAtMSk7IGogPCBsZW47IGorKykge1xuICAgICAgICAgICAgYXJnc1tqIC0gMV0gPSBhcmd1bWVudHNbal07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbGlzdGVuZXJzW2ldLmZuLmFwcGx5KGxpc3RlbmVyc1tpXS5jb250ZXh0LCBhcmdzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8qKlxuICogUmVnaXN0ZXIgYSBuZXcgRXZlbnRMaXN0ZW5lciBmb3IgdGhlIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudCBOYW1lIG9mIHRoZSBldmVudC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIENhbGxiYWNrIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtNaXhlZH0gW2NvbnRleHQ9dGhpc10gVGhlIGNvbnRleHQgb2YgdGhlIGZ1bmN0aW9uLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIG9uKGV2ZW50LCBmbiwgY29udGV4dCkge1xuICB2YXIgbGlzdGVuZXIgPSBuZXcgRUUoZm4sIGNvbnRleHQgfHwgdGhpcylcbiAgICAsIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnQ7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMpIHRoaXMuX2V2ZW50cyA9IHByZWZpeCA/IHt9IDogT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgaWYgKCF0aGlzLl9ldmVudHNbZXZ0XSkgdGhpcy5fZXZlbnRzW2V2dF0gPSBsaXN0ZW5lcjtcbiAgZWxzZSB7XG4gICAgaWYgKCF0aGlzLl9ldmVudHNbZXZ0XS5mbikgdGhpcy5fZXZlbnRzW2V2dF0ucHVzaChsaXN0ZW5lcik7XG4gICAgZWxzZSB0aGlzLl9ldmVudHNbZXZ0XSA9IFtcbiAgICAgIHRoaXMuX2V2ZW50c1tldnRdLCBsaXN0ZW5lclxuICAgIF07XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQWRkIGFuIEV2ZW50TGlzdGVuZXIgdGhhdCdzIG9ubHkgY2FsbGVkIG9uY2UuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50IE5hbWUgb2YgdGhlIGV2ZW50LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gQ2FsbGJhY2sgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge01peGVkfSBbY29udGV4dD10aGlzXSBUaGUgY29udGV4dCBvZiB0aGUgZnVuY3Rpb24uXG4gKiBAYXBpIHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKGV2ZW50LCBmbiwgY29udGV4dCkge1xuICB2YXIgbGlzdGVuZXIgPSBuZXcgRUUoZm4sIGNvbnRleHQgfHwgdGhpcywgdHJ1ZSlcbiAgICAsIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnQ7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMpIHRoaXMuX2V2ZW50cyA9IHByZWZpeCA/IHt9IDogT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgaWYgKCF0aGlzLl9ldmVudHNbZXZ0XSkgdGhpcy5fZXZlbnRzW2V2dF0gPSBsaXN0ZW5lcjtcbiAgZWxzZSB7XG4gICAgaWYgKCF0aGlzLl9ldmVudHNbZXZ0XS5mbikgdGhpcy5fZXZlbnRzW2V2dF0ucHVzaChsaXN0ZW5lcik7XG4gICAgZWxzZSB0aGlzLl9ldmVudHNbZXZ0XSA9IFtcbiAgICAgIHRoaXMuX2V2ZW50c1tldnRdLCBsaXN0ZW5lclxuICAgIF07XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUmVtb3ZlIGV2ZW50IGxpc3RlbmVycy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQgVGhlIGV2ZW50IHdlIHdhbnQgdG8gcmVtb3ZlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGxpc3RlbmVyIHRoYXQgd2UgbmVlZCB0byBmaW5kLlxuICogQHBhcmFtIHtNaXhlZH0gY29udGV4dCBPbmx5IHJlbW92ZSBsaXN0ZW5lcnMgbWF0Y2hpbmcgdGhpcyBjb250ZXh0LlxuICogQHBhcmFtIHtCb29sZWFufSBvbmNlIE9ubHkgcmVtb3ZlIG9uY2UgbGlzdGVuZXJzLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKGV2ZW50LCBmbiwgY29udGV4dCwgb25jZSkge1xuICB2YXIgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudDtcblxuICBpZiAoIXRoaXMuX2V2ZW50cyB8fCAhdGhpcy5fZXZlbnRzW2V2dF0pIHJldHVybiB0aGlzO1xuXG4gIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHNbZXZ0XVxuICAgICwgZXZlbnRzID0gW107XG5cbiAgaWYgKGZuKSB7XG4gICAgaWYgKGxpc3RlbmVycy5mbikge1xuICAgICAgaWYgKFxuICAgICAgICAgICBsaXN0ZW5lcnMuZm4gIT09IGZuXG4gICAgICAgIHx8IChvbmNlICYmICFsaXN0ZW5lcnMub25jZSlcbiAgICAgICAgfHwgKGNvbnRleHQgJiYgbGlzdGVuZXJzLmNvbnRleHQgIT09IGNvbnRleHQpXG4gICAgICApIHtcbiAgICAgICAgZXZlbnRzLnB1c2gobGlzdGVuZXJzKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGxpc3RlbmVycy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICAgbGlzdGVuZXJzW2ldLmZuICE9PSBmblxuICAgICAgICAgIHx8IChvbmNlICYmICFsaXN0ZW5lcnNbaV0ub25jZSlcbiAgICAgICAgICB8fCAoY29udGV4dCAmJiBsaXN0ZW5lcnNbaV0uY29udGV4dCAhPT0gY29udGV4dClcbiAgICAgICAgKSB7XG4gICAgICAgICAgZXZlbnRzLnB1c2gobGlzdGVuZXJzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vXG4gIC8vIFJlc2V0IHRoZSBhcnJheSwgb3IgcmVtb3ZlIGl0IGNvbXBsZXRlbHkgaWYgd2UgaGF2ZSBubyBtb3JlIGxpc3RlbmVycy5cbiAgLy9cbiAgaWYgKGV2ZW50cy5sZW5ndGgpIHtcbiAgICB0aGlzLl9ldmVudHNbZXZ0XSA9IGV2ZW50cy5sZW5ndGggPT09IDEgPyBldmVudHNbMF0gOiBldmVudHM7XG4gIH0gZWxzZSB7XG4gICAgZGVsZXRlIHRoaXMuX2V2ZW50c1tldnRdO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbGwgbGlzdGVuZXJzIG9yIG9ubHkgdGhlIGxpc3RlbmVycyBmb3IgdGhlIHNwZWNpZmllZCBldmVudC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQgVGhlIGV2ZW50IHdhbnQgdG8gcmVtb3ZlIGFsbCBsaXN0ZW5lcnMgZm9yLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnMoZXZlbnQpIHtcbiAgaWYgKCF0aGlzLl9ldmVudHMpIHJldHVybiB0aGlzO1xuXG4gIGlmIChldmVudCkgZGVsZXRlIHRoaXMuX2V2ZW50c1twcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50XTtcbiAgZWxzZSB0aGlzLl9ldmVudHMgPSBwcmVmaXggPyB7fSA6IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vL1xuLy8gQWxpYXMgbWV0aG9kcyBuYW1lcyBiZWNhdXNlIHBlb3BsZSByb2xsIGxpa2UgdGhhdC5cbi8vXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbjtcblxuLy9cbi8vIFRoaXMgZnVuY3Rpb24gZG9lc24ndCBhcHBseSBhbnltb3JlLlxuLy9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gc2V0TWF4TGlzdGVuZXJzKCkge1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8vXG4vLyBFeHBvc2UgdGhlIHByZWZpeC5cbi8vXG5FdmVudEVtaXR0ZXIucHJlZml4ZWQgPSBwcmVmaXg7XG5cbi8vXG4vLyBFeHBvc2UgdGhlIG1vZHVsZS5cbi8vXG5pZiAoJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBtb2R1bGUpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChwcm9wcykge1xuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgJ2RpdicsXG4gICAgeyBzdHlsZTogc3R5bGUgfSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZ29vZ2xlX21hcF9tYXJrZXJzMi5kZWZhdWx0LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHsgcHJlcmVuZGVyOiB0cnVlIH0pKVxuICApO1xufTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX2dvb2dsZV9tYXBfbWFya2VycyA9IHJlcXVpcmUoJy4vZ29vZ2xlX21hcF9tYXJrZXJzJyk7XG5cbnZhciBfZ29vZ2xlX21hcF9tYXJrZXJzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dvb2dsZV9tYXBfbWFya2Vycyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBzdHlsZSA9IHtcbiAgd2lkdGg6ICc1MCUnLFxuICBoZWlnaHQ6ICc1MCUnLFxuICBsZWZ0OiAnNTAlJyxcbiAgdG9wOiAnNTAlJyxcbiAgLy8gYmFja2dyb3VuZENvbG9yOiAncmVkJyxcbiAgbWFyZ2luOiAwLFxuICBwYWRkaW5nOiAwLFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJ1xuICAvLyBvcGFjaXR5OiAwLjNcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG52YXIgZ2VuZXJhdGVIZWF0bWFwID0gZXhwb3J0cy5nZW5lcmF0ZUhlYXRtYXAgPSBmdW5jdGlvbiBnZW5lcmF0ZUhlYXRtYXAoaW5zdGFuY2UsIF9yZWYpIHtcbiAgdmFyIHBvc2l0aW9ucyA9IF9yZWYucG9zaXRpb25zO1xuICByZXR1cm4gbmV3IGluc3RhbmNlLnZpc3VhbGl6YXRpb24uSGVhdG1hcExheWVyKHtcbiAgICBkYXRhOiBwb3NpdGlvbnMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIF9yZWYyKSB7XG4gICAgICB2YXIgbGF0ID0gX3JlZjIubGF0LFxuICAgICAgICAgIGxuZyA9IF9yZWYyLmxuZyxcbiAgICAgICAgICBfcmVmMiR3ZWlnaHQgPSBfcmVmMi53ZWlnaHQsXG4gICAgICAgICAgd2VpZ2h0ID0gX3JlZjIkd2VpZ2h0ID09PSB1bmRlZmluZWQgPyAxIDogX3JlZjIkd2VpZ2h0O1xuXG4gICAgICBhY2MucHVzaCh7XG4gICAgICAgIGxvY2F0aW9uOiBuZXcgaW5zdGFuY2UuTGF0TG5nKGxhdCwgbG5nKSxcbiAgICAgICAgd2VpZ2h0OiB3ZWlnaHRcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCBbXSlcbiAgfSk7XG59O1xuXG52YXIgb3B0aW9uc0hlYXRtYXAgPSBleHBvcnRzLm9wdGlvbnNIZWF0bWFwID0gZnVuY3Rpb24gb3B0aW9uc0hlYXRtYXAoaW5zdGFuY2UsIF9yZWYzKSB7XG4gIHZhciBfcmVmMyRvcHRpb25zID0gX3JlZjMub3B0aW9ucyxcbiAgICAgIG9wdGlvbnMgPSBfcmVmMyRvcHRpb25zID09PSB1bmRlZmluZWQgPyB7fSA6IF9yZWYzJG9wdGlvbnM7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvcHRpb25zKS5tYXAoZnVuY3Rpb24gKG9wdGlvbikge1xuICAgIHJldHVybiBpbnN0YW5jZS5zZXQob3B0aW9uLCBvcHRpb25zW29wdGlvbl0pO1xuICB9KTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xudmFyIEJBU0VfVVJMID0gJ2h0dHBzOi8vbWFwcyc7XG52YXIgREVGQVVMVF9VUkwgPSBCQVNFX1VSTCArICcuZ29vZ2xlYXBpcy5jb20nO1xudmFyIEFQSV9QQVRIID0gJy9tYXBzL2FwaS9qcz9jYWxsYmFjaz1fJF9nb29nbGVfbWFwX2luaXRpYWxpemVfJF8nO1xuXG52YXIgJHNjcmlwdF8gPSBudWxsO1xuXG52YXIgbG9hZFByb21pc2VfID0gdm9pZCAwO1xuXG52YXIgcmVzb2x2ZUN1c3RvbVByb21pc2VfID0gdm9pZCAwO1xuXG52YXIgX2N1c3RvbVByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICByZXNvbHZlQ3VzdG9tUHJvbWlzZV8gPSByZXNvbHZlO1xufSk7XG5cbi8vIFRPRE8gYWRkIGxpYnJhcmllcyBsYW5ndWFnZSBhbmQgb3RoZXIgbWFwIG9wdGlvbnNcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKGJvb3RzdHJhcFVSTEtleXMsIGhlYXRtYXBMaWJyYXJ5KSB7XG4gIGlmICghJHNjcmlwdF8pIHtcbiAgICAkc2NyaXB0XyA9IHJlcXVpcmUoJ3NjcmlwdGpzJyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgfVxuXG4gIC8vIGNhbGwgZnJvbSBvdXRzaWRlIGdvb2dsZS1tYXAtcmVhY3RcbiAgLy8gd2lsbCBiZSBhcyBzb29uIGFzIGxvYWRQcm9taXNlXyByZXNvbHZlZFxuICBpZiAoIWJvb3RzdHJhcFVSTEtleXMpIHtcbiAgICByZXR1cm4gX2N1c3RvbVByb21pc2U7XG4gIH1cblxuICBpZiAobG9hZFByb21pc2VfKSB7XG4gICAgcmV0dXJuIGxvYWRQcm9taXNlXztcbiAgfVxuXG4gIGxvYWRQcm9taXNlXyA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJlamVjdChuZXcgRXJyb3IoJ2dvb2dsZSBtYXAgY2Fubm90IGJlIGxvYWRlZCBvdXRzaWRlIGJyb3dzZXIgZW52JykpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh3aW5kb3cuZ29vZ2xlICYmIHdpbmRvdy5nb29nbGUubWFwcykge1xuICAgICAgcmVzb2x2ZSh3aW5kb3cuZ29vZ2xlLm1hcHMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygd2luZG93Ll8kX2dvb2dsZV9tYXBfaW5pdGlhbGl6ZV8kXyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJlamVjdChuZXcgRXJyb3IoJ2dvb2dsZSBtYXAgaW5pdGlhbGl6YXRpb24gZXJyb3InKSk7XG4gICAgfVxuXG4gICAgd2luZG93Ll8kX2dvb2dsZV9tYXBfaW5pdGlhbGl6ZV8kXyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGRlbGV0ZSB3aW5kb3cuXyRfZ29vZ2xlX21hcF9pbml0aWFsaXplXyRfO1xuICAgICAgcmVzb2x2ZSh3aW5kb3cuZ29vZ2xlLm1hcHMpO1xuICAgIH07XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKE9iamVjdC5rZXlzKGJvb3RzdHJhcFVSTEtleXMpLmluZGV4T2YoJ2NhbGxiYWNrJykgPiAtMSkge1xuICAgICAgICB2YXIgbWVzc2FnZSA9ICdcImNhbGxiYWNrXCIga2V5IGluIGJvb3RzdHJhcFVSTEtleXMgaXMgbm90IGFsbG93ZWQsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICB1c2Ugb25Hb29nbGVBcGlMb2FkZWQgcHJvcGVydHkgaW5zdGVhZCc7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcGFyYW1zID0gT2JqZWN0LmtleXMoYm9vdHN0cmFwVVJMS2V5cykucmVkdWNlKGZ1bmN0aW9uIChyLCBrZXkpIHtcbiAgICAgIHJldHVybiByICsgJyYnICsga2V5ICsgJz0nICsgYm9vdHN0cmFwVVJMS2V5c1trZXldO1xuICAgIH0sICcnKTtcblxuICAgIHZhciBsaWJyYXJpZXMgPSBoZWF0bWFwTGlicmFyeSA/ICcmbGlicmFyaWVzPXZpc3VhbGl6YXRpb24nIDogJyc7XG5cbiAgICAkc2NyaXB0XygnJyArIERFRkFVTFRfVVJMICsgQVBJX1BBVEggKyBwYXJhbXMgKyBsaWJyYXJpZXMsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0eXBlb2Ygd2luZG93Lmdvb2dsZSA9PT0gJ3VuZGVmaW5lZCcgJiYgcmVqZWN0KG5ldyBFcnJvcignZ29vZ2xlIG1hcCBpbml0aWFsaXphdGlvbiBlcnJvciAobm90IGxvYWRlZCknKSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIHJlc29sdmVDdXN0b21Qcm9taXNlXyhsb2FkUHJvbWlzZV8pO1xuXG4gIHJldHVybiBsb2FkUHJvbWlzZV87XG59OyIsIi8qIVxuICAqICRzY3JpcHQuanMgSlMgbG9hZGVyICYgZGVwZW5kZW5jeSBtYW5hZ2VyXG4gICogaHR0cHM6Ly9naXRodWIuY29tL2RlZC9zY3JpcHQuanNcbiAgKiAoYykgRHVzdGluIERpYXogMjAxNCB8IExpY2Vuc2UgTUlUXG4gICovXG5cbihmdW5jdGlvbiAobmFtZSwgZGVmaW5pdGlvbikge1xuICBpZiAodHlwZW9mIG1vZHVsZSAhPSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykgbW9kdWxlLmV4cG9ydHMgPSBkZWZpbml0aW9uKClcbiAgZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIGRlZmluZShkZWZpbml0aW9uKVxuICBlbHNlIHRoaXNbbmFtZV0gPSBkZWZpbml0aW9uKClcbn0pKCckc2NyaXB0JywgZnVuY3Rpb24gKCkge1xuICB2YXIgZG9jID0gZG9jdW1lbnRcbiAgICAsIGhlYWQgPSBkb2MuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXVxuICAgICwgcyA9ICdzdHJpbmcnXG4gICAgLCBmID0gZmFsc2VcbiAgICAsIHB1c2ggPSAncHVzaCdcbiAgICAsIHJlYWR5U3RhdGUgPSAncmVhZHlTdGF0ZSdcbiAgICAsIG9ucmVhZHlzdGF0ZWNoYW5nZSA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnXG4gICAgLCBsaXN0ID0ge31cbiAgICAsIGlkcyA9IHt9XG4gICAgLCBkZWxheSA9IHt9XG4gICAgLCBzY3JpcHRzID0ge31cbiAgICAsIHNjcmlwdHBhdGhcbiAgICAsIHVybEFyZ3NcblxuICBmdW5jdGlvbiBldmVyeShhciwgZm4pIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaiA9IGFyLmxlbmd0aDsgaSA8IGo7ICsraSkgaWYgKCFmbihhcltpXSkpIHJldHVybiBmXG4gICAgcmV0dXJuIDFcbiAgfVxuICBmdW5jdGlvbiBlYWNoKGFyLCBmbikge1xuICAgIGV2ZXJ5KGFyLCBmdW5jdGlvbiAoZWwpIHtcbiAgICAgIGZuKGVsKVxuICAgICAgcmV0dXJuIDFcbiAgICB9KVxuICB9XG5cbiAgZnVuY3Rpb24gJHNjcmlwdChwYXRocywgaWRPckRvbmUsIG9wdERvbmUpIHtcbiAgICBwYXRocyA9IHBhdGhzW3B1c2hdID8gcGF0aHMgOiBbcGF0aHNdXG4gICAgdmFyIGlkT3JEb25lSXNEb25lID0gaWRPckRvbmUgJiYgaWRPckRvbmUuY2FsbFxuICAgICAgLCBkb25lID0gaWRPckRvbmVJc0RvbmUgPyBpZE9yRG9uZSA6IG9wdERvbmVcbiAgICAgICwgaWQgPSBpZE9yRG9uZUlzRG9uZSA/IHBhdGhzLmpvaW4oJycpIDogaWRPckRvbmVcbiAgICAgICwgcXVldWUgPSBwYXRocy5sZW5ndGhcbiAgICBmdW5jdGlvbiBsb29wRm4oaXRlbSkge1xuICAgICAgcmV0dXJuIGl0ZW0uY2FsbCA/IGl0ZW0oKSA6IGxpc3RbaXRlbV1cbiAgICB9XG4gICAgZnVuY3Rpb24gY2FsbGJhY2soKSB7XG4gICAgICBpZiAoIS0tcXVldWUpIHtcbiAgICAgICAgbGlzdFtpZF0gPSAxXG4gICAgICAgIGRvbmUgJiYgZG9uZSgpXG4gICAgICAgIGZvciAodmFyIGRzZXQgaW4gZGVsYXkpIHtcbiAgICAgICAgICBldmVyeShkc2V0LnNwbGl0KCd8JyksIGxvb3BGbikgJiYgIWVhY2goZGVsYXlbZHNldF0sIGxvb3BGbikgJiYgKGRlbGF5W2RzZXRdID0gW10pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBlYWNoKHBhdGhzLCBmdW5jdGlvbiBsb2FkaW5nKHBhdGgsIGZvcmNlKSB7XG4gICAgICAgIGlmIChwYXRoID09PSBudWxsKSByZXR1cm4gY2FsbGJhY2soKVxuICAgICAgICBcbiAgICAgICAgaWYgKCFmb3JjZSAmJiAhL15odHRwcz86XFwvXFwvLy50ZXN0KHBhdGgpICYmIHNjcmlwdHBhdGgpIHtcbiAgICAgICAgICBwYXRoID0gKHBhdGguaW5kZXhPZignLmpzJykgPT09IC0xKSA/IHNjcmlwdHBhdGggKyBwYXRoICsgJy5qcycgOiBzY3JpcHRwYXRoICsgcGF0aDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKHNjcmlwdHNbcGF0aF0pIHtcbiAgICAgICAgICBpZiAoaWQpIGlkc1tpZF0gPSAxXG4gICAgICAgICAgcmV0dXJuIChzY3JpcHRzW3BhdGhdID09IDIpID8gY2FsbGJhY2soKSA6IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyBsb2FkaW5nKHBhdGgsIHRydWUpIH0sIDApXG4gICAgICAgIH1cblxuICAgICAgICBzY3JpcHRzW3BhdGhdID0gMVxuICAgICAgICBpZiAoaWQpIGlkc1tpZF0gPSAxXG4gICAgICAgIGNyZWF0ZShwYXRoLCBjYWxsYmFjaylcbiAgICAgIH0pXG4gICAgfSwgMClcbiAgICByZXR1cm4gJHNjcmlwdFxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlKHBhdGgsIGZuKSB7XG4gICAgdmFyIGVsID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpLCBsb2FkZWRcbiAgICBlbC5vbmxvYWQgPSBlbC5vbmVycm9yID0gZWxbb25yZWFkeXN0YXRlY2hhbmdlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICgoZWxbcmVhZHlTdGF0ZV0gJiYgISgvXmN8bG9hZGUvLnRlc3QoZWxbcmVhZHlTdGF0ZV0pKSkgfHwgbG9hZGVkKSByZXR1cm47XG4gICAgICBlbC5vbmxvYWQgPSBlbFtvbnJlYWR5c3RhdGVjaGFuZ2VdID0gbnVsbFxuICAgICAgbG9hZGVkID0gMVxuICAgICAgc2NyaXB0c1twYXRoXSA9IDJcbiAgICAgIGZuKClcbiAgICB9XG4gICAgZWwuYXN5bmMgPSAxXG4gICAgZWwuc3JjID0gdXJsQXJncyA/IHBhdGggKyAocGF0aC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHVybEFyZ3MgOiBwYXRoO1xuICAgIGhlYWQuaW5zZXJ0QmVmb3JlKGVsLCBoZWFkLmxhc3RDaGlsZClcbiAgfVxuXG4gICRzY3JpcHQuZ2V0ID0gY3JlYXRlXG5cbiAgJHNjcmlwdC5vcmRlciA9IGZ1bmN0aW9uIChzY3JpcHRzLCBpZCwgZG9uZSkge1xuICAgIChmdW5jdGlvbiBjYWxsYmFjayhzKSB7XG4gICAgICBzID0gc2NyaXB0cy5zaGlmdCgpXG4gICAgICAhc2NyaXB0cy5sZW5ndGggPyAkc2NyaXB0KHMsIGlkLCBkb25lKSA6ICRzY3JpcHQocywgY2FsbGJhY2spXG4gICAgfSgpKVxuICB9XG5cbiAgJHNjcmlwdC5wYXRoID0gZnVuY3Rpb24gKHApIHtcbiAgICBzY3JpcHRwYXRoID0gcFxuICB9XG4gICRzY3JpcHQudXJsQXJncyA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICB1cmxBcmdzID0gc3RyO1xuICB9XG4gICRzY3JpcHQucmVhZHkgPSBmdW5jdGlvbiAoZGVwcywgcmVhZHksIHJlcSkge1xuICAgIGRlcHMgPSBkZXBzW3B1c2hdID8gZGVwcyA6IFtkZXBzXVxuICAgIHZhciBtaXNzaW5nID0gW107XG4gICAgIWVhY2goZGVwcywgZnVuY3Rpb24gKGRlcCkge1xuICAgICAgbGlzdFtkZXBdIHx8IG1pc3NpbmdbcHVzaF0oZGVwKTtcbiAgICB9KSAmJiBldmVyeShkZXBzLCBmdW5jdGlvbiAoZGVwKSB7cmV0dXJuIGxpc3RbZGVwXX0pID9cbiAgICAgIHJlYWR5KCkgOiAhZnVuY3Rpb24gKGtleSkge1xuICAgICAgZGVsYXlba2V5XSA9IGRlbGF5W2tleV0gfHwgW11cbiAgICAgIGRlbGF5W2tleV1bcHVzaF0ocmVhZHkpXG4gICAgICByZXEgJiYgcmVxKG1pc3NpbmcpXG4gICAgfShkZXBzLmpvaW4oJ3wnKSlcbiAgICByZXR1cm4gJHNjcmlwdFxuICB9XG5cbiAgJHNjcmlwdC5kb25lID0gZnVuY3Rpb24gKGlkT3JEb25lKSB7XG4gICAgJHNjcmlwdChbbnVsbF0sIGlkT3JEb25lKVxuICB9XG5cbiAgcmV0dXJuICRzY3JpcHRcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3BvaW50R2VvbWV0cnkgPSByZXF1aXJlKCdAbWFwYm94L3BvaW50LWdlb21ldHJ5Jyk7XG5cbnZhciBfcG9pbnRHZW9tZXRyeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb2ludEdlb21ldHJ5KTtcblxudmFyIF9sYXRfbG5nID0gcmVxdWlyZSgnLi9saWJfZ2VvL2xhdF9sbmcnKTtcblxudmFyIF9sYXRfbG5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2xhdF9sbmcpO1xuXG52YXIgX3RyYW5zZm9ybSA9IHJlcXVpcmUoJy4vbGliX2dlby90cmFuc2Zvcm0nKTtcblxudmFyIF90cmFuc2Zvcm0yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHJhbnNmb3JtKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIEdlbyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gR2VvKHRpbGVTaXplKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEdlbyk7XG5cbiAgICAvLyBsZWZ0X3RvcCB2aWV3INC/0L7Qu9GM0LfRg9C10YIg0LPRg9Cz0LtcbiAgICAvLyBzdXBlcigpO1xuICAgIHRoaXMuaGFzU2l6ZV8gPSBmYWxzZTtcbiAgICB0aGlzLmhhc1ZpZXdfID0gZmFsc2U7XG4gICAgdGhpcy50cmFuc2Zvcm1fID0gbmV3IF90cmFuc2Zvcm0yLmRlZmF1bHQodGlsZVNpemUgfHwgNTEyKTtcbiAgfVxuXG4gIEdlby5wcm90b3R5cGUuc2V0VmlldyA9IGZ1bmN0aW9uIHNldFZpZXcoY2VudGVyLCB6b29tLCBiZWFyaW5nKSB7XG4gICAgdGhpcy50cmFuc2Zvcm1fLmNlbnRlciA9IF9sYXRfbG5nMi5kZWZhdWx0LmNvbnZlcnQoY2VudGVyKTtcbiAgICB0aGlzLnRyYW5zZm9ybV8uem9vbSA9ICt6b29tO1xuICAgIHRoaXMudHJhbnNmb3JtXy5iZWFyaW5nID0gK2JlYXJpbmc7XG4gICAgdGhpcy5oYXNWaWV3XyA9IHRydWU7XG4gIH07XG5cbiAgR2VvLnByb3RvdHlwZS5zZXRWaWV3U2l6ZSA9IGZ1bmN0aW9uIHNldFZpZXdTaXplKHdpZHRoLCBoZWlnaHQpIHtcbiAgICB0aGlzLnRyYW5zZm9ybV8ud2lkdGggPSB3aWR0aDtcbiAgICB0aGlzLnRyYW5zZm9ybV8uaGVpZ2h0ID0gaGVpZ2h0O1xuICAgIHRoaXMuaGFzU2l6ZV8gPSB0cnVlO1xuICB9O1xuXG4gIEdlby5wcm90b3R5cGUuc2V0TWFwQ2FudmFzUHJvamVjdGlvbiA9IGZ1bmN0aW9uIHNldE1hcENhbnZhc1Byb2plY3Rpb24obWFwcywgbWFwQ2FudmFzUHJvamVjdGlvbikge1xuICAgIHRoaXMubWFwc18gPSBtYXBzO1xuICAgIHRoaXMubWFwQ2FudmFzUHJvamVjdGlvbl8gPSBtYXBDYW52YXNQcm9qZWN0aW9uO1xuICB9O1xuXG4gIEdlby5wcm90b3R5cGUuY2FuUHJvamVjdCA9IGZ1bmN0aW9uIGNhblByb2plY3QoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGFzU2l6ZV8gJiYgdGhpcy5oYXNWaWV3XztcbiAgfTtcblxuICBHZW8ucHJvdG90eXBlLmhhc1NpemUgPSBmdW5jdGlvbiBoYXNTaXplKCkge1xuICAgIHJldHVybiB0aGlzLmhhc1NpemVfO1xuICB9O1xuXG4gIC8qKiBSZXR1cm5zIHRoZSBwaXhlbCBwb3NpdGlvbiByZWxhdGl2ZSB0byB0aGUgbWFwIGNlbnRlci4gKi9cblxuXG4gIEdlby5wcm90b3R5cGUuZnJvbUxhdExuZ1RvQ2VudGVyUGl4ZWwgPSBmdW5jdGlvbiBmcm9tTGF0TG5nVG9DZW50ZXJQaXhlbChwdExhdExuZykge1xuICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybV8ubG9jYXRpb25Qb2ludChfbGF0X2xuZzIuZGVmYXVsdC5jb252ZXJ0KHB0TGF0TG5nKSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHBpeGVsIHBvc2l0aW9uIHJlbGF0aXZlIHRvIHRoZSBtYXAgcGFuZXMsXG4gICAqIG9yIHJlbGF0aXZlIHRvIHRoZSBtYXAgY2VudGVyIGlmIHRoZXJlIGFyZSBubyBwYW5lcy5cbiAgICovXG5cblxuICBHZW8ucHJvdG90eXBlLmZyb21MYXRMbmdUb0RpdlBpeGVsID0gZnVuY3Rpb24gZnJvbUxhdExuZ1RvRGl2UGl4ZWwocHRMYXRMbmcpIHtcbiAgICBpZiAodGhpcy5tYXBDYW52YXNQcm9qZWN0aW9uXykge1xuICAgICAgdmFyIGxhdExuZyA9IG5ldyB0aGlzLm1hcHNfLkxhdExuZyhwdExhdExuZy5sYXQsIHB0TGF0TG5nLmxuZyk7XG4gICAgICByZXR1cm4gdGhpcy5tYXBDYW52YXNQcm9qZWN0aW9uXy5mcm9tTGF0TG5nVG9EaXZQaXhlbChsYXRMbmcpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5mcm9tTGF0TG5nVG9DZW50ZXJQaXhlbChwdExhdExuZyk7XG4gIH07XG5cbiAgLyoqIFJldHVybnMgdGhlIHBpeGVsIHBvc2l0aW9uIHJlbGF0aXZlIHRvIHRoZSBtYXAgdG9wLWxlZnQuICovXG5cblxuICBHZW8ucHJvdG90eXBlLmZyb21MYXRMbmdUb0NvbnRhaW5lclBpeGVsID0gZnVuY3Rpb24gZnJvbUxhdExuZ1RvQ29udGFpbmVyUGl4ZWwocHRMYXRMbmcpIHtcbiAgICBpZiAodGhpcy5tYXBDYW52YXNQcm9qZWN0aW9uXykge1xuICAgICAgdmFyIGxhdExuZyA9IG5ldyB0aGlzLm1hcHNfLkxhdExuZyhwdExhdExuZy5sYXQsIHB0TGF0TG5nLmxuZyk7XG4gICAgICByZXR1cm4gdGhpcy5tYXBDYW52YXNQcm9qZWN0aW9uXy5mcm9tTGF0TG5nVG9Db250YWluZXJQaXhlbChsYXRMbmcpO1xuICAgIH1cblxuICAgIHZhciBwdCA9IHRoaXMuZnJvbUxhdExuZ1RvQ2VudGVyUGl4ZWwocHRMYXRMbmcpO1xuICAgIHB0LnggLT0gdGhpcy50cmFuc2Zvcm1fLndvcmxkU2l6ZSAqIE1hdGgucm91bmQocHQueCAvIHRoaXMudHJhbnNmb3JtXy53b3JsZFNpemUpO1xuXG4gICAgcHQueCArPSB0aGlzLnRyYW5zZm9ybV8ud2lkdGggLyAyO1xuICAgIHB0LnkgKz0gdGhpcy50cmFuc2Zvcm1fLmhlaWdodCAvIDI7XG5cbiAgICByZXR1cm4gcHQ7XG4gIH07XG5cbiAgLyoqIFJldHVybnMgdGhlIExhdExuZyBmb3IgdGhlIGdpdmVuIG9mZnNldCBmcm9tIHRoZSBtYXAgdG9wLWxlZnQuICovXG5cblxuICBHZW8ucHJvdG90eXBlLmZyb21Db250YWluZXJQaXhlbFRvTGF0TG5nID0gZnVuY3Rpb24gZnJvbUNvbnRhaW5lclBpeGVsVG9MYXRMbmcocHRYWSkge1xuICAgIGlmICh0aGlzLm1hcENhbnZhc1Byb2plY3Rpb25fKSB7XG4gICAgICB2YXIgbGF0TG5nID0gdGhpcy5tYXBDYW52YXNQcm9qZWN0aW9uXy5mcm9tQ29udGFpbmVyUGl4ZWxUb0xhdExuZyhwdFhZKTtcbiAgICAgIHJldHVybiB7IGxhdDogbGF0TG5nLmxhdCgpLCBsbmc6IGxhdExuZy5sbmcoKSB9O1xuICAgIH1cblxuICAgIHZhciBwdHh5ID0gX2V4dGVuZHMoe30sIHB0WFkpO1xuICAgIHB0eHkueCAtPSB0aGlzLnRyYW5zZm9ybV8ud2lkdGggLyAyO1xuICAgIHB0eHkueSAtPSB0aGlzLnRyYW5zZm9ybV8uaGVpZ2h0IC8gMjtcbiAgICB2YXIgcHRSZXMgPSB0aGlzLnRyYW5zZm9ybV8ucG9pbnRMb2NhdGlvbihfcG9pbnRHZW9tZXRyeTIuZGVmYXVsdC5jb252ZXJ0KHB0eHkpKTtcblxuICAgIHB0UmVzLmxuZyAtPSAzNjAgKiBNYXRoLnJvdW5kKHB0UmVzLmxuZyAvIDM2MCk7IC8vIGNvbnZlcnQgMiBnb29nbGUgZm9ybWF0XG4gICAgcmV0dXJuIHB0UmVzO1xuICB9O1xuXG4gIEdlby5wcm90b3R5cGUuZ2V0V2lkdGggPSBmdW5jdGlvbiBnZXRXaWR0aCgpIHtcbiAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm1fLndpZHRoO1xuICB9O1xuXG4gIEdlby5wcm90b3R5cGUuZ2V0SGVpZ2h0ID0gZnVuY3Rpb24gZ2V0SGVpZ2h0KCkge1xuICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybV8uaGVpZ2h0O1xuICB9O1xuXG4gIEdlby5wcm90b3R5cGUuZ2V0Wm9vbSA9IGZ1bmN0aW9uIGdldFpvb20oKSB7XG4gICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtXy56b29tO1xuICB9O1xuXG4gIEdlby5wcm90b3R5cGUuZ2V0Q2VudGVyID0gZnVuY3Rpb24gZ2V0Q2VudGVyKCkge1xuICAgIHZhciBwdFJlcyA9IHRoaXMudHJhbnNmb3JtXy5wb2ludExvY2F0aW9uKHsgeDogMCwgeTogMCB9KTtcblxuICAgIHJldHVybiBwdFJlcztcbiAgfTtcblxuICBHZW8ucHJvdG90eXBlLmdldEJvdW5kcyA9IGZ1bmN0aW9uIGdldEJvdW5kcyhtYXJnaW5zLCByb3VuZEZhY3Rvcikge1xuICAgIHZhciBibmRUID0gbWFyZ2lucyAmJiBtYXJnaW5zWzBdIHx8IDA7XG4gICAgdmFyIGJuZFIgPSBtYXJnaW5zICYmIG1hcmdpbnNbMV0gfHwgMDtcbiAgICB2YXIgYm5kQiA9IG1hcmdpbnMgJiYgbWFyZ2luc1syXSB8fCAwO1xuICAgIHZhciBibmRMID0gbWFyZ2lucyAmJiBtYXJnaW5zWzNdIHx8IDA7XG5cbiAgICBpZiAodGhpcy5nZXRXaWR0aCgpIC0gYm5kUiAtIGJuZEwgPiAwICYmIHRoaXMuZ2V0SGVpZ2h0KCkgLSBibmRUIC0gYm5kQiA+IDApIHtcbiAgICAgIHZhciB0b3BMZWZ0Q29ybmVyID0gdGhpcy50cmFuc2Zvcm1fLnBvaW50TG9jYXRpb24oX3BvaW50R2VvbWV0cnkyLmRlZmF1bHQuY29udmVydCh7XG4gICAgICAgIHg6IGJuZEwgLSB0aGlzLmdldFdpZHRoKCkgLyAyLFxuICAgICAgICB5OiBibmRUIC0gdGhpcy5nZXRIZWlnaHQoKSAvIDJcbiAgICAgIH0pKTtcbiAgICAgIHZhciBib3R0b21SaWdodENvcm5lciA9IHRoaXMudHJhbnNmb3JtXy5wb2ludExvY2F0aW9uKF9wb2ludEdlb21ldHJ5Mi5kZWZhdWx0LmNvbnZlcnQoe1xuICAgICAgICB4OiB0aGlzLmdldFdpZHRoKCkgLyAyIC0gYm5kUixcbiAgICAgICAgeTogdGhpcy5nZXRIZWlnaHQoKSAvIDIgLSBibmRCXG4gICAgICB9KSk7XG5cbiAgICAgIHZhciByZXMgPSBbdG9wTGVmdENvcm5lci5sYXQsIHRvcExlZnRDb3JuZXIubG5nLCAvLyBOV1xuICAgICAgYm90dG9tUmlnaHRDb3JuZXIubGF0LCBib3R0b21SaWdodENvcm5lci5sbmcsIC8vIFNFXG4gICAgICBib3R0b21SaWdodENvcm5lci5sYXQsIHRvcExlZnRDb3JuZXIubG5nLCAvLyBTV1xuICAgICAgdG9wTGVmdENvcm5lci5sYXQsIGJvdHRvbVJpZ2h0Q29ybmVyLmxuZ107XG5cbiAgICAgIGlmIChyb3VuZEZhY3Rvcikge1xuICAgICAgICByZXMgPSByZXMubWFwKGZ1bmN0aW9uIChyKSB7XG4gICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQociAqIHJvdW5kRmFjdG9yKSAvIHJvdW5kRmFjdG9yO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIFswLCAwLCAwLCAwXTtcbiAgfTtcblxuICByZXR1cm4gR2VvO1xufSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBHZW87IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpOyAvKiBlc2xpbnQtZGlzYWJsZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzICovXG5cblxudmFyIF9wb2ludEdlb21ldHJ5ID0gcmVxdWlyZSgnQG1hcGJveC9wb2ludC1nZW9tZXRyeScpO1xuXG52YXIgX3BvaW50R2VvbWV0cnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9pbnRHZW9tZXRyeSk7XG5cbnZhciBfbGF0X2xuZyA9IHJlcXVpcmUoJy4vbGF0X2xuZycpO1xuXG52YXIgX2xhdF9sbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbGF0X2xuZyk7XG5cbnZhciBfd3JhcCA9IHJlcXVpcmUoJy4vd3JhcCcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG4vLyBBIHNpbmdsZSB0cmFuc2Zvcm0sIGdlbmVyYWxseSB1c2VkIGZvciBhIHNpbmdsZSB0aWxlIHRvIGJlIHNjYWxlZCwgcm90YXRlZCwgYW5kIHpvb21lZC5cbnZhciBUcmFuc2Zvcm0gPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFRyYW5zZm9ybSh0aWxlU2l6ZSwgbWluWm9vbSwgbWF4Wm9vbSkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUcmFuc2Zvcm0pO1xuXG4gICAgdGhpcy50aWxlU2l6ZSA9IHRpbGVTaXplIHx8IDUxMjsgLy8gY29uc3RhbnRcblxuICAgIHRoaXMuX21pblpvb20gPSBtaW5ab29tIHx8IDA7XG4gICAgdGhpcy5fbWF4Wm9vbSA9IG1heFpvb20gfHwgNTI7XG5cbiAgICB0aGlzLmxhdFJhbmdlID0gWy04NS4wNTExMywgODUuMDUxMTNdO1xuXG4gICAgdGhpcy53aWR0aCA9IDA7XG4gICAgdGhpcy5oZWlnaHQgPSAwO1xuICAgIHRoaXMuem9vbSA9IDA7XG4gICAgdGhpcy5jZW50ZXIgPSBuZXcgX2xhdF9sbmcyLmRlZmF1bHQoMCwgMCk7XG4gICAgdGhpcy5hbmdsZSA9IDA7XG4gIH1cblxuICBUcmFuc2Zvcm0ucHJvdG90eXBlLnpvb21TY2FsZSA9IGZ1bmN0aW9uIHpvb21TY2FsZSh6b29tKSB7XG4gICAgcmV0dXJuIE1hdGgucG93KDIsIHpvb20pO1xuICB9O1xuXG4gIFRyYW5zZm9ybS5wcm90b3R5cGUuc2NhbGVab29tID0gZnVuY3Rpb24gc2NhbGVab29tKHNjYWxlKSB7XG4gICAgcmV0dXJuIE1hdGgubG9nKHNjYWxlKSAvIE1hdGguTE4yO1xuICB9O1xuXG4gIFRyYW5zZm9ybS5wcm90b3R5cGUucHJvamVjdCA9IGZ1bmN0aW9uIHByb2plY3QobGF0bG5nLCB3b3JsZFNpemUpIHtcbiAgICByZXR1cm4gbmV3IF9wb2ludEdlb21ldHJ5Mi5kZWZhdWx0KHRoaXMubG5nWChsYXRsbmcubG5nLCB3b3JsZFNpemUpLCB0aGlzLmxhdFkobGF0bG5nLmxhdCwgd29ybGRTaXplKSk7XG4gIH07XG5cbiAgVHJhbnNmb3JtLnByb3RvdHlwZS51bnByb2plY3QgPSBmdW5jdGlvbiB1bnByb2plY3QocG9pbnQsIHdvcmxkU2l6ZSkge1xuICAgIHJldHVybiBuZXcgX2xhdF9sbmcyLmRlZmF1bHQodGhpcy55TGF0KHBvaW50LnksIHdvcmxkU2l6ZSksIHRoaXMueExuZyhwb2ludC54LCB3b3JsZFNpemUpKTtcbiAgfTtcblxuICAvLyBsYXQvbG9uIDwtPiBhYnNvbHV0ZSBwaXhlbCBjb29yZHMgY29udmVydGlvblxuICBUcmFuc2Zvcm0ucHJvdG90eXBlLmxuZ1ggPSBmdW5jdGlvbiBsbmdYKGxvbiwgd29ybGRTaXplKSB7XG4gICAgcmV0dXJuICgxODAgKyBsb24pICogKHdvcmxkU2l6ZSB8fCB0aGlzLndvcmxkU2l6ZSkgLyAzNjA7XG4gIH07XG5cbiAgLy8gbGF0aXR1ZGUgdG8gYWJzb2x1dGUgeSBjb29yZFxuXG5cbiAgVHJhbnNmb3JtLnByb3RvdHlwZS5sYXRZID0gZnVuY3Rpb24gbGF0WShsYXQsIHdvcmxkU2l6ZSkge1xuICAgIHZhciB5ID0gMTgwIC8gTWF0aC5QSSAqIE1hdGgubG9nKE1hdGgudGFuKE1hdGguUEkgLyA0ICsgbGF0ICogTWF0aC5QSSAvIDM2MCkpO1xuICAgIHJldHVybiAoMTgwIC0geSkgKiAod29ybGRTaXplIHx8IHRoaXMud29ybGRTaXplKSAvIDM2MDtcbiAgfTtcblxuICBUcmFuc2Zvcm0ucHJvdG90eXBlLnhMbmcgPSBmdW5jdGlvbiB4TG5nKHgsIHdvcmxkU2l6ZSkge1xuICAgIHJldHVybiB4ICogMzYwIC8gKHdvcmxkU2l6ZSB8fCB0aGlzLndvcmxkU2l6ZSkgLSAxODA7XG4gIH07XG5cbiAgVHJhbnNmb3JtLnByb3RvdHlwZS55TGF0ID0gZnVuY3Rpb24geUxhdCh5LCB3b3JsZFNpemUpIHtcbiAgICB2YXIgeTIgPSAxODAgLSB5ICogMzYwIC8gKHdvcmxkU2l6ZSB8fCB0aGlzLndvcmxkU2l6ZSk7XG4gICAgcmV0dXJuIDM2MCAvIE1hdGguUEkgKiBNYXRoLmF0YW4oTWF0aC5leHAoeTIgKiBNYXRoLlBJIC8gMTgwKSkgLSA5MDtcbiAgfTtcblxuICBUcmFuc2Zvcm0ucHJvdG90eXBlLmxvY2F0aW9uUG9pbnQgPSBmdW5jdGlvbiBsb2NhdGlvblBvaW50KGxhdGxuZykge1xuICAgIHZhciBwID0gdGhpcy5wcm9qZWN0KGxhdGxuZyk7XG4gICAgcmV0dXJuIHRoaXMuY2VudGVyUG9pbnQuX3N1Yih0aGlzLnBvaW50Ll9zdWIocCkuX3JvdGF0ZSh0aGlzLmFuZ2xlKSk7XG4gIH07XG5cbiAgVHJhbnNmb3JtLnByb3RvdHlwZS5wb2ludExvY2F0aW9uID0gZnVuY3Rpb24gcG9pbnRMb2NhdGlvbihwKSB7XG4gICAgdmFyIHAyID0gdGhpcy5jZW50ZXJQb2ludC5fc3ViKHApLl9yb3RhdGUoLXRoaXMuYW5nbGUpO1xuICAgIHJldHVybiB0aGlzLnVucHJvamVjdCh0aGlzLnBvaW50LnN1YihwMikpO1xuICB9O1xuXG4gIF9jcmVhdGVDbGFzcyhUcmFuc2Zvcm0sIFt7XG4gICAga2V5OiAnbWluWm9vbScsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbWluWm9vbTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHpvb20pIHtcbiAgICAgIHRoaXMuX21pblpvb20gPSB6b29tO1xuICAgICAgdGhpcy56b29tID0gTWF0aC5tYXgodGhpcy56b29tLCB6b29tKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdtYXhab29tJyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tYXhab29tO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQoem9vbSkge1xuICAgICAgdGhpcy5fbWF4Wm9vbSA9IHpvb207XG4gICAgICB0aGlzLnpvb20gPSBNYXRoLm1pbih0aGlzLnpvb20sIHpvb20pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3dvcmxkU2l6ZScsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy50aWxlU2l6ZSAqIHRoaXMuc2NhbGU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY2VudGVyUG9pbnQnLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIG5ldyBfcG9pbnRHZW9tZXRyeTIuZGVmYXVsdCgwLCAwKTsgLy8gdGhpcy5zaXplLl9kaXYoMik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2l6ZScsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gbmV3IF9wb2ludEdlb21ldHJ5Mi5kZWZhdWx0KHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdiZWFyaW5nJyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiAtdGhpcy5hbmdsZSAvIE1hdGguUEkgKiAxODA7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChiZWFyaW5nKSB7XG4gICAgICB0aGlzLmFuZ2xlID0gLSgwLCBfd3JhcC53cmFwKShiZWFyaW5nLCAtMTgwLCAxODApICogTWF0aC5QSSAvIDE4MDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd6b29tJyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl96b29tO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQoem9vbSkge1xuICAgICAgdmFyIHpvb21WID0gTWF0aC5taW4oTWF0aC5tYXgoem9vbSwgdGhpcy5taW5ab29tKSwgdGhpcy5tYXhab29tKTtcbiAgICAgIHRoaXMuX3pvb20gPSB6b29tVjtcbiAgICAgIHRoaXMuc2NhbGUgPSB0aGlzLnpvb21TY2FsZSh6b29tVik7XG4gICAgICB0aGlzLnRpbGVab29tID0gTWF0aC5mbG9vcih6b29tVik7XG4gICAgICB0aGlzLnpvb21GcmFjdGlvbiA9IHpvb21WIC0gdGhpcy50aWxlWm9vbTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd4JyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmxuZ1godGhpcy5jZW50ZXIubG5nKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd5JyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmxhdFkodGhpcy5jZW50ZXIubGF0KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdwb2ludCcsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gbmV3IF9wb2ludEdlb21ldHJ5Mi5kZWZhdWx0KHRoaXMueCwgdGhpcy55KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVHJhbnNmb3JtO1xufSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBUcmFuc2Zvcm07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSByYWY7XG5mdW5jdGlvbiByYWYoY2FsbGJhY2spIHtcbiAgaWYgKHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHtcbiAgICByZXR1cm4gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShjYWxsYmFjayk7XG4gIH1cblxuICB2YXIgbmF0aXZlUmFmID0gd2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuXG4gIHJldHVybiBuYXRpdmVSYWYgPyBuYXRpdmVSYWYoY2FsbGJhY2spIDogd2luZG93LnNldFRpbWVvdXQoY2FsbGJhY2ssIDFlMyAvIDYwKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHBpY2s7XG4vLyBzb3VyY2UgdGFrZW4gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vcmFja3QvcmVkdXgvYmxvYi9tYXN0ZXIvc3JjL3V0aWxzL3BpY2suanNcblxuZnVuY3Rpb24gcGljayhvYmosIGZuKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLnJlZHVjZShmdW5jdGlvbiAocmVzdWx0LCBrZXkpIHtcbiAgICBpZiAoZm4ob2JqW2tleV0pKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG9ialtrZXldOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sIHt9KTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbnZhciBsb2cyID0gTWF0aC5sb2cyID8gTWF0aC5sb2cyIDogZnVuY3Rpb24gKHgpIHtcbiAgcmV0dXJuIE1hdGgubG9nKHgpIC8gTWF0aC5MTjI7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBsb2cyOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgaXNFbXB0eSA9IGZ1bmN0aW9uIGlzRW1wdHkodmFsKSB7XG4gIC8vIGNoZWNrIGZvciBlbXB0eSBvYmplY3Qge30sIGFycmF5IFtdXG4gIGlmICh2YWwgIT09IG51bGwgJiYgKHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHZhbCkpID09PSAnb2JqZWN0Jykge1xuICAgIGlmIChPYmplY3Qua2V5cyh2YWwpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9IGVsc2UgaWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCB8fCB2YWwgPT09ICcnKSB7XG4gICAgLy8gY2hlY2sgZm9yIHVuZGVmaW5lZCwgbnVsbCBhbmQgXCJcIlxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGlzRW1wdHk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGlzTnVtYmVyO1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiAhIXZhbHVlICYmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHZhbHVlKSkgPT09ICdvYmplY3QnO1xufVxuXG52YXIgb2JqZWN0VG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG5mdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge1xuICB2YXIgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXSc7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8IGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09IG51bWJlclRhZztcbn0iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBkZXRlY3RCcm93c2VyO1xuLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy81ODk5NzgzL2RldGVjdC1zYWZhcmktY2hyb21lLWllLWZpcmVmb3gtb3BlcmEtd2l0aC11c2VyLWFnZW50XG52YXIgZGV0ZWN0QnJvd3NlclJlc3VsdF8gPSBudWxsO1xuXG5mdW5jdGlvbiBkZXRlY3RCcm93c2VyKCkge1xuICBpZiAoZGV0ZWN0QnJvd3NlclJlc3VsdF8pIHtcbiAgICByZXR1cm4gZGV0ZWN0QnJvd3NlclJlc3VsdF87XG4gIH1cblxuICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgaXNFeHBsb3JlciA9IG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignTVNJRScpID4gLTE7XG4gICAgdmFyIGlzRmlyZWZveCA9IG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID4gLTE7XG4gICAgdmFyIGlzT3BlcmEgPSBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkuaW5kZXhPZignb3AnKSA+IC0xO1xuXG4gICAgdmFyIGlzQ2hyb21lID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDaHJvbWUnKSA+IC0xO1xuICAgIHZhciBpc1NhZmFyaSA9IG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignU2FmYXJpJykgPiAtMTtcblxuICAgIGlmIChpc0Nocm9tZSAmJiBpc1NhZmFyaSkge1xuICAgICAgaXNTYWZhcmkgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoaXNDaHJvbWUgJiYgaXNPcGVyYSkge1xuICAgICAgaXNDaHJvbWUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBkZXRlY3RCcm93c2VyUmVzdWx0XyA9IHtcbiAgICAgIGlzRXhwbG9yZXI6IGlzRXhwbG9yZXIsXG4gICAgICBpc0ZpcmVmb3g6IGlzRmlyZWZveCxcbiAgICAgIGlzT3BlcmE6IGlzT3BlcmEsXG4gICAgICBpc0Nocm9tZTogaXNDaHJvbWUsXG4gICAgICBpc1NhZmFyaTogaXNTYWZhcmlcbiAgICB9O1xuICAgIHJldHVybiBkZXRlY3RCcm93c2VyUmVzdWx0XztcbiAgfVxuXG4gIGRldGVjdEJyb3dzZXJSZXN1bHRfID0ge1xuICAgIGlzQ2hyb21lOiB0cnVlLFxuICAgIGlzRXhwbG9yZXI6IGZhbHNlLFxuICAgIGlzRmlyZWZveDogZmFsc2UsXG4gICAgaXNPcGVyYTogZmFsc2UsXG4gICAgaXNTYWZhcmk6IGZhbHNlXG4gIH07XG5cbiAgcmV0dXJuIGRldGVjdEJyb3dzZXJSZXN1bHRfO1xufSIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBpc1BsYWluT2JqZWN0O1xuLy8gc291cmNlIHRha2VuIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3JhY2t0L3JlZHV4L2Jsb2IvbWFzdGVyL3NyYy91dGlscy9pc1BsYWluT2JqZWN0LmpzXG52YXIgZm5Ub1N0cmluZyA9IGZ1bmN0aW9uIGZuVG9TdHJpbmcoZm4pIHtcbiAgcmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGZuKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHthbnl9IG9iaiBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgYXJndW1lbnQgYXBwZWFycyB0byBiZSBhIHBsYWluIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvYmopIHtcbiAgaWYgKCFvYmogfHwgKHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKG9iaikpICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBwcm90byA9IHR5cGVvZiBvYmouY29uc3RydWN0b3IgPT09ICdmdW5jdGlvbicgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSA6IE9iamVjdC5wcm90b3R5cGU7XG5cbiAgaWYgKHByb3RvID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICB2YXIgY29uc3RydWN0b3IgPSBwcm90by5jb25zdHJ1Y3RvcjtcblxuICByZXR1cm4gdHlwZW9mIGNvbnN0cnVjdG9yID09PSAnZnVuY3Rpb24nICYmIGNvbnN0cnVjdG9yIGluc3RhbmNlb2YgY29uc3RydWN0b3IgJiYgZm5Ub1N0cmluZyhjb25zdHJ1Y3RvcikgPT09IGZuVG9TdHJpbmcoT2JqZWN0KTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzQXJyYXlzRXF1YWxFcHM7XG5mdW5jdGlvbiBpc0FycmF5c0VxdWFsRXBzKGFycmF5QSwgYXJyYXlCLCBlcHMpIHtcbiAgaWYgKGFycmF5QSAmJiBhcnJheUIpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSAhPT0gYXJyYXlBLmxlbmd0aDsgKytpKSB7XG4gICAgICBpZiAoTWF0aC5hYnMoYXJyYXlBW2ldIC0gYXJyYXlCW2ldKSA+IGVwcykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn0iLCIndXNlIHN0cmljdCc7XG5cbnZhciBfcGFzc2l2ZUV2ZW50cyA9IHJlcXVpcmUoJy4vcGFzc2l2ZUV2ZW50cycpO1xuXG52YXIgX3Bhc3NpdmVFdmVudHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFzc2l2ZUV2ZW50cyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8vIFJlbGlhYmxlIGB3aW5kb3dgIGFuZCBgZG9jdW1lbnRgIGRldGVjdGlvblxudmFyIGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbi8vIENoZWNrIGBkb2N1bWVudGAgYW5kIGB3aW5kb3dgIGluIGNhc2Ugb2Ygc2VydmVyLXNpZGUgcmVuZGVyaW5nXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyoqXG4qIERldGVjdCBFbGVtZW50IFJlc2l6ZS5cbiogRm9ya2VkIGluIG9yZGVyIHRvIGd1YXJkIGFnYWluc3QgdW5zYWZlICd3aW5kb3cnIGFuZCAnZG9jdW1lbnQnIHJlZmVyZW5jZXMuXG4qXG4qIGh0dHBzOi8vZ2l0aHViLmNvbS9zZGVjaW1hL2phdmFzY3JpcHQtZGV0ZWN0LWVsZW1lbnQtcmVzaXplXG4qIFNlYmFzdGlhbiBEZWNpbWFcbipcbiogdmVyc2lvbjogMC41LjNcbioqL1xuXG52YXIgX3dpbmRvdztcbmlmIChjYW5Vc2VET00pIHtcbiAgX3dpbmRvdyA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gIF93aW5kb3cgPSBzZWxmO1xufSBlbHNlIHtcbiAgX3dpbmRvdyA9IHVuZGVmaW5lZDtcbn1cblxudmFyIGF0dGFjaEV2ZW50ID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudC5hdHRhY2hFdmVudDtcbnZhciBzdHlsZXNDcmVhdGVkID0gZmFsc2U7XG5cbmlmIChjYW5Vc2VET00gJiYgIWF0dGFjaEV2ZW50KSB7XG4gIHZhciByZXF1ZXN0RnJhbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJhZiA9IF93aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IF93aW5kb3cubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IF93aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IGZ1bmN0aW9uIChmbikge1xuICAgICAgcmV0dXJuIF93aW5kb3cuc2V0VGltZW91dChmbiwgMjApO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChmbikge1xuICAgICAgcmV0dXJuIHJhZihmbik7XG4gICAgfTtcbiAgfSgpO1xuXG4gIHZhciBjYW5jZWxGcmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY2FuY2VsID0gX3dpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSB8fCBfd2luZG93Lm1vekNhbmNlbEFuaW1hdGlvbkZyYW1lIHx8IF93aW5kb3cud2Via2l0Q2FuY2VsQW5pbWF0aW9uRnJhbWUgfHwgX3dpbmRvdy5jbGVhclRpbWVvdXQ7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChpZCkge1xuICAgICAgcmV0dXJuIGNhbmNlbChpZCk7XG4gICAgfTtcbiAgfSgpO1xuXG4gIHZhciByZXNldFRyaWdnZXJzID0gZnVuY3Rpb24gcmVzZXRUcmlnZ2VycyhlbGVtZW50KSB7XG4gICAgdmFyIHRyaWdnZXJzID0gZWxlbWVudC5fX3Jlc2l6ZVRyaWdnZXJzX18sXG4gICAgICAgIGV4cGFuZCA9IHRyaWdnZXJzLmZpcnN0RWxlbWVudENoaWxkLFxuICAgICAgICBjb250cmFjdCA9IHRyaWdnZXJzLmxhc3RFbGVtZW50Q2hpbGQsXG4gICAgICAgIGV4cGFuZENoaWxkID0gZXhwYW5kLmZpcnN0RWxlbWVudENoaWxkO1xuICAgIGNvbnRyYWN0LnNjcm9sbExlZnQgPSBjb250cmFjdC5zY3JvbGxXaWR0aDtcbiAgICBjb250cmFjdC5zY3JvbGxUb3AgPSBjb250cmFjdC5zY3JvbGxIZWlnaHQ7XG4gICAgZXhwYW5kQ2hpbGQuc3R5bGUud2lkdGggPSBleHBhbmQub2Zmc2V0V2lkdGggKyAxICsgJ3B4JztcbiAgICBleHBhbmRDaGlsZC5zdHlsZS5oZWlnaHQgPSBleHBhbmQub2Zmc2V0SGVpZ2h0ICsgMSArICdweCc7XG4gICAgZXhwYW5kLnNjcm9sbExlZnQgPSBleHBhbmQuc2Nyb2xsV2lkdGg7XG4gICAgZXhwYW5kLnNjcm9sbFRvcCA9IGV4cGFuZC5zY3JvbGxIZWlnaHQ7XG4gIH07XG5cbiAgdmFyIGNoZWNrVHJpZ2dlcnMgPSBmdW5jdGlvbiBjaGVja1RyaWdnZXJzKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gZWxlbWVudC5vZmZzZXRXaWR0aCAhPSBlbGVtZW50Ll9fcmVzaXplTGFzdF9fLndpZHRoIHx8IGVsZW1lbnQub2Zmc2V0SGVpZ2h0ICE9IGVsZW1lbnQuX19yZXNpemVMYXN0X18uaGVpZ2h0O1xuICB9O1xuXG4gIHZhciBzY3JvbGxMaXN0ZW5lciA9IGZ1bmN0aW9uIHNjcm9sbExpc3RlbmVyKGUpIHtcbiAgICB2YXIgZWxlbWVudCA9IHRoaXM7XG4gICAgcmVzZXRUcmlnZ2Vycyh0aGlzKTtcbiAgICBpZiAodGhpcy5fX3Jlc2l6ZVJBRl9fKSBjYW5jZWxGcmFtZSh0aGlzLl9fcmVzaXplUkFGX18pO1xuICAgIHRoaXMuX19yZXNpemVSQUZfXyA9IHJlcXVlc3RGcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoY2hlY2tUcmlnZ2VycyhlbGVtZW50KSkge1xuICAgICAgICBlbGVtZW50Ll9fcmVzaXplTGFzdF9fLndpZHRoID0gZWxlbWVudC5vZmZzZXRXaWR0aDtcbiAgICAgICAgZWxlbWVudC5fX3Jlc2l6ZUxhc3RfXy5oZWlnaHQgPSBlbGVtZW50Lm9mZnNldEhlaWdodDtcbiAgICAgICAgZWxlbWVudC5fX3Jlc2l6ZUxpc3RlbmVyc19fLmZvckVhY2goZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgICAgZm4uY2FsbChlbGVtZW50LCBlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgLyogRGV0ZWN0IENTUyBBbmltYXRpb25zIHN1cHBvcnQgdG8gZGV0ZWN0IGVsZW1lbnQgZGlzcGxheS9yZS1hdHRhY2ggKi9cbiAgdmFyIGFuaW1hdGlvbiA9IGZhbHNlLFxuICAgICAgYW5pbWF0aW9uc3RyaW5nID0gJ2FuaW1hdGlvbicsXG4gICAgICBrZXlmcmFtZXByZWZpeCA9ICcnLFxuICAgICAgYW5pbWF0aW9uc3RhcnRldmVudCA9ICdhbmltYXRpb25zdGFydCcsXG4gICAgICBkb21QcmVmaXhlcyA9ICdXZWJraXQgTW96IE8gbXMnLnNwbGl0KCcgJyksXG4gICAgICBzdGFydEV2ZW50cyA9ICd3ZWJraXRBbmltYXRpb25TdGFydCBhbmltYXRpb25zdGFydCBvQW5pbWF0aW9uU3RhcnQgTVNBbmltYXRpb25TdGFydCcuc3BsaXQoJyAnKSxcbiAgICAgIHBmeCA9ICcnO1xuXG4gIGlmIChjYW5Vc2VET00pIHtcbiAgICB2YXIgZWxtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZmFrZWVsZW1lbnQnKTtcbiAgICBpZiAoZWxtLnN0eWxlLmFuaW1hdGlvbk5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgYW5pbWF0aW9uID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoYW5pbWF0aW9uID09PSBmYWxzZSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkb21QcmVmaXhlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoZWxtLnN0eWxlW2RvbVByZWZpeGVzW2ldICsgJ0FuaW1hdGlvbk5hbWUnXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcGZ4ID0gZG9tUHJlZml4ZXNbaV07XG4gICAgICAgICAgYW5pbWF0aW9uc3RyaW5nID0gcGZ4ICsgJ0FuaW1hdGlvbic7XG4gICAgICAgICAga2V5ZnJhbWVwcmVmaXggPSAnLScgKyBwZngudG9Mb3dlckNhc2UoKSArICctJztcbiAgICAgICAgICBhbmltYXRpb25zdGFydGV2ZW50ID0gc3RhcnRFdmVudHNbaV07XG4gICAgICAgICAgYW5pbWF0aW9uID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBhbmltYXRpb25OYW1lID0gJ3Jlc2l6ZWFuaW0nO1xuICB2YXIgYW5pbWF0aW9uS2V5ZnJhbWVzID0gJ0AnICsga2V5ZnJhbWVwcmVmaXggKyAna2V5ZnJhbWVzICcgKyBhbmltYXRpb25OYW1lICsgJyB7IGZyb20geyBvcGFjaXR5OiAwOyB9IHRvIHsgb3BhY2l0eTogMDsgfSB9ICc7XG4gIHZhciBhbmltYXRpb25TdHlsZSA9IGtleWZyYW1lcHJlZml4ICsgJ2FuaW1hdGlvbjogMW1zICcgKyBhbmltYXRpb25OYW1lICsgJzsgJztcbn1cblxudmFyIGNyZWF0ZVN0eWxlcyA9IGZ1bmN0aW9uIGNyZWF0ZVN0eWxlcygpIHtcbiAgaWYgKCFzdHlsZXNDcmVhdGVkKSB7XG4gICAgLy9vcGFjaXR5OjAgd29ya3MgYXJvdW5kIGEgY2hyb21lIGJ1ZyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mjg2MzYwXG4gICAgdmFyIGNzcyA9IChhbmltYXRpb25LZXlmcmFtZXMgPyBhbmltYXRpb25LZXlmcmFtZXMgOiAnJykgKyAnLnJlc2l6ZS10cmlnZ2VycyB7ICcgKyAoYW5pbWF0aW9uU3R5bGUgPyBhbmltYXRpb25TdHlsZSA6ICcnKSArICd2aXNpYmlsaXR5OiBoaWRkZW47IG9wYWNpdHk6IDA7IH0gJyArICcucmVzaXplLXRyaWdnZXJzLCAucmVzaXplLXRyaWdnZXJzID4gZGl2LCAuY29udHJhY3QtdHJpZ2dlcjpiZWZvcmUgeyBjb250ZW50OiBcIiBcIjsgZGlzcGxheTogYmxvY2s7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOiAwOyBsZWZ0OiAwOyBoZWlnaHQ6IDEwMCU7IHdpZHRoOiAxMDAlOyBvdmVyZmxvdzogaGlkZGVuOyB9IC5yZXNpemUtdHJpZ2dlcnMgPiBkaXYgeyBiYWNrZ3JvdW5kOiAjZWVlOyBvdmVyZmxvdzogYXV0bzsgfSAuY29udHJhY3QtdHJpZ2dlcjpiZWZvcmUgeyB3aWR0aDogMjAwJTsgaGVpZ2h0OiAyMDAlOyB9JyxcbiAgICAgICAgaGVhZCA9IGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXSxcbiAgICAgICAgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuXG4gICAgc3R5bGUudHlwZSA9ICd0ZXh0L2Nzcyc7XG4gICAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gICAgfVxuXG4gICAgaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gICAgc3R5bGVzQ3JlYXRlZCA9IHRydWU7XG4gIH1cbn07XG5cbnZhciBhZGRSZXNpemVMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZFJlc2l6ZUxpc3RlbmVyKGVsZW1lbnQsIGZuKSB7XG4gIGlmIChlbGVtZW50LnBhcmVudE5vZGUgPT09IHVuZGVmaW5lZCkge1xuICAgIHZhciB0ZW1wUGFyZW50RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZWxlbWVudC5wYXJlbnROb2RlID0gdGVtcFBhcmVudERpdjtcbiAgfVxuICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICBpZiAoYXR0YWNoRXZlbnQpIGVsZW1lbnQuYXR0YWNoRXZlbnQoJ29ucmVzaXplJywgZm4pO2Vsc2Uge1xuICAgIGlmICghZWxlbWVudC5fX3Jlc2l6ZVRyaWdnZXJzX18pIHtcbiAgICAgIGlmIChnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLnBvc2l0aW9uID09ICdzdGF0aWMnKSBlbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcbiAgICAgIGNyZWF0ZVN0eWxlcygpO1xuICAgICAgZWxlbWVudC5fX3Jlc2l6ZUxhc3RfXyA9IHt9O1xuICAgICAgZWxlbWVudC5fX3Jlc2l6ZUxpc3RlbmVyc19fID0gW107XG4gICAgICAoZWxlbWVudC5fX3Jlc2l6ZVRyaWdnZXJzX18gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSkuY2xhc3NOYW1lID0gJ3Jlc2l6ZS10cmlnZ2Vycyc7XG4gICAgICBlbGVtZW50Ll9fcmVzaXplVHJpZ2dlcnNfXy5pbm5lckhUTUwgPSAnPGRpdiBjbGFzcz1cImV4cGFuZC10cmlnZ2VyXCI+PGRpdj48L2Rpdj48L2Rpdj4nICsgJzxkaXYgY2xhc3M9XCJjb250cmFjdC10cmlnZ2VyXCI+PC9kaXY+JztcbiAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoZWxlbWVudC5fX3Jlc2l6ZVRyaWdnZXJzX18pO1xuICAgICAgcmVzZXRUcmlnZ2VycyhlbGVtZW50KTtcblxuICAgICAgKDAsIF9wYXNzaXZlRXZlbnRzMi5kZWZhdWx0KShlbGVtZW50LCAnc2Nyb2xsJywgc2Nyb2xsTGlzdGVuZXIsIHRydWUpO1xuXG4gICAgICAvKiBMaXN0ZW4gZm9yIGEgY3NzIGFuaW1hdGlvbiB0byBkZXRlY3QgZWxlbWVudCBkaXNwbGF5L3JlLWF0dGFjaCAqL1xuICAgICAgYW5pbWF0aW9uc3RhcnRldmVudCAmJiBlbGVtZW50Ll9fcmVzaXplVHJpZ2dlcnNfXy5hZGRFdmVudExpc3RlbmVyKGFuaW1hdGlvbnN0YXJ0ZXZlbnQsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmIChlLmFuaW1hdGlvbk5hbWUgPT0gYW5pbWF0aW9uTmFtZSkgcmVzZXRUcmlnZ2VycyhlbGVtZW50KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBlbGVtZW50Ll9fcmVzaXplTGlzdGVuZXJzX18ucHVzaChmbik7XG4gIH1cbn07XG5cbnZhciByZW1vdmVSZXNpemVMaXN0ZW5lciA9IGZ1bmN0aW9uIHJlbW92ZVJlc2l6ZUxpc3RlbmVyKGVsZW1lbnQsIGZuKSB7XG4gIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gIGlmIChhdHRhY2hFdmVudCkgZWxlbWVudC5kZXRhY2hFdmVudCgnb25yZXNpemUnLCBmbik7ZWxzZSB7XG4gICAgZWxlbWVudC5fX3Jlc2l6ZUxpc3RlbmVyc19fLnNwbGljZShlbGVtZW50Ll9fcmVzaXplTGlzdGVuZXJzX18uaW5kZXhPZihmbiksIDEpO1xuICAgIGlmICghZWxlbWVudC5fX3Jlc2l6ZUxpc3RlbmVyc19fLmxlbmd0aCkge1xuICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBzY3JvbGxMaXN0ZW5lcik7XG4gICAgICBlbGVtZW50Ll9fcmVzaXplVHJpZ2dlcnNfXyA9ICFlbGVtZW50LnJlbW92ZUNoaWxkKGVsZW1lbnQuX19yZXNpemVUcmlnZ2Vyc19fKTtcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhZGRSZXNpemVMaXN0ZW5lcjogYWRkUmVzaXplTGlzdGVuZXIsXG4gIHJlbW92ZVJlc2l6ZUxpc3RlbmVyOiByZW1vdmVSZXNpemVMaXN0ZW5lclxufTsiLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxuPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHA9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscT1iP1xuU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6NjAxMjAscj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LHQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNix2PWI/U3ltYm9sLmZvcihcInJlYWN0LmJsb2NrXCIpOjYwMTIxLHc9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnVuZGFtZW50YWxcIik6NjAxMTcseD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5yZXNwb25kZXJcIik6NjAxMTgseT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTo2MDExOTtcbmZ1bmN0aW9uIHooYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHU9YS4kJHR5cGVvZjtzd2l0Y2godSl7Y2FzZSBjOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGw6Y2FzZSBtOmNhc2UgZTpjYXNlIGc6Y2FzZSBmOmNhc2UgcDpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgbjpjYXNlIHQ6Y2FzZSByOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB1fX1jYXNlIGQ6cmV0dXJuIHV9fX1mdW5jdGlvbiBBKGEpe3JldHVybiB6KGEpPT09bX1leHBvcnRzLkFzeW5jTW9kZT1sO2V4cG9ydHMuQ29uY3VycmVudE1vZGU9bTtleHBvcnRzLkNvbnRleHRDb25zdW1lcj1rO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWg7ZXhwb3J0cy5FbGVtZW50PWM7ZXhwb3J0cy5Gb3J3YXJkUmVmPW47ZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT10O2V4cG9ydHMuTWVtbz1yO2V4cG9ydHMuUG9ydGFsPWQ7XG5leHBvcnRzLlByb2ZpbGVyPWc7ZXhwb3J0cy5TdHJpY3RNb2RlPWY7ZXhwb3J0cy5TdXNwZW5zZT1wO2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIEEoYSl8fHooYSk9PT1sfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9QTtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09a307ZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWh9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09dH07XG5leHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXJ9O2V4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1kfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1nfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWZ9O2V4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXB9O1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWV8fGE9PT1tfHxhPT09Z3x8YT09PWZ8fGE9PT1wfHxhPT09cXx8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT10fHxhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1rfHxhLiQkdHlwZW9mPT09bnx8YS4kJHR5cGVvZj09PXd8fGEuJCR0eXBlb2Y9PT14fHxhLiQkdHlwZW9mPT09eXx8YS4kJHR5cGVvZj09PXYpfTtleHBvcnRzLnR5cGVPZj16O1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcblxuY2xhc3MgVXNlciBleHRlbmRzIENvbXBvbmVudCB7XG5cdGNvbnN0cnVjdG9yKHByb3BzKSB7XG5cdFx0c3VwZXIocHJvcHMpO1xuXHRcdHRoaXMuc3RhdGUgPSB7XG5cdFx0XHR1c2VyY3JlOiB7XG5cdFx0XHRcdGVtYWlsOiBcInVua25vd25cIixcblx0XHRcdFx0cGFzc3dvcmQ6IFwiXCJcblx0XHRcdH0sXG5cdFx0XHR1c2VyOiB7XG5cdFx0XHRcdGRpc3BsYXlOYW1lOiBcIlwiXG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdGZldGNoVXNlcigpIHtcblx0XHRpZiAodGhpcy5zdGF0ZS51c2VyY3JlLmVtYWlsICE9IFwidW5rbm93blwiKSB7XG5cdFx0XHRjb25zb2xlLmxvZyhgQ2FsbGluZyBodHRwOi8vbG9jYWxob3N0OjgwODAvdXNlcnMvJHt0aGlzLnN0YXRlLnVzZXJjcmUuZW1haWx9LyR7dGhpcy5zdGF0ZS51c2VyY3JlLnBhc3N3b3JkfWApXG5cdFx0XHRheGlvcy5nZXQoYGh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC91c2Vycy8ke3RoaXMuc3RhdGUudXNlcmNyZS5lbWFpbH0vJHt0aGlzLnN0YXRlLnVzZXJjcmUucGFzc3dvcmR9YClcblx0XHRcdC50aGVuKHJlcyA9PiB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKHJlcylcblx0XHRcdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRcdFx0dXNlcjogcmVzLmRhdGFcblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHRyZW5kZXIoKSB7XG5cdFx0cmV0dXJuIChcblx0XHRcdDxkaXYgY2xhc3NOYW1lPVwidXNlclwiPlxuXHRcdFx0XHQ8YnV0dG9uIG9uQ2xpY2s9eygpID0+IHtcblx0XHRcdFx0XHRjb25zdCB1ZW1haWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImlucHV0X3VzZXJlbWFpbFwiKS52YWx1ZVxuXHRcdFx0XHRcdGNvbnN0IHVwdyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaW5wdXRfdXNlcnBhc3N3b3JkXCIpLnZhbHVlXG5cdFx0XHRcdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRcdFx0XHR1c2VyY3JlOntcblx0XHRcdFx0XHRcdFx0ZW1haWw6IHVlbWFpbCxcblx0XHRcdFx0XHRcdFx0cGFzc3dvcmQ6IHVwd1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdHRoaXMuZmV0Y2hVc2VyKClcblx0XHRcdFx0fX0+TG9naW48L2J1dHRvbj5cblx0XHRcdFx0PGgxPkhlbGxvIHt0aGlzLnN0YXRlLnVzZXJbXCJkaXNwbGF5TmFtZVwiXX08L2gxPlxuXHRcdFx0PC9kaXY+XG5cdFx0KTtcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBVc2VyO1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IEdvb2dsZU1hcFJlYWN0IGZyb20gJ2dvb2dsZS1tYXAtcmVhY3QnO1xuXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuXG5jb25zdCBXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDUwJTtcbiAgbGVmdDogNTAlO1xuICB3aWR0aDogMThweDtcbiAgaGVpZ2h0OiAxOHB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiByZWQ7XG4gIGJvcmRlcjogMnB4IHNvbGlkICNmZmY7XG4gIGJvcmRlci1yYWRpdXM6IDEwMCU7XG4gIHVzZXItc2VsZWN0OiBub25lO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcbiAgY3Vyc29yOiAke3Byb3BzID0+IChwcm9wcy5vbkNsaWNrID8gJ3BvaW50ZXInIDogJ2RlZmF1bHQnKX07XG4gICY6aG92ZXIge1xuICAgIHotaW5kZXg6IDE7XG4gIH1cbmA7XG5cbmNvbnN0IENlbnRlcldyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogNTAlO1xuICBsZWZ0OiA1MCU7XG4gIHdpZHRoOiAyMnB4O1xuICBoZWlnaHQ6IDIycHg7XG4gIGJhY2tncm91bmQtY29sb3I6IGdyZWVuO1xuICBib3JkZXI6IDJweCBzb2xpZCAjZmZmO1xuICBib3JkZXItcmFkaXVzOiAxMDAlO1xuICB1c2VyLXNlbGVjdDogbm9uZTtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XG4gIGN1cnNvcjogJHtwcm9wcyA9PiAocHJvcHMub25DbGljayA/ICdwb2ludGVyJyA6ICdkZWZhdWx0Jyl9O1xuICAmOmhvdmVyIHtcbiAgICB6LWluZGV4OiAxO1xuICB9XG5gO1xuXG5jb25zdCBDb3ZpZENhc2UgPSAocHJvcHMpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8V3JhcHBlclxuICAgICAgYWx0PXtwcm9wcy50ZXh0fVxuICAgICAgey4uLnByb3BzLm9uQ2xpY2sgPyB7IG9uQ2xpY2s6IHByb3BzLm9uQ2xpY2sgfSA6IHt9fVxuICAgID57cHJvcHMudGV4dH1cbiAgICA8L1dyYXBwZXI+XG4gICk7XG59O1xuXG5jb25zdCBDZW50ZXIgPSAocHJvcHMpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8Q2VudGVyV3JhcHBlclxuICAgICAgYWx0PXtwcm9wcy50ZXh0fVxuICAgICAgey4uLnByb3BzLm9uQ2xpY2sgPyB7IG9uQ2xpY2s6IHByb3BzLm9uQ2xpY2sgfSA6IHt9fVxuICAgID57cHJvcHMudGV4dH1cbiAgICA8L0NlbnRlcldyYXBwZXI+XG4gICk7XG59O1xuXG5Db3ZpZENhc2UuZGVmYXVsdFByb3BzID0ge1xuICBvbkNsaWNrOiBudWxsLFxufTtcblxuQ292aWRDYXNlLnByb3BUeXBlcyA9IHtcbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gIHRleHQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbn07XG5cbmNsYXNzIEdtYXAgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgY2VudGVyOiB7IGxhdDogNDkuMjgyNywgbG5nOiAtMTIzLjEyMDcgfSxcbiAgICAgIHJhbmdlOiAxLFxuICAgICAgbWFya2VyczogW11cbiAgICB9O1xuICAgIC8vIHRoaXMuZmV0Y2hBbGxHZW9sb2NhdGlvbnMgPSB0aGlzLmZldGNoQWxsR2VvbG9jYXRpb25zLmJpbmQodGhpcyk7XG4gIH1cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICB6b29tOiAxMFxuICB9O1xuXG4gIHNlYXJjaERlc3RpbmF0aW9uKHgsIHksIHIpIHtcbiAgICAvLyBUT0RPOiBWYWxpZGF0aW9uXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGNlbnRlcjoge1xuICAgICAgICAgIGxhdDogcGFyc2VGbG9hdCh4KSxcbiAgICAgICAgICBsbmc6IHBhcnNlRmxvYXQoeSksXG4gICAgICAgIH0sXG4gICAgICAgIHJhbmdlOiBwYXJzZUZsb2F0KHIpXG4gICAgICB9KTtcbiAgICBcbiAgICBheGlvcy5nZXQoYGh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9jb3ZpZGNhc2VyYW5nZWxpc3QvJHt0aGlzLnN0YXRlLmNlbnRlci5sYXR9LyR7dGhpcy5zdGF0ZS5jZW50ZXIubG5nfS8ke3RoaXMuc3RhdGUucmFuZ2V9YClcbiAgICAudGhlbihyZXMgPT4ge1xuICAgICAgY29uc3QgbWFya2VycyA9IHJlcy5kYXRhLm1hcChvYmogPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGxhdDogb2JqW1wibGF0aXR1ZGVcIl0sXG4gICAgICAgICAgbG5nOiBvYmpbXCJsb25naXR1ZGVcIl0sXG4gICAgICAgICAgdHlwZTogb2JqW1wiY2FzZVR5cGVcIl0sXG4gICAgICAgICAgY291bnQ6IG9ialtcImNvdW50XCJdXG4gICAgICAgIH07XG4gICAgICB9KTtcblxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIG1hcmtlcnNcbiAgICAgIH0pXG4gICAgfSk7XG4gIH1cblxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6ICcxMDB2aCcsIHdpZHRoOiAnMTAwJScgfX0+XG4gICAgICAgIDxidXR0b24gb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYnVmX2xhdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaW5wdXRfbGF0XCIpLnZhbHVlXG4gICAgICAgICAgICBjb25zdCBidWZfbG5nID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJpbnB1dF9sbmdcIikudmFsdWVcbiAgICAgICAgICAgIGNvbnN0IHIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImlucHV0X3JhbmdlXCIpLnZhbHVlXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImlucHV0dGluZyBsYXQ6IFwiICsgYnVmX2xhdCArIFwiLCBsbmc6IFwiICsgYnVmX2xuZywgXCIsIHJhbmdlOiBcIiArIHIpXG4gICAgICAgICAgICB0aGlzLnNlYXJjaERlc3RpbmF0aW9uKGJ1Zl9sYXQsIGJ1Zl9sbmcsIHIpXG4gICAgICAgICAgfX1cbiAgICAgICAgPlNlYXJjaCBsb2NhdGlvbjwvYnV0dG9uPlxuICAgICAgICA8R29vZ2xlTWFwUmVhY3RcbiAgICAgICAgICBib290c3RyYXBVUkxLZXlzPXt7IGtleTogcHJvY2Vzcy5lbnYuUkVBQ1RfQVBQX0dNQVBfS0VZIH19XG4gICAgICAgICAgZGVmYXVsdENlbnRlcj17dGhpcy5zdGF0ZS5jZW50ZXJ9XG4gICAgICAgICAgY2VudGVyPXt0aGlzLnN0YXRlLmNlbnRlcn1cbiAgICAgICAgICBkZWZhdWx0Wm9vbT17dGhpcy5wcm9wcy56b29tfVxuICAgICAgICA+XG4gICAgICAgICAge3RoaXMuc3RhdGUubWFya2Vycy5tYXAoKG1hcmtlcikgPT4ge1xuICAgICAgICAgICAgbGV0IGxhdCA9IG1hcmtlci5sYXQ7XG4gICAgICAgICAgICBsZXQgbG5nID0gbWFya2VyLmxuZztcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHsgbGF0LCBsbmcgfSArIGAke3BhcnNlSW50KG1hcmtlci5jb3VudCkgKiA1fXB4YCk7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICA8Q292aWRDYXNlXG4gICAgICAgICAgICAgICAgbGF0PXtsYXR9XG4gICAgICAgICAgICAgICAgbG5nPXtsbmd9XG4gICAgICAgICAgICAgICAgdGV4dD17bWFya2VyLmNvdW50fVxuICAgICAgICAgICAgICAgIHN0eWxlPXt7IGhlaWdodDogYCR7cGFyc2VJbnQobWFya2VyLmNvdW50KSAqIDV9cHhgLCB3aWR0aDogYCR7cGFyc2VJbnQobWFya2VyLmNvdW50KSAqIDV9cHhgfX1cbiAgICAgICAgICAgICAgICBvbkNsaWNrID17KCkgPT4gY29uc29sZS5sb2coXCJDbGlja2VkXCIpfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KX1cbiAgICAgICAgICA8Q2VudGVyXG4gICAgICAgICAgICBsYXQ9e3RoaXMuc3RhdGUuY2VudGVyLmxhdH1cbiAgICAgICAgICAgIGxuZz17dGhpcy5zdGF0ZS5jZW50ZXIubG5nfVxuICAgICAgICAgICAgdGV4dD1cIkRlc3RpbmF0aW9uXCJcbiAgICAgICAgICAgIG9uQ2xpY2sgPXsoKSA9PiBjb25zb2xlLmxvZyhcIkRlc3RpbmF0aW9uIHdhcyBDbGlja2VkXCIpfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvR29vZ2xlTWFwUmVhY3Q+XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cbn1cblxuXG5leHBvcnQgZGVmYXVsdCBHbWFwOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IGNoYWluUHJvcFR5cGVzIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHZhciBlbGV2YXRpb25zID0ge307XG4gIHRoZW1lLnNoYWRvd3MuZm9yRWFjaChmdW5jdGlvbiAoc2hhZG93LCBpbmRleCkge1xuICAgIGVsZXZhdGlvbnNbXCJlbGV2YXRpb25cIi5jb25jYXQoaW5kZXgpXSA9IHtcbiAgICAgIGJveFNoYWRvdzogc2hhZG93XG4gICAgfTtcbiAgfSk7XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYmFja2dyb3VuZC5wYXBlcixcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnYm94LXNoYWRvdycpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHNxdWFyZT17ZmFsc2V9YC4gKi9cbiAgICByb3VuZGVkOiB7XG4gICAgICBib3JkZXJSYWRpdXM6IHRoZW1lLnNoYXBlLmJvcmRlclJhZGl1c1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwib3V0bGluZWRcImAuICovXG4gICAgb3V0bGluZWQ6IHtcbiAgICAgIGJvcmRlcjogXCIxcHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUuZGl2aWRlcilcbiAgICB9XG4gIH0sIGVsZXZhdGlvbnMpO1xufTtcbnZhciBQYXBlciA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFBhcGVyKHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIENvbXBvbmVudCA9IF9wcm9wcyRjb21wb25lbnQgPT09IHZvaWQgMCA/ICdkaXYnIDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRzcXVhcmUgPSBwcm9wcy5zcXVhcmUsXG4gICAgICBzcXVhcmUgPSBfcHJvcHMkc3F1YXJlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRzcXVhcmUsXG4gICAgICBfcHJvcHMkZWxldmF0aW9uID0gcHJvcHMuZWxldmF0aW9uLFxuICAgICAgZWxldmF0aW9uID0gX3Byb3BzJGVsZXZhdGlvbiA9PT0gdm9pZCAwID8gMSA6IF9wcm9wcyRlbGV2YXRpb24sXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICdlbGV2YXRpb24nIDogX3Byb3BzJHZhcmlhbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcInNxdWFyZVwiLCBcImVsZXZhdGlvblwiLCBcInZhcmlhbnRcIl0pO1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsIHZhcmlhbnQgPT09ICdvdXRsaW5lZCcgPyBjbGFzc2VzLm91dGxpbmVkIDogY2xhc3Nlc1tcImVsZXZhdGlvblwiLmNvbmNhdChlbGV2YXRpb24pXSwgIXNxdWFyZSAmJiBjbGFzc2VzLnJvdW5kZWQpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFBhcGVyLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogU2hhZG93IGRlcHRoLCBjb3JyZXNwb25kcyB0byBgZHBgIGluIHRoZSBzcGVjLlxuICAgKiBJdCBhY2NlcHRzIHZhbHVlcyBiZXR3ZWVuIDAgYW5kIDI0IGluY2x1c2l2ZS5cbiAgICovXG4gIGVsZXZhdGlvbjogY2hhaW5Qcm9wVHlwZXMoUHJvcFR5cGVzLm51bWJlciwgZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgICBlbGV2YXRpb24gPSBwcm9wcy5lbGV2YXRpb247IC8vIGluIGNhc2UgYHdpdGhTdHlsZXNgIGZhaWxzIHRvIGluamVjdCB3ZSBkb24ndCBuZWVkIHRoaXMgd2FybmluZ1xuXG4gICAgaWYgKGNsYXNzZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKGVsZXZhdGlvbiAhPSBudWxsICYmIGNsYXNzZXNbXCJlbGV2YXRpb25cIi5jb25jYXQoZWxldmF0aW9uKV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIk1hdGVyaWFsLVVJOiBUaGlzIGVsZXZhdGlvbiBgXCIuY29uY2F0KGVsZXZhdGlvbiwgXCJgIGlzIG5vdCBpbXBsZW1lbnRlZC5cIikpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9KSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCByb3VuZGVkIGNvcm5lcnMgYXJlIGRpc2FibGVkLlxuICAgKi9cbiAgc3F1YXJlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnZWxldmF0aW9uJywgJ291dGxpbmVkJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aVBhcGVyJ1xufSkoUGFwZXIpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBQYXBlciBmcm9tICcuLi9QYXBlcic7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgcm9vdDoge1xuICAgIG92ZXJmbG93OiAnaGlkZGVuJ1xuICB9XG59O1xudmFyIENhcmQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBDYXJkKHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJHJhaXNlZCA9IHByb3BzLnJhaXNlZCxcbiAgICAgIHJhaXNlZCA9IF9wcm9wcyRyYWlzZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJHJhaXNlZCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwicmFpc2VkXCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUGFwZXIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIGVsZXZhdGlvbjogcmFpc2VkID8gOCA6IDEsXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQ2FyZC5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY2FyZCB3aWxsIHVzZSByYWlzZWQgc3R5bGluZy5cbiAgICovXG4gIHJhaXNlZDogUHJvcFR5cGVzLmJvb2xcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpQ2FyZCdcbn0pKENhcmQpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmV4cG9ydCB2YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICByb290OiB7XG4gICAgcGFkZGluZzogMTYsXG4gICAgJyY6bGFzdC1jaGlsZCc6IHtcbiAgICAgIHBhZGRpbmdCb3R0b206IDI0XG4gICAgfVxuICB9XG59O1xudmFyIENhcmRDb250ZW50ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQ2FyZENvbnRlbnQocHJvcHMsIHJlZikge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2RpdicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIl0pO1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IENhcmRDb250ZW50LnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5lbGVtZW50VHlwZVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlDYXJkQ29udGVudCdcbn0pKENhcmRDb250ZW50KTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBtYXJnaW46IDBcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImJvZHkyXCJgLiAqL1xuICAgIGJvZHkyOiB0aGVtZS50eXBvZ3JhcGh5LmJvZHkyLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImJvZHkxXCJgLiAqL1xuICAgIGJvZHkxOiB0aGVtZS50eXBvZ3JhcGh5LmJvZHkxLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImNhcHRpb25cImAuICovXG4gICAgY2FwdGlvbjogdGhlbWUudHlwb2dyYXBoeS5jYXB0aW9uLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImJ1dHRvblwiYC4gKi9cbiAgICBidXR0b246IHRoZW1lLnR5cG9ncmFwaHkuYnV0dG9uLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImgxXCJgLiAqL1xuICAgIGgxOiB0aGVtZS50eXBvZ3JhcGh5LmgxLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImgyXCJgLiAqL1xuICAgIGgyOiB0aGVtZS50eXBvZ3JhcGh5LmgyLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImgzXCJgLiAqL1xuICAgIGgzOiB0aGVtZS50eXBvZ3JhcGh5LmgzLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImg0XCJgLiAqL1xuICAgIGg0OiB0aGVtZS50eXBvZ3JhcGh5Lmg0LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImg1XCJgLiAqL1xuICAgIGg1OiB0aGVtZS50eXBvZ3JhcGh5Lmg1LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImg2XCJgLiAqL1xuICAgIGg2OiB0aGVtZS50eXBvZ3JhcGh5Lmg2LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cInN1YnRpdGxlMVwiYC4gKi9cbiAgICBzdWJ0aXRsZTE6IHRoZW1lLnR5cG9ncmFwaHkuc3VidGl0bGUxLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cInN1YnRpdGxlMlwiYC4gKi9cbiAgICBzdWJ0aXRsZTI6IHRoZW1lLnR5cG9ncmFwaHkuc3VidGl0bGUyLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cIm92ZXJsaW5lXCJgLiAqL1xuICAgIG92ZXJsaW5lOiB0aGVtZS50eXBvZ3JhcGh5Lm92ZXJsaW5lLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cInNyT25seVwiYC4gT25seSBhY2Nlc3NpYmxlIHRvIHNjcmVlbiByZWFkZXJzLiAqL1xuICAgIHNyT25seToge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBoZWlnaHQ6IDEsXG4gICAgICB3aWR0aDogMSxcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbGlnbj1cImxlZnRcImAuICovXG4gICAgYWxpZ25MZWZ0OiB7XG4gICAgICB0ZXh0QWxpZ246ICdsZWZ0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbGlnbj1cImNlbnRlclwiYC4gKi9cbiAgICBhbGlnbkNlbnRlcjoge1xuICAgICAgdGV4dEFsaWduOiAnY2VudGVyJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbGlnbj1cInJpZ2h0XCJgLiAqL1xuICAgIGFsaWduUmlnaHQ6IHtcbiAgICAgIHRleHRBbGlnbjogJ3JpZ2h0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbGlnbj1cImp1c3RpZnlcImAuICovXG4gICAgYWxpZ25KdXN0aWZ5OiB7XG4gICAgICB0ZXh0QWxpZ246ICdqdXN0aWZ5J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBub3dyYXA9e3RydWV9YC4gKi9cbiAgICBub1dyYXA6IHtcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgIHRleHRPdmVyZmxvdzogJ2VsbGlwc2lzJyxcbiAgICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGd1dHRlckJvdHRvbT17dHJ1ZX1gLiAqL1xuICAgIGd1dHRlckJvdHRvbToge1xuICAgICAgbWFyZ2luQm90dG9tOiAnMC4zNWVtJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBwYXJhZ3JhcGg9e3RydWV9YC4gKi9cbiAgICBwYXJhZ3JhcGg6IHtcbiAgICAgIG1hcmdpbkJvdHRvbTogMTZcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJpbmhlcml0XCJgLiAqL1xuICAgIGNvbG9ySW5oZXJpdDoge1xuICAgICAgY29sb3I6ICdpbmhlcml0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInByaW1hcnlcImAuICovXG4gICAgY29sb3JQcmltYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJzZWNvbmRhcnlcImAuICovXG4gICAgY29sb3JTZWNvbmRhcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwidGV4dFByaW1hcnlcImAuICovXG4gICAgY29sb3JUZXh0UHJpbWFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5wcmltYXJ5XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwidGV4dFNlY29uZGFyeVwiYC4gKi9cbiAgICBjb2xvclRleHRTZWNvbmRhcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQuc2Vjb25kYXJ5XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwiZXJyb3JcImAuICovXG4gICAgY29sb3JFcnJvcjoge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuZXJyb3IubWFpblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNwbGF5PVwiaW5saW5lXCJgLiAqL1xuICAgIGRpc3BsYXlJbmxpbmU6IHtcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc3BsYXk9XCJibG9ja1wiYC4gKi9cbiAgICBkaXNwbGF5QmxvY2s6IHtcbiAgICAgIGRpc3BsYXk6ICdibG9jaydcbiAgICB9XG4gIH07XG59O1xudmFyIGRlZmF1bHRWYXJpYW50TWFwcGluZyA9IHtcbiAgaDE6ICdoMScsXG4gIGgyOiAnaDInLFxuICBoMzogJ2gzJyxcbiAgaDQ6ICdoNCcsXG4gIGg1OiAnaDUnLFxuICBoNjogJ2g2JyxcbiAgc3VidGl0bGUxOiAnaDYnLFxuICBzdWJ0aXRsZTI6ICdoNicsXG4gIGJvZHkxOiAncCcsXG4gIGJvZHkyOiAncCdcbn07XG52YXIgVHlwb2dyYXBoeSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFR5cG9ncmFwaHkocHJvcHMsIHJlZikge1xuICB2YXIgX3Byb3BzJGFsaWduID0gcHJvcHMuYWxpZ24sXG4gICAgICBhbGlnbiA9IF9wcm9wcyRhbGlnbiA9PT0gdm9pZCAwID8gJ2luaGVyaXQnIDogX3Byb3BzJGFsaWduLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgIGNvbG9yID0gX3Byb3BzJGNvbG9yID09PSB2b2lkIDAgPyAnaW5pdGlhbCcgOiBfcHJvcHMkY29sb3IsXG4gICAgICBjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBfcHJvcHMkZGlzcGxheSA9IHByb3BzLmRpc3BsYXksXG4gICAgICBkaXNwbGF5ID0gX3Byb3BzJGRpc3BsYXkgPT09IHZvaWQgMCA/ICdpbml0aWFsJyA6IF9wcm9wcyRkaXNwbGF5LFxuICAgICAgX3Byb3BzJGd1dHRlckJvdHRvbSA9IHByb3BzLmd1dHRlckJvdHRvbSxcbiAgICAgIGd1dHRlckJvdHRvbSA9IF9wcm9wcyRndXR0ZXJCb3R0b20gPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGd1dHRlckJvdHRvbSxcbiAgICAgIF9wcm9wcyRub1dyYXAgPSBwcm9wcy5ub1dyYXAsXG4gICAgICBub1dyYXAgPSBfcHJvcHMkbm9XcmFwID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRub1dyYXAsXG4gICAgICBfcHJvcHMkcGFyYWdyYXBoID0gcHJvcHMucGFyYWdyYXBoLFxuICAgICAgcGFyYWdyYXBoID0gX3Byb3BzJHBhcmFncmFwaCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkcGFyYWdyYXBoLFxuICAgICAgX3Byb3BzJHZhcmlhbnQgPSBwcm9wcy52YXJpYW50LFxuICAgICAgdmFyaWFudCA9IF9wcm9wcyR2YXJpYW50ID09PSB2b2lkIDAgPyAnYm9keTEnIDogX3Byb3BzJHZhcmlhbnQsXG4gICAgICBfcHJvcHMkdmFyaWFudE1hcHBpbmcgPSBwcm9wcy52YXJpYW50TWFwcGluZyxcbiAgICAgIHZhcmlhbnRNYXBwaW5nID0gX3Byb3BzJHZhcmlhbnRNYXBwaW5nID09PSB2b2lkIDAgPyBkZWZhdWx0VmFyaWFudE1hcHBpbmcgOiBfcHJvcHMkdmFyaWFudE1hcHBpbmcsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiYWxpZ25cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJjb21wb25lbnRcIiwgXCJkaXNwbGF5XCIsIFwiZ3V0dGVyQm90dG9tXCIsIFwibm9XcmFwXCIsIFwicGFyYWdyYXBoXCIsIFwidmFyaWFudFwiLCBcInZhcmlhbnRNYXBwaW5nXCJdKTtcblxuICB2YXIgQ29tcG9uZW50ID0gY29tcG9uZW50IHx8IChwYXJhZ3JhcGggPyAncCcgOiB2YXJpYW50TWFwcGluZ1t2YXJpYW50XSB8fCBkZWZhdWx0VmFyaWFudE1hcHBpbmdbdmFyaWFudF0pIHx8ICdzcGFuJztcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwgdmFyaWFudCAhPT0gJ2luaGVyaXQnICYmIGNsYXNzZXNbdmFyaWFudF0sIGNvbG9yICE9PSAnaW5pdGlhbCcgJiYgY2xhc3Nlc1tcImNvbG9yXCIuY29uY2F0KGNhcGl0YWxpemUoY29sb3IpKV0sIG5vV3JhcCAmJiBjbGFzc2VzLm5vV3JhcCwgZ3V0dGVyQm90dG9tICYmIGNsYXNzZXMuZ3V0dGVyQm90dG9tLCBwYXJhZ3JhcGggJiYgY2xhc3Nlcy5wYXJhZ3JhcGgsIGFsaWduICE9PSAnaW5oZXJpdCcgJiYgY2xhc3Nlc1tcImFsaWduXCIuY29uY2F0KGNhcGl0YWxpemUoYWxpZ24pKV0sIGRpc3BsYXkgIT09ICdpbml0aWFsJyAmJiBjbGFzc2VzW1wiZGlzcGxheVwiLmNvbmNhdChjYXBpdGFsaXplKGRpc3BsYXkpKV0pLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFR5cG9ncmFwaHkucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogU2V0IHRoZSB0ZXh0LWFsaWduIG9uIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBhbGlnbjogUHJvcFR5cGVzLm9uZU9mKFsnaW5oZXJpdCcsICdsZWZ0JywgJ2NlbnRlcicsICdyaWdodCcsICdqdXN0aWZ5J10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsnaW5pdGlhbCcsICdpbmhlcml0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ3RleHRQcmltYXJ5JywgJ3RleHRTZWNvbmRhcnknLCAnZXJyb3InXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICogT3ZlcnJpZGVzIHRoZSBiZWhhdmlvciBvZiB0aGUgYHZhcmlhbnRNYXBwaW5nYCBwcm9wLlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIENvbnRyb2xzIHRoZSBkaXNwbGF5IHR5cGVcbiAgICovXG4gIGRpc3BsYXk6IFByb3BUeXBlcy5vbmVPZihbJ2luaXRpYWwnLCAnYmxvY2snLCAnaW5saW5lJ10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0ZXh0IHdpbGwgaGF2ZSBhIGJvdHRvbSBtYXJnaW4uXG4gICAqL1xuICBndXR0ZXJCb3R0b206IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0ZXh0IHdpbGwgbm90IHdyYXAsIGJ1dCBpbnN0ZWFkIHdpbGwgdHJ1bmNhdGUgd2l0aCBhIHRleHQgb3ZlcmZsb3cgZWxsaXBzaXMuXG4gICAqXG4gICAqIE5vdGUgdGhhdCB0ZXh0IG92ZXJmbG93IGNhbiBvbmx5IGhhcHBlbiB3aXRoIGJsb2NrIG9yIGlubGluZS1ibG9jayBsZXZlbCBlbGVtZW50c1xuICAgKiAodGhlIGVsZW1lbnQgbmVlZHMgdG8gaGF2ZSBhIHdpZHRoIGluIG9yZGVyIHRvIG92ZXJmbG93KS5cbiAgICovXG4gIG5vV3JhcDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRleHQgd2lsbCBoYXZlIGEgYm90dG9tIG1hcmdpbi5cbiAgICovXG4gIHBhcmFncmFwaDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEFwcGxpZXMgdGhlIHRoZW1lIHR5cG9ncmFwaHkgc3R5bGVzLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnaDEnLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnLCAnaDYnLCAnc3VidGl0bGUxJywgJ3N1YnRpdGxlMicsICdib2R5MScsICdib2R5MicsICdjYXB0aW9uJywgJ2J1dHRvbicsICdvdmVybGluZScsICdzck9ubHknLCAnaW5oZXJpdCddKSxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCBtYXBzIHRoZSB2YXJpYW50IHByb3AgdG8gYSByYW5nZSBvZiBkaWZmZXJlbnQgSFRNTCBlbGVtZW50IHR5cGVzLlxuICAgKiBGb3IgaW5zdGFuY2UsIHN1YnRpdGxlMSB0byBgPGg2PmAuXG4gICAqIElmIHlvdSB3aXNoIHRvIGNoYW5nZSB0aGF0IG1hcHBpbmcsIHlvdSBjYW4gcHJvdmlkZSB5b3VyIG93bi5cbiAgICogQWx0ZXJuYXRpdmVseSwgeW91IGNhbiB1c2UgdGhlIGBjb21wb25lbnRgIHByb3AuXG4gICAqL1xuICB2YXJpYW50TWFwcGluZzogUHJvcFR5cGVzLm9iamVjdFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlUeXBvZ3JhcGh5J1xufSkoVHlwb2dyYXBoeSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAnLi4vVHlwb2dyYXBoeSc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgcm9vdDoge1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBwYWRkaW5nOiAxNlxuICB9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBhdmF0YXIgZWxlbWVudC4gKi9cbiAgYXZhdGFyOiB7XG4gICAgZmxleDogJzAgMCBhdXRvJyxcbiAgICBtYXJnaW5SaWdodDogMTZcbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYWN0aW9uIGVsZW1lbnQuICovXG4gIGFjdGlvbjoge1xuICAgIGZsZXg6ICcwIDAgYXV0bycsXG4gICAgYWxpZ25TZWxmOiAnZmxleC1zdGFydCcsXG4gICAgbWFyZ2luVG9wOiAtOCxcbiAgICBtYXJnaW5SaWdodDogLThcbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgY29udGVudCB3cmFwcGVyIGVsZW1lbnQuICovXG4gIGNvbnRlbnQ6IHtcbiAgICBmbGV4OiAnMSAxIGF1dG8nXG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHRpdGxlIFR5cG9ncmFwaHkgZWxlbWVudC4gKi9cbiAgdGl0bGU6IHt9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBzdWJoZWFkZXIgVHlwb2dyYXBoeSBlbGVtZW50LiAqL1xuICBzdWJoZWFkZXI6IHt9XG59O1xudmFyIENhcmRIZWFkZXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBDYXJkSGVhZGVyKHByb3BzLCByZWYpIHtcbiAgdmFyIGFjdGlvbiA9IHByb3BzLmFjdGlvbixcbiAgICAgIGF2YXRhciA9IHByb3BzLmF2YXRhcixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIENvbXBvbmVudCA9IF9wcm9wcyRjb21wb25lbnQgPT09IHZvaWQgMCA/ICdkaXYnIDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRkaXNhYmxlVHlwb2dyYSA9IHByb3BzLmRpc2FibGVUeXBvZ3JhcGh5LFxuICAgICAgZGlzYWJsZVR5cG9ncmFwaHkgPSBfcHJvcHMkZGlzYWJsZVR5cG9ncmEgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVUeXBvZ3JhLFxuICAgICAgc3ViaGVhZGVyUHJvcCA9IHByb3BzLnN1YmhlYWRlcixcbiAgICAgIHN1YmhlYWRlclR5cG9ncmFwaHlQcm9wcyA9IHByb3BzLnN1YmhlYWRlclR5cG9ncmFwaHlQcm9wcyxcbiAgICAgIHRpdGxlUHJvcCA9IHByb3BzLnRpdGxlLFxuICAgICAgdGl0bGVUeXBvZ3JhcGh5UHJvcHMgPSBwcm9wcy50aXRsZVR5cG9ncmFwaHlQcm9wcyxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhY3Rpb25cIiwgXCJhdmF0YXJcIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiZGlzYWJsZVR5cG9ncmFwaHlcIiwgXCJzdWJoZWFkZXJcIiwgXCJzdWJoZWFkZXJUeXBvZ3JhcGh5UHJvcHNcIiwgXCJ0aXRsZVwiLCBcInRpdGxlVHlwb2dyYXBoeVByb3BzXCJdKTtcblxuICB2YXIgdGl0bGUgPSB0aXRsZVByb3A7XG5cbiAgaWYgKHRpdGxlICE9IG51bGwgJiYgdGl0bGUudHlwZSAhPT0gVHlwb2dyYXBoeSAmJiAhZGlzYWJsZVR5cG9ncmFwaHkpIHtcbiAgICB0aXRsZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFR5cG9ncmFwaHksIF9leHRlbmRzKHtcbiAgICAgIHZhcmlhbnQ6IGF2YXRhciA/ICdib2R5MicgOiAnaDUnLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLnRpdGxlLFxuICAgICAgY29tcG9uZW50OiBcInNwYW5cIixcbiAgICAgIGRpc3BsYXk6IFwiYmxvY2tcIlxuICAgIH0sIHRpdGxlVHlwb2dyYXBoeVByb3BzKSwgdGl0bGUpO1xuICB9XG5cbiAgdmFyIHN1YmhlYWRlciA9IHN1YmhlYWRlclByb3A7XG5cbiAgaWYgKHN1YmhlYWRlciAhPSBudWxsICYmIHN1YmhlYWRlci50eXBlICE9PSBUeXBvZ3JhcGh5ICYmICFkaXNhYmxlVHlwb2dyYXBoeSkge1xuICAgIHN1YmhlYWRlciA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFR5cG9ncmFwaHksIF9leHRlbmRzKHtcbiAgICAgIHZhcmlhbnQ6IGF2YXRhciA/ICdib2R5MicgOiAnYm9keTEnLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLnN1YmhlYWRlcixcbiAgICAgIGNvbG9yOiBcInRleHRTZWNvbmRhcnlcIixcbiAgICAgIGNvbXBvbmVudDogXCJzcGFuXCIsXG4gICAgICBkaXNwbGF5OiBcImJsb2NrXCJcbiAgICB9LCBzdWJoZWFkZXJUeXBvZ3JhcGh5UHJvcHMpLCBzdWJoZWFkZXIpO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpLCBhdmF0YXIgJiYgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5hdmF0YXJcbiAgfSwgYXZhdGFyKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5jb250ZW50XG4gIH0sIHRpdGxlLCBzdWJoZWFkZXIpLCBhY3Rpb24gJiYgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5hY3Rpb25cbiAgfSwgYWN0aW9uKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IENhcmRIZWFkZXIucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhlIGFjdGlvbiB0byBkaXNwbGF5IGluIHRoZSBjYXJkIGhlYWRlci5cbiAgICovXG4gIGFjdGlvbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIFRoZSBBdmF0YXIgZm9yIHRoZSBDYXJkIEhlYWRlci5cbiAgICovXG4gIGF2YXRhcjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGBzdWJoZWFkZXJgIGFuZCBgdGl0bGVgIHdvbid0IGJlIHdyYXBwZWQgYnkgYSBUeXBvZ3JhcGh5IGNvbXBvbmVudC5cbiAgICogVGhpcyBjYW4gYmUgdXNlZnVsIHRvIHJlbmRlciBhbiBhbHRlcm5hdGl2ZSBUeXBvZ3JhcGh5IHZhcmlhbnQgYnkgd3JhcHBpbmdcbiAgICogdGhlIGB0aXRsZWAgdGV4dCwgYW5kIG9wdGlvbmFsIGBzdWJoZWFkZXJgIHRleHRcbiAgICogd2l0aCB0aGUgVHlwb2dyYXBoeSBjb21wb25lbnQuXG4gICAqL1xuICBkaXNhYmxlVHlwb2dyYXBoeTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBzdWJoZWFkZXI6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBUaGVzZSBwcm9wcyB3aWxsIGJlIGZvcndhcmRlZCB0byB0aGUgc3ViaGVhZGVyXG4gICAqIChhcyBsb25nIGFzIGRpc2FibGVUeXBvZ3JhcGh5IGlzIG5vdCBgdHJ1ZWApLlxuICAgKi9cbiAgc3ViaGVhZGVyVHlwb2dyYXBoeVByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgQ2FyZCBUaXRsZS5cbiAgICovXG4gIHRpdGxlOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVGhlc2UgcHJvcHMgd2lsbCBiZSBmb3J3YXJkZWQgdG8gdGhlIHRpdGxlXG4gICAqIChhcyBsb25nIGFzIGRpc2FibGVUeXBvZ3JhcGh5IGlzIG5vdCBgdHJ1ZWApLlxuICAgKi9cbiAgdGl0bGVUeXBvZ3JhcGh5UHJvcHM6IFByb3BUeXBlcy5vYmplY3Rcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpQ2FyZEhlYWRlcidcbn0pKENhcmRIZWFkZXIpOyIsIi8vIFRPRE8gdjU6IGNvbnNpZGVyIHRvIG1ha2UgaXQgcHJpdmF0ZVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0UmVmKHJlZiwgdmFsdWUpIHtcbiAgaWYgKHR5cGVvZiByZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZWYodmFsdWUpO1xuICB9IGVsc2UgaWYgKHJlZikge1xuICAgIHJlZi5jdXJyZW50ID0gdmFsdWU7XG4gIH1cbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc2V0UmVmIGZyb20gJy4vc2V0UmVmJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUZvcmtSZWYocmVmQSwgcmVmQikge1xuICAvKipcbiAgICogVGhpcyB3aWxsIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBpZiB0aGUgcmVmIHByb3BzIGNoYW5nZSBhbmQgYXJlIGRlZmluZWQuXG4gICAqIFRoaXMgbWVhbnMgcmVhY3Qgd2lsbCBjYWxsIHRoZSBvbGQgZm9ya1JlZiB3aXRoIGBudWxsYCBhbmQgdGhlIG5ldyBmb3JrUmVmXG4gICAqIHdpdGggdGhlIHJlZi4gQ2xlYW51cCBuYXR1cmFsbHkgZW1lcmdlcyBmcm9tIHRoaXMgYmVoYXZpb3JcbiAgICovXG4gIHJldHVybiBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAocmVmQSA9PSBudWxsICYmIHJlZkIgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChyZWZWYWx1ZSkge1xuICAgICAgc2V0UmVmKHJlZkEsIHJlZlZhbHVlKTtcbiAgICAgIHNldFJlZihyZWZCLCByZWZWYWx1ZSk7XG4gICAgfTtcbiAgfSwgW3JlZkEsIHJlZkJdKTtcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG52YXIgdXNlRW5oYW5jZWRFZmZlY3QgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IFJlYWN0LnVzZUxheW91dEVmZmVjdCA6IFJlYWN0LnVzZUVmZmVjdDtcbi8qKlxuICogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xNDA5OSNpc3N1ZWNvbW1lbnQtNDQwMDEzODkyXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gZm5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VFdmVudENhbGxiYWNrKGZuKSB7XG4gIHZhciByZWYgPSBSZWFjdC51c2VSZWYoZm4pO1xuICB1c2VFbmhhbmNlZEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmVmLmN1cnJlbnQgPSBmbjtcbiAgfSk7XG4gIHJldHVybiBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICgwLCByZWYuY3VycmVudCkuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICB9LCBbXSk7XG59IiwiLy8gYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL1dJQ0cvZm9jdXMtdmlzaWJsZS9ibG9iL3Y0LjEuNS9zcmMvZm9jdXMtdmlzaWJsZS5qc1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbnZhciBoYWRLZXlib2FyZEV2ZW50ID0gdHJ1ZTtcbnZhciBoYWRGb2N1c1Zpc2libGVSZWNlbnRseSA9IGZhbHNlO1xudmFyIGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5VGltZW91dCA9IG51bGw7XG52YXIgaW5wdXRUeXBlc1doaXRlbGlzdCA9IHtcbiAgdGV4dDogdHJ1ZSxcbiAgc2VhcmNoOiB0cnVlLFxuICB1cmw6IHRydWUsXG4gIHRlbDogdHJ1ZSxcbiAgZW1haWw6IHRydWUsXG4gIHBhc3N3b3JkOiB0cnVlLFxuICBudW1iZXI6IHRydWUsXG4gIGRhdGU6IHRydWUsXG4gIG1vbnRoOiB0cnVlLFxuICB3ZWVrOiB0cnVlLFxuICB0aW1lOiB0cnVlLFxuICBkYXRldGltZTogdHJ1ZSxcbiAgJ2RhdGV0aW1lLWxvY2FsJzogdHJ1ZVxufTtcbi8qKlxuICogQ29tcHV0ZXMgd2hldGhlciB0aGUgZ2l2ZW4gZWxlbWVudCBzaG91bGQgYXV0b21hdGljYWxseSB0cmlnZ2VyIHRoZVxuICogYGZvY3VzLXZpc2libGVgIGNsYXNzIGJlaW5nIGFkZGVkLCBpLmUuIHdoZXRoZXIgaXQgc2hvdWxkIGFsd2F5cyBtYXRjaFxuICogYDpmb2N1cy12aXNpYmxlYCB3aGVuIGZvY3VzZWQuXG4gKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGVcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cblxuZnVuY3Rpb24gZm9jdXNUcmlnZ2Vyc0tleWJvYXJkTW9kYWxpdHkobm9kZSkge1xuICB2YXIgdHlwZSA9IG5vZGUudHlwZSxcbiAgICAgIHRhZ05hbWUgPSBub2RlLnRhZ05hbWU7XG5cbiAgaWYgKHRhZ05hbWUgPT09ICdJTlBVVCcgJiYgaW5wdXRUeXBlc1doaXRlbGlzdFt0eXBlXSAmJiAhbm9kZS5yZWFkT25seSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHRhZ05hbWUgPT09ICdURVhUQVJFQScgJiYgIW5vZGUucmVhZE9ubHkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChub2RlLmlzQ29udGVudEVkaXRhYmxlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG4vKipcbiAqIEtlZXAgdHJhY2sgb2Ygb3VyIGtleWJvYXJkIG1vZGFsaXR5IHN0YXRlIHdpdGggYGhhZEtleWJvYXJkRXZlbnRgLlxuICogSWYgdGhlIG1vc3QgcmVjZW50IHVzZXIgaW50ZXJhY3Rpb24gd2FzIHZpYSB0aGUga2V5Ym9hcmQ7XG4gKiBhbmQgdGhlIGtleSBwcmVzcyBkaWQgbm90IGluY2x1ZGUgYSBtZXRhLCBhbHQvb3B0aW9uLCBvciBjb250cm9sIGtleTtcbiAqIHRoZW4gdGhlIG1vZGFsaXR5IGlzIGtleWJvYXJkLiBPdGhlcndpc2UsIHRoZSBtb2RhbGl0eSBpcyBub3Qga2V5Ym9hcmQuXG4gKiBAcGFyYW0ge0tleWJvYXJkRXZlbnR9IGV2ZW50XG4gKi9cblxuXG5mdW5jdGlvbiBoYW5kbGVLZXlEb3duKGV2ZW50KSB7XG4gIGlmIChldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaGFkS2V5Ym9hcmRFdmVudCA9IHRydWU7XG59XG4vKipcbiAqIElmIGF0IGFueSBwb2ludCBhIHVzZXIgY2xpY2tzIHdpdGggYSBwb2ludGluZyBkZXZpY2UsIGVuc3VyZSB0aGF0IHdlIGNoYW5nZVxuICogdGhlIG1vZGFsaXR5IGF3YXkgZnJvbSBrZXlib2FyZC5cbiAqIFRoaXMgYXZvaWRzIHRoZSBzaXR1YXRpb24gd2hlcmUgYSB1c2VyIHByZXNzZXMgYSBrZXkgb24gYW4gYWxyZWFkeSBmb2N1c2VkXG4gKiBlbGVtZW50LCBhbmQgdGhlbiBjbGlja3Mgb24gYSBkaWZmZXJlbnQgZWxlbWVudCwgZm9jdXNpbmcgaXQgd2l0aCBhXG4gKiBwb2ludGluZyBkZXZpY2UsIHdoaWxlIHdlIHN0aWxsIHRoaW5rIHdlJ3JlIGluIGtleWJvYXJkIG1vZGFsaXR5LlxuICovXG5cblxuZnVuY3Rpb24gaGFuZGxlUG9pbnRlckRvd24oKSB7XG4gIGhhZEtleWJvYXJkRXZlbnQgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSgpIHtcbiAgaWYgKHRoaXMudmlzaWJpbGl0eVN0YXRlID09PSAnaGlkZGVuJykge1xuICAgIC8vIElmIHRoZSB0YWIgYmVjb21lcyBhY3RpdmUgYWdhaW4sIHRoZSBicm93c2VyIHdpbGwgaGFuZGxlIGNhbGxpbmcgZm9jdXNcbiAgICAvLyBvbiB0aGUgZWxlbWVudCAoU2FmYXJpIGFjdHVhbGx5IGNhbGxzIGl0IHR3aWNlKS5cbiAgICAvLyBJZiB0aGlzIHRhYiBjaGFuZ2UgY2F1c2VkIGEgYmx1ciBvbiBhbiBlbGVtZW50IHdpdGggZm9jdXMtdmlzaWJsZSxcbiAgICAvLyByZS1hcHBseSB0aGUgY2xhc3Mgd2hlbiB0aGUgdXNlciBzd2l0Y2hlcyBiYWNrIHRvIHRoZSB0YWIuXG4gICAgaWYgKGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5KSB7XG4gICAgICBoYWRLZXlib2FyZEV2ZW50ID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJlcGFyZShkb2MpIHtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGVLZXlEb3duLCB0cnVlKTtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlLCB0cnVlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRlYXJkb3duKGRvYykge1xuICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGhhbmRsZUtleURvd24sIHRydWUpO1xuICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UsIHRydWUpO1xufVxuXG5mdW5jdGlvbiBpc0ZvY3VzVmlzaWJsZShldmVudCkge1xuICB2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuXG4gIHRyeSB7XG4gICAgcmV0dXJuIHRhcmdldC5tYXRjaGVzKCc6Zm9jdXMtdmlzaWJsZScpO1xuICB9IGNhdGNoIChlcnJvcikge30gLy8gYnJvd3NlcnMgbm90IGltcGxlbWVudGluZyA6Zm9jdXMtdmlzaWJsZSB3aWxsIHRocm93IGEgU3ludGF4RXJyb3JcbiAgLy8gd2UgdXNlIG91ciBvd24gaGV1cmlzdGljIGZvciB0aG9zZSBicm93c2Vyc1xuICAvLyByZXRocm93IG1pZ2h0IGJlIGJldHRlciBpZiBpdCdzIG5vdCB0aGUgZXhwZWN0ZWQgZXJyb3IgYnV0IGRvIHdlIHJlYWxseVxuICAvLyB3YW50IHRvIGNyYXNoIGlmIGZvY3VzLXZpc2libGUgbWFsZnVuY3Rpb25lZD9cbiAgLy8gbm8gbmVlZCBmb3IgdmFsaWRGb2N1c1RhcmdldCBjaGVjay4gdGhlIHVzZXIgZG9lcyB0aGF0IGJ5IGF0dGFjaGluZyBpdCB0b1xuICAvLyBmb2N1c2FibGUgZXZlbnRzIG9ubHlcblxuXG4gIHJldHVybiBoYWRLZXlib2FyZEV2ZW50IHx8IGZvY3VzVHJpZ2dlcnNLZXlib2FyZE1vZGFsaXR5KHRhcmdldCk7XG59XG4vKipcbiAqIFNob3VsZCBiZSBjYWxsZWQgaWYgYSBibHVyIGV2ZW50IGlzIGZpcmVkIG9uIGEgZm9jdXMtdmlzaWJsZSBlbGVtZW50XG4gKi9cblxuXG5mdW5jdGlvbiBoYW5kbGVCbHVyVmlzaWJsZSgpIHtcbiAgLy8gVG8gZGV0ZWN0IGEgdGFiL3dpbmRvdyBzd2l0Y2gsIHdlIGxvb2sgZm9yIGEgYmx1ciBldmVudCBmb2xsb3dlZFxuICAvLyByYXBpZGx5IGJ5IGEgdmlzaWJpbGl0eSBjaGFuZ2UuXG4gIC8vIElmIHdlIGRvbid0IHNlZSBhIHZpc2liaWxpdHkgY2hhbmdlIHdpdGhpbiAxMDBtcywgaXQncyBwcm9iYWJseSBhXG4gIC8vIHJlZ3VsYXIgZm9jdXMgY2hhbmdlLlxuICBoYWRGb2N1c1Zpc2libGVSZWNlbnRseSA9IHRydWU7XG4gIHdpbmRvdy5jbGVhclRpbWVvdXQoaGFkRm9jdXNWaXNpYmxlUmVjZW50bHlUaW1lb3V0KTtcbiAgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHlUaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5ID0gZmFsc2U7XG4gIH0sIDEwMCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUlzRm9jdXNWaXNpYmxlKCkge1xuICB2YXIgcmVmID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgdmFyIG5vZGUgPSBSZWFjdERPTS5maW5kRE9NTm9kZShpbnN0YW5jZSk7XG5cbiAgICBpZiAobm9kZSAhPSBudWxsKSB7XG4gICAgICBwcmVwYXJlKG5vZGUub3duZXJEb2N1bWVudCk7XG4gICAgfVxuICB9LCBbXSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VEZWJ1Z1ZhbHVlKGlzRm9jdXNWaXNpYmxlKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgaXNGb2N1c1Zpc2libGU6IGlzRm9jdXNWaXNpYmxlLFxuICAgIG9uQmx1clZpc2libGU6IGhhbmRsZUJsdXJWaXNpYmxlLFxuICAgIHJlZjogcmVmXG4gIH07XG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCBkZWZhdWx0IFJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7IiwiaW1wb3J0IHsgQ2hpbGRyZW4sIGNsb25lRWxlbWVudCwgaXNWYWxpZEVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG4vKipcbiAqIEdpdmVuIGB0aGlzLnByb3BzLmNoaWxkcmVuYCwgcmV0dXJuIGFuIG9iamVjdCBtYXBwaW5nIGtleSB0byBjaGlsZC5cbiAqXG4gKiBAcGFyYW0geyp9IGNoaWxkcmVuIGB0aGlzLnByb3BzLmNoaWxkcmVuYFxuICogQHJldHVybiB7b2JqZWN0fSBNYXBwaW5nIG9mIGtleSB0byBjaGlsZFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDaGlsZE1hcHBpbmcoY2hpbGRyZW4sIG1hcEZuKSB7XG4gIHZhciBtYXBwZXIgPSBmdW5jdGlvbiBtYXBwZXIoY2hpbGQpIHtcbiAgICByZXR1cm4gbWFwRm4gJiYgaXNWYWxpZEVsZW1lbnQoY2hpbGQpID8gbWFwRm4oY2hpbGQpIDogY2hpbGQ7XG4gIH07XG5cbiAgdmFyIHJlc3VsdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGlmIChjaGlsZHJlbikgQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiBjO1xuICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIC8vIHJ1biB0aGUgbWFwIGZ1bmN0aW9uIGhlcmUgaW5zdGVhZCBzbyB0aGF0IHRoZSBrZXkgaXMgdGhlIGNvbXB1dGVkIG9uZVxuICAgIHJlc3VsdFtjaGlsZC5rZXldID0gbWFwcGVyKGNoaWxkKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIFdoZW4geW91J3JlIGFkZGluZyBvciByZW1vdmluZyBjaGlsZHJlbiBzb21lIG1heSBiZSBhZGRlZCBvciByZW1vdmVkIGluIHRoZVxuICogc2FtZSByZW5kZXIgcGFzcy4gV2Ugd2FudCB0byBzaG93ICpib3RoKiBzaW5jZSB3ZSB3YW50IHRvIHNpbXVsdGFuZW91c2x5XG4gKiBhbmltYXRlIGVsZW1lbnRzIGluIGFuZCBvdXQuIFRoaXMgZnVuY3Rpb24gdGFrZXMgYSBwcmV2aW91cyBzZXQgb2Yga2V5c1xuICogYW5kIGEgbmV3IHNldCBvZiBrZXlzIGFuZCBtZXJnZXMgdGhlbSB3aXRoIGl0cyBiZXN0IGd1ZXNzIG9mIHRoZSBjb3JyZWN0XG4gKiBvcmRlcmluZy4gSW4gdGhlIGZ1dHVyZSB3ZSBtYXkgZXhwb3NlIHNvbWUgb2YgdGhlIHV0aWxpdGllcyBpblxuICogUmVhY3RNdWx0aUNoaWxkIHRvIG1ha2UgdGhpcyBlYXN5LCBidXQgZm9yIG5vdyBSZWFjdCBpdHNlbGYgZG9lcyBub3RcbiAqIGRpcmVjdGx5IGhhdmUgdGhpcyBjb25jZXB0IG9mIHRoZSB1bmlvbiBvZiBwcmV2Q2hpbGRyZW4gYW5kIG5leHRDaGlsZHJlblxuICogc28gd2UgaW1wbGVtZW50IGl0IGhlcmUuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHByZXYgcHJldiBjaGlsZHJlbiBhcyByZXR1cm5lZCBmcm9tXG4gKiBgUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZygpYC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuZXh0IG5leHQgY2hpbGRyZW4gYXMgcmV0dXJuZWQgZnJvbVxuICogYFJlYWN0VHJhbnNpdGlvbkNoaWxkTWFwcGluZy5nZXRDaGlsZE1hcHBpbmcoKWAuXG4gKiBAcmV0dXJuIHtvYmplY3R9IGEga2V5IHNldCB0aGF0IGNvbnRhaW5zIGFsbCBrZXlzIGluIGBwcmV2YCBhbmQgYWxsIGtleXNcbiAqIGluIGBuZXh0YCBpbiBhIHJlYXNvbmFibGUgb3JkZXIuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlQ2hpbGRNYXBwaW5ncyhwcmV2LCBuZXh0KSB7XG4gIHByZXYgPSBwcmV2IHx8IHt9O1xuICBuZXh0ID0gbmV4dCB8fCB7fTtcblxuICBmdW5jdGlvbiBnZXRWYWx1ZUZvcktleShrZXkpIHtcbiAgICByZXR1cm4ga2V5IGluIG5leHQgPyBuZXh0W2tleV0gOiBwcmV2W2tleV07XG4gIH0gLy8gRm9yIGVhY2gga2V5IG9mIGBuZXh0YCwgdGhlIGxpc3Qgb2Yga2V5cyB0byBpbnNlcnQgYmVmb3JlIHRoYXQga2V5IGluXG4gIC8vIHRoZSBjb21iaW5lZCBsaXN0XG5cblxuICB2YXIgbmV4dEtleXNQZW5kaW5nID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIHBlbmRpbmdLZXlzID0gW107XG5cbiAgZm9yICh2YXIgcHJldktleSBpbiBwcmV2KSB7XG4gICAgaWYgKHByZXZLZXkgaW4gbmV4dCkge1xuICAgICAgaWYgKHBlbmRpbmdLZXlzLmxlbmd0aCkge1xuICAgICAgICBuZXh0S2V5c1BlbmRpbmdbcHJldktleV0gPSBwZW5kaW5nS2V5cztcbiAgICAgICAgcGVuZGluZ0tleXMgPSBbXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVuZGluZ0tleXMucHVzaChwcmV2S2V5KTtcbiAgICB9XG4gIH1cblxuICB2YXIgaTtcbiAgdmFyIGNoaWxkTWFwcGluZyA9IHt9O1xuXG4gIGZvciAodmFyIG5leHRLZXkgaW4gbmV4dCkge1xuICAgIGlmIChuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV0pIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHBlbmRpbmdOZXh0S2V5ID0gbmV4dEtleXNQZW5kaW5nW25leHRLZXldW2ldO1xuICAgICAgICBjaGlsZE1hcHBpbmdbbmV4dEtleXNQZW5kaW5nW25leHRLZXldW2ldXSA9IGdldFZhbHVlRm9yS2V5KHBlbmRpbmdOZXh0S2V5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjaGlsZE1hcHBpbmdbbmV4dEtleV0gPSBnZXRWYWx1ZUZvcktleShuZXh0S2V5KTtcbiAgfSAvLyBGaW5hbGx5LCBhZGQgdGhlIGtleXMgd2hpY2ggZGlkbid0IGFwcGVhciBiZWZvcmUgYW55IGtleSBpbiBgbmV4dGBcblxuXG4gIGZvciAoaSA9IDA7IGkgPCBwZW5kaW5nS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGNoaWxkTWFwcGluZ1twZW5kaW5nS2V5c1tpXV0gPSBnZXRWYWx1ZUZvcktleShwZW5kaW5nS2V5c1tpXSk7XG4gIH1cblxuICByZXR1cm4gY2hpbGRNYXBwaW5nO1xufVxuXG5mdW5jdGlvbiBnZXRQcm9wKGNoaWxkLCBwcm9wLCBwcm9wcykge1xuICByZXR1cm4gcHJvcHNbcHJvcF0gIT0gbnVsbCA/IHByb3BzW3Byb3BdIDogY2hpbGQucHJvcHNbcHJvcF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRJbml0aWFsQ2hpbGRNYXBwaW5nKHByb3BzLCBvbkV4aXRlZCkge1xuICByZXR1cm4gZ2V0Q2hpbGRNYXBwaW5nKHByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICByZXR1cm4gY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICBvbkV4aXRlZDogb25FeGl0ZWQuYmluZChudWxsLCBjaGlsZCksXG4gICAgICBpbjogdHJ1ZSxcbiAgICAgIGFwcGVhcjogZ2V0UHJvcChjaGlsZCwgJ2FwcGVhcicsIHByb3BzKSxcbiAgICAgIGVudGVyOiBnZXRQcm9wKGNoaWxkLCAnZW50ZXInLCBwcm9wcyksXG4gICAgICBleGl0OiBnZXRQcm9wKGNoaWxkLCAnZXhpdCcsIHByb3BzKVxuICAgIH0pO1xuICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXROZXh0Q2hpbGRNYXBwaW5nKG5leHRQcm9wcywgcHJldkNoaWxkTWFwcGluZywgb25FeGl0ZWQpIHtcbiAgdmFyIG5leHRDaGlsZE1hcHBpbmcgPSBnZXRDaGlsZE1hcHBpbmcobmV4dFByb3BzLmNoaWxkcmVuKTtcbiAgdmFyIGNoaWxkcmVuID0gbWVyZ2VDaGlsZE1hcHBpbmdzKHByZXZDaGlsZE1hcHBpbmcsIG5leHRDaGlsZE1hcHBpbmcpO1xuICBPYmplY3Qua2V5cyhjaGlsZHJlbikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGNoaWxkID0gY2hpbGRyZW5ba2V5XTtcbiAgICBpZiAoIWlzVmFsaWRFbGVtZW50KGNoaWxkKSkgcmV0dXJuO1xuICAgIHZhciBoYXNQcmV2ID0gKGtleSBpbiBwcmV2Q2hpbGRNYXBwaW5nKTtcbiAgICB2YXIgaGFzTmV4dCA9IChrZXkgaW4gbmV4dENoaWxkTWFwcGluZyk7XG4gICAgdmFyIHByZXZDaGlsZCA9IHByZXZDaGlsZE1hcHBpbmdba2V5XTtcbiAgICB2YXIgaXNMZWF2aW5nID0gaXNWYWxpZEVsZW1lbnQocHJldkNoaWxkKSAmJiAhcHJldkNoaWxkLnByb3BzLmluOyAvLyBpdGVtIGlzIG5ldyAoZW50ZXJpbmcpXG5cbiAgICBpZiAoaGFzTmV4dCAmJiAoIWhhc1ByZXYgfHwgaXNMZWF2aW5nKSkge1xuICAgICAgLy8gY29uc29sZS5sb2coJ2VudGVyaW5nJywga2V5KVxuICAgICAgY2hpbGRyZW5ba2V5XSA9IGNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICBvbkV4aXRlZDogb25FeGl0ZWQuYmluZChudWxsLCBjaGlsZCksXG4gICAgICAgIGluOiB0cnVlLFxuICAgICAgICBleGl0OiBnZXRQcm9wKGNoaWxkLCAnZXhpdCcsIG5leHRQcm9wcyksXG4gICAgICAgIGVudGVyOiBnZXRQcm9wKGNoaWxkLCAnZW50ZXInLCBuZXh0UHJvcHMpXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKCFoYXNOZXh0ICYmIGhhc1ByZXYgJiYgIWlzTGVhdmluZykge1xuICAgICAgLy8gaXRlbSBpcyBvbGQgKGV4aXRpbmcpXG4gICAgICAvLyBjb25zb2xlLmxvZygnbGVhdmluZycsIGtleSlcbiAgICAgIGNoaWxkcmVuW2tleV0gPSBjbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgaW46IGZhbHNlXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGhhc05leHQgJiYgaGFzUHJldiAmJiBpc1ZhbGlkRWxlbWVudChwcmV2Q2hpbGQpKSB7XG4gICAgICAvLyBpdGVtIGhhc24ndCBjaGFuZ2VkIHRyYW5zaXRpb24gc3RhdGVzXG4gICAgICAvLyBjb3B5IG92ZXIgdGhlIGxhc3QgdHJhbnNpdGlvbiBwcm9wcztcbiAgICAgIC8vIGNvbnNvbGUubG9nKCd1bmNoYW5nZWQnLCBrZXkpXG4gICAgICBjaGlsZHJlbltrZXldID0gY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgIG9uRXhpdGVkOiBvbkV4aXRlZC5iaW5kKG51bGwsIGNoaWxkKSxcbiAgICAgICAgaW46IHByZXZDaGlsZC5wcm9wcy5pbixcbiAgICAgICAgZXhpdDogZ2V0UHJvcChjaGlsZCwgJ2V4aXQnLCBuZXh0UHJvcHMpLFxuICAgICAgICBlbnRlcjogZ2V0UHJvcChjaGlsZCwgJ2VudGVyJywgbmV4dFByb3BzKVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGNoaWxkcmVuO1xufSIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFRyYW5zaXRpb25Hcm91cENvbnRleHQgZnJvbSAnLi9UcmFuc2l0aW9uR3JvdXBDb250ZXh0JztcbmltcG9ydCB7IGdldENoaWxkTWFwcGluZywgZ2V0SW5pdGlhbENoaWxkTWFwcGluZywgZ2V0TmV4dENoaWxkTWFwcGluZyB9IGZyb20gJy4vdXRpbHMvQ2hpbGRNYXBwaW5nJztcblxudmFyIHZhbHVlcyA9IE9iamVjdC52YWx1ZXMgfHwgZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5tYXAoZnVuY3Rpb24gKGspIHtcbiAgICByZXR1cm4gb2JqW2tdO1xuICB9KTtcbn07XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGNvbXBvbmVudDogJ2RpdicsXG4gIGNoaWxkRmFjdG9yeTogZnVuY3Rpb24gY2hpbGRGYWN0b3J5KGNoaWxkKSB7XG4gICAgcmV0dXJuIGNoaWxkO1xuICB9XG59O1xuLyoqXG4gKiBUaGUgYDxUcmFuc2l0aW9uR3JvdXA+YCBjb21wb25lbnQgbWFuYWdlcyBhIHNldCBvZiB0cmFuc2l0aW9uIGNvbXBvbmVudHNcbiAqIChgPFRyYW5zaXRpb24+YCBhbmQgYDxDU1NUcmFuc2l0aW9uPmApIGluIGEgbGlzdC4gTGlrZSB3aXRoIHRoZSB0cmFuc2l0aW9uXG4gKiBjb21wb25lbnRzLCBgPFRyYW5zaXRpb25Hcm91cD5gIGlzIGEgc3RhdGUgbWFjaGluZSBmb3IgbWFuYWdpbmcgdGhlIG1vdW50aW5nXG4gKiBhbmQgdW5tb3VudGluZyBvZiBjb21wb25lbnRzIG92ZXIgdGltZS5cbiAqXG4gKiBDb25zaWRlciB0aGUgZXhhbXBsZSBiZWxvdy4gQXMgaXRlbXMgYXJlIHJlbW92ZWQgb3IgYWRkZWQgdG8gdGhlIFRvZG9MaXN0IHRoZVxuICogYGluYCBwcm9wIGlzIHRvZ2dsZWQgYXV0b21hdGljYWxseSBieSB0aGUgYDxUcmFuc2l0aW9uR3JvdXA+YC5cbiAqXG4gKiBOb3RlIHRoYXQgYDxUcmFuc2l0aW9uR3JvdXA+YCAgZG9lcyBub3QgZGVmaW5lIGFueSBhbmltYXRpb24gYmVoYXZpb3IhXG4gKiBFeGFjdGx5IF9ob3dfIGEgbGlzdCBpdGVtIGFuaW1hdGVzIGlzIHVwIHRvIHRoZSBpbmRpdmlkdWFsIHRyYW5zaXRpb25cbiAqIGNvbXBvbmVudC4gVGhpcyBtZWFucyB5b3UgY2FuIG1peCBhbmQgbWF0Y2ggYW5pbWF0aW9ucyBhY3Jvc3MgZGlmZmVyZW50IGxpc3RcbiAqIGl0ZW1zLlxuICovXG5cbnZhciBUcmFuc2l0aW9uR3JvdXAgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoVHJhbnNpdGlvbkdyb3VwLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUcmFuc2l0aW9uR3JvdXAocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcblxuICAgIHZhciBoYW5kbGVFeGl0ZWQgPSBfdGhpcy5oYW5kbGVFeGl0ZWQuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7IC8vIEluaXRpYWwgY2hpbGRyZW4gc2hvdWxkIGFsbCBiZSBlbnRlcmluZywgZGVwZW5kZW50IG9uIGFwcGVhclxuXG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGNvbnRleHRWYWx1ZToge1xuICAgICAgICBpc01vdW50aW5nOiB0cnVlXG4gICAgICB9LFxuICAgICAgaGFuZGxlRXhpdGVkOiBoYW5kbGVFeGl0ZWQsXG4gICAgICBmaXJzdFJlbmRlcjogdHJ1ZVxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFRyYW5zaXRpb25Hcm91cC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5tb3VudGVkID0gdHJ1ZTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGNvbnRleHRWYWx1ZToge1xuICAgICAgICBpc01vdW50aW5nOiBmYWxzZVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMubW91bnRlZCA9IGZhbHNlO1xuICB9O1xuXG4gIFRyYW5zaXRpb25Hcm91cC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzLCBfcmVmKSB7XG4gICAgdmFyIHByZXZDaGlsZE1hcHBpbmcgPSBfcmVmLmNoaWxkcmVuLFxuICAgICAgICBoYW5kbGVFeGl0ZWQgPSBfcmVmLmhhbmRsZUV4aXRlZCxcbiAgICAgICAgZmlyc3RSZW5kZXIgPSBfcmVmLmZpcnN0UmVuZGVyO1xuICAgIHJldHVybiB7XG4gICAgICBjaGlsZHJlbjogZmlyc3RSZW5kZXIgPyBnZXRJbml0aWFsQ2hpbGRNYXBwaW5nKG5leHRQcm9wcywgaGFuZGxlRXhpdGVkKSA6IGdldE5leHRDaGlsZE1hcHBpbmcobmV4dFByb3BzLCBwcmV2Q2hpbGRNYXBwaW5nLCBoYW5kbGVFeGl0ZWQpLFxuICAgICAgZmlyc3RSZW5kZXI6IGZhbHNlXG4gICAgfTtcbiAgfSAvLyBub2RlIGlzIGB1bmRlZmluZWRgIHdoZW4gdXNlciBwcm92aWRlZCBgbm9kZVJlZmAgcHJvcFxuICA7XG5cbiAgX3Byb3RvLmhhbmRsZUV4aXRlZCA9IGZ1bmN0aW9uIGhhbmRsZUV4aXRlZChjaGlsZCwgbm9kZSkge1xuICAgIHZhciBjdXJyZW50Q2hpbGRNYXBwaW5nID0gZ2V0Q2hpbGRNYXBwaW5nKHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICAgIGlmIChjaGlsZC5rZXkgaW4gY3VycmVudENoaWxkTWFwcGluZykgcmV0dXJuO1xuXG4gICAgaWYgKGNoaWxkLnByb3BzLm9uRXhpdGVkKSB7XG4gICAgICBjaGlsZC5wcm9wcy5vbkV4aXRlZChub2RlKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5tb3VudGVkKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICB2YXIgY2hpbGRyZW4gPSBfZXh0ZW5kcyh7fSwgc3RhdGUuY2hpbGRyZW4pO1xuXG4gICAgICAgIGRlbGV0ZSBjaGlsZHJlbltjaGlsZC5rZXldO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuY29tcG9uZW50LFxuICAgICAgICBjaGlsZEZhY3RvcnkgPSBfdGhpcyRwcm9wcy5jaGlsZEZhY3RvcnksXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImNvbXBvbmVudFwiLCBcImNoaWxkRmFjdG9yeVwiXSk7XG5cbiAgICB2YXIgY29udGV4dFZhbHVlID0gdGhpcy5zdGF0ZS5jb250ZXh0VmFsdWU7XG4gICAgdmFyIGNoaWxkcmVuID0gdmFsdWVzKHRoaXMuc3RhdGUuY2hpbGRyZW4pLm1hcChjaGlsZEZhY3RvcnkpO1xuICAgIGRlbGV0ZSBwcm9wcy5hcHBlYXI7XG4gICAgZGVsZXRlIHByb3BzLmVudGVyO1xuICAgIGRlbGV0ZSBwcm9wcy5leGl0O1xuXG4gICAgaWYgKENvbXBvbmVudCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zaXRpb25Hcm91cENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IGNvbnRleHRWYWx1ZVxuICAgICAgfSwgY2hpbGRyZW4pO1xuICAgIH1cblxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uR3JvdXBDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogY29udGV4dFZhbHVlXG4gICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBwcm9wcywgY2hpbGRyZW4pKTtcbiAgfTtcblxuICByZXR1cm4gVHJhbnNpdGlvbkdyb3VwO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5UcmFuc2l0aW9uR3JvdXAucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogYDxUcmFuc2l0aW9uR3JvdXA+YCByZW5kZXJzIGEgYDxkaXY+YCBieSBkZWZhdWx0LiBZb3UgY2FuIGNoYW5nZSB0aGlzXG4gICAqIGJlaGF2aW9yIGJ5IHByb3ZpZGluZyBhIGBjb21wb25lbnRgIHByb3AuXG4gICAqIElmIHlvdSB1c2UgUmVhY3QgdjE2KyBhbmQgd291bGQgbGlrZSB0byBhdm9pZCBhIHdyYXBwaW5nIGA8ZGl2PmAgZWxlbWVudFxuICAgKiB5b3UgY2FuIHBhc3MgaW4gYGNvbXBvbmVudD17bnVsbH1gLiBUaGlzIGlzIHVzZWZ1bCBpZiB0aGUgd3JhcHBpbmcgZGl2XG4gICAqIGJvcmtzIHlvdXIgY3NzIHN0eWxlcy5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogQSBzZXQgb2YgYDxUcmFuc2l0aW9uPmAgY29tcG9uZW50cywgdGhhdCBhcmUgdG9nZ2xlZCBgaW5gIGFuZCBvdXQgYXMgdGhleVxuICAgKiBsZWF2ZS4gdGhlIGA8VHJhbnNpdGlvbkdyb3VwPmAgd2lsbCBpbmplY3Qgc3BlY2lmaWMgdHJhbnNpdGlvbiBwcm9wcywgc29cbiAgICogcmVtZW1iZXIgdG8gc3ByZWFkIHRoZW0gdGhyb3VnaCBpZiB5b3UgYXJlIHdyYXBwaW5nIHRoZSBgPFRyYW5zaXRpb24+YCBhc1xuICAgKiB3aXRoIG91ciBgPEZhZGU+YCBleGFtcGxlLlxuICAgKlxuICAgKiBXaGlsZSB0aGlzIGNvbXBvbmVudCBpcyBtZWFudCBmb3IgbXVsdGlwbGUgYFRyYW5zaXRpb25gIG9yIGBDU1NUcmFuc2l0aW9uYFxuICAgKiBjaGlsZHJlbiwgc29tZXRpbWVzIHlvdSBtYXkgd2FudCB0byBoYXZlIGEgc2luZ2xlIHRyYW5zaXRpb24gY2hpbGQgd2l0aFxuICAgKiBjb250ZW50IHRoYXQgeW91IHdhbnQgdG8gYmUgdHJhbnNpdGlvbmVkIG91dCBhbmQgaW4gd2hlbiB5b3UgY2hhbmdlIGl0XG4gICAqIChlLmcuIHJvdXRlcywgaW1hZ2VzIGV0Yy4pIEluIHRoYXQgY2FzZSB5b3UgY2FuIGNoYW5nZSB0aGUgYGtleWAgcHJvcCBvZlxuICAgKiB0aGUgdHJhbnNpdGlvbiBjaGlsZCBhcyB5b3UgY2hhbmdlIGl0cyBjb250ZW50LCB0aGlzIHdpbGwgY2F1c2VcbiAgICogYFRyYW5zaXRpb25Hcm91cGAgdG8gdHJhbnNpdGlvbiB0aGUgY2hpbGQgb3V0IGFuZCBiYWNrIGluLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBBIGNvbnZlbmllbmNlIHByb3AgdGhhdCBlbmFibGVzIG9yIGRpc2FibGVzIGFwcGVhciBhbmltYXRpb25zXG4gICAqIGZvciBhbGwgY2hpbGRyZW4uIE5vdGUgdGhhdCBzcGVjaWZ5aW5nIHRoaXMgd2lsbCBvdmVycmlkZSBhbnkgZGVmYXVsdHMgc2V0XG4gICAqIG9uIGluZGl2aWR1YWwgY2hpbGRyZW4gVHJhbnNpdGlvbnMuXG4gICAqL1xuICBhcHBlYXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBBIGNvbnZlbmllbmNlIHByb3AgdGhhdCBlbmFibGVzIG9yIGRpc2FibGVzIGVudGVyIGFuaW1hdGlvbnNcbiAgICogZm9yIGFsbCBjaGlsZHJlbi4gTm90ZSB0aGF0IHNwZWNpZnlpbmcgdGhpcyB3aWxsIG92ZXJyaWRlIGFueSBkZWZhdWx0cyBzZXRcbiAgICogb24gaW5kaXZpZHVhbCBjaGlsZHJlbiBUcmFuc2l0aW9ucy5cbiAgICovXG4gIGVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQSBjb252ZW5pZW5jZSBwcm9wIHRoYXQgZW5hYmxlcyBvciBkaXNhYmxlcyBleGl0IGFuaW1hdGlvbnNcbiAgICogZm9yIGFsbCBjaGlsZHJlbi4gTm90ZSB0aGF0IHNwZWNpZnlpbmcgdGhpcyB3aWxsIG92ZXJyaWRlIGFueSBkZWZhdWx0cyBzZXRcbiAgICogb24gaW5kaXZpZHVhbCBjaGlsZHJlbiBUcmFuc2l0aW9ucy5cbiAgICovXG4gIGV4aXQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBZb3UgbWF5IG5lZWQgdG8gYXBwbHkgcmVhY3RpdmUgdXBkYXRlcyB0byBhIGNoaWxkIGFzIGl0IGlzIGV4aXRpbmcuXG4gICAqIFRoaXMgaXMgZ2VuZXJhbGx5IGRvbmUgYnkgdXNpbmcgYGNsb25lRWxlbWVudGAgaG93ZXZlciBpbiB0aGUgY2FzZSBvZiBhbiBleGl0aW5nXG4gICAqIGNoaWxkIHRoZSBlbGVtZW50IGhhcyBhbHJlYWR5IGJlZW4gcmVtb3ZlZCBhbmQgbm90IGFjY2Vzc2libGUgdG8gdGhlIGNvbnN1bWVyLlxuICAgKlxuICAgKiBJZiB5b3UgZG8gbmVlZCB0byB1cGRhdGUgYSBjaGlsZCBhcyBpdCBsZWF2ZXMgeW91IGNhbiBwcm92aWRlIGEgYGNoaWxkRmFjdG9yeWBcbiAgICogdG8gd3JhcCBldmVyeSBjaGlsZCwgZXZlbiB0aGUgb25lcyB0aGF0IGFyZSBsZWF2aW5nLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihjaGlsZDogUmVhY3RFbGVtZW50KSAtPiBSZWFjdEVsZW1lbnRcbiAgICovXG4gIGNoaWxkRmFjdG9yeTogUHJvcFR5cGVzLmZ1bmNcbn0gOiB7fTtcblRyYW5zaXRpb25Hcm91cC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5leHBvcnQgZGVmYXVsdCBUcmFuc2l0aW9uR3JvdXA7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHVzZUV2ZW50Q2FsbGJhY2sgZnJvbSAnLi4vdXRpbHMvdXNlRXZlbnRDYWxsYmFjayc7XG52YXIgdXNlRW5oYW5jZWRFZmZlY3QgPSB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/IFJlYWN0LnVzZUVmZmVjdCA6IFJlYWN0LnVzZUxheW91dEVmZmVjdDtcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG5mdW5jdGlvbiBSaXBwbGUocHJvcHMpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgX3Byb3BzJHB1bHNhdGUgPSBwcm9wcy5wdWxzYXRlLFxuICAgICAgcHVsc2F0ZSA9IF9wcm9wcyRwdWxzYXRlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRwdWxzYXRlLFxuICAgICAgcmlwcGxlWCA9IHByb3BzLnJpcHBsZVgsXG4gICAgICByaXBwbGVZID0gcHJvcHMucmlwcGxlWSxcbiAgICAgIHJpcHBsZVNpemUgPSBwcm9wcy5yaXBwbGVTaXplLFxuICAgICAgaW5Qcm9wID0gcHJvcHMuaW4sXG4gICAgICBfcHJvcHMkb25FeGl0ZWQgPSBwcm9wcy5vbkV4aXRlZCxcbiAgICAgIG9uRXhpdGVkID0gX3Byb3BzJG9uRXhpdGVkID09PSB2b2lkIDAgPyBmdW5jdGlvbiAoKSB7fSA6IF9wcm9wcyRvbkV4aXRlZCxcbiAgICAgIHRpbWVvdXQgPSBwcm9wcy50aW1lb3V0O1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZShmYWxzZSksXG4gICAgICBsZWF2aW5nID0gX1JlYWN0JHVzZVN0YXRlWzBdLFxuICAgICAgc2V0TGVhdmluZyA9IF9SZWFjdCR1c2VTdGF0ZVsxXTtcblxuICB2YXIgcmlwcGxlQ2xhc3NOYW1lID0gY2xzeChjbGFzc2VzLnJpcHBsZSwgY2xhc3Nlcy5yaXBwbGVWaXNpYmxlLCBwdWxzYXRlICYmIGNsYXNzZXMucmlwcGxlUHVsc2F0ZSk7XG4gIHZhciByaXBwbGVTdHlsZXMgPSB7XG4gICAgd2lkdGg6IHJpcHBsZVNpemUsXG4gICAgaGVpZ2h0OiByaXBwbGVTaXplLFxuICAgIHRvcDogLShyaXBwbGVTaXplIC8gMikgKyByaXBwbGVZLFxuICAgIGxlZnQ6IC0ocmlwcGxlU2l6ZSAvIDIpICsgcmlwcGxlWFxuICB9O1xuICB2YXIgY2hpbGRDbGFzc05hbWUgPSBjbHN4KGNsYXNzZXMuY2hpbGQsIGxlYXZpbmcgJiYgY2xhc3Nlcy5jaGlsZExlYXZpbmcsIHB1bHNhdGUgJiYgY2xhc3Nlcy5jaGlsZFB1bHNhdGUpO1xuICB2YXIgaGFuZGxlRXhpdGVkID0gdXNlRXZlbnRDYWxsYmFjayhvbkV4aXRlZCk7IC8vIFJpcHBsZSBpcyB1c2VkIGZvciB1c2VyIGZlZWRiYWNrIChlLmcuIGNsaWNrIG9yIHByZXNzKSBzbyB3ZSB3YW50IHRvIGFwcGx5IHN0eWxlcyB3aXRoIHRoZSBoaWdoZXN0IHByaW9yaXR5XG5cbiAgdXNlRW5oYW5jZWRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICghaW5Qcm9wKSB7XG4gICAgICAvLyByZWFjdC10cmFuc2l0aW9uLWdyb3VwI29uRXhpdFxuICAgICAgc2V0TGVhdmluZyh0cnVlKTsgLy8gcmVhY3QtdHJhbnNpdGlvbi1ncm91cCNvbkV4aXRlZFxuXG4gICAgICB2YXIgdGltZW91dElkID0gc2V0VGltZW91dChoYW5kbGVFeGl0ZWQsIHRpbWVvdXQpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0sIFtoYW5kbGVFeGl0ZWQsIGluUHJvcCwgdGltZW91dF0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IHJpcHBsZUNsYXNzTmFtZSxcbiAgICBzdHlsZTogcmlwcGxlU3R5bGVzXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiBjaGlsZENsYXNzTmFtZVxuICB9KSk7XG59XG5cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFJpcHBsZS5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZSAtIGluamVjdGVkIGZyb20gVHJhbnNpdGlvbkdyb3VwXG4gICAqL1xuICBpbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmUgLSBpbmplY3RlZCBmcm9tIFRyYW5zaXRpb25Hcm91cFxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgcHVsc2F0ZXMsIHR5cGljYWxseSBpbmRpY2F0aW5nIHRoZSBrZXlib2FyZCBmb2N1cyBzdGF0ZSBvZiBhbiBlbGVtZW50LlxuICAgKi9cbiAgcHVsc2F0ZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIERpYW1ldGVyIG9mIHRoZSByaXBwbGUuXG4gICAqL1xuICByaXBwbGVTaXplOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBIb3Jpem9udGFsIHBvc2l0aW9uIG9mIHRoZSByaXBwbGUgY2VudGVyLlxuICAgKi9cbiAgcmlwcGxlWDogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogVmVydGljYWwgcG9zaXRpb24gb2YgdGhlIHJpcHBsZSBjZW50ZXIuXG4gICAqL1xuICByaXBwbGVZOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBleGl0IGRlbGF5XG4gICAqL1xuICB0aW1lb3V0OiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWRcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBSaXBwbGU7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheVwiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBUcmFuc2l0aW9uR3JvdXAgfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IFJpcHBsZSBmcm9tICcuL1JpcHBsZSc7XG52YXIgRFVSQVRJT04gPSA1NTA7XG5leHBvcnQgdmFyIERFTEFZX1JJUFBMRSA9IDgwO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgekluZGV4OiAwLFxuICAgICAgdG9wOiAwLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICBib3R0b206IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgYm9yZGVyUmFkaXVzOiAnaW5oZXJpdCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGludGVybmFsIGBSaXBwbGVgIGNvbXBvbmVudHMgYHJpcHBsZWAgY2xhc3MuICovXG4gICAgcmlwcGxlOiB7XG4gICAgICBvcGFjaXR5OiAwLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGludGVybmFsIGBSaXBwbGVgIGNvbXBvbmVudHMgYHJpcHBsZVZpc2libGVgIGNsYXNzLiAqL1xuICAgIHJpcHBsZVZpc2libGU6IHtcbiAgICAgIG9wYWNpdHk6IDAuMyxcbiAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpJyxcbiAgICAgIGFuaW1hdGlvbjogXCIkZW50ZXIgXCIuY29uY2F0KERVUkFUSU9OLCBcIm1zIFwiKS5jb25jYXQodGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VJbk91dClcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGludGVybmFsIGBSaXBwbGVgIGNvbXBvbmVudHMgYHJpcHBsZVB1bHNhdGVgIGNsYXNzLiAqL1xuICAgIHJpcHBsZVB1bHNhdGU6IHtcbiAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiBcIlwiLmNvbmNhdCh0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyLCBcIm1zXCIpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbnRlcm5hbCBgUmlwcGxlYCBjb21wb25lbnRzIGBjaGlsZGAgY2xhc3MuICovXG4gICAgY2hpbGQ6IHtcbiAgICAgIG9wYWNpdHk6IDEsXG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJ2N1cnJlbnRDb2xvcidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGludGVybmFsIGBSaXBwbGVgIGNvbXBvbmVudHMgYGNoaWxkTGVhdmluZ2AgY2xhc3MuICovXG4gICAgY2hpbGRMZWF2aW5nOiB7XG4gICAgICBvcGFjaXR5OiAwLFxuICAgICAgYW5pbWF0aW9uOiBcIiRleGl0IFwiLmNvbmNhdChEVVJBVElPTiwgXCJtcyBcIikuY29uY2F0KHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlSW5PdXQpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbnRlcm5hbCBgUmlwcGxlYCBjb21wb25lbnRzIGBjaGlsZFB1bHNhdGVgIGNsYXNzLiAqL1xuICAgIGNoaWxkUHVsc2F0ZToge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgdG9wOiAwLFxuICAgICAgYW5pbWF0aW9uOiBcIiRwdWxzYXRlIDI1MDBtcyBcIi5jb25jYXQodGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VJbk91dCwgXCIgMjAwbXMgaW5maW5pdGVcIilcbiAgICB9LFxuICAgICdAa2V5ZnJhbWVzIGVudGVyJzoge1xuICAgICAgJzAlJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgwKScsXG4gICAgICAgIG9wYWNpdHk6IDAuMVxuICAgICAgfSxcbiAgICAgICcxMDAlJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgxKScsXG4gICAgICAgIG9wYWNpdHk6IDAuM1xuICAgICAgfVxuICAgIH0sXG4gICAgJ0BrZXlmcmFtZXMgZXhpdCc6IHtcbiAgICAgICcwJSc6IHtcbiAgICAgICAgb3BhY2l0eTogMVxuICAgICAgfSxcbiAgICAgICcxMDAlJzoge1xuICAgICAgICBvcGFjaXR5OiAwXG4gICAgICB9XG4gICAgfSxcbiAgICAnQGtleWZyYW1lcyBwdWxzYXRlJzoge1xuICAgICAgJzAlJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgxKSdcbiAgICAgIH0sXG4gICAgICAnNTAlJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgwLjkyKSdcbiAgICAgIH0sXG4gICAgICAnMTAwJSc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSknXG4gICAgICB9XG4gICAgfVxuICB9O1xufTtcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqXG4gKiBUT0RPIHY1OiBNYWtlIHByaXZhdGVcbiAqL1xuXG52YXIgVG91Y2hSaXBwbGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUb3VjaFJpcHBsZShwcm9wcywgcmVmKSB7XG4gIHZhciBfcHJvcHMkY2VudGVyID0gcHJvcHMuY2VudGVyLFxuICAgICAgY2VudGVyUHJvcCA9IF9wcm9wcyRjZW50ZXIgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGNlbnRlcixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNlbnRlclwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIl0pO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZShbXSksXG4gICAgICByaXBwbGVzID0gX1JlYWN0JHVzZVN0YXRlWzBdLFxuICAgICAgc2V0UmlwcGxlcyA9IF9SZWFjdCR1c2VTdGF0ZVsxXTtcblxuICB2YXIgbmV4dEtleSA9IFJlYWN0LnVzZVJlZigwKTtcbiAgdmFyIHJpcHBsZUNhbGxiYWNrID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChyaXBwbGVDYWxsYmFjay5jdXJyZW50KSB7XG4gICAgICByaXBwbGVDYWxsYmFjay5jdXJyZW50KCk7XG4gICAgICByaXBwbGVDYWxsYmFjay5jdXJyZW50ID0gbnVsbDtcbiAgICB9XG4gIH0sIFtyaXBwbGVzXSk7IC8vIFVzZWQgdG8gZmlsdGVyIG91dCBtb3VzZSBlbXVsYXRlZCBldmVudHMgb24gbW9iaWxlLlxuXG4gIHZhciBpZ25vcmluZ01vdXNlRG93biA9IFJlYWN0LnVzZVJlZihmYWxzZSk7IC8vIFdlIHVzZSBhIHRpbWVyIGluIG9yZGVyIHRvIG9ubHkgc2hvdyB0aGUgcmlwcGxlcyBmb3IgdG91Y2ggXCJjbGlja1wiIGxpa2UgZXZlbnRzLlxuICAvLyBXZSBkb24ndCB3YW50IHRvIGRpc3BsYXkgdGhlIHJpcHBsZSBmb3IgdG91Y2ggc2Nyb2xsIGV2ZW50cy5cblxuICB2YXIgc3RhcnRUaW1lciA9IFJlYWN0LnVzZVJlZihudWxsKTsgLy8gVGhpcyBpcyB0aGUgaG9vayBjYWxsZWQgb25jZSB0aGUgcHJldmlvdXMgdGltZW91dCBpcyByZWFkeS5cblxuICB2YXIgc3RhcnRUaW1lckNvbW1pdCA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgdmFyIGNvbnRhaW5lciA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHN0YXJ0VGltZXIuY3VycmVudCk7XG4gICAgfTtcbiAgfSwgW10pO1xuICB2YXIgc3RhcnRDb21taXQgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgdmFyIHB1bHNhdGUgPSBwYXJhbXMucHVsc2F0ZSxcbiAgICAgICAgcmlwcGxlWCA9IHBhcmFtcy5yaXBwbGVYLFxuICAgICAgICByaXBwbGVZID0gcGFyYW1zLnJpcHBsZVksXG4gICAgICAgIHJpcHBsZVNpemUgPSBwYXJhbXMucmlwcGxlU2l6ZSxcbiAgICAgICAgY2IgPSBwYXJhbXMuY2I7XG4gICAgc2V0UmlwcGxlcyhmdW5jdGlvbiAob2xkUmlwcGxlcykge1xuICAgICAgcmV0dXJuIFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkob2xkUmlwcGxlcyksIFsvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSaXBwbGUsIHtcbiAgICAgICAga2V5OiBuZXh0S2V5LmN1cnJlbnQsXG4gICAgICAgIGNsYXNzZXM6IGNsYXNzZXMsXG4gICAgICAgIHRpbWVvdXQ6IERVUkFUSU9OLFxuICAgICAgICBwdWxzYXRlOiBwdWxzYXRlLFxuICAgICAgICByaXBwbGVYOiByaXBwbGVYLFxuICAgICAgICByaXBwbGVZOiByaXBwbGVZLFxuICAgICAgICByaXBwbGVTaXplOiByaXBwbGVTaXplXG4gICAgICB9KV0pO1xuICAgIH0pO1xuICAgIG5leHRLZXkuY3VycmVudCArPSAxO1xuICAgIHJpcHBsZUNhbGxiYWNrLmN1cnJlbnQgPSBjYjtcbiAgfSwgW2NsYXNzZXNdKTtcbiAgdmFyIHN0YXJ0ID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHZhciBldmVudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHZhciBjYiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICAgIHZhciBfb3B0aW9ucyRwdWxzYXRlID0gb3B0aW9ucy5wdWxzYXRlLFxuICAgICAgICBwdWxzYXRlID0gX29wdGlvbnMkcHVsc2F0ZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRwdWxzYXRlLFxuICAgICAgICBfb3B0aW9ucyRjZW50ZXIgPSBvcHRpb25zLmNlbnRlcixcbiAgICAgICAgY2VudGVyID0gX29wdGlvbnMkY2VudGVyID09PSB2b2lkIDAgPyBjZW50ZXJQcm9wIHx8IG9wdGlvbnMucHVsc2F0ZSA6IF9vcHRpb25zJGNlbnRlcixcbiAgICAgICAgX29wdGlvbnMkZmFrZUVsZW1lbnQgPSBvcHRpb25zLmZha2VFbGVtZW50LFxuICAgICAgICBmYWtlRWxlbWVudCA9IF9vcHRpb25zJGZha2VFbGVtZW50ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJGZha2VFbGVtZW50O1xuXG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdtb3VzZWRvd24nICYmIGlnbm9yaW5nTW91c2VEb3duLmN1cnJlbnQpIHtcbiAgICAgIGlnbm9yaW5nTW91c2VEb3duLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ3RvdWNoc3RhcnQnKSB7XG4gICAgICBpZ25vcmluZ01vdXNlRG93bi5jdXJyZW50ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgZWxlbWVudCA9IGZha2VFbGVtZW50ID8gbnVsbCA6IGNvbnRhaW5lci5jdXJyZW50O1xuICAgIHZhciByZWN0ID0gZWxlbWVudCA/IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgOiB7XG4gICAgICB3aWR0aDogMCxcbiAgICAgIGhlaWdodDogMCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICB0b3A6IDBcbiAgICB9OyAvLyBHZXQgdGhlIHNpemUgb2YgdGhlIHJpcHBsZVxuXG4gICAgdmFyIHJpcHBsZVg7XG4gICAgdmFyIHJpcHBsZVk7XG4gICAgdmFyIHJpcHBsZVNpemU7XG5cbiAgICBpZiAoY2VudGVyIHx8IGV2ZW50LmNsaWVudFggPT09IDAgJiYgZXZlbnQuY2xpZW50WSA9PT0gMCB8fCAhZXZlbnQuY2xpZW50WCAmJiAhZXZlbnQudG91Y2hlcykge1xuICAgICAgcmlwcGxlWCA9IE1hdGgucm91bmQocmVjdC53aWR0aCAvIDIpO1xuICAgICAgcmlwcGxlWSA9IE1hdGgucm91bmQocmVjdC5oZWlnaHQgLyAyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIF9yZWYgPSBldmVudC50b3VjaGVzID8gZXZlbnQudG91Y2hlc1swXSA6IGV2ZW50LFxuICAgICAgICAgIGNsaWVudFggPSBfcmVmLmNsaWVudFgsXG4gICAgICAgICAgY2xpZW50WSA9IF9yZWYuY2xpZW50WTtcblxuICAgICAgcmlwcGxlWCA9IE1hdGgucm91bmQoY2xpZW50WCAtIHJlY3QubGVmdCk7XG4gICAgICByaXBwbGVZID0gTWF0aC5yb3VuZChjbGllbnRZIC0gcmVjdC50b3ApO1xuICAgIH1cblxuICAgIGlmIChjZW50ZXIpIHtcbiAgICAgIHJpcHBsZVNpemUgPSBNYXRoLnNxcnQoKDIgKiBNYXRoLnBvdyhyZWN0LndpZHRoLCAyKSArIE1hdGgucG93KHJlY3QuaGVpZ2h0LCAyKSkgLyAzKTsgLy8gRm9yIHNvbWUgcmVhc29uIHRoZSBhbmltYXRpb24gaXMgYnJva2VuIG9uIE1vYmlsZSBDaHJvbWUgaWYgdGhlIHNpemUgaWYgZXZlbi5cblxuICAgICAgaWYgKHJpcHBsZVNpemUgJSAyID09PSAwKSB7XG4gICAgICAgIHJpcHBsZVNpemUgKz0gMTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHNpemVYID0gTWF0aC5tYXgoTWF0aC5hYnMoKGVsZW1lbnQgPyBlbGVtZW50LmNsaWVudFdpZHRoIDogMCkgLSByaXBwbGVYKSwgcmlwcGxlWCkgKiAyICsgMjtcbiAgICAgIHZhciBzaXplWSA9IE1hdGgubWF4KE1hdGguYWJzKChlbGVtZW50ID8gZWxlbWVudC5jbGllbnRIZWlnaHQgOiAwKSAtIHJpcHBsZVkpLCByaXBwbGVZKSAqIDIgKyAyO1xuICAgICAgcmlwcGxlU2l6ZSA9IE1hdGguc3FydChNYXRoLnBvdyhzaXplWCwgMikgKyBNYXRoLnBvdyhzaXplWSwgMikpO1xuICAgIH0gLy8gVG91Y2hlIGRldmljZXNcblxuXG4gICAgaWYgKGV2ZW50LnRvdWNoZXMpIHtcbiAgICAgIC8vIGNoZWNrIHRoYXQgdGhpcyBpc24ndCBhbm90aGVyIHRvdWNoc3RhcnQgZHVlIHRvIG11bHRpdG91Y2hcbiAgICAgIC8vIG90aGVyd2lzZSB3ZSB3aWxsIG9ubHkgY2xlYXIgYSBzaW5nbGUgdGltZXIgd2hlbiB1bm1vdW50aW5nIHdoaWxlIHR3b1xuICAgICAgLy8gYXJlIHJ1bm5pbmdcbiAgICAgIGlmIChzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQgPT09IG51bGwpIHtcbiAgICAgICAgLy8gUHJlcGFyZSB0aGUgcmlwcGxlIGVmZmVjdC5cbiAgICAgICAgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHN0YXJ0Q29tbWl0KHtcbiAgICAgICAgICAgIHB1bHNhdGU6IHB1bHNhdGUsXG4gICAgICAgICAgICByaXBwbGVYOiByaXBwbGVYLFxuICAgICAgICAgICAgcmlwcGxlWTogcmlwcGxlWSxcbiAgICAgICAgICAgIHJpcHBsZVNpemU6IHJpcHBsZVNpemUsXG4gICAgICAgICAgICBjYjogY2JcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTsgLy8gRGVsYXkgdGhlIGV4ZWN1dGlvbiBvZiB0aGUgcmlwcGxlIGVmZmVjdC5cblxuXG4gICAgICAgIHN0YXJ0VGltZXIuY3VycmVudCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQpIHtcbiAgICAgICAgICAgIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCgpO1xuICAgICAgICAgICAgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50ID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIERFTEFZX1JJUFBMRSk7IC8vIFdlIGhhdmUgdG8gbWFrZSBhIHRyYWRlb2ZmIHdpdGggdGhpcyB2YWx1ZS5cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3RhcnRDb21taXQoe1xuICAgICAgICBwdWxzYXRlOiBwdWxzYXRlLFxuICAgICAgICByaXBwbGVYOiByaXBwbGVYLFxuICAgICAgICByaXBwbGVZOiByaXBwbGVZLFxuICAgICAgICByaXBwbGVTaXplOiByaXBwbGVTaXplLFxuICAgICAgICBjYjogY2JcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW2NlbnRlclByb3AsIHN0YXJ0Q29tbWl0XSk7XG4gIHZhciBwdWxzYXRlID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHN0YXJ0KHt9LCB7XG4gICAgICBwdWxzYXRlOiB0cnVlXG4gICAgfSk7XG4gIH0sIFtzdGFydF0pO1xuICB2YXIgc3RvcCA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChldmVudCwgY2IpIHtcbiAgICBjbGVhclRpbWVvdXQoc3RhcnRUaW1lci5jdXJyZW50KTsgLy8gVGhlIHRvdWNoIGludGVyYWN0aW9uIG9jY3VycyB0b28gcXVpY2tseS5cbiAgICAvLyBXZSBzdGlsbCB3YW50IHRvIHNob3cgcmlwcGxlIGVmZmVjdC5cblxuICAgIGlmIChldmVudC50eXBlID09PSAndG91Y2hlbmQnICYmIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCkge1xuICAgICAgZXZlbnQucGVyc2lzdCgpO1xuICAgICAgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50KCk7XG4gICAgICBzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQgPSBudWxsO1xuICAgICAgc3RhcnRUaW1lci5jdXJyZW50ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHN0b3AoZXZlbnQsIGNiKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCA9IG51bGw7XG4gICAgc2V0UmlwcGxlcyhmdW5jdGlvbiAob2xkUmlwcGxlcykge1xuICAgICAgaWYgKG9sZFJpcHBsZXMubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gb2xkUmlwcGxlcy5zbGljZSgxKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9sZFJpcHBsZXM7XG4gICAgfSk7XG4gICAgcmlwcGxlQ2FsbGJhY2suY3VycmVudCA9IGNiO1xuICB9LCBbXSk7XG4gIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUocmVmLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHB1bHNhdGU6IHB1bHNhdGUsXG4gICAgICBzdGFydDogc3RhcnQsXG4gICAgICBzdG9wOiBzdG9wXG4gICAgfTtcbiAgfSwgW3B1bHNhdGUsIHN0YXJ0LCBzdG9wXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgcmVmOiBjb250YWluZXJcbiAgfSwgb3RoZXIpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uR3JvdXAsIHtcbiAgICBjb21wb25lbnQ6IG51bGwsXG4gICAgZXhpdDogdHJ1ZVxuICB9LCByaXBwbGVzKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRvdWNoUmlwcGxlLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZSBzdGFydHMgYXQgdGhlIGNlbnRlciBvZiB0aGUgY29tcG9uZW50XG4gICAqIHJhdGhlciB0aGFuIGF0IHRoZSBwb2ludCBvZiBpbnRlcmFjdGlvbi5cbiAgICovXG4gIGNlbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmdcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBmbGlwOiBmYWxzZSxcbiAgbmFtZTogJ011aVRvdWNoUmlwcGxlJ1xufSkoIC8qI19fUFVSRV9fKi9SZWFjdC5tZW1vKFRvdWNoUmlwcGxlKSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCAqIGFzIFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IGVsZW1lbnRUeXBlQWNjZXB0aW5nUmVmLCByZWZUeXBlIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuaW1wb3J0IHVzZUV2ZW50Q2FsbGJhY2sgZnJvbSAnLi4vdXRpbHMvdXNlRXZlbnRDYWxsYmFjayc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgdXNlSXNGb2N1c1Zpc2libGUgZnJvbSAnLi4vdXRpbHMvdXNlSXNGb2N1c1Zpc2libGUnO1xuaW1wb3J0IFRvdWNoUmlwcGxlIGZyb20gJy4vVG91Y2hSaXBwbGUnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gIHJvb3Q6IHtcbiAgICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICBXZWJraXRUYXBIaWdobGlnaHRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgLy8gUmVzZXQgZGVmYXVsdCB2YWx1ZVxuICAgIC8vIFdlIGRpc2FibGUgdGhlIGZvY3VzIHJpbmcgZm9yIG1vdXNlLCB0b3VjaCBhbmQga2V5Ym9hcmQgdXNlcnMuXG4gICAgb3V0bGluZTogMCxcbiAgICBib3JkZXI6IDAsXG4gICAgbWFyZ2luOiAwLFxuICAgIC8vIFJlbW92ZSB0aGUgbWFyZ2luIGluIFNhZmFyaVxuICAgIGJvcmRlclJhZGl1czogMCxcbiAgICBwYWRkaW5nOiAwLFxuICAgIC8vIFJlbW92ZSB0aGUgcGFkZGluZyBpbiBGaXJlZm94XG4gICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxuICAgICctbW96LWFwcGVhcmFuY2UnOiAnbm9uZScsXG4gICAgLy8gUmVzZXRcbiAgICAnLXdlYmtpdC1hcHBlYXJhbmNlJzogJ25vbmUnLFxuICAgIC8vIFJlc2V0XG4gICAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgICAvLyBTbyB3ZSB0YWtlIHByZWNlZGVudCBvdmVyIHRoZSBzdHlsZSBvZiBhIG5hdGl2ZSA8YSAvPiBlbGVtZW50LlxuICAgIGNvbG9yOiAnaW5oZXJpdCcsXG4gICAgJyY6Oi1tb3otZm9jdXMtaW5uZXInOiB7XG4gICAgICBib3JkZXJTdHlsZTogJ25vbmUnIC8vIFJlbW92ZSBGaXJlZm94IGRvdHRlZCBvdXRsaW5lLlxuXG4gICAgfSxcbiAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICAgIC8vIERpc2FibGUgbGluayBpbnRlcmFjdGlvbnNcbiAgICAgIGN1cnNvcjogJ2RlZmF1bHQnXG4gICAgfSxcbiAgICAnQG1lZGlhIHByaW50Jzoge1xuICAgICAgY29sb3JBZGp1c3Q6ICdleGFjdCdcbiAgICB9XG4gIH0sXG5cbiAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZWQ9e3RydWV9YC4gKi9cbiAgZGlzYWJsZWQ6IHt9LFxuXG4gIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYga2V5Ym9hcmQgZm9jdXNlZC4gKi9cbiAgZm9jdXNWaXNpYmxlOiB7fVxufTtcbi8qKlxuICogYEJ1dHRvbkJhc2VgIGNvbnRhaW5zIGFzIGZldyBzdHlsZXMgYXMgcG9zc2libGUuXG4gKiBJdCBhaW1zIHRvIGJlIGEgc2ltcGxlIGJ1aWxkaW5nIGJsb2NrIGZvciBjcmVhdGluZyBhIGJ1dHRvbi5cbiAqIEl0IGNvbnRhaW5zIGEgbG9hZCBvZiBzdHlsZSByZXNldCBhbmQgc29tZSBmb2N1cy9yaXBwbGUgbG9naWMuXG4gKi9cblxudmFyIEJ1dHRvbkJhc2UgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBCdXR0b25CYXNlKHByb3BzLCByZWYpIHtcbiAgdmFyIGFjdGlvbiA9IHByb3BzLmFjdGlvbixcbiAgICAgIGJ1dHRvblJlZlByb3AgPSBwcm9wcy5idXR0b25SZWYsXG4gICAgICBfcHJvcHMkY2VudGVyUmlwcGxlID0gcHJvcHMuY2VudGVyUmlwcGxlLFxuICAgICAgY2VudGVyUmlwcGxlID0gX3Byb3BzJGNlbnRlclJpcHBsZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkY2VudGVyUmlwcGxlLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIGNvbXBvbmVudCA9IF9wcm9wcyRjb21wb25lbnQgPT09IHZvaWQgMCA/ICdidXR0b24nIDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgZGlzYWJsZWQgPSBfcHJvcHMkZGlzYWJsZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVkLFxuICAgICAgX3Byb3BzJGRpc2FibGVSaXBwbGUgPSBwcm9wcy5kaXNhYmxlUmlwcGxlLFxuICAgICAgZGlzYWJsZVJpcHBsZSA9IF9wcm9wcyRkaXNhYmxlUmlwcGxlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlUmlwcGxlLFxuICAgICAgX3Byb3BzJGRpc2FibGVUb3VjaFJpID0gcHJvcHMuZGlzYWJsZVRvdWNoUmlwcGxlLFxuICAgICAgZGlzYWJsZVRvdWNoUmlwcGxlID0gX3Byb3BzJGRpc2FibGVUb3VjaFJpID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlVG91Y2hSaSxcbiAgICAgIF9wcm9wcyRmb2N1c1JpcHBsZSA9IHByb3BzLmZvY3VzUmlwcGxlLFxuICAgICAgZm9jdXNSaXBwbGUgPSBfcHJvcHMkZm9jdXNSaXBwbGUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGZvY3VzUmlwcGxlLFxuICAgICAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lID0gcHJvcHMuZm9jdXNWaXNpYmxlQ2xhc3NOYW1lLFxuICAgICAgb25CbHVyID0gcHJvcHMub25CbHVyLFxuICAgICAgb25DbGljayA9IHByb3BzLm9uQ2xpY2ssXG4gICAgICBvbkZvY3VzID0gcHJvcHMub25Gb2N1cyxcbiAgICAgIG9uRm9jdXNWaXNpYmxlID0gcHJvcHMub25Gb2N1c1Zpc2libGUsXG4gICAgICBvbktleURvd24gPSBwcm9wcy5vbktleURvd24sXG4gICAgICBvbktleVVwID0gcHJvcHMub25LZXlVcCxcbiAgICAgIG9uTW91c2VEb3duID0gcHJvcHMub25Nb3VzZURvd24sXG4gICAgICBvbk1vdXNlTGVhdmUgPSBwcm9wcy5vbk1vdXNlTGVhdmUsXG4gICAgICBvbk1vdXNlVXAgPSBwcm9wcy5vbk1vdXNlVXAsXG4gICAgICBvblRvdWNoRW5kID0gcHJvcHMub25Ub3VjaEVuZCxcbiAgICAgIG9uVG91Y2hNb3ZlID0gcHJvcHMub25Ub3VjaE1vdmUsXG4gICAgICBvblRvdWNoU3RhcnQgPSBwcm9wcy5vblRvdWNoU3RhcnQsXG4gICAgICBvbkRyYWdMZWF2ZSA9IHByb3BzLm9uRHJhZ0xlYXZlLFxuICAgICAgX3Byb3BzJHRhYkluZGV4ID0gcHJvcHMudGFiSW5kZXgsXG4gICAgICB0YWJJbmRleCA9IF9wcm9wcyR0YWJJbmRleCA9PT0gdm9pZCAwID8gMCA6IF9wcm9wcyR0YWJJbmRleCxcbiAgICAgIFRvdWNoUmlwcGxlUHJvcHMgPSBwcm9wcy5Ub3VjaFJpcHBsZVByb3BzLFxuICAgICAgX3Byb3BzJHR5cGUgPSBwcm9wcy50eXBlLFxuICAgICAgdHlwZSA9IF9wcm9wcyR0eXBlID09PSB2b2lkIDAgPyAnYnV0dG9uJyA6IF9wcm9wcyR0eXBlLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImFjdGlvblwiLCBcImJ1dHRvblJlZlwiLCBcImNlbnRlclJpcHBsZVwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImRpc2FibGVkXCIsIFwiZGlzYWJsZVJpcHBsZVwiLCBcImRpc2FibGVUb3VjaFJpcHBsZVwiLCBcImZvY3VzUmlwcGxlXCIsIFwiZm9jdXNWaXNpYmxlQ2xhc3NOYW1lXCIsIFwib25CbHVyXCIsIFwib25DbGlja1wiLCBcIm9uRm9jdXNcIiwgXCJvbkZvY3VzVmlzaWJsZVwiLCBcIm9uS2V5RG93blwiLCBcIm9uS2V5VXBcIiwgXCJvbk1vdXNlRG93blwiLCBcIm9uTW91c2VMZWF2ZVwiLCBcIm9uTW91c2VVcFwiLCBcIm9uVG91Y2hFbmRcIiwgXCJvblRvdWNoTW92ZVwiLCBcIm9uVG91Y2hTdGFydFwiLCBcIm9uRHJhZ0xlYXZlXCIsIFwidGFiSW5kZXhcIiwgXCJUb3VjaFJpcHBsZVByb3BzXCIsIFwidHlwZVwiXSk7XG5cbiAgdmFyIGJ1dHRvblJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcblxuICBmdW5jdGlvbiBnZXRCdXR0b25Ob2RlKCkge1xuICAgIC8vICNTdHJpY3RNb2RlIHJlYWR5XG4gICAgcmV0dXJuIFJlYWN0RE9NLmZpbmRET01Ob2RlKGJ1dHRvblJlZi5jdXJyZW50KTtcbiAgfVxuXG4gIHZhciByaXBwbGVSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKSxcbiAgICAgIGZvY3VzVmlzaWJsZSA9IF9SZWFjdCR1c2VTdGF0ZVswXSxcbiAgICAgIHNldEZvY3VzVmlzaWJsZSA9IF9SZWFjdCR1c2VTdGF0ZVsxXTtcblxuICBpZiAoZGlzYWJsZWQgJiYgZm9jdXNWaXNpYmxlKSB7XG4gICAgc2V0Rm9jdXNWaXNpYmxlKGZhbHNlKTtcbiAgfVxuXG4gIHZhciBfdXNlSXNGb2N1c1Zpc2libGUgPSB1c2VJc0ZvY3VzVmlzaWJsZSgpLFxuICAgICAgaXNGb2N1c1Zpc2libGUgPSBfdXNlSXNGb2N1c1Zpc2libGUuaXNGb2N1c1Zpc2libGUsXG4gICAgICBvbkJsdXJWaXNpYmxlID0gX3VzZUlzRm9jdXNWaXNpYmxlLm9uQmx1clZpc2libGUsXG4gICAgICBmb2N1c1Zpc2libGVSZWYgPSBfdXNlSXNGb2N1c1Zpc2libGUucmVmO1xuXG4gIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUoYWN0aW9uLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZvY3VzVmlzaWJsZTogZnVuY3Rpb24gZm9jdXNWaXNpYmxlKCkge1xuICAgICAgICBzZXRGb2N1c1Zpc2libGUodHJ1ZSk7XG4gICAgICAgIGJ1dHRvblJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW10pO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChmb2N1c1Zpc2libGUgJiYgZm9jdXNSaXBwbGUgJiYgIWRpc2FibGVSaXBwbGUpIHtcbiAgICAgIHJpcHBsZVJlZi5jdXJyZW50LnB1bHNhdGUoKTtcbiAgICB9XG4gIH0sIFtkaXNhYmxlUmlwcGxlLCBmb2N1c1JpcHBsZSwgZm9jdXNWaXNpYmxlXSk7XG5cbiAgZnVuY3Rpb24gdXNlUmlwcGxlSGFuZGxlcihyaXBwbGVBY3Rpb24sIGV2ZW50Q2FsbGJhY2spIHtcbiAgICB2YXIgc2tpcFJpcHBsZUFjdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZGlzYWJsZVRvdWNoUmlwcGxlO1xuICAgIHJldHVybiB1c2VFdmVudENhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKGV2ZW50Q2FsbGJhY2spIHtcbiAgICAgICAgZXZlbnRDYWxsYmFjayhldmVudCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBpZ25vcmUgPSBza2lwUmlwcGxlQWN0aW9uO1xuXG4gICAgICBpZiAoIWlnbm9yZSAmJiByaXBwbGVSZWYuY3VycmVudCkge1xuICAgICAgICByaXBwbGVSZWYuY3VycmVudFtyaXBwbGVBY3Rpb25dKGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgaGFuZGxlTW91c2VEb3duID0gdXNlUmlwcGxlSGFuZGxlcignc3RhcnQnLCBvbk1vdXNlRG93bik7XG4gIHZhciBoYW5kbGVEcmFnTGVhdmUgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdG9wJywgb25EcmFnTGVhdmUpO1xuICB2YXIgaGFuZGxlTW91c2VVcCA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBvbk1vdXNlVXApO1xuICB2YXIgaGFuZGxlTW91c2VMZWF2ZSA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBpZiAoZm9jdXNWaXNpYmxlKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIGlmIChvbk1vdXNlTGVhdmUpIHtcbiAgICAgIG9uTW91c2VMZWF2ZShldmVudCk7XG4gICAgfVxuICB9KTtcbiAgdmFyIGhhbmRsZVRvdWNoU3RhcnQgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdGFydCcsIG9uVG91Y2hTdGFydCk7XG4gIHZhciBoYW5kbGVUb3VjaEVuZCA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBvblRvdWNoRW5kKTtcbiAgdmFyIGhhbmRsZVRvdWNoTW92ZSA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBvblRvdWNoTW92ZSk7XG4gIHZhciBoYW5kbGVCbHVyID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIGlmIChmb2N1c1Zpc2libGUpIHtcbiAgICAgIG9uQmx1clZpc2libGUoZXZlbnQpO1xuICAgICAgc2V0Rm9jdXNWaXNpYmxlKGZhbHNlKTtcbiAgICB9XG5cbiAgICBpZiAob25CbHVyKSB7XG4gICAgICBvbkJsdXIoZXZlbnQpO1xuICAgIH1cbiAgfSwgZmFsc2UpO1xuICB2YXIgaGFuZGxlRm9jdXMgPSB1c2VFdmVudENhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgIC8vIEZpeCBmb3IgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy83NzY5XG4gICAgaWYgKCFidXR0b25SZWYuY3VycmVudCkge1xuICAgICAgYnV0dG9uUmVmLmN1cnJlbnQgPSBldmVudC5jdXJyZW50VGFyZ2V0O1xuICAgIH1cblxuICAgIGlmIChpc0ZvY3VzVmlzaWJsZShldmVudCkpIHtcbiAgICAgIHNldEZvY3VzVmlzaWJsZSh0cnVlKTtcblxuICAgICAgaWYgKG9uRm9jdXNWaXNpYmxlKSB7XG4gICAgICAgIG9uRm9jdXNWaXNpYmxlKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob25Gb2N1cykge1xuICAgICAgb25Gb2N1cyhldmVudCk7XG4gICAgfVxuICB9KTtcblxuICB2YXIgaXNOb25OYXRpdmVCdXR0b24gPSBmdW5jdGlvbiBpc05vbk5hdGl2ZUJ1dHRvbigpIHtcbiAgICB2YXIgYnV0dG9uID0gZ2V0QnV0dG9uTm9kZSgpO1xuICAgIHJldHVybiBjb21wb25lbnQgJiYgY29tcG9uZW50ICE9PSAnYnV0dG9uJyAmJiAhKGJ1dHRvbi50YWdOYW1lID09PSAnQScgJiYgYnV0dG9uLmhyZWYpO1xuICB9O1xuICAvKipcbiAgICogSUUgMTEgc2hpbSBmb3IgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0tleWJvYXJkRXZlbnQvcmVwZWF0XG4gICAqL1xuXG5cbiAgdmFyIGtleWRvd25SZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICB2YXIgaGFuZGxlS2V5RG93biA9IHVzZUV2ZW50Q2FsbGJhY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgLy8gQ2hlY2sgaWYga2V5IGlzIGFscmVhZHkgZG93biB0byBhdm9pZCByZXBlYXRzIGJlaW5nIGNvdW50ZWQgYXMgbXVsdGlwbGUgYWN0aXZhdGlvbnNcbiAgICBpZiAoZm9jdXNSaXBwbGUgJiYgIWtleWRvd25SZWYuY3VycmVudCAmJiBmb2N1c1Zpc2libGUgJiYgcmlwcGxlUmVmLmN1cnJlbnQgJiYgZXZlbnQua2V5ID09PSAnICcpIHtcbiAgICAgIGtleWRvd25SZWYuY3VycmVudCA9IHRydWU7XG4gICAgICBldmVudC5wZXJzaXN0KCk7XG4gICAgICByaXBwbGVSZWYuY3VycmVudC5zdG9wKGV2ZW50LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJpcHBsZVJlZi5jdXJyZW50LnN0YXJ0KGV2ZW50KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChldmVudC50YXJnZXQgPT09IGV2ZW50LmN1cnJlbnRUYXJnZXQgJiYgaXNOb25OYXRpdmVCdXR0b24oKSAmJiBldmVudC5rZXkgPT09ICcgJykge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICBpZiAob25LZXlEb3duKSB7XG4gICAgICBvbktleURvd24oZXZlbnQpO1xuICAgIH0gLy8gS2V5Ym9hcmQgYWNjZXNzaWJpbGl0eSBmb3Igbm9uIGludGVyYWN0aXZlIGVsZW1lbnRzXG5cblxuICAgIGlmIChldmVudC50YXJnZXQgPT09IGV2ZW50LmN1cnJlbnRUYXJnZXQgJiYgaXNOb25OYXRpdmVCdXR0b24oKSAmJiBldmVudC5rZXkgPT09ICdFbnRlcicgJiYgIWRpc2FibGVkKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBpZiAob25DbGljaykge1xuICAgICAgICBvbkNsaWNrKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICB2YXIgaGFuZGxlS2V5VXAgPSB1c2VFdmVudENhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgIC8vIGNhbGxpbmcgcHJldmVudERlZmF1bHQgaW4ga2V5VXAgb24gYSA8YnV0dG9uPiB3aWxsIG5vdCBkaXNwYXRjaCBhIGNsaWNrIGV2ZW50IGlmIFNwYWNlIGlzIHByZXNzZWRcbiAgICAvLyBodHRwczovL2NvZGVzYW5kYm94LmlvL3MvYnV0dG9uLWtleXVwLXByZXZlbnRkZWZhdWx0LWRuN2YwXG4gICAgaWYgKGZvY3VzUmlwcGxlICYmIGV2ZW50LmtleSA9PT0gJyAnICYmIHJpcHBsZVJlZi5jdXJyZW50ICYmIGZvY3VzVmlzaWJsZSAmJiAhZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAga2V5ZG93blJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgICBldmVudC5wZXJzaXN0KCk7XG4gICAgICByaXBwbGVSZWYuY3VycmVudC5zdG9wKGV2ZW50LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJpcHBsZVJlZi5jdXJyZW50LnB1bHNhdGUoZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKG9uS2V5VXApIHtcbiAgICAgIG9uS2V5VXAoZXZlbnQpO1xuICAgIH0gLy8gS2V5Ym9hcmQgYWNjZXNzaWJpbGl0eSBmb3Igbm9uIGludGVyYWN0aXZlIGVsZW1lbnRzXG5cblxuICAgIGlmIChvbkNsaWNrICYmIGV2ZW50LnRhcmdldCA9PT0gZXZlbnQuY3VycmVudFRhcmdldCAmJiBpc05vbk5hdGl2ZUJ1dHRvbigpICYmIGV2ZW50LmtleSA9PT0gJyAnICYmICFldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICBvbkNsaWNrKGV2ZW50KTtcbiAgICB9XG4gIH0pO1xuICB2YXIgQ29tcG9uZW50UHJvcCA9IGNvbXBvbmVudDtcblxuICBpZiAoQ29tcG9uZW50UHJvcCA9PT0gJ2J1dHRvbicgJiYgb3RoZXIuaHJlZikge1xuICAgIENvbXBvbmVudFByb3AgPSAnYSc7XG4gIH1cblxuICB2YXIgYnV0dG9uUHJvcHMgPSB7fTtcblxuICBpZiAoQ29tcG9uZW50UHJvcCA9PT0gJ2J1dHRvbicpIHtcbiAgICBidXR0b25Qcm9wcy50eXBlID0gdHlwZTtcbiAgICBidXR0b25Qcm9wcy5kaXNhYmxlZCA9IGRpc2FibGVkO1xuICB9IGVsc2Uge1xuICAgIGlmIChDb21wb25lbnRQcm9wICE9PSAnYScgfHwgIW90aGVyLmhyZWYpIHtcbiAgICAgIGJ1dHRvblByb3BzLnJvbGUgPSAnYnV0dG9uJztcbiAgICB9XG5cbiAgICBidXR0b25Qcm9wc1snYXJpYS1kaXNhYmxlZCddID0gZGlzYWJsZWQ7XG4gIH1cblxuICB2YXIgaGFuZGxlVXNlclJlZiA9IHVzZUZvcmtSZWYoYnV0dG9uUmVmUHJvcCwgcmVmKTtcbiAgdmFyIGhhbmRsZU93blJlZiA9IHVzZUZvcmtSZWYoZm9jdXNWaXNpYmxlUmVmLCBidXR0b25SZWYpO1xuICB2YXIgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihoYW5kbGVVc2VyUmVmLCBoYW5kbGVPd25SZWYpO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUyID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpLFxuICAgICAgbW91bnRlZFN0YXRlID0gX1JlYWN0JHVzZVN0YXRlMlswXSxcbiAgICAgIHNldE1vdW50ZWRTdGF0ZSA9IF9SZWFjdCR1c2VTdGF0ZTJbMV07XG5cbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBzZXRNb3VudGVkU3RhdGUodHJ1ZSk7XG4gIH0sIFtdKTtcbiAgdmFyIGVuYWJsZVRvdWNoUmlwcGxlID0gbW91bnRlZFN0YXRlICYmICFkaXNhYmxlUmlwcGxlICYmICFkaXNhYmxlZDtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoZW5hYmxlVG91Y2hSaXBwbGUgJiYgIXJpcHBsZVJlZi5jdXJyZW50KSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoWydNYXRlcmlhbC1VSTogVGhlIGBjb21wb25lbnRgIHByb3AgcHJvdmlkZWQgdG8gQnV0dG9uQmFzZSBpcyBpbnZhbGlkLicsICdQbGVhc2UgbWFrZSBzdXJlIHRoZSBjaGlsZHJlbiBwcm9wIGlzIHJlbmRlcmVkIGluIHRoaXMgY3VzdG9tIGNvbXBvbmVudC4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfSwgW2VuYWJsZVRvdWNoUmlwcGxlXSk7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50UHJvcCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwgZm9jdXNWaXNpYmxlICYmIFtjbGFzc2VzLmZvY3VzVmlzaWJsZSwgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lXSwgZGlzYWJsZWQgJiYgY2xhc3Nlcy5kaXNhYmxlZCksXG4gICAgb25CbHVyOiBoYW5kbGVCbHVyLFxuICAgIG9uQ2xpY2s6IG9uQ2xpY2ssXG4gICAgb25Gb2N1czogaGFuZGxlRm9jdXMsXG4gICAgb25LZXlEb3duOiBoYW5kbGVLZXlEb3duLFxuICAgIG9uS2V5VXA6IGhhbmRsZUtleVVwLFxuICAgIG9uTW91c2VEb3duOiBoYW5kbGVNb3VzZURvd24sXG4gICAgb25Nb3VzZUxlYXZlOiBoYW5kbGVNb3VzZUxlYXZlLFxuICAgIG9uTW91c2VVcDogaGFuZGxlTW91c2VVcCxcbiAgICBvbkRyYWdMZWF2ZTogaGFuZGxlRHJhZ0xlYXZlLFxuICAgIG9uVG91Y2hFbmQ6IGhhbmRsZVRvdWNoRW5kLFxuICAgIG9uVG91Y2hNb3ZlOiBoYW5kbGVUb3VjaE1vdmUsXG4gICAgb25Ub3VjaFN0YXJ0OiBoYW5kbGVUb3VjaFN0YXJ0LFxuICAgIHJlZjogaGFuZGxlUmVmLFxuICAgIHRhYkluZGV4OiBkaXNhYmxlZCA/IC0xIDogdGFiSW5kZXhcbiAgfSwgYnV0dG9uUHJvcHMsIG90aGVyKSwgY2hpbGRyZW4sIGVuYWJsZVRvdWNoUmlwcGxlID9cbiAgLyojX19QVVJFX18qL1xuXG4gIC8qIFRvdWNoUmlwcGxlIGlzIG9ubHkgbmVlZGVkIGNsaWVudC1zaWRlLCB4MiBib29zdCBvbiB0aGUgc2VydmVyLiAqL1xuICBSZWFjdC5jcmVhdGVFbGVtZW50KFRvdWNoUmlwcGxlLCBfZXh0ZW5kcyh7XG4gICAgcmVmOiByaXBwbGVSZWYsXG4gICAgY2VudGVyOiBjZW50ZXJSaXBwbGVcbiAgfSwgVG91Y2hSaXBwbGVQcm9wcykpIDogbnVsbCk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEJ1dHRvbkJhc2UucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQSByZWYgZm9yIGltcGVyYXRpdmUgYWN0aW9ucy5cbiAgICogSXQgY3VycmVudGx5IG9ubHkgc3VwcG9ydHMgYGZvY3VzVmlzaWJsZSgpYCBhY3Rpb24uXG4gICAqL1xuICBhY3Rpb246IHJlZlR5cGUsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICpcbiAgICogVXNlIHRoYXQgcHJvcCB0byBwYXNzIGEgcmVmIHRvIHRoZSBuYXRpdmUgYnV0dG9uIGNvbXBvbmVudC5cbiAgICogQGRlcHJlY2F0ZWQgVXNlIGByZWZgIGluc3RlYWQuXG4gICAqL1xuICBidXR0b25SZWY6IHJlZlR5cGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZXMgd2lsbCBiZSBjZW50ZXJlZC5cbiAgICogVGhleSB3b24ndCBzdGFydCBhdCB0aGUgY3Vyc29yIGludGVyYWN0aW9uIHBvc2l0aW9uLlxuICAgKi9cbiAgY2VudGVyUmlwcGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogZWxlbWVudFR5cGVBY2NlcHRpbmdSZWYsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJhc2UgYnV0dG9uIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZSBlZmZlY3Qgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICpcbiAgICog4pqg77iPIFdpdGhvdXQgYSByaXBwbGUgdGhlcmUgaXMgbm8gc3R5bGluZyBmb3IgOmZvY3VzLXZpc2libGUgYnkgZGVmYXVsdC4gQmUgc3VyZVxuICAgKiB0byBoaWdobGlnaHQgdGhlIGVsZW1lbnQgYnkgYXBwbHlpbmcgc2VwYXJhdGUgc3R5bGVzIHdpdGggdGhlIGBmb2N1c1Zpc2libGVDbGFzc05hbWVgLlxuICAgKi9cbiAgZGlzYWJsZVJpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRvdWNoIHJpcHBsZSBlZmZlY3Qgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVUb3VjaFJpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJhc2UgYnV0dG9uIHdpbGwgaGF2ZSBhIGtleWJvYXJkIGZvY3VzIHJpcHBsZS5cbiAgICovXG4gIGZvY3VzUmlwcGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhpcyBwcm9wIGNhbiBoZWxwIGEgcGVyc29uIGtub3cgd2hpY2ggZWxlbWVudCBoYXMgdGhlIGtleWJvYXJkIGZvY3VzLlxuICAgKiBUaGUgY2xhc3MgbmFtZSB3aWxsIGJlIGFwcGxpZWQgd2hlbiB0aGUgZWxlbWVudCBnYWluIHRoZSBmb2N1cyB0aHJvdWdoIGEga2V5Ym9hcmQgaW50ZXJhY3Rpb24uXG4gICAqIEl0J3MgYSBwb2x5ZmlsbCBmb3IgdGhlIFtDU1MgOmZvY3VzLXZpc2libGUgc2VsZWN0b3JdKGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9zZWxlY3RvcnMtNC8jdGhlLWZvY3VzLXZpc2libGUtcHNldWRvKS5cbiAgICogVGhlIHJhdGlvbmFsZSBmb3IgdXNpbmcgdGhpcyBmZWF0dXJlIFtpcyBleHBsYWluZWQgaGVyZV0oaHR0cHM6Ly9naXRodWIuY29tL1dJQ0cvZm9jdXMtdmlzaWJsZS9ibG9iL21hc3Rlci9leHBsYWluZXIubWQpLlxuICAgKiBBIFtwb2x5ZmlsbCBjYW4gYmUgdXNlZF0oaHR0cHM6Ly9naXRodWIuY29tL1dJQ0cvZm9jdXMtdmlzaWJsZSkgdG8gYXBwbHkgYSBgZm9jdXMtdmlzaWJsZWAgY2xhc3MgdG8gb3RoZXIgY29tcG9uZW50c1xuICAgKiBpZiBuZWVkZWQuXG4gICAqL1xuICBmb2N1c1Zpc2libGVDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGhyZWY6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQmx1cjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkRyYWdMZWF2ZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRm9jdXM6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgZm9jdXNlZCB3aXRoIGEga2V5Ym9hcmQuXG4gICAqIFdlIHRyaWdnZXIgYSBgb25Gb2N1c2AgY2FsbGJhY2sgdG9vLlxuICAgKi9cbiAgb25Gb2N1c1Zpc2libGU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleURvd246IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleVVwOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Nb3VzZURvd246IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbk1vdXNlTGVhdmU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbk1vdXNlVXA6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvblRvdWNoRW5kOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Ub3VjaE1vdmU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvblRvdWNoU3RhcnQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0YWJJbmRleDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBgVG91Y2hSaXBwbGVgIGVsZW1lbnQuXG4gICAqL1xuICBUb3VjaFJpcHBsZVByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0eXBlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydidXR0b24nLCAncmVzZXQnLCAnc3VibWl0J10pLCBQcm9wVHlwZXMuc3RyaW5nXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpQnV0dG9uQmFzZSdcbn0pKEJ1dHRvbkJhc2UpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IGNoYWluUHJvcFR5cGVzIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCB7IGZhZGUgfSBmcm9tICcuLi9zdHlsZXMvY29sb3JNYW5pcHVsYXRvcic7XG5pbXBvcnQgQnV0dG9uQmFzZSBmcm9tICcuLi9CdXR0b25CYXNlJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICBmbGV4OiAnMCAwIGF1dG8nLFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgyNCksXG4gICAgICBwYWRkaW5nOiAxMixcbiAgICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgICBvdmVyZmxvdzogJ3Zpc2libGUnLFxuICAgICAgLy8gRXhwbGljaXRseSBzZXQgdGhlIGRlZmF1bHQgdmFsdWUgdG8gc29sdmUgYSBidWcgb24gSUUgMTEuXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uYWN0aXZlLFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdiYWNrZ3JvdW5kLWNvbG9yJywge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlc3RcbiAgICAgIH0pLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogZmFkZSh0aGVtZS5wYWxldHRlLmFjdGlvbi5hY3RpdmUsIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSksXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZFxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBlZGdlPVwic3RhcnRcImAuICovXG4gICAgZWRnZVN0YXJ0OiB7XG4gICAgICBtYXJnaW5MZWZ0OiAtMTIsXG4gICAgICAnJHNpemVTbWFsbCYnOiB7XG4gICAgICAgIG1hcmdpbkxlZnQ6IC0zXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGVkZ2U9XCJlbmRcImAuICovXG4gICAgZWRnZUVuZDoge1xuICAgICAgbWFyZ2luUmlnaHQ6IC0xMixcbiAgICAgICckc2l6ZVNtYWxsJic6IHtcbiAgICAgICAgbWFyZ2luUmlnaHQ6IC0zXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwiaW5oZXJpdFwiYC4gKi9cbiAgICBjb2xvckluaGVyaXQ6IHtcbiAgICAgIGNvbG9yOiAnaW5oZXJpdCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJwcmltYXJ5XCJgLiAqL1xuICAgIGNvbG9yUHJpbWFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogZmFkZSh0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KSxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwic2Vjb25kYXJ5XCJgLiAqL1xuICAgIGNvbG9yU2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbixcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGZhZGUodGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KSxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVkPXt0cnVlfWAuICovXG4gICAgZGlzYWJsZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc2l6ZT1cInNtYWxsXCJgLiAqL1xuICAgIHNpemVTbWFsbDoge1xuICAgICAgcGFkZGluZzogMyxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTgpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjaGlsZHJlbiBjb250YWluZXIgZWxlbWVudC4gKi9cbiAgICBsYWJlbDoge1xuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGFsaWduSXRlbXM6ICdpbmhlcml0JyxcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnaW5oZXJpdCdcbiAgICB9XG4gIH07XG59O1xuLyoqXG4gKiBSZWZlciB0byB0aGUgW0ljb25zXSgvY29tcG9uZW50cy9pY29ucy8pIHNlY3Rpb24gb2YgdGhlIGRvY3VtZW50YXRpb25cbiAqIHJlZ2FyZGluZyB0aGUgYXZhaWxhYmxlIGljb24gb3B0aW9ucy5cbiAqL1xuXG52YXIgSWNvbkJ1dHRvbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEljb25CdXR0b24ocHJvcHMsIHJlZikge1xuICB2YXIgX3Byb3BzJGVkZ2UgPSBwcm9wcy5lZGdlLFxuICAgICAgZWRnZSA9IF9wcm9wcyRlZGdlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRlZGdlLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBjb2xvciA9IF9wcm9wcyRjb2xvciA9PT0gdm9pZCAwID8gJ2RlZmF1bHQnIDogX3Byb3BzJGNvbG9yLFxuICAgICAgX3Byb3BzJGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQsXG4gICAgICBkaXNhYmxlZCA9IF9wcm9wcyRkaXNhYmxlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZWQsXG4gICAgICBfcHJvcHMkZGlzYWJsZUZvY3VzUmkgPSBwcm9wcy5kaXNhYmxlRm9jdXNSaXBwbGUsXG4gICAgICBkaXNhYmxlRm9jdXNSaXBwbGUgPSBfcHJvcHMkZGlzYWJsZUZvY3VzUmkgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVGb2N1c1JpLFxuICAgICAgX3Byb3BzJHNpemUgPSBwcm9wcy5zaXplLFxuICAgICAgc2l6ZSA9IF9wcm9wcyRzaXplID09PSB2b2lkIDAgPyAnbWVkaXVtJyA6IF9wcm9wcyRzaXplLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImVkZ2VcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImRpc2FibGVkXCIsIFwiZGlzYWJsZUZvY3VzUmlwcGxlXCIsIFwic2l6ZVwiXSk7XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEJ1dHRvbkJhc2UsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsIGNvbG9yICE9PSAnZGVmYXVsdCcgJiYgY2xhc3Nlc1tcImNvbG9yXCIuY29uY2F0KGNhcGl0YWxpemUoY29sb3IpKV0sIGRpc2FibGVkICYmIGNsYXNzZXMuZGlzYWJsZWQsIHNpemUgPT09IFwic21hbGxcIiAmJiBjbGFzc2VzW1wic2l6ZVwiLmNvbmNhdChjYXBpdGFsaXplKHNpemUpKV0sIHtcbiAgICAgICdzdGFydCc6IGNsYXNzZXMuZWRnZVN0YXJ0LFxuICAgICAgJ2VuZCc6IGNsYXNzZXMuZWRnZUVuZFxuICAgIH1bZWRnZV0pLFxuICAgIGNlbnRlclJpcHBsZTogdHJ1ZSxcbiAgICBmb2N1c1JpcHBsZTogIWRpc2FibGVGb2N1c1JpcHBsZSxcbiAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5sYWJlbFxuICB9LCBjaGlsZHJlbikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBJY29uQnV0dG9uLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBpY29uIGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogY2hhaW5Qcm9wVHlwZXMoUHJvcFR5cGVzLm5vZGUsIGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHZhciBmb3VuZCA9IFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkocHJvcHMuY2hpbGRyZW4pLnNvbWUoZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSAmJiBjaGlsZC5wcm9wcy5vbkNsaWNrO1xuICAgIH0pO1xuXG4gICAgaWYgKGZvdW5kKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKFsnTWF0ZXJpYWwtVUk6IFlvdSBhcmUgcHJvdmlkaW5nIGFuIG9uQ2xpY2sgZXZlbnQgbGlzdGVuZXIgJyArICd0byBhIGNoaWxkIG9mIGEgYnV0dG9uIGVsZW1lbnQuJywgJ0ZpcmVmb3ggd2lsbCBuZXZlciB0cmlnZ2VyIHRoZSBldmVudC4nLCAnWW91IHNob3VsZCBtb3ZlIHRoZSBvbkNsaWNrIGxpc3RlbmVyIHRvIHRoZSBwYXJlbnQgYnV0dG9uIGVsZW1lbnQuJywgJ2h0dHBzOi8vZ2l0aHViLmNvbS9tdWktb3JnL21hdGVyaWFsLXVpL2lzc3Vlcy8xMzk1NyddLmpvaW4oJ1xcbicpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMub25lT2YoWydkZWZhdWx0JywgJ2luaGVyaXQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJ1dHRvbiB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSAga2V5Ym9hcmQgZm9jdXMgcmlwcGxlIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlRm9jdXNSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgZWZmZWN0IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlUmlwcGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgZ2l2ZW4sIHVzZXMgYSBuZWdhdGl2ZSBtYXJnaW4gdG8gY291bnRlcmFjdCB0aGUgcGFkZGluZyBvbiBvbmVcbiAgICogc2lkZSAodGhpcyBpcyBvZnRlbiBoZWxwZnVsIGZvciBhbGlnbmluZyB0aGUgbGVmdCBvciByaWdodFxuICAgKiBzaWRlIG9mIHRoZSBpY29uIHdpdGggY29udGVudCBhYm92ZSBvciBiZWxvdywgd2l0aG91dCBydWluaW5nIHRoZSBib3JkZXJcbiAgICogc2l6ZSBhbmQgc2hhcGUpLlxuICAgKi9cbiAgZWRnZTogUHJvcFR5cGVzLm9uZU9mKFsnc3RhcnQnLCAnZW5kJywgZmFsc2VdKSxcblxuICAvKipcbiAgICogVGhlIHNpemUgb2YgdGhlIGJ1dHRvbi5cbiAgICogYHNtYWxsYCBpcyBlcXVpdmFsZW50IHRvIHRoZSBkZW5zZSBidXR0b24gc3R5bGluZy5cbiAgICovXG4gIHNpemU6IFByb3BUeXBlcy5vbmVPZihbJ3NtYWxsJywgJ21lZGl1bSddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlJY29uQnV0dG9uJ1xufSkoSWNvbkJ1dHRvbik7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBDYXJkIGZyb20gXCJAbWF0ZXJpYWwtdWkvY29yZS9DYXJkXCI7XG5pbXBvcnQgQ2FyZENvbnRlbnQgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvQ2FyZENvbnRlbnQnO1xuaW1wb3J0IENhcmRIZWFkZXIgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvQ2FyZEhlYWRlcic7XG5pbXBvcnQgVHlwb2dyYXBoeSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9UeXBvZ3JhcGh5JztcbmltcG9ydCBGYXZvcml0ZUljb24gZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL0Zhdm9yaXRlJztcbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgRGVsZXRlRm9yZXZlckljb24gZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL0RlbGV0ZUZvcmV2ZXInO2ltcG9ydCBJY29uQnV0dG9uIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0ljb25CdXR0b24nO1xuaW1wb3J0IFRodW1iRG93bkFsdEljb24gZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL1RodW1iRG93bkFsdCc7XG5cbmV4cG9ydCBjbGFzcyBJbnB1dCBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgY29tbWVudHM6IFtdLFxuICAgICAgICAgICAgdGV4dEZpZWxkVmFsdWU6IFwiXCIsXG4gICAgICAgICAgICB1c2VyOiBcIlwiXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZmV0Y2hBbGxDb21tZW50cyA9IHRoaXMuZmV0Y2hBbGxDb21tZW50cy5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmNyZWF0ZUNvbW1lbnQgPSB0aGlzLmNyZWF0ZUNvbW1lbnQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5oYW5kbGVJbnB1dENoYW5nZSA9IHRoaXMuaGFuZGxlSW5wdXRDaGFuZ2UuYmluZCh0aGlzKTtcbiAgICAgICAgLy8gdGhpcy5mZXRjaFVzZXJOYW1lQnlJZCA9IHRoaXMuZmV0Y2hVc2VyTmFtZUJ5SWQuYmluZCh0aGlzKTtcbiAgICB9XG5cbiAgICBjcmVhdGVDb21tZW50KGNvbnRlbnQpIHtcbiAgICAgICAgYXhpb3MucG9zdCgnaHR0cDovL2xvY2FsaG9zdDo4MDgwL2NvbW1lbnQnLCB7XG4gICAgICAgICAgICBcImNjb250ZW50XCI6IGNvbnRlbnQsXG4gICAgICAgICAgICBcInVwdm90ZVwiOiAwLFxuICAgICAgICAgICAgXCJkb3dudm90ZVwiOiAwLFxuICAgICAgICAgICAgXCJsb25naXR1ZGVcIjogLTEyMy4yMDM0LFxuICAgICAgICAgICAgXCJsYXRpdHVkZVwiOiA0OS4yNjQ5LFxuICAgICAgICAgICAgXCJ1c2VySWRcIjogMSxcbiAgICAgICAgICAgIFwiaWRcIjozXG4gICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5mZXRjaEFsbENvbW1lbnRzKCk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBoYW5kbGVJbnB1dENoYW5nZShlKSB7XG4gICAgICAgIGNvbnN0IHRleHRGaWVsZFZhbHVlID0gZS50YXJnZXQudmFsdWU7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgdGV4dEZpZWxkVmFsdWVcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMuc3RhdGUudGV4dEZpZWxkVmFsdWUpO1xuICAgIH1cblxuICAgIGZldGNoQWxsQ29tbWVudHMoKSB7XG4gICAgICAgIGF4aW9zLmdldCgnaHR0cDovL2xvY2FsaG9zdDo4MDgwL2NvbW1lbnRzJylcbiAgICAgICAgICAgIC50aGVuKHJlcyA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29tbWVudHMgPSByZXMuZGF0YTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgY29tbWVudHNcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFRPRE9cbiAgICAvLyBmZXRjaFVzZXJOYW1lQnlJZChpZCkge1xuICAgIC8vICAgICBheGlvcy5nZXQoYGh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC91c2Vycy8ke2lkfWApXG4gICAgLy8gICAgICAgICAudGhlbihyZXMgPT4ge1xuICAgIC8vICAgICAgICAgICAgIGNvbnN0IHVzZXIgPSByZXMuZGF0YTtcbiAgICAvLyAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAvLyAgICAgICAgICAgICAgICAgdXNlclxuICAgIC8vICAgICAgICAgICAgIH0pO1xuICAgIC8vICAgICAgICAgfSlcbiAgICAvLyB9XG5cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgdGhpcy5mZXRjaEFsbENvbW1lbnRzKCk7XG4gICAgfVxuXG4gICBcbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lclwiIHN0eWxlPXt7IG1hcmdpblRvcDogXCI1MHB4XCIgfX0+XG4gICAgICAgICAgICAgICAgPENhcmQgY2xhc3NOYW1lPVwiaW5wdXQtYXJlYSBteS0zXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC1sZy0xMFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSBjbGFzc05hbWU9XCJ0ZXh0LWJveCBteC0yIG10LTNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3dzPVwiM1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiUG9zdCBhIGNvbW1lbnQgaGVyZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVJbnB1dENoYW5nZShlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RleHRhcmVhPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzTmFtZT1cImJ0biBidG4tcHJpbWFyeSBmbG9hdC1yaWdodCBteC00IG1iLTNcIiBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tbWVudCh0aGlzLnN0YXRlLnRleHRGaWVsZFZhbHVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdWJtaXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L0NhcmQ+XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmNvbW1lbnRzLm1hcChjb21tZW50ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPENvbW1lbnQgY29tbWVudD17Y29tbWVudC5jY29udGVudH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2lkPXtjb21tZW50LmlkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cHZvdGU9e2NvbW1lbnQudXB2b3RlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb3dudm90ZT17Y29tbWVudC5kb3dudm90ZX0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudE1ldGhvZD17KCkgPT4gdGhpcy5mZXRjaEFsbENvbW1lbnRzKCl9Lz5cbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufTtcblxuY2xhc3MgQ29tbWVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgdXNlcjogcHJvcHMudXNlcixcbiAgICAgICAgICAgIF9pZDogcHJvcHMuX2lkLFxuICAgICAgICAgICAgdXB2b3RlOiBwcm9wcy51cHZvdGUsXG4gICAgICAgICAgICBkb3dudm90ZTogcHJvcHMuZG93bnZvdGUsXG4gICAgICAgICAgICBjb21tZW50OiBwcm9wcy5jb21tZW50LFxuICAgICAgICAgICAgcGFyZW50TWV0aG9kOiBwcm9wcy5wYXJlbnRNZXRob2RcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVwdm90ZSgpIHtcbiAgICAgICAgYXhpb3MucHV0KGBodHRwOi8vbG9jYWxob3N0OjgwODAvdXB2b3RlLyR7dGhpcy5zdGF0ZS5faWR9YClcbiAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5mZXRjaFVwdm90ZUJ5SWQodGhpcy5zdGF0ZS5faWQpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBkb3dudm90ZSgpIHtcbiAgICAgICAgYXhpb3MucHV0KGBodHRwOi8vbG9jYWxob3N0OjgwODAvZG93bnZvdGUvJHt0aGlzLnN0YXRlLl9pZH1gKVxuICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmZldGNoRG93bnZvdGVCeUlkKHRoaXMuc3RhdGUuX2lkKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZGVsZXRlKCkge1xuICAgICAgICBheGlvcy5kZWxldGUoYGh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9jb21tZW50LyR7dGhpcy5zdGF0ZS5faWR9YClcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLnBhcmVudE1ldGhvZCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZmV0Y2hVcHZvdGVCeUlkKGlkKSB7XG4gICAgICAgIGF4aW9zLmdldChgaHR0cDovL2xvY2FsaG9zdDo4MDgwL3Vwdm90ZS8ke2lkfWApXG4gICAgICAgICAgICAudGhlbigocmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdXB2b3RlID0gcmVzLmRhdGE7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIHVwdm90ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZmV0Y2hEb3dudm90ZUJ5SWQoaWQpIHtcbiAgICAgICAgYXhpb3MuZ2V0KGBodHRwOi8vbG9jYWxob3N0OjgwODAvZG93bnZvdGUvJHtpZH1gKVxuICAgICAgICAgICAgLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRvd252b3RlID0gcmVzLmRhdGE7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGRvd252b3RlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgIDxDYXJkIGNsYXNzTmFtZT1cImNvbW1lbnRcIj5cbiAgICAgICAgICAgICAgICAgICAgPENhcmRIZWFkZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPXt0aGlzLnN0YXRlLnVzZXJ9XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPC9DYXJkSGVhZGVyPlxuICAgICAgICAgICAgICAgICAgICA8Q2FyZENvbnRlbnQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwiYm9keTJcIiBjb2xvcj1cInRleHRQcmltYXJ5XCIgY29tcG9uZW50PVwicFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLmNvbW1lbnR9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICAgICAgICAgIDwvQ2FyZENvbnRlbnQ+XG4gICAgICAgICAgICAgICAgICAgIDxJY29uQnV0dG9uIGFyaWEtbGFiZWw9XCJ1cHZvdGVcIiBvbkNsaWNrPXsoKSA9PiB0aGlzLnVwdm90ZSgpfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxGYXZvcml0ZUljb24gY29sb3I9J3NlY29uZGFyeScvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLnVwdm90ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L0ljb25CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxJY29uQnV0dG9uIGFyaWEtbGFiZWw9XCJkb3dudm90ZVwiIG9uQ2xpY2s9eygpID0+IHRoaXMuZG93bnZvdGUoKX0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VGh1bWJEb3duQWx0SWNvbiBjb2xvcj0nZGVmYXVsdCcvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLmRvd252b3RlfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvSWNvbkJ1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPEljb25CdXR0b24gYXJpYS1sYWJlbD1cImRlbGV0ZVwiIG9uQ2xpY2s9eygpID0+IHRoaXMuZGVsZXRlKCl9PlxuICAgICAgICAgICAgICAgICAgICAgICAgPERlbGV0ZUZvcmV2ZXJJY29uIGNvbG9yPSdkZWZhdWx0Jy8+XG4gICAgICAgICAgICAgICAgICAgIDwvSWNvbkJ1dHRvbj5cbiAgICAgICAgICAgICAgICA8L0NhcmQ+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSBcInJlYWN0LWRvbVwiO1xuXG5pbXBvcnQgXCIuLy4uL3Njc3MvbWFpbi5zY3NzXCI7XG5cbmltcG9ydCBVc2VyIGZyb20gXCIuL2NvbXBvbmVudHMvVXNlci5qc3hcIjtcbmltcG9ydCBHbWFwIGZyb20gXCIuL2NvbXBvbmVudHMvR21hcC5qc3hcIjtcbmltcG9ydCB7IElucHV0IH0gZnJvbSBcIi4vY29tcG9uZW50cy9Db21tZW50LmpzeFwiO1xuXG5cbmNsYXNzIEFwcCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJob21lXCI+XG4gICAgICAgIDxpbnB1dCBpZD1cImlucHV0X3VzZXJlbWFpbFwiIHBsYWNlaG9sZGVyPVwidXNlciBlbWFpbFwiLz5cbiAgICAgICAgPGlucHV0IGlkPVwiaW5wdXRfdXNlcnBhc3N3b3JkXCIgcGxhY2Vob2xkZXI9XCJ1c2VyIHBhc3N3b3JkXCIvPlxuICAgICAgICA8VXNlciAvPlxuICAgICAgICA8cD5XZWxjb21lIHRvIFRyYXZlbCBCdWRkeSBDb3ZpZC0xOSBlZGl0aW9uISBQbGVhc2UgZW50ZXIgeW91ciBkZXN0aW5hdGlvbjo8L3A+XG4gICAgICAgIDxpbnB1dCBpZD1cImlucHV0X2xhdFwiIHR5cGU9XCJudW1iZXJcIiBwbGFjZWhvbGRlcj1cImxhdGl0dWRlXCIvPlxuICAgICAgICA8aW5wdXQgaWQ9XCJpbnB1dF9sbmdcIiB0eXBlPVwibnVtYmVyXCIgcGxhY2Vob2xkZXI9XCJsb25naXR1ZGVcIi8+XG4gICAgICAgIDxpbnB1dCBpZD1cImlucHV0X3JhbmdlXCIgdHlwZT1cIm51bWJlclwiIHBsYWNlaG9sZGVyPVwicmFuZ2VcIi8+XG4gICAgICAgIDxHbWFwIC8+XG4gICAgICAgIDxJbnB1dCAvPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5yZW5kZXIoPEFwcCAvPiwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhcHBcIikpO1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgICAgd2lkdGg6ICcxZW0nLFxuICAgICAgaGVpZ2h0OiAnMWVtJyxcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgZmlsbDogJ2N1cnJlbnRDb2xvcicsXG4gICAgICBmbGV4U2hyaW5rOiAwLFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgyNCksXG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ2ZpbGwnLCB7XG4gICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyXG4gICAgICB9KVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInByaW1hcnlcImAuICovXG4gICAgY29sb3JQcmltYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJzZWNvbmRhcnlcImAuICovXG4gICAgY29sb3JTZWNvbmRhcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwiYWN0aW9uXCJgLiAqL1xuICAgIGNvbG9yQWN0aW9uOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uYWN0aXZlXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwiZXJyb3JcImAuICovXG4gICAgY29sb3JFcnJvcjoge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuZXJyb3IubWFpblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cImRpc2FibGVkXCJgLiAqL1xuICAgIGNvbG9yRGlzYWJsZWQ6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmb250U2l6ZT1cImluaGVyaXRcImAuICovXG4gICAgZm9udFNpemVJbmhlcml0OiB7XG4gICAgICBmb250U2l6ZTogJ2luaGVyaXQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGZvbnRTaXplPVwic21hbGxcImAuICovXG4gICAgZm9udFNpemVTbWFsbDoge1xuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgyMClcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZm9udFNpemU9XCJsYXJnZVwiYC4gKi9cbiAgICBmb250U2l6ZUxhcmdlOiB7XG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDM1KVxuICAgIH1cbiAgfTtcbn07XG52YXIgU3ZnSWNvbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFN2Z0ljb24ocHJvcHMsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBjb2xvciA9IF9wcm9wcyRjb2xvciA9PT0gdm9pZCAwID8gJ2luaGVyaXQnIDogX3Byb3BzJGNvbG9yLFxuICAgICAgX3Byb3BzJGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIENvbXBvbmVudCA9IF9wcm9wcyRjb21wb25lbnQgPT09IHZvaWQgMCA/ICdzdmcnIDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRmb250U2l6ZSA9IHByb3BzLmZvbnRTaXplLFxuICAgICAgZm9udFNpemUgPSBfcHJvcHMkZm9udFNpemUgPT09IHZvaWQgMCA/ICdkZWZhdWx0JyA6IF9wcm9wcyRmb250U2l6ZSxcbiAgICAgIGh0bWxDb2xvciA9IHByb3BzLmh0bWxDb2xvcixcbiAgICAgIHRpdGxlQWNjZXNzID0gcHJvcHMudGl0bGVBY2Nlc3MsXG4gICAgICBfcHJvcHMkdmlld0JveCA9IHByb3BzLnZpZXdCb3gsXG4gICAgICB2aWV3Qm94ID0gX3Byb3BzJHZpZXdCb3ggPT09IHZvaWQgMCA/ICcwIDAgMjQgMjQnIDogX3Byb3BzJHZpZXdCb3gsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJjb21wb25lbnRcIiwgXCJmb250U2l6ZVwiLCBcImh0bWxDb2xvclwiLCBcInRpdGxlQWNjZXNzXCIsIFwidmlld0JveFwiXSk7XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwgY29sb3IgIT09ICdpbmhlcml0JyAmJiBjbGFzc2VzW1wiY29sb3JcIi5jb25jYXQoY2FwaXRhbGl6ZShjb2xvcikpXSwgZm9udFNpemUgIT09ICdkZWZhdWx0JyAmJiBjbGFzc2VzW1wiZm9udFNpemVcIi5jb25jYXQoY2FwaXRhbGl6ZShmb250U2l6ZSkpXSksXG4gICAgZm9jdXNhYmxlOiBcImZhbHNlXCIsXG4gICAgdmlld0JveDogdmlld0JveCxcbiAgICBjb2xvcjogaHRtbENvbG9yLFxuICAgIFwiYXJpYS1oaWRkZW5cIjogdGl0bGVBY2Nlc3MgPyB1bmRlZmluZWQgOiB0cnVlLFxuICAgIHJvbGU6IHRpdGxlQWNjZXNzID8gJ2ltZycgOiB1bmRlZmluZWQsXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpLCBjaGlsZHJlbiwgdGl0bGVBY2Nlc3MgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInRpdGxlXCIsIG51bGwsIHRpdGxlQWNjZXNzKSA6IG51bGwpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTdmdJY29uLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIE5vZGUgcGFzc2VkIGludG8gdGhlIFNWRyBlbGVtZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKiBZb3UgY2FuIHVzZSB0aGUgYGh0bWxDb2xvcmAgcHJvcCB0byBhcHBseSBhIGNvbG9yIGF0dHJpYnV0ZSB0byB0aGUgU1ZHIGVsZW1lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsnYWN0aW9uJywgJ2Rpc2FibGVkJywgJ2Vycm9yJywgJ2luaGVyaXQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBUaGUgZm9udFNpemUgYXBwbGllZCB0byB0aGUgaWNvbi4gRGVmYXVsdHMgdG8gMjRweCwgYnV0IGNhbiBiZSBjb25maWd1cmUgdG8gaW5oZXJpdCBmb250IHNpemUuXG4gICAqL1xuICBmb250U2l6ZTogUHJvcFR5cGVzLm9uZU9mKFsnZGVmYXVsdCcsICdpbmhlcml0JywgJ2xhcmdlJywgJ3NtYWxsJ10pLFxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIGEgY29sb3IgYXR0cmlidXRlIHRvIHRoZSBTVkcgZWxlbWVudC5cbiAgICovXG4gIGh0bWxDb2xvcjogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHNoYXBlLXJlbmRlcmluZyBhdHRyaWJ1dGUuIFRoZSBiZWhhdmlvciBvZiB0aGUgZGlmZmVyZW50IG9wdGlvbnMgaXMgZGVzY3JpYmVkIG9uIHRoZVxuICAgKiBbTUROIFdlYiBEb2NzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9TVkcvQXR0cmlidXRlL3NoYXBlLXJlbmRlcmluZykuXG4gICAqIElmIHlvdSBhcmUgaGF2aW5nIGlzc3VlcyB3aXRoIGJsdXJyeSBpY29ucyB5b3Ugc2hvdWxkIGludmVzdGlnYXRlIHRoaXMgcHJvcGVydHkuXG4gICAqL1xuICBzaGFwZVJlbmRlcmluZzogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogUHJvdmlkZXMgYSBodW1hbi1yZWFkYWJsZSB0aXRsZSBmb3IgdGhlIGVsZW1lbnQgdGhhdCBjb250YWlucyBpdC5cbiAgICogaHR0cHM6Ly93d3cudzMub3JnL1RSL1NWRy1hY2Nlc3MvI0VxdWl2YWxlbnRcbiAgICovXG4gIHRpdGxlQWNjZXNzOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBBbGxvd3MgeW91IHRvIHJlZGVmaW5lIHdoYXQgdGhlIGNvb3JkaW5hdGVzIHdpdGhvdXQgdW5pdHMgbWVhbiBpbnNpZGUgYW4gU1ZHIGVsZW1lbnQuXG4gICAqIEZvciBleGFtcGxlLCBpZiB0aGUgU1ZHIGVsZW1lbnQgaXMgNTAwICh3aWR0aCkgYnkgMjAwIChoZWlnaHQpLFxuICAgKiBhbmQgeW91IHBhc3Mgdmlld0JveD1cIjAgMCA1MCAyMFwiLFxuICAgKiB0aGlzIG1lYW5zIHRoYXQgdGhlIGNvb3JkaW5hdGVzIGluc2lkZSB0aGUgU1ZHIHdpbGwgZ28gZnJvbSB0aGUgdG9wIGxlZnQgY29ybmVyICgwLDApXG4gICAqIHRvIGJvdHRvbSByaWdodCAoNTAsMjApIGFuZCBlYWNoIHVuaXQgd2lsbCBiZSB3b3J0aCAxMHB4LlxuICAgKi9cbiAgdmlld0JveDogUHJvcFR5cGVzLnN0cmluZ1xufSA6IHZvaWQgMDtcblN2Z0ljb24ubXVpTmFtZSA9ICdTdmdJY29uJztcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlTdmdJY29uJ1xufSkoU3ZnSWNvbik7Il0sInNvdXJjZVJvb3QiOiIifQ==